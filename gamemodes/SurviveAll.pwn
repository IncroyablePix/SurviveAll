/*-------------------------SSSSSSSSSS------UUU----UUU-----RRRRRRRRRRRR----VVV-------V--II----V----------VV--------------E------------------------AAAAA------LLLL-----------LLLL------------
------------------------SSSSSS-----------UUU------UUU----RRR--------RRR----VV------VVV--II---VV------VVV--EEEE----EEEEEEEE-----------------------AA-AA-------LLL------------LLL------------
--------------------SSSS-----------------UUU-----UUU-----RRR---------RR----VVV-----VV--------VVV-----VV----EEEEEE--E-EEE------------------------AA---AA-------LL-------------LL------------
----------------SSSSS-------------------UUU------UUU----RRR---------RR------VV----VV---II-----VV----VV-----EE----------------------------------AA----AAA------LL-------------LL------------
--------------------SSSSSSS--------------UUU------UUU----RRRRRRRRRRRR-------VVV---VV---II-----VVV---VV----EEE----------------------------------AA------AAA----LL-------------LL------------
------------------------SSSSSSSS---------UUU------UUU----RR------RRR---------VV---V----II------VV---V----EEEE-EEEE------------========--------AAAA--A-A-AA----LLL------------LLL-----------
----------------------------SSSSSSSSSS---UUU-------UUU---RR--------RRR-------VV---V-----II-----VV---V-----EEEE--E---------------========----AAAAAAAAAAAAAA----LL-------------LL------------
--------------------------------SSSSS----UUU------UUU---RR----------RR-------VV--VV----II------VV--VV------EE-----------------------==------AAA-------AAA-A---LL---------L---LL----------L-
------------------S--------SSSSSSSS-----UUU------UUU-----RR---------RR--------VV-V-----II-------VV-V------EEE-------------------------------AA---------AAA-----LL-L----LLL-----LL-L----LLL-
------------------SSS----SSSSS-----------UUUUU----UUU----RR--------RRR--------VVV------II-------VVV---------EEE--E-E--EE-------------------AA------------AA----L-LLLLL-LLL----L-LLLLL-LLL--
--------------------SSSSSS-SSS----------UUUUUUUUUUUU-----R---------RRR---------V-------I---------V--------EEE-EEEEE-EEEEE------------------AAA----------AA----L---LL-L--L----L---LL-L------
---------------------SSSS---S------------UU-UUU----U-----RR------RRR-----------V------I----------VVV--------EEEE-------EE--------------------A--------A-------LLLL--L---LL---LLLL--L-------
--------------------SSS----SS-------------UUUU----UU--RRRR---------RR---------V------I-------------VV---------EE-----EE--EE-----------------A--------A-------L--L-LLL---LLL-L--L-LLL-------
---------------------SSSSSSSS------------UUU------UURRRRR-----------R-------V-----I---------------VV------------EE---E---E-----------------A-------A-----------LL---L---L-----LL-----------
--------------------SS---SS---------UUUUUUU------U--RR------------------------V--II--------------VV------------E----EE----E----------------A----A------------LLL----L--L----LLL------------
--------------------S-SS-S---------UU---U------U---R----------------------------V--------------VVVVV----------E------E----E----------------AAA---------------L-------L------L------------*/

//-----CAHIER DE CHARGES-----//
//---AVANT LA BÊTA:
//- Mapping San Andreas
//- Culture dans le sable - terre - herbe uniquement
//- Recharger acteurs automatiquement

//---RESSOURCES
//- Animaux sauvages qu'on peut enfermer
//- Reproduction des animaux
//- Rochers qu'on peut exploser à la dynamite ou à la pioche ou quoi pour récup des métaux

//---OBJETS
//- Taser objet
//- Cartes au trésor !!
//- GPS
//- Vêtements "légers" qui ne feront pas de bruit
//- Seconde chance (On ressucite)
//- Tuyaux pour siphoner
//- Bombes qui attirent les zombies
//- Poubelles à fouiller (mission trouver un truc, parfois objets rares)
//- Barril explosif
//- Projectile qui génère des zombies quand on le lance
//- Bonus Martyre

//---VÉHICULES
//- Parachutes pour véhicule
//- Chasse bétail
//- Missiles
//- Mitrailleuse (Surchauffe et abime le véhicule si on tire trop)
//- Nitro
//- Passerelles sur les hélicos

//---COMPÉTENCES
//- Augmente les chances d'infliger une hémorragie
//- Diminue les chances d'avoir une hémorragie

//---STRUCTURES
//- Murailles
//- Table de craft (distribuée lors d'events)
//- Canon (Poudre + Shepo quoi = BOOM)
//- Mannequin pour stocker vêtements
//- Pot de terre pour planter et récolte auto ( serre ?)
//- Puit de forage de pétrole
//- Table de chimie
//- Canons contre l'avion (SAM à installer chez soi, avec des missiles à recharger)

//- Vendeur de meubles ambulant
//- Un squelette bloque un passage, les jours multiples de 40 le transforment en fantôme
//- Différentes catégories d'objets (certains endroits donnent de meilleurs objets)
	//- Level 1 - Partout
	//- Level 2 - Area 69, KACC, Tunel train SF, Labyrinthe auto-école
	//- Level 3 -
	//- Level 4 - Vaisseau spatial

//- DONJON DANS LES ÉGOUTS DE LOS SANTOS

//- Missions aléatoires qui se déclenchent chaque fois qu'on fait tel nombre de la mission d'un monsieur
//- Mission esquiver rayons lasers
//- Vendeur qui change toujours de position
//- Pouvoir importer une voiture !
//- Mines:
//  - Uranium
//  - Charbon
//  - Metal
//  - Or
//- Bonus de véhicules à craft chez l'artisan
//- Exploser les portes d'entrée des maisons
//- Blinder porte d'entrée
//- Navires abandonnés
//- Donjons
//- Médailles:
//      - Homo Erectus: Faites du feu
//      - Chasseur-Cueilleur: Récupérez 500 fruits et viandes
//      - Nomade: Montez une tente
//      -
//- Radiations (Petites bombes nucléaires) - Zones contaminées

//- Journal des boss (ou monstres rares)
//- Magasin hyper cher (bonus d'exp, etc.)
//- Pouvoir de frapper les gens loin
//- Capacité respawn avec du gilet
//- Boss:
//      ALIEN BOSS
//      SORCIÈRE
//      SCIENTIST
//      COLOSSES
//      Boss type Donut simpsons
//      Boss type dauphin qu'on doit faire tomber dans une bassine avec des leviers pour activer l'électricité pour l'électrocuter
//      Boss monstre géant Tête crâne avec cornes (6865) qui tire des trucs avec ses mains (On doit lui grimper dessus pour qu'il s'auto bute
//      Roi des bambis (tête du roi de bambi pour décorer maison) !!!!!!!!!
//- DONJONS
//      MINE
//      MAISON HANTÉE (Pièces les mêmes, labyrinthique, cameras fixes
//      DRÔNE POUR GARDER AREA

//EVENTS:
//  - Run: Tout le monde est visible sur le radar à tout moment pendant une semaine
//  - Tout explose

//PONTS QU'ON PEUT EXPLOSER:
//Après y'a des ouvriers qui viennent, on doit les aider pour reconstruire !

//---QUÊTES DU JOUR
/*- Minez un véhicule et tuez le joueur qui montera dedans
- Nettoyez les zombies autour du camp de ...
- Machin dans le camp de ... a besoin de 5 brêmes pour finir sa soupe
- Machin dans le camp de ... a besoin de 5 steaks pour finir son ragout
- Ramenez un moteur a bidule pour qu'il répare sa voiture

QuÃªte nÂ°2 - tuez 15 zombies
QuÃªte nÂ°4 - mangez 7 soupes de poissons
QuÃªte nÂ°5 - rÃ©ussissez Ã  fabriquer un desert eagle
QuÃªte nÂ°6 - ramenez une crosse Ã  Machin, au camp d'Angel Pine
QuÃªte nÂ°7 - dÃ©truisez 5 ovnis avec le desert eagle
QuÃªte nÂ°8 - parcourez 5 kilomÃ¨tres en vÃ©hicule
QuÃªte nÂ°10 - donnez 10.0g Ã  Machin, sous le pont prÃ¨s de BlueBerry
QuÃªte nÂ°11 - ramenez 2 roues Ã  Machin Ã  Back'o'Beyond
QuÃªte nÂ°12 - cuisinez 5 pizzas
QuÃªte nÂ°13 - tuez un autre joueur
QuÃªte nÂ°14 - tuez 50 tortues ninja
QuÃªte nÂ°17 - pÃªchez une huÃ®tre
QuÃªte nÂ°18 - rapportez un briquet Ã  Machin, au camp principal
QuÃªte nÂ°19 - achetez tout objet pour un total de 4.0g
QuÃªte nÂ°20 - buvez 3 bouteilles de lait
QuÃªte nÂ°21 - fabriquez un rÃ©cupÃ©rateur d'eau
QuÃªte nÂ°22 - utilisez un moteur sur un vÃ©hicule
QuÃªte nÂ°23 - cuisinez tous les plats au moins une fois
QuÃªte nÂ°24 - plantez 10 graines confondues
QuÃªte nÂ°25 - apportez un alice pack Ã  Machin au camp de San Fierro
QuÃªte nÂ°26 - vendez 50 objets diffÃ©rents
QuÃªte nÂ°27 - rechargez n'importe quelle arme
QuÃªte nÂ°28 - fabriquez une Ã©tagÃ¨re
QuÃªte nÂ°29 - achetez 5 objets Ã  l'hÃ´tel des ventes
QuÃªte nÂ°30 - vendez 3 objets diffÃ©rents Ã  l'hÃ´tel des ventes
QuÃªte nÂ°31 - atteignez 25.0 degrÃ©s en tempÃ©rature, puis remontez-la
QuÃªte nÂ°32 - dÃ©truisez un vÃ©hicule Ã  l'aide d'une bombe
QuÃªte nÂ°33 - posez 10 mines
QuÃªte nÂ°34 - rapportez 5 oranges et 3 tomates Ã  Machin
QuÃªte nÂ°35 - pÃªchez 10 poissons
QuÃªte nÂ°36 - ouvrir une boÃ®te
QuÃªte nÂ°37 - fabriquez une serrure
QuÃªte nÂ°39 - ramassez 30 objets diffÃ©rents
QuÃªte nÂ°40 - gagnez au minimum 20.0g grÃ¢ce Ã  l'hÃ´tel des ventes
QuÃªte nÂ°45 - coupez 20 arbres
QuÃªte nÂ°46 - tuez 50 zombies
QuÃªte nÂ°47 - ramassez 10 steaks cru
QuÃªte nÂ°48 - faites bouillir 20 bouteilles d'eau non potable
QuÃªte nÂ°50 - vaincre 100 blopt

QuÃªte nÂ°53 - plantez 20 orangers
QuÃªte nÂ°54 - ramenez un moteur Ã  Machin
QuÃªte nÂ°55 - posez 2 lampes de dÃ©coration
QuÃªte nÂ°56 - achetez un coffre-fort
QuÃªte nÂ°57 - tuez 3 joueurs diffÃ©rents
QuÃªte nÂ°58 - rÃ©coltez 20.0g avec des missions
QuÃªte nÂ°59 - passez au jour suivant
QuÃªte nÂ°60 - dÃ©montez 5 armes chez l'artisan
QuÃªte nÂ°61 - fabriquez 2 murs
QuÃªte nÂ°62 - pÃªchez 30 poissons diffÃ©rents*/


//---OBJETS À MODÉLISER
//- Champignons fumigènes
//- Bouteille d'eau
//- Bouteille d'essence
//- Bouteille de lait

//---BUGS
//- MÉTÉO LORSQU'UN CONNARD SE CONNECTE
//- Hémorragie possible avec gilet pare-balles
//- Objet disparaissent trop vite
//- OnPlayerSpawn qui s'appelle pas
//- Mauvais vêtements aux zombies
//- Les trucs qui se coincent dans les murs
//- Y aussi le bug que jad44 à trouver, en réparant une moto, après avoir mis la roue avant contre une maison, on est tp dans la maison


/*----SSSSSSS---UU---UU---RRRRRRR---VV----VV---III---VV----VV---EEEEEEE--------------A--------LLL-------LLL---------
------SS--------UU---UU---RR---RR----V----V----III----V----V----EEE-----------------A-A-------LLL-------LLL---------
------SSSS------UU---UU---RR---RR----V----V----III----V----V----EEEEE-----___------A---A------LLL-------LLL---------
------SSSSSSS---UU---UU---RRRRRR------V--V-----III-----V--V-----EEEEE-----___-----AAAAAAA-----LLL-------LLL---------
----------SSS---UUUUUUU---RR--RRR-----V--V-----III-----V--V-----EEE--------------AAA---AAA----LLL-------LLL---------
------SSSSSSS---UUUUUUU---RR---RR------VV------III------VV------EEEEEEE---------AAA-----AAA---LLLLLLL---LLLLLLL-----*/

//---DÉBUT DU SCRIPT: Mercredi 23 mars 2016 - 15:00

/*
CHANGELOGS
INDEV
	v0.1: 24 mars 2016
	- Système d'objets à ramasser et d'inventaire
	- Système de sacs à dos différents à porter
	- Mapping de Red County
	- Interface customisée

	v0.11: 25 mars 2016
	- Ajout des systèmes de faim, de soif, de sommeil
	- Ajout du spawn d'objets aléatoire

	v0.12: 02 avril 2016
	- Ajout des récupérateurs d'eau
	- Ajout des tentes
	- Ajout des lits

	v0.2: 08 avril 2016
	- Ajout du système de véhicules
	- Ajout du spawn automatique des véhicules
	- Ajout du coffre dans les véhicules

	v0.3: 15 avril 2016
	- Ajout de la culture des tomates, oranges et pommes
	- Ajout des feux de camp
	- Ajout des bambis

	v0.4: 21 avril 2016
	- Ajout de refuges avec habitants
	- Ajout du mapping de Flint County & Whetstone

	v0.41: 28 avril 2016
	- Ajout de magasins où vendre et acheter pour de l'or

	v0.5: 04 mai 2016
	- Ajout des zombies (Correction des zombies 12 août 2017)

	v0.6: 02 juin 2016
	- Ajout des artisans
	- Ajout de la cuisine
	- Ajout de l'arrosage pour améliorer la culture

	v0.7: 21 juillet 2016
	- Ajout des maisons
	- Ajout des niveaux
	- Ajout du système d'admins
	- Ajout de l'aide
	- Ajout du mapping de Bone County, Tierra Robada & Las Venturas
	- Ajout des broyeurs & de la culture du blé

	v0.71: 30 mars 2017
	- Ajout des compétences de level
	- Possibilité de passer les cinématiques
	- Ajout du mapping de Los Santos

	v0.72: 24 Août 2017
	- Ajout de l'eau non potable à faire cuire
	- Ajout de zombies

	v0.8: 26 Novembre 2017
	- Ajout des gunracks
	- Ajout des braseros
	- Ajout des grognements de zombies
	- Ajout des garages

	v0.9: 25 Janvier 2018
	- Ajout des mécaniciens
	- Ajout des Boss
	- Ajout des jours de la semaine
	- Ajout du Knock-Out
	- Ajout de la barre de vie des Mobs
	- Ajout de mission de boss
	- Réparation du gilet pare-balles
	- Ajout du raincoat
	- Ajout des groupes
	- Ajout des compétences 'Survivaliste' et 'Tank'
	- Ajout des OVNIs
	- Ajout de grenades
	- Ajout des citernes
	- Ajout du lancer de couteau
	- Ajout de la détection du bruit
	
	v0.91: 10 Avril 2018
	- Ajout de San Fierro
	- Ajout des blopts
	- Ajout de missions
	- Fermeture de l'area
	- Ajout de zones de streaming pour les IA
	- Ajout des objets de décoration
	- Ajout de Jason
	- Ajout des icônes de mission

ALPHA
	v0.92: 13 Juillet 2018
	- Ajout de la compétence 'Hydratation'
	- Ajout du teamchat
	- Ajout des sapins
	- Ajout des boites de boss
	- Ajout de nouveaux lits
	- Ajout des huitres et des sacs
	
	v0.93: 3 Novembre 2018
	- Ajout des lacrymogènes
	- Ajout des zombies smokers
	- Ajout de missions
	- Ajout d'un texte 'Échec de la mission'
	- Ajout des stands de hot-dogs
	- Ajout de l'HDV
	- Ajout des missions à plusieurs
	- Ajout du bouton Stop Mission
	- Ajout des panneaux
	- Ajout des fauteuils
	- Ajout du spec pour admins
	- Les mécaniciens réparent également l'aspect d'une voiture
	- Ajout de 'La Mort'
	- Ajouts des frigos
	- Ajout du zapper dans l'area
	- Ajout des options
	- Possibilité de récupérer les graines des fruits sans manger

BÊTA
	v1.0:
	- Ajout du scenario
	- Mapping de tout San Andreas
	- Ajout de l'HDV
	- Ajout du bouton pour TOUT ramasser + Mettre le sac en tete de liste s'il est pas dedans
	
	v1.1:
	- Ajout des objets d'état (GPS, Montre)
	- Ajouts d'objets de décoration
	- Ajout des cartes au trésor
	- Ajout des lance-missiles anti-aériens
	- Ajout des barrils explosifs
	- Ajout des missiles
	- Ajout du marchand ambulant
	- Ajout d'une nouvelle maison

	v1.2:
	- Ajout des courses de voiture
	- Ajout de l'importation de voitures au port de LS
	- Ajout de la modification de voitures
	- Ajout d'objets chez l'artisan
	
	v1.3:
	- Ajout des alambics
	- Ajout des potions
	- Ajout du minage (explosion de rochers)
	- Ajout de l'écraseur (pour obtenir des minerais des roches

*/

/*SYSTÈME ADMIN
J'aimerai aussi une liste de tous les pseudos bannis, avec genre :
Pseudo - IP - Date - Heure - Debann le : Date - heure
Donc genre pour les bannissement quand on clique dessus ça ferait genre :

- Voir les stats du joueur, vraiment toutes ses stats, par exemple quand on clique dessus, on peut voir l'interface du joueur, en cas de bug par exemple avec l'or, qu'on puisse vraiment vérifié le truc etc ou sinon faire comme le mode libre et mettre le strict minimum et ils se démeerde sur le forum

- Voir les IP de chaque joueurs connecté (Avec pays si possible) à partir du grade administrateur

- Explose : Pour vérifier si un joueur est invincible ou non, dispo pour tout le monde

- Liste des sanctions en cours, où là on pourra voir tout ce qui reste en jail, en mute etc (Sans inclure les bannissement dedans avant que ça fasse une liste trop grande)

- IP : À partir d'admin, ou modérateur si tu veux, on peut voir genre les IPs de tous les joueurs connectés sur le serveur juste en cliquant dessus
Et si possible, si ça fait pas trop lag ni rien, la possibilité de voir chaque IP de tout les joueurs qui auront pu se connecté durant les 2 semaines, au delà des deux semaines ça se supprime
*/

#define FILE_SURVIVEALL                     //Pour dire aux defines dans quel fichier on est (Essaie de le changer hhhh)
#define MYSQL_SYSTEM						// Pour mettre en place le chargement des données depuis mysql ou non

#include <a_samp.inc>
//#include <PathFinder.inc>
//#include <mapandreas.inc>
//#include <rnpc>
#include <list> 							// À inclure en premier, sinon on se tappe des erreurs
#include <FCNPC>
#include <streamer>
#include <colandreas>
#include <YSI\y_ini>
#include <YSI\y_hooks>
#include <FloodControl.inc>
#include <crashdetect.inc>
#include <easybmp.inc>
#include <a_mysql.inc>
#include <[SA]Defines.inc>
#include <[SA]Functions.inc>
#if defined PROFILING
#include <profiler.inc>
#endif

#pragma dynamic 25000

//---PARAMÉTRAGE---//
#define VERSION                             "Alpha v0.93"//Version du serveur
#define OWNER_NAME                          "[Pix]"//Pseudo du propriétaire du serveur
#define KEEP_PLAYERTEXT                     //On ne détruit pas les TextDraws du HUD
#define TIME_SPEED                          (8)//Temps en minutes qui s'écoule chaque minute réelle
#define TAG_DISTANCE                        (7.0)//Distance à laquelle l'on voit le tag d'un joueur
#define SERVER_TEST                         //Si le serveur est en test
#define WARNINGS_KICK                       (5)//Nombre d'avertissements avant l'auto-kick
#define KICKS_BAN                           (3)//Nombre de kicks avant l'auto-ban
//#define TOO_HEAVY_FOR_BAG                   //L'on ne peut mettre certains objets dans son sac
#define WARNING_PICKUP                      //Est-ce que l'on prévient un joueur avant de ramasser un récupérateur d'eau ?
//#define ZOMBIE_KAMIKAZE                   //Les zombies clowns viennent-ils se suicider ?
#define CAN_PICKUP_BRAZIER                  //Peut-on récupérer un braséro ?
#define MAX_EXTRA_SKINS                     (10)//Combien de skins sont ajoutés (seulement si DOWNLOAD)
#define DOWNLOAD                          	//Utilise-t-on la version DL de SA-MP
#define SHOW_DAMAGE_SCREEN                  //Montre-t-on l'écran rouge si le joueur prend du dégat ?
//#define ARMOUR_LOW                        //L'armure ne protège que des coups au torse
#define TEAM_KILL                           //Le Teamkill est possible
//#define RADAR_HIDDEN                        //Le radar est caché par une tache de sang
//#define SCREAMING_STREAMING                 //On utilise des sons streamés pour les zombies
//#define ZOMBIE_SPECIAL_WALK                 //Les zombies marchent comme bourrés
#define MAX_Z_PATH_COLS                     (15)//Le nombre maximum de points de collision pour la recherche d'un point
//#define UNLAG_JASON
//#define LOAD_DYNAMICS                       //Commenter = Ne pas charger ni sauvegarder les objets dynamiques (Maison, etc.) - À n'utiliser que pour le lancement rapide du serveur (Test)
#define VEHICLE_DISEASE

//DATABASE MYSQL
/*#define SQL_HOST                            "c4nn4.com.mysql:3306"
#define SQL_USER                            "c4nn4_com"
#define SQL_PASS                            "105805"
#define SQL_DB                              "c4nn4_com"
*/
new MySQL:mysqlPool;

//---ADMINISTRATION
#define PLAYER                              (0)
#define MODERATOR                           (1)
#define ADMINISTRATOR						(2)
#define OWNER                           	(3)

//---DEFINES---//
//ZOMBIES
#define NONE 								(0)
#define BOOMER 								(1)
#define SPEED 								(2)
#define SMOKER 								(3)
#define TANKER 								(4)
#define ZOMBIE_5TH                          (MAX_ZOMBIES / 10)
#define ZOMBIE_NAME 						"Zombie[%d]"//Nom générique pour les zombies
#define ZOMBIE_HEALTH 						(100)//Vie des zombies
#define ZOMBIE_COLOR 						(0xCC000000)//Couleur des zombies
#define ZOMBIE_DETECT 						(25.0)//Champ de repérage d'un zombie
#define ZOMBIE_SIGHT 						(75.0)//Champ de vision standard des zombies
#define ZOMBIE_DAMAGE 						(150)//Dommage infligé par un zombie à un joueur
#define BLOPT_DAMAGE                        (100)
#define TMNT_DAMAGE                        	(250)
#define MAX_ZOMBIE_NODES                    (5)
#define MAX_JOHN_NODES                    	(5)
//
#define JOHN_NAME 							"John[%d]"//Nom générique pour les John
#define JOHN_DETECT 						(25.0)//Champ de repérage d'un John
#define JOHN_SIGHT 							(75.0)//Champ de vision standard des Johns
#define JOHN_ATTACK                         (0)
#define JOHN_ROAM                           (1)
#define JOHN_GO                             (2)
#define JOHN_STAND                          (3)
#define JOHN_ESCAPE                         (4)
#define JOHN_SCARED                         (5)
#define JOHN_AIMING                         (6)
#define JOHN_ATTACK_POINT                   (7)
//---
#define JOHN_HOSTILE                        (0)
#define JOHN_PACIFIC                        (1)
#define JOHN_FRIENDLY                       (2)

//
#undef MAX_VEHICLES
#define MAX_VEHICLES                        (200)
#define MAX_SPAWN_VEHICLES                  (66)
#define MAX_ITEMS                       	(159)
#define MAX_GOLD_INGOTS                     (250)
#define MAX_GROUND_ITEMS                    (1500)
#define MAX_GROUND_WEAPONS                  (150)
#define MAX_TENTS                           (100)
#define MAX_HOUSES                          (250)
#define MAX_GARAGES                         (150)
#define MAX_BEDS                            (200)
#define MAX_SEATS                           (100)
#define MAX_BOARDS                          (300)
#define MAX_FURN                            (300)
#define MAX_PLANTS                          (500)
#define MAX_FIRES                         	(50)
#define MAX_FLAMES                          (150)
#define MAX_BRASEROS                        (200)
#define MAX_COLLECTORS                      (250)
#define MAX_SHREDDERS                      	(150)
#define MAX_BAMBIS                      	(75)
#define MAX_SAFES                           (250)
#define MAX_GUNRACKS                        (250)
#define MAX_FRIDGES                        	(50)
#define MAX_BOMBS                           (200)
#define MAX_BAMBI_NODES                    	(10)
#define MAX_BLOPTS                          (10)
#define MAX_TMNT                          	(10)
#define MAX_UFOS                    		(15)
#define MAX_CACTUS                          (10)
#define MAX_BLOPT_NODES                    	(5)
#define MAX_TMNT_NODES                    	(5)
#define MAX_DEATH_MARKERS                   (50)
#define MAX_AUCTION_ITEMS                   (100)
#define MAX_GROUPS                          (25)
#define MAX_GROUP_SIZE                      (5)
#define MAX_TANKS                           (50)
#define MAX_TANK_FUEL      					(15000)
#define BUD_BED                             (MAX_BEDS + 1)

//---ESSENCE---//
#define BIKE_FUEL                       	(2000)
#define CAR_FUEL                        	(5000)
#define TRUCK_FUEL                      	(10000)
#define BOAT_FUEL                       	(10000)
#define PLANE_FUEL                      	(250000)
#define HELI_FUEL                       	(250000)

//---MUNITIONS---//
#define NO_AMMO                             (0)
#define ASSAULT_AMMO                        (1)
#define PISTOL_AMMO                         (2)
#define DEAGLE_AMMO                         (3)
#define SHOTGUN_AMMO                        (4)
#define RIFLE_AMMO                          (5)

//---THROW WEAPONS---//
#define NO_THROW                            (0)
#define THROW_GRENADE                       (1)
#define THROW_MOLOTOV	                    (2)
#define THROW_GAS                       	(3)

//---HDV---//
#define TYPE_NOSELL                         (0)
#define TYPE_TOOL                           (1)
#define TYPE_MEDIC                          (2)
#define TYPE_WEAP                           (3)
#define TYPE_OTHER                          (4)
#define TYPE_VEH                            (5)
#define TYPE_CLOTHE                         (6)
#define TYPE_FOOD                           (7)
#define TYPE_RSRC                           (8)

//---COMPÉTENCES---//
#define BUTCHER                             (1)
#define DOCTOR                              (2)
#define HEALTH                              (2)
#define CRAFTER                             (3)
#define TRANSPORTER                         (1)
#define FISHERMAN                           (2)
#define MECANIC                             (1)
#define FARMER                              (3)
#define ATHLETE                             (1)
#define SURVIVOR                         	(3)
#define TANK                         		(1)
#define BOMBERMAN                           (2)
#define HYDRATATION                         (1)

//---PLAYERSTATE---//
#define UNLOGGED                            (0)
#define UNSPAWNED                           (1)
#define SPAWNED                            	(2)

//---WEAPON SKILL---//
#define WEAPON_SIMPLE                       (0)
#define WEAPON_AKIMBO                       (1)

//---RAISONS DÉGATS---//
#define REASON_HEAL                         (55)
#define REASON_HUNGER                       (56)
#define REASON_THIRST                       (57)
#define REASON_BLOODLOSS                    (58)

//ATTACHED OBJECTS
#define BAG_ID								(0)
#define HAND_OBJECT_ID						(1)
#define HAT_OBJECT_ID						(2)
#define GLASSES_OBJECT_ID					(3)
#define MASK_OBJECT_ID						(4)
#define TORSO_OBJECT_ID						(5)
#define GUN1_OBJECT_ID						(6)
#define GUN2_OBJECT_ID						(7)
#define GUN3_OBJECT_ID						(8)
#define GUN4_OBJECT_ID						(9)

//SACS À DOS
#define PATROL_PACK                         (1)
#define CZECH_VEST                          (2)
#define ASSAULT_PACK                        (3)
#define ALICE_PACK                          (4)
#define COYOTE_PACK                         (5)

//JOURS
#define MONDAY                              (1)
#define TUESDAY                             (2)
#define WEDNESDAY                           (3)
#define THURSDAY                           	(4)
#define FRIDAY                              (5)
#define SATURDAY                            (6)
#define SUNDAY                              (7)

//RÉPERTOIRES
#define IP                                  "/Survive-All/Admin/IP/%s.ini"
#define PSEUDO                              "/Survive-All/Admin/Pseudos/%s.ini"
#define UPATH 								"/Survive-All/Comptes/%s.ini"
#define OFFPATH 							"/Survive-All/Comptes/Offline/%s.ini"
#define IPATH                               "/Survive-All/General/Items.ini"
#define WPATH                               "/Survive-All/General/Weapons.ini"
#define VPATH                               "/Survive-All/General/Vehicles.ini"
#define PPATH                               "/Survive-All/General/Plants.ini"
#define FPATH                               "/Survive-All/General/Fires.ini"
#define BRPATH                              "/Survive-All/General/Braseros.ini"
#define BBPATH                              "/Survive-All/General/Board.ini"
#define SEPATH                              "/Survive-All/General/Seats.ini"
#define TPATH                               "/Survive-All/General/Tents.ini"
#define BPATH                               "/Survive-All/General/Beds.ini"
#define FUPATH                              "/Survive-All/General/Furniture.ini"
#define CPATH                               "/Survive-All/General/Collectors.ini"
#define SHPATH                              "/Survive-All/General/Shredders.ini"
#define GPATH                               "/Survive-All/General/General.ini"
#define HPATH                               "/Survive-All/General/Houses.ini"
#define GARPATH                             "/Survive-All/General/Garages.ini"
#define TKPATH                              "/Survive-All/General/Tanks.ini"
#define GOLDPATH                            "/Survive-All/General/Gold.ini"
#define SPATH                               "/Survive-All/General/Safes.ini"
#define GRPATH                              "/Survive-All/General/GunRacks.ini"
#define FRPATH                              "/Survive-All/General/Fridges.ini"
#define APATH                               "/Survive-All/General/Auctions.ini"
#define GASPATH                             "/Survive-All/General/GasStations.ini"
#define HMAP                                "scriptfiles/surviveall.hmap"
#define BITMAP                              "/scriptfiles/Bitmap/SurviveAll.bmp"

//---MACROS---//
#define KEY_AIM 							(KEY_HANDBRAKE)
#define NO_KEY                              (524288)
#define CalculateBarSize(%0,%1)        		(floatdiv(%0, 100) * %1)
#define GetName(%0)                         (sPlayerName[%0])
#define IsVehicleBicycle(%0)            	((GetVehicleModel(%0) == 481 || GetVehicleModel(%0) == 509 || GetVehicleModel(%0) == 510))
//#define IsPlayerRunning(%0)                 (GetPlayerAnimationIndex(%0) == 1231)
#define AbsoluteValue(%0)           		(floatround(floatsqroot(%0 * %0), floatround_round))
#define IsPlayerDead(%0)                    (pPlayerInfos[%0][pHealth] <= 0)
#define IsFCNPCDead(%0)                    	(FCNPC_GetHealth(%0) <= 0)
#define GetPlayerHealth(%0)                 (pPlayerInfos[%0][pHealth])
#define GetPlayerArmour(%0)					(pPlayerInfos[%0][pArmour])
#define IsPlayerSleeping(%0)                (dNap[%0] != 0)
#define IsPlayerSitting(%0)                	(dSit[%0] != 0)
#define IsRaining()                       	(dEnvironment[dMeteo] == 1)
#define IsNight()                       	(23 >= dEnvironment[dHours] >= 21 || 6 >= dEnvironment[dHours] >= 0)
#define RandomWeather()                     ChangeWeather(RandomEx(0, 6), RandomEx(2, 30))
#define ShakePlayer(%0)						SetPlayerDrunkLevel(%0,7500),SetTimerEx("StopShaking",5000,false,"i",%0)
#define IsPlayerInWater(%0)                 ((IsPlayerOnWater(%0) || IsPlayerUnderWater(%0)) && !IsPlayerInFixedZone(%0))
#define IsPlayerDeadDebug(%0) 				(GetPlayerState(%0) == PLAYER_STATE_WASTED)
#define IsPlayerKnockedOut(%0)              (pKnockOut[%0] != 0)
#define HideDialog(%0)						ShowPlayerDialog(%0,-1,0,"","","","");
#define IsHUDHiddenForPlayer(%0)            (bHideHUD[%0])
#define Released(%0) 						(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))
#define Pressed(%0) 						(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define Holding(%0)                         ((newkeys & (%0)) == (%0))
#define CanWeaponDual(%0)                   (%0 == 22 || %0 == 26 || %0 == 28 || %0 == 32)
#define IsPlayerOnSpectate(%0)              (pAdminInfos[%0][dSpec] != INVALID_PLAYER_ID)

//---FORWARDS---//
#if defined MYSQL_SYSTEM
forward OnEnvironmentLoaded();
forward OnGasStationsLoaded();
forward OnGoldsLoaded();
forward OnSeatsLoaded();
forward OnBoardsLoaded();
forward OnFurnituresLoaded();
#endif
//SAUVEGARDES
forward LoadVehicles_data(name[], value[]);
forward LoadGasStations_data(name[], value[]);
forward LoadGold_data(name[], value[]);
forward LoadItems_data(name[], value[]);
forward LoadGeneral_data(name[], value[]);
forward LoadPlants_data(name[], value[]);
forward LoadSafes_data(name[], value[]);
forward LoadGunRacks_data(name[], value[]);
forward LoadFridges_data(name[], value[]);
forward LoadCollectors_data(name[], value[]);
forward LoadShredders_data(name[], value[]);
forward LoadFires_data(name[], value[]);
forward LoadBraseros_data(name[], value[]);
forward LoadTents_data(name[], value[]);
forward LoadHouses_data(name[], value[]);
forward LoadGarages_data(name[], value[]);
forward LoadTanks_data(name[], value[]);
forward LoadBeds_data(name[], value[]);
forward LoadBoards_data(name[], value[]);
forward LoadSeats_data(name[], value[]);
forward LoadFurniture_data(name[], value[]);
forward LoadWeapons_data(name[], value[]);
forward LoadUser_data(playerid, name[], value[]);
forward SaveUser(playerid);
forward GetUserLastCo_data(name[], value[]);
forward LoadAuctionHouse_data(name[],value[]);
//IP
forward LoadIPBan_ban(name[], value[]);
forward LoadIPNicks_nicks(name[], value[]);
forward LoadPlayerIP_ip(name[], value[]);
//MYSQL
forward LoadPlayerExtraGold(playerid);
//VÉHICULES
forward CreateRandomVehicle();
forward DestroyVeh(vehicleid);
forward SetVehicleBonnetState(vehicleid, bool:open);
forward SetVehicleTrunkState(vehicleid, bool:open);
//CALLBACKS
forward OnPlayerGroupKillMob(playerid, mobtype);
forward OnPlayerChangeWeapon(playerid, oldweapon, newweapon);
forward OnPlayerDies(playerid, killerid, reason);
forward OnPlayerCraftItem(playerid, time, category, formula);
forward OnFishingUpdate(playerid);
forward OnLineRaiseUp(playerid);
forward OnSecondPassed();
forward OnMinutePassed();
forward OnAntiCheatStrikes();

//OBJETS
forward CreateItem(objectid, Float:x, Float:y, Float:z, bool:spawned, load);
forward PlayerDropObject(playerid, objectid, Float:distance);
forward DestroyItem(itemid);
forward GetSpawnedObjects();
forward GetObjectID(slotid);
forward GetItemWithinDistance(Float:x1, Float:y1, Float:z1, Float:dist);
forward HasPlayerItem(playerid, objectid);
forward GetPlayerNextFreeSlot(playerid);
forward GetPlayerFreeSlots(playerid);
forward GivePlayerSlotObject(playerid, objectid, slot);
forward SwapPlayerObjects(playerid, slotid1, slotid2);
forward GetPlayerItemAmount(playerid, objectid);
forward ClosePlayerHUD(playerid);
//PROTOCOLE
forward InitColAndreas();
forward ShowPlayerHelp(playerid, helpid, time);//Fonction pour afficher une partie de l'aide.
forward HidePlayerHelp(playerid);//Fonction pour cacher l'aide
forward LoadMap(playerid);
forward HidePlayerHUD(playerid, bool:hide);
forward GetObjectName(playerid, objectid, language);
//PEDS
forward RespawnPlayer(playerid);
forward ReSpawnZombie(zombieid);
forward ReSpawnJohn(johnid);
forward MoveNPCs();
forward MoveBambis();
forward ZombieAttack(zombieid);
forward MoveZombie(zombieid);
forward CreateZombie(id);
forward IsNPCZombie(npcid);
forward SetZombiePos(zombieid, Float:range, Float:x, Float:y, Float:z);
forward KillZombie(zombieid);
forward IsZombieInZone(zombieid, Float:range, Float:x, Float:y, Float:z, bool:checkmission, missionid);
forward AddZombieToMission(zombieid, missionid, Float:x, Float:y, Float:z);
forward SetZombieWayPoint(zombieid, Float:x, Float:y, Float:z, bool:distractable, speed);
forward GetFreeZombie();
//---public MoveJohn(johnid)
forward SetJohnWayPoint(johnid, waypoints, Float:x, Float:y, Float:z, bool:distractable, speed, Float:x2, Float:y2, Float:z2);
forward SetJohnPos(johnid, Float:range, Float:x, Float:y, Float:z);
forward MoveJohn(johnid);
forward AddJohnToMission(johnid, skin, type, weaponid, missionid, skill, friendid, Float:x, Float:y, Float:z);
forward SetJohnType(johnid, type, friendid, targetid);
forward Float:GetJohnHeadshotDistance(johnid);
forward GetFreeJohn();
forward JohnAttack(johnid);
forward IsJohnInZone(johnid, Float:range, Float:x, Float:y, Float:z, bool:checkmission, missionid);
forward KillJohn(johnid);
forward IsNPCJohn(npcid);
forward CreateJohn(id);
//---
forward ResetDetectRange(playerid);
forward MoveBlopt(bloptid);
forward MoveTMNT(turtleid);
forward MoveBambi(bambi);//, bool:escape);
forward OnLaserBlows(objectid, Float:x, Float:y, Float:z, type);
forward OnDeathRayBlows(objectid, Float:x, Float:y, Float:z);
forward OnPlayerShootUFO(playerid, ufoid);
forward MoveMiniUFOs();
forward UpdateZapper();
forward BloptAttack(bloptid, step);
forward TMNTAttack(turtleid, step);
forward SetBambiPos(zone, Float:x, Float:y, Float:z);

//BOSS
forward CheckPlayersToBambiKing();
forward UpdateHealthBar(playerid, health, maxhealth, const nameen[], const namefr[], const namees[], const namepg[], const nameit[], const namede[]);
forward SetBoss(boss, bool:appear);
forward GetBoss(boss);

forward CreateExplosionEx(playerid, Float:x, Float:y, Float:z, type, Float:radius);
forward ShowRedScreen(playerid);
forward ShowPlayerRules(playerid);
forward LoadUserGold_auctions(name[], value[]);
forward LoadUserItems_auctions(name[],value[]);
forward LoadUserOffline_auctions(playerid, name[], value[]);
forward GivePlayerGold(playerid, amount);
forward GivePlayerExp(playerid, exp);
forward HealPlayerid(playerid, step);
forward IsDynamicObjectNearToPlayer(Float:radi, playerid, objectid);
forward IsObjectNearToPlayer(Float:radi, playerid, objectid);
forward DestroyObjectEx(objectid, bool:dynamic);
forward StopShaking(playerid);
forward ShowPlayerTextInfo(playerid, time, en[], fr[], es[], pg[], it[], de[]);
forward HidePlayerTextInfo(playerid);
forward ShowPlayerBloodScreen(playerid, step);
forward ExplodeBomb(bombid);
forward GetBombMission(bombid);
forward CreateBomb(type, time, vehicleid, Float:x, Float:y, Float:z, Float:angle, load, missionid);
forward GiveStationFuel(stationid, fuel);
forward GetStationFuel(stationid);
forward GetPlayerLanguage(playerid);
forward SaveMissionProgress(playerid, const missionname[], info);
forward LoadMissionProgress(playerid, const missionname[]);
forward OnProjectileExplode(playerid, Float:x, Float:y, Float:z, type);
forward OnPlayerPressDirectionKey(playerid, newkeys, oldkeys);
forward IsPlayerThrowingKnife(playerid);
forward CheckKnifeTarget(playerid, knifeid);
forward FadeBlip(playerid, blipid, fade, Float:x, Float:y, Float:z);
forward HasPlayerGold(playerid, gold);
forward HasPlayerSameTypeWeapon(playerid, weaponid);
forward GivePlayerWeaponEx(playerid, weaponid, ammo);
forward GetPlayerNextFreeWeaponSlot(playerid);
forward GetPlayerGroup(playerid);
forward GetPlayerFreeMates(playerid);
forward GetWeaponDamage(weaponid);
forward ShowStopMission(playerid, bool:show);

//---VARIABLES & ENUMS---//
enum ObjectsInfos
{
	ObjectModelID,
	//---IMAGE DE L'INVENTAIRE
	Float:ObjectRotX,
	Float:ObjectRotY,
	Float:ObjectRotZ,
	Float:ObjectZoom,
	//---DANS LA MAIN
	Float:HandOffSetX,
	Float:HandOffSetY,
	Float:HandOffSetZ,
	Float:HandRotX,
	Float:HandRotY,
	Float:HandRotZ,
	Float:HandZoom,
	//---PAR TERRE
	Float:GroundRotX,
	Float:GroundRotY,
	Float:GroundRotZ,
	Float:GroundOffSetZ,
	//---PRIX REVENTE & HDV
	dSellPrice,
	dObjectType,
	bool:bHeavy,
	//---NOMS---//
	ObjectEnName[30],
	ObjectFrName[30],
	ObjectEsName[30],
	ObjectPgName[30],
	ObjectItName[30],
	ObjectDeName[30]
}

enum Environment
{
	dMins,
	dHours,
	dDay,
	dMeteo,
	dMeteoTime
}

enum Plante
{
	dPlantID,//1 = Blé - 2 = Oranger - 3 = Pommier - 4 = Tomates - 5  = Sapin
	dResistance,
	dFruits,
	oPlantObject,
	dGrowTime,
	Float:xPlant,
	Float:yPlant,
	Float:zPlant,
	Float:aPlant
}

enum GroupInfos
{
	bool:bActive,
	sGroupName[16],
	dMembers[MAX_GROUP_SIZE],
	dBoss
}

enum PlayerInfos
{
	dLogState,
	pBan,
	pVIP[2],
	sFirstCo[30],
	sLastCo[30],
	pFreeze,
	pMute,
	pPass,
	pLangue,
	pBag,//1 = PATROL PACK (8)--- 2 = CZECH VEST POUCH (16)--- 3 = ASSAULT PACK (20)--- 4 = ALICE BACKPACK (28)--- 5 = COYOTE BACKPACK (36)
	pHunger,
	pThirst,
	pSleep,
 	pGold,
	pHealth,
	pArmour,
	Float:xPos,
	Float:yPos,
	Float:zPos,
	Float:aPos,
	bool:bLeg,
	bool:bHemorragie,
	pTemperature,
 	pAdmin,
 	pKills,
 	pHeadshots,
 	pDeaths,
 	pZombies,
 	pBosses,
 	pMissions,
	Float:fDistanceWheel,
	Float:fDistanceFoot,
 	pGameTime,
	pSkin,
	pChapeau,
	Float:fPosChapeau[9],
	pLunettes,
	Float:fPosLunettes[9],
	pMasque,
	Float:fPosMasque[9],
	pTorse,
	Float:fPosTorse[9],
	pArme1[3],
	pArme2[3],
	pArme3[3],
	pArme4[3],
	HandObject,
	BagObject[36],
	pLevel,
	pExp,
	pCompetence,
	bool:bAide[32],
	dAide1_16,
	dAide17_32,
	dBoucher,
	dMedecine,
	dSante,
	dArtisan,
	dTransporteur,
	dPecheur,
	dMecano,
	dJardinier,
	dAthlete,
	dSurvivaliste,
	dTank,
	dBomberman,
	dHydra,
	pReggaeShark,
	pIntro,
	pAmy,
	pKen,
	pDPO
}

enum PlayerOffInfos
{
	//---HDV
	dRecievedGold,
	dReturnedItem[50]
}

enum Admin
{
	dPuniID,
	dPunition,
	dSpec,
	bool:bLog
}

enum Fishing
{
	FishObject,
	FishingTimer,
	Fish,
	TimeCatch,
	Time,
	State
}

enum VehicleInfos
{
	dVehicleID,
	dVehicleModel,
	dWheels,
	dItem,
	dFuel,
	Float:fHealth,
	bool:bEngine,
	bool:bWheel[4],
	Float:xVeh,
	Float:yVeh,
	Float:zVeh,
	Float:aVeh,
	TrunkObject[6],
	dColor[2]
}

enum GasStation
{
	Text3D:tGasText,
	dStationGas,
	Float:xGas,
	Float:yGas,
	Float:zGas,
	gasID
};
enum Or
{
	dOrAmount,
	oOr,
	Text3D:OrText,
	Float:xOr,
	Float:yOr,
	Float:zOr,
	orID
}

enum SafeInfos
{
	oSafe[2],
	bool:bSafe,
	bool:bOpenSafe,
	sSafeCode[5],
	Float:xSafe,
	Float:ySafe,
	Float:zSafe,
	Float:aSafe,
	dItem[12]
}

enum GunRackInfo
{
	oRack,
	oGun[4],
	bool:bRack,
	Float:xRack,
	Float:yRack,
	Float:zRack,
	Float:aRack,
	dGun[4],
	dGunAmmo[4]
}

enum FridgeInfo
{
	oFridge,
	bool:bFridge,
	Float:xFridge,
	Float:yFridge,
	Float:zFridge,
	Float:aFridge,
	dFood[5],
	dFoodAmount[5]
}

enum Zombie
{
	dZombieID,
	dZombieClass,
	//dZombieGunShot,
	//Float:fZombieGunShot[3],
	zMission,
	dNodes,
	Float:fNodeX[5],
	Float:fNodeY[5],
	Float:fNodeZ[5],
	bool:bZombieWayPoint,
	dZombieWayPointSpeed,
	bool:bDistractable,
	bool:bZombieKick,
	bool:bZombieAttack
}

enum Johns
{
	dJohnID,
	dJohnType,
	dJohnWeapon,
	dJohnMission,
	dJohnAction,
	dJohnFriend,
	dJohnTarget,
	dNodes,
	Float:fNodeX[6],
	Float:fNodeY[6],
	Float:fNodeZ[6],
	dJohnWayPoint,
	dJohnSkill,
	dJohnWayPointSpeed,
	bool:bHeadshot,
	bool:bDistractable,
	bool:bVehicle,
	bool:bJohnKick
}

enum Bambi
{
	oBambi,
	bool:bBambiDead,
	dBambiZone,
	dNodes,
	Float:fNextX[MAX_BAMBI_NODES],
	Float:fNextY[MAX_BAMBI_NODES],
	Float:fNextZ[MAX_BAMBI_NODES]
}

enum Blopt
{
	oBlopt,
	oBloptAttach[5],
	oBloptSword,
	bBloptLive,
	bool:bBloptAttack,
	dNodes,
	Float:fMobNextX[MAX_BLOPT_NODES],
	Float:fMobNextY[MAX_BLOPT_NODES],
	Float:fMobNextZ[MAX_BLOPT_NODES]
}

enum TMNT
{
	oTMNT,
	oTMNTAttach,
	oTMNTSword,
	bTMNTLive,
	bool:bTMNTAttack,
	dNodes,
	Float:fMobNextX[MAX_TMNT_NODES],
	Float:fMobNextY[MAX_TMNT_NODES],
	Float:fMobNextZ[MAX_TMNT_NODES]
}

enum Cactus
{
	oCactus,
	oCactusAttach[3],
	dCactusPlace,
	dCactusHealth
}

enum MobStream
{
	dBambiStream[4],
	dBambiZone[4],
	dBloptStream,
	dBloptZone,
	dUFOStream,
	dUFOZone,
	dCactusStream,
	dCactusZone,
	dTMNTStream,
	dTMNTZone,
	dZapperStream,
	dZapperZone
}

enum BossBambi
{
	oBambiKing,
	dBambiKingHealth
}

enum BossJason
{
	dJasonID,
	dJasonState
}

enum BossUFO
{
    dBossState,
    oHead[2],
    oVaisseau,
    dLifeBras[4],
    dLife,
    oBras1[4],
    oBras2[4]
}

enum BossDeath
{
	dDeathID,
	dDeathPos,
	dDeathState,
	dDeathHealth
}

enum Bomb
{
	dBombType,
	dBombMission,
	oBomb,
	dBombTime,
	vBombID,
	aBombArea,
	Float:xBomb,
	Float:yBomb,
	Float:zBomb,
	Float:aBomb
}

enum Marker
{
	oMarker,
	Float:xMark,
	Float:yMark,
	Float:zMark
}

enum Tent
{
	bool:bTent,
	oTent[6],
	Float:xTent,
	Float:yTent,
	Float:zTent,
	Float:aTent
}

enum House
{
	dHouseType,
	oHouse[3],
	bool:bPorte[2],
	oPorte,
	sCodePorte[5],
	Float:xHouse,
	Float:yHouse,
	Float:zHouse,
	Float:aHouse
}

enum Garage
{
	oGarage[2],
	bool:bGarage[2],
	sCodeGarage[5],
	Float:xGarage,
	Float:yGarage,
	Float:zGarage,
	Float:aGarage
}

enum Tank
{
	oTank[2],
	Text3D:tTankFuel,
	dTankGas,
	Float:xTank,
	Float:yTank,
	Float:zTank,
	Float:aTank
}

enum Bed
{
	dBedType,
	oBed,
	Float:xBed,
	Float:yBed,
	Float:zBed,
	Float:aBed
}

enum Seat
{
	dSeatType,
	oSeat,
	Float:xSeat,
	Float:ySeat,
	Float:zSeat,
	Float:aSeat,
	seatID
}

enum Board
{
	oBoard[2],
	bool:bBoard,
	sBoardText[128],
	Float:xBoard,
	Float:yBoard,
	Float:zBoard,
	Float:aBoard,
	boardID,
	boardResistance
}

enum Furniture
{
	dFurnitureID,
	dFurnitureType,
	oFurniture,
	Float:xFurn,
	Float:yFurn,
	Float:zFurn,
	Float:rxFurn,
	Float:ryFurn,
	Float:rzFurn
}

enum Collecteur
{
	dEau,
	oCollector[2],
	Text3D:CollectorText,
	Float:xEau,
	Float:yEau,
	Float:zEau,
	Float:aEau
}

enum Broyeur
{
	dBroyeur,
	oBroyeur,
	Float:xBroyeur,
	Float:yBroyeur,
	Float:zBroyeur,
	Float:aBroyeur
}

enum Feu
{
	oFeu,
	dTempsFeu,
	Float:xFeu,
	Float:yFeu,
	Float:zFeu,
	Float:aFeu
}

enum Smoke
{
	oSmoke,
	dTempsSmoke,
	Float:xSmoke,
	Float:ySmoke,
	Float:zSmoke
}

enum Brasero
{
	oBrasero,
	oFire,
	dBrasero,
	Float:xBrasero,
	Float:yBrasero,
	Float:zBrasero,
	Float:aBrasero
}

enum Guns
{
	WeaponID,
	ObjectID,
	WeaponAmmo,
	Text3D:WeaponText,
	Float:xWeapon,
	Float:yWeapon,
	Float:zWeapon
}

enum Items
{
	ItemID,
	ObjectID,
	bool:bAutoSpawn,
	Text3D:ObjectText,
	Float:xItem,
	Float:yItem,
	Float:zItem
}

enum AccessoriesInfos
{
	model,
    pdc,
    Float:o[9],
    col[2],
};

//TEXTDRAWS
new PlayerText:tInfoText[MAX_PLAYERS] = {PlayerText:INVALID_TEXT_DRAW, ...};
new PlayerText:tGroupText[MAX_PLAYERS] = {PlayerText:INVALID_TEXT_DRAW, ...};
new PlayerText:tAtelierTitre[MAX_PLAYERS] = {PlayerText:INVALID_TEXT_DRAW, ...};
new PlayerText:tAtelierChoice[MAX_PLAYERS][18];
new PlayerText:tAtelierItem[MAX_PLAYERS][10];
new PlayerText:tInventObjet[MAX_PLAYERS][2];
new PlayerText:tSafe[MAX_PLAYERS][12][2];
new PlayerText:tPlayerInfos[MAX_PLAYERS][8];
new PlayerText:tPlayerSkin[MAX_PLAYERS];
new PlayerText:tPlayerHUD[MAX_PLAYERS][9];
new PlayerText:tSlots[MAX_PLAYERS] = {PlayerText:INVALID_TEXT_DRAW, ...};
new PlayerText:tInventory[MAX_PLAYERS][36][2];
new PlayerText:tPlayerVehHUD[MAX_PLAYERS][5];
new PlayerText:tVehicleTrunk[MAX_PLAYERS][6][2];
new PlayerText:tLevel[MAX_PLAYERS][3];
new PlayerText:tHelpText[MAX_PLAYERS] = {PlayerText:INVALID_TEXT_DRAW, ...};
new PlayerText:tBossHealth[MAX_PLAYERS][2];
//
new Text:tStop = Text:INVALID_TEXT_DRAW;
new Text:tKnifeAim;
new Text:tHelp;
new Text:tCompetence;
new Text:tGroup;
new Text:tOptions;
new Text:tBoutonFabriquer[6];
new Text:tBoutonCuisiner[6];
new Text:tBoutonBatir[6];
new Text:tDarkScreen;
new Text:tSkinSelect[7];
new Text:tRedScreen[10];
new Text:tHUDFont[9];
new Text:tBrokenLeg[6];
new Text:tHemoragie[6];
//new Text:tConnection;
new Text:tFondHUD[5];
new Text:tFondAtelier[3];
new Text:tBoutonsAtelier[4];
new Text:tBarettesLevel[10];
new Text:tFondLevel;
new Text:tBossBar;
new Text:tAdmin;
new Text:tFondDialog[8];
//
new Text:tRules[6][2];
new Text:tBloodSplat;
//
new pUseInventory[MAX_PLAYERS] = {-1, ...};
new pVehicleInventory[MAX_PLAYERS] = {-1, ...};
new pCreateSafe[MAX_PLAYERS] = {-1, ...};//Création de mot de passe pour le coffre fort
new pBed[MAX_PLAYERS] = {-1, ...};
new pSeat[MAX_PLAYERS] = {-1, ...};
new pBoard[MAX_PLAYERS] = {-1, ...};
new pRack[MAX_PLAYERS] = {-1, ...};
new pBrasero[MAX_PLAYERS] = {-1, ...};
new pShredder[MAX_PLAYERS] = {-1, ...};
//---
new pGunRack[MAX_PLAYERS] = {-1, ...};
new pFridge[MAX_PLAYERS] = {-1, ...};
new pPlayerSafe[MAX_PLAYERS] = {-1, ...};
new dInfoTimer[MAX_PLAYERS];
new dHelpTimer[MAX_PLAYERS];
new pChooseSkin[MAX_PLAYERS];
new bool:pDead[MAX_PLAYERS];
new bool:bAlreadyText[MAX_PLAYERS];
new bool:bCloseTexts[MAX_PLAYERS];
new bool:bRedScreen[MAX_PLAYERS];
new bool:bHideHUD[MAX_PLAYERS];
new dHelp[MAX_PLAYERS];

//JOUEURS
new dNewCo[MAX_PLAYERS];
new pPlayerBlip[MAX_PLAYERS][15];
new pThrowKnifeTimer[MAX_PLAYERS] = {-1, ...};
new oThrowKnife[10] = {INVALID_OBJECT_ID, ...};
new dThrowKnife[10];
new Float:fLandKnife[10][3];
new pThrown[MAX_PLAYERS][3];
new Float:fThrown[MAX_PLAYERS][3];
new pFishInfo[MAX_PLAYERS][Fishing];//Variables pour la pêche
new pKnockOut[MAX_PLAYERS];//Variable pour le KO
new pPlayerInfos[MAX_PLAYERS][PlayerInfos];//Variables du joueur (Sauvegardes, etc.)
new pPlayerOfflineInfos[MAX_PLAYERS][PlayerOffInfos];//Variables du joueur (Sauvegardes, etc.)
new dGroup[MAX_GROUPS][GroupInfos];
new pGroup[MAX_PLAYERS] = {-1, ...};
new pGroupRecruit[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};
new sPlayerName[MAX_PLAYERS][MAX_PLAYER_NAME + 1];//Nom du joueur
new Text3D:pPlayerTag[MAX_PLAYERS] = {Text3D:INVALID_3DTEXT_ID, ...};//Nom du joueur au dessus de sa tête

//VEHICULES
new dRepair[MAX_PLAYERS][4];
new dVehicleInfos[MAX_SPAWN_VEHICLES][VehicleInfos];
new dGasStation[19][GasStation];
new LIST_init<gasStationsList>; 
//STRUCTURES
new dHouseBuild[MAX_PLAYERS];
new dHouseID[MAX_PLAYERS];
new pGarage[MAX_PLAYERS] = {-1, ...};
new pTank[MAX_PLAYERS] = {-1, ...};
new ListIt:pFurn[MAX_PLAYERS];
new dGarage[MAX_GARAGES][Garage];
new dTanks[MAX_TANKS][Tank];
new dTent[MAX_TENTS][Tent];
new dHouse[MAX_HOUSES][House];
new dDoor[MAX_PLAYERS] = {-1, ...};
new dBed[MAX_BEDS][Bed];
new dSeat[MAX_SEATS][Seat];
new dBoard[MAX_BOARDS][Board];
new dFurn[MAX_FURN][Furniture];
new dNap[MAX_PLAYERS];
new dSit[MAX_PLAYERS];
new dOr[MAX_GOLD_INGOTS][Or];
new dSafeInfos[MAX_SAFES][SafeInfos];
new dGunRackInfos[MAX_GUNRACKS][GunRackInfo];
new dFridgeInfos[MAX_FRIDGES][FridgeInfo];
new dCollector[MAX_COLLECTORS][Collecteur];
new dShredder[MAX_SHREDDERS][Broyeur];
new dFire[MAX_FIRES][Feu];
new dSmoke[MAX_FLAMES][Smoke];
new dBraseroInfos[MAX_BRASEROS][Brasero];
new dPlant[MAX_PLANTS][Plante];
new dDeath[MAX_DEATH_MARKERS][Marker];

//ATELIER & CUISINE
new dEngineer[MAX_PLAYERS] = {-1, ...};
new dFormula[MAX_PLAYERS];
new bool:bCooking[MAX_PLAYERS];
new bool:bCrafting[MAX_PLAYERS];

//MOBS
new dBambi[MAX_BAMBIS][Bambi];
new dBlopt[MAX_BLOPTS][Blopt];
new dTMNT[MAX_TMNT][TMNT];
new dCactus[MAX_CACTUS][Cactus];
new dZombie[MAX_ZOMBIES][Zombie];
new dJohn[MAX_JOHNS][Johns];
//new bool:dZombieWalk[MAX_ZOMBIES] = true;
new Float:fDetectRange[MAX_PLAYERS][2];
new dResetTimer[MAX_PLAYERS];
//---
new dStreamMobs[MobStream];

//BOSS
new dBambiKing[BossBambi];
new dJason[BossJason];
new dBossUFO[BossUFO];
new dDeathBoss[BossDeath];
new pEnterUFO = -1;
forward ClearOutMothership();

//OBJETS, VÊTEMENTS & ARMES
new dSpawnedItems = 0;
new dGuns[MAX_GROUND_WEAPONS][Guns];
new dItems[MAX_GROUND_ITEMS][Items];
new ListIt: nodeFound[MAX_PLAYERS];
new pAroundItems[MAX_PLAYERS][9][2];
new dUsingItem[MAX_PLAYERS] = {-1, ...};
new pAcc[MAX_PLAYERS][10][AccessoriesInfos];
new dBomb[MAX_BOMBS][Bomb];
new aObjects[MAX_ITEMS][ObjectsInfos] =
{   //ID OBJET	//AFFICHAGE             //DANS LA MAIN                          			//POSITION AU SOL   			//PRIX-HDV				//NOM OBJET
	{19300, 	0.0, 0.0, 0.0, 1.0, 	0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 					0.0, 0.0, 0.0, 0.0, 			0, TYPE_NOSELL,	false,	"Nothing", "Rien", "Nada", "Nada", "Niente", "Nichts"},//0
	{3082, 		0.0, 0.0, 0.0, 1.0, 	0.0867, 0.0127, -0.0767, 0.0, 0.0, 0.0, 0.5,		90.0, 0.0, 90.0, -0.714, 		5, TYPE_OTHER, false,	"Tent", "Tente", "Espagnol", "Portugais", "Tenda", "Zelt"},
	{11738, 	0.0, 0.0, 0.0, 1.0, 	0.2680, 0.0111, 0.0, 0.0, 270.0, 0.0, 1.0,			0.0, 0.0, 0.0, -0.953, 			3, TYPE_MEDIC, false,	"Medikit", "Medikit", "Medikit", "Medikit", "Medikit", "Medikit"},
	{334,		0.0, 315.0, 0.0, 1.5,	0.0036, 0.0111, 0.0, 0.0, 0.0, 0.0, 1.0,			90.0, 0.0, 100.0, -0.958,		3, TYPE_WEAP, false,	"Nitestick", "Matraque", "Espagnol", "Portugais", "Sfollagente", "Knüppel"},
	{335,		0.0, 315.0, 0.0, 1.0,	0.0036, 0.0111, 0.0, 0.0, 0.0, 0.0, 1.0,			90.0, 0.0, 100.0, -0.958,		3, TYPE_WEAP, false,	"Knife", "Couteau", "Espagnol", "Portugais", "Coltello", "Messer"},
	{336,		0.0, 315.0, 0.0, 2.0,	0.0036, 0.0056, -0.336, 0.0, 0.0, 0.0, 1.0,			90.0, 0.0, 100.0, -0.958,		3, TYPE_WEAP, false,	"Bat", "Batte", "Espagnol", "Portugais", "Italien", "Schläger"},
	{339,		0.0, 315.0, 0.0, 2.0,	0.0036, 0.0056, -0.336, 0.0, 0.0, 0.0, 1.0,			90.0, 0.0, 100.0, -0.958,		4, TYPE_WEAP, false,	"Katana", "Katana", "Espagnol", "Portugais", "Katana", "Schwert"},
	{341,		0.0, 0.0, 60.0, 2.0,	0.0036, -0.0053, -0.0065, 0.0, 0.0, 0.0, 1.0, 		90.0, 0.0, 100.0, -0.958,		5, TYPE_WEAP, false,	"Chainsaw", "Tronconneuse", "Espagnol", "Portugais", "Italien", "Motor-~n~säge"},
	{342,		0.0, 0.0, 60.0, 1.0,	0.0332, -0.0053, -0.0065, 0.0, 0.0, 0.0, 1.0,		0.0, 0.0, 100.0, -0.958,		5, TYPE_WEAP, false,	"Grenade", "Grenade", "Espagnol", "Portugais", "Italien", "Granate"},
	{344,		0.0, 0.0, 60.0, 1.0,	0.0332, -0.0053, -0.0065, 0.0, 0.0, 0.0, 1.0,		0.0, 0.0, 100.0, -0.792,		3, TYPE_WEAP, false,	"Molotovs", "Molotovs", "Molotovs", "Molotovs", "Molotovs", "Molotovs"},
	{346,		0.0, 0.0, 0.0, 1.0,		0.1705, 0.0056, -0.1698, 0.0, 270.0, 0.0, 1.0,		90.0, 0.0, 100.0, -1.026,		8, TYPE_WEAP, false,	"Pistol", "Pistolet", "Espagnol", "Portugais", "Italien", "Pistole"},//10
	{347,		0.0, 0.0, 0.0, 1.25,	0.1705, 0.0056, -0.1698, 0.0, 270.0, 0.0, 1.0,		90.0, 0.0, 100.0, -1.026,		8, TYPE_WEAP, false,	"Silenced pistol", "Silencieux", "Espagnol", "Portugais", "Italien", "Allemand"},
	{348,		0.0, 0.0, 0.0, 1.25,	0.1705, 0.0056, -0.1698, 0.0, 270.0, 0.0, 1.0,		90.0, 0.0, 100.0, -1.026,		9, TYPE_WEAP, false,	"Desert Eagle", "Desert Eagle", "Desert Eagle", "Desert Eagle", "Desert Eagle", "Desert Eagle"},
	{349,		0.0, 315.0, 0.0, 2.0,	0.1705, 0.0056, -0.1698, 0.0, 270.0, 0.0, 1.0,		90.0, 0.0, 100.0, -0.938,		10, TYPE_WEAP, false,	"Shotgun", "Fusil a pompe", "Espagnol", "Portugais", "Italien", "Allemand"},
	{350,		0.0, 315.0, 0.0, 2.0,	0.1705, 0.0056, -0.1698, 0.0, 270.0, 0.0, 1.0,		90.0, 0.0, 100.0, -0.926,		8, TYPE_WEAP, false,	"Sawed-off~n~shotgun", "Fusil a~n~canon scie", "Espagnol", "Portugais", "Italien", "Allemand"},
	{351,		0.0, 315.0, 0.0, 2.0,	0.1705, 0.0056, -0.1698, 0.0, 270.0, 0.0, 1.0,		90.0, 0.0, 100.0, -0.926,		10, TYPE_WEAP, false,	"Spas 12", "Spas 12", "Spas 12", "Spas 12", "Spaz 12", "Spas 12"},
	{352,		0.0, 0.0, 0.0, 1.0,		0.1705, 0.0056, -0.1698, 0.0, 270.0, 0.0, 1.0,		90.0, 0.0, 100.0, -1.026,		8, TYPE_WEAP, false,	"Uzi", "Uzi", "Uzi", "Uzi", "Uzi", "Uzi"},
	{353,		0.0, 315.0, 0.0, 2.0,	0.1705, 0.0056, -0.1698, 0.0, 270.0, 0.0, 1.0,		90.0, 0.0, 100.0, -0.926,		8, TYPE_WEAP, false,	"MP-5", "MP-5", "MP-5", "MP-5", "MP-5", "MP-5"},
	{355,		0.0, 315.0, 0.0, 2.0,	0.1705, 0.0056, -0.1698, 0.0, 270.0, 0.0, 1.0,		90.0, 0.0, 100.0, -0.926,		10, TYPE_WEAP, false,	"AK-47", "AK-47", "AK-47", "AK-47", "AK-47", "AK-47"},
	{356,		0.0, 315.0, 0.0, 2.0,	00.1705, 0.0056, -0.1698, 0.0, 270.0, 0.0, 1.0,		90.0, 0.0, 100.0, -0.926,		10,	TYPE_WEAP, false,	"M4", "M4", "M4", "M4", "M4", "M4"},
	{372,		0.0, 0.0, 0.0, 1.0,		0.1705, 0.0056, -0.1698, 0.0, 270.0, 0.0, 1.0,		90.0, 0.0, 100.0, -1.026,		6, TYPE_WEAP, false,	"Tec-9", "Tec-9", "Tec-9", "Tec-9", "Tec-9", "Tec-9"},//20
	{357,		0.0, 315.0, 0.0, 2.0,	0.1705, 0.0056, -0.1698, 0.0, 270.0, 0.0, 1.0,		90.0, 0.0, 100.0, -0.926,		7, TYPE_WEAP, false,	"Countryrifle", "Fusil de~n~chasse", "Espagnol", "Portugais", "Italien", "Jagtgewehr"},
	{358,		0.0, 315.0, 0.0, 2.0,	0.1705, 0.0056, -0.1698, 0.0, 270.0, 0.0, 1.0,		90.0, 0.0, 100.0, -0.926,		8, TYPE_WEAP, false,	"Sniper", "Sniper", "Sniper", "Sniper", "Sniper", "Sniper"},
	{359,		0.0, 315.0, 0.0, 2.0,	0.0, 0.0, 0.0, 1.7664, 102.8639, 10.3771, 1.0,		90.0, 0.0, 100.0, -0.926,		10, TYPE_WEAP, true,	"Rocket-launcher", "Lance-roquettes", "Espagnol", "Portugais", "Italien", "Allemand"},
	{362,		0.0, 315.0, 0.0, 2.0,	-0.2784, 0.0432, -0.4341, 15.5, 315.0, 10.0, 1.0,	90.0, 0.0, 100.0, -0.926,		10, TYPE_WEAP, true,	"Minigun", "Minigun", "Minigun", "Minigun", "Minigun", "Minigun"},
	{2043,		315.0, 0.0, 90.0, 1.0,	0.0816, 0.0445, 0.1031, 90.0, 270.0, 0.0, 0.5,		0.0, 0.0, 90.0, -0.896,			2, TYPE_WEAP, false,	"7.62", "7.62", "7.62", "7.62", "7.62", "7.62"},
	{3016,		315.0, 0.0, 90.0, 1.0,	0.1495, 0.016, -0.0054, 90.0, 270.0, 0.0, 0.5,		0.0, 0.0, 100.0, -0.853,		2, TYPE_WEAP, false,	"9mm", "9mm", "9mm", "9mm", "9mm", "9mm"},
	{2038,		315.0, 0.0, 90.0, 1.0,	0.1495, 0.0041, -0.0385, 0.0, 270.0, 0.0, 1.0,		270.0, 0.0, 90.0, -0.923,		2, TYPE_WEAP, false,	".50ae", ".50ae", ".50ae", ".50ae", ".50ae", ".50ae"},
	{2041,		315.0, 0.0, 90.0, 1.0,	0.0816, 0.0445, -0.0058, 90.0, 270.0, 0.0, 0.5,		0.0, 0.0, 90.0, -0.896,			2, TYPE_WEAP, false,	"12 Gauge", "12 Gauge", "12 Gauge", "12 Gauge", "12 Gauge", "12 Gauge"},
	{2039,		0.0, 0.0, 135.0, 1.0,	0.0816, 0.0445, -0.0058, 0.0, 270.0, 0.0, 1.0,		0.0, 0.0, 90.0, -0.946,			2, TYPE_WEAP, false,	".222", ".222", ".222", ".222", ".222", ".222"},
	{1650, 		0.0, 0.0, 0.0, 1.0, 	0.1556, 0.0411, -0.0361, 0.0, 270.0, 200.0, 1.0,	90.0, 90.0, 0.0, -0.9275,		2, TYPE_VEH, false,		"Full gas can", "Bidon plein~n~d'essence", "Espagnol", "Portugais", "Italien", "Voller~n~Benzinkanister"},//30
	{1650, 		0.0, 0.0, 0.0, 1.0, 	0.1556, 0.0411, -0.0361, 0.0, 270.0, 200.0, 1.0,	90.0, 90.0, 0.0, -0.9275,		1, TYPE_VEH, false,		"Empty gas~n~can", "Bidon vide~n~d'essence", "Espagnol", "Portugais", "Italien", "Leerer~n~Benzinkanister"},
	{371, 		0.0, 0.0, 0.0, 1.5, 	0.36, 0.0, 0.0, 0.0, 270.0, 0.0, 1.0,				270.0, 90.0, 0.0, -0.75,		1, TYPE_OTHER, false,	"Czech Vest", "Czech Vest", "Czech Vest", "Czech Vest", "Czech Vest", "Czech Vest"},
	{3026, 		0.0, 0.0, 0.0, 1.0, 	0.5299, 0.0, 0.0, 0.0, 180.0, 0.0, 1.0,				270.0, 90.0, 0.0, -1.003,		2, TYPE_OTHER, false,	"Assault Pack", "Assault Pack", "Assault Pack", "Assault Pack", "Assault Pack", "Assault Pack"},
	{1310, 		0.0, 0.0, 0.0, 1.0, 	0.5531, 0.0, 0.0, 90.0, 270.0, 90.0, 1.0,			270.0, 90.0, 0.0, -0.875,		3, TYPE_OTHER, false,	"Alice Pack", "Alice Pack", "Alice Pack", "Alice Pack", "Alice Pack", "Alice Pack"},
	{19559, 	0.0, 0.0, 180.0, 1.0, 	0.1831, -0.1331, 0.0, 90.0, 270.0, 90.0, 1.0,		270.0, 90.0, 0.0, -1.008,		5, TYPE_OTHER, false,	"Coyote Pack", "Coyote Pack", "Coyote Pack", "Coyote Pack", "Coyote Pack", "Coyote Pack"},
	{11736,		0.0, 0.0, 0.0, 1.0,		0.2648, 0.0556, 0.0, 90.0, 0.0, 0.0, 1.0,			0.0, 0.0, 0.0, -0.973,			1, TYPE_MEDIC, false,	"Bandages", "Bandages", "Espagnol", "Portugais", "Italien", "Binden"},
	{2709,		0.0, 0.0, 0.0, 1.0,		0.0684, 0.0556, 0.0, 180.0, 0.0, 0.0, 0.5,			0.0, 0.0, 0.0, -0.973,			1, TYPE_MEDIC, false,	"Painkiller", "Anti-douleur", "Espagnol", "Portugais", "Italien", "Medikament"},
	{1580,		90.0, 0.0, 0.0, 1.0,	0.0119, 0.0072, 0.0, 270.0, 0.0, 270.0, 0.5,		0.0, 0.0, 0.0, -1.022,			1, TYPE_MEDIC, false,	"Bloodbag", "Poche de~n~sang", "Espagnol", "Portugais", "Italien", "Blutbeutel"},
	{1241,		0.0, 135.0, 180.0, 1.0,	0.0895, 0.058, 0.0, 165.0, 0.0, 132.0, 0.5,			0.0, 120.0, 0.0, -0.943,		2, TYPE_MEDIC, false,	"Cofein pill", "Cafeine", "Cafeina", "Portugais", "Italien", "Koffeïn"},
	//#if defined DOWNLOAD
	//{-1000,		0.0, 0.0, 0.0, 1.0, 	0.0528, 0.0483, 0.0688, 180.0, 0.0, 0.0, 0.7,		0.0, 0.0, 0.0, -1.0,			1, TYPE_OTHER, false,	"Empty bottle", "Bouteille~n~vide", "Espagnol", "Portugais", "Italien", "Leere~n~Flasche"},//40
	//#else
	{1484,		0.0, 0.0, 0.0, 1.0,		-0.0335, 0.0533, -0.0897, 190.0, 15.0, 328.0, 1.0,	350.0, 31.0, 6.0, -0.8101,		1, TYPE_OTHER, false,	"Empty bottle", "Bouteille~n~vide", "Espagnol", "Portugais", "Italien", "Leere~n~Flasche"},//40
	//#endif
	{18970,		0.0, 0.0, 90.0, 1.0,	0.229, 0.0, 0.0, 90.0, 0.0, 0.0, 1.0,				0.0, 10.0, 0.0, -0.961,			2, TYPE_CLOTHE, false,	"Leopard hat", "Chapeau~n~leopard", "Espagnol", "Portugais", "Italien", "Leopardhut"},
	{18973, 	0.0, 0.0, 90.0, 1.0,	0.229, 0.0, 0.0, 90.0, 0.0, 0.0, 1.0,				0.0, 10.0, 0.0, -0.961,			2, TYPE_CLOTHE,	false,	"Leopard hat", "Chapeau~n~leopard", "Espagnol", "Portugais", "Italien", "Leopardhut"},
	{18968, 	0.0, 0.0, 90.0, 1.0,	0.229, 0.0, 0.0, 90.0, 0.0, 0.0, 1.0,				0.0, 10.0, 0.0, -0.961,			2, TYPE_CLOTHE, false,	"Bob hat", "Chapeau~n~bob", "Espagnol", "Portugais", "Italien", "Bobhut"},
	{18971, 	0.0, 0.0, 90.0, 1.0,	0.229, 0.0, 0.0, 90.0, 0.0, 0.0, 1.0,				0.0, 10.0, 0.0, -0.961,			2, TYPE_CLOTHE,	false,	"Disco hat", "Chapeau~n~disco", "Espagnol", "Portugais", "Italien", "Discohut"},
	{19528,		90.0, 270.0, 0.0, 1.0,	0.2683, 0.0406, 0.0, 0.0, 90.0, 270.0, 1.0,			0.0, 270.0, 0.0, -0.961,		2, TYPE_CLOTHE, false,	"Witch hat", "Chapeau de~n~sorciere", "Espagnol", "Portugais", "Italien", "Hexenhut"},
	{18924,		85.0, 25.0, 45.0, 1.0,	0.1703, 0.0649, 0.0, 54.149, 270.0, 180.0, 1.0,		0.0, 270.0, 0.0, -0.961,		2, TYPE_CLOTHE,	false,	"Beret", "Beret", "Espagnol", "Portugais", "Italien", "Berett"},
	{19106, 	0.0, 270.0, 0.0, 1.0,	0.185, 0.0804, 0.0, 0.0, 0.0, 90.0, 1.0,			0.0, 270.0, 0.0, -0.961, 		5, TYPE_CLOTHE,	false,	"Soldier~n~helmet", "Casque~n~militaire", "Espagnol", "Portugais", "Italien", "Soldatenhelm"},
	{19107, 	0.0, 270.0, 0.0, 1.0,	0.185, 0.0804, 0.0, 0.0, 0.0, 90.0, 1.0,			0.0, 180.0, 0.0, -0.961, 		5, TYPE_CLOTHE,	false,	"Marine~n~helmet", "Casque~n~de marin", "Espagnol", "Portugais", "Italien", "Marinehelm"},
	{18927,		270.0, 0.0, 270.0, 1.0,	0.158, 0.0608, 0.0, 180.0, 0.0, 270.0, 1.0,			0.0, 270.0, 0.0, -0.95,			2, TYPE_CLOTHE,	false,	"Blue cap", "Casquette~n~bleue", "Espagnol", "Portugais", "Italien", "Blaue~n~Schirmmütze"},
	{18930,		270.0, 0.0, 270.0, 1.0,	0.158, 0.0608, 0.0, 180.0, 0.0, 270.0, 1.0,			0.0, 270.0, 0.0, -0.95,			2, TYPE_CLOTHE,	false,	"Red cap", "Casquette~n~rouge", "Espagnol", "Portugais", "Italien", "Rote~n~Schirmmütze"},//50
	{18949, 	270.0, 0.0, 270.0, 1.0,	0.1956, 0.0261, 0.0, 180.0, 90.0, 70.0, 1.0,		0.0, 270.0, 0.0, -0.95,			1, TYPE_CLOTHE,	false,	"Green~n~bowler", "Chapeau~n~melon vert", "Espagnol", "Portugais", "Italien", "Grüne~n~melone"},
	{19006,		0.0, 0.0, 90.0, 1.0,	0.1719, 0.0548, 0.0, 67.5, 0.0, 270.0, 1.0,			90.0, 90.0, 0.0, -0.95,			1, TYPE_CLOTHE,	false,	"Red~n~Predators", "Predators~n~rouges", "Espagnol", "Portugais", "Italien", "Allemand"},
	{19007,		0.0, 0.0, 90.0, 1.0,	0.1719, 0.0548, 0.0, 67.5, 0.0, 270.0, 1.0,			90.0, 90.0, 0.0, -0.95,			1, TYPE_CLOTHE,	false,	"Yellow~n~Predators", "Predators~n~jaunes", "Espagnol", "Portugais", "Italien", "Allemand"},
	{19008,		0.0, 0.0, 90.0, 1.0,	0.1719, 0.0548, 0.0, 67.5, 0.0, 270.0, 1.0,			90.0, 90.0, 0.0, -0.95,			1, TYPE_CLOTHE,	false,	"Green~n~Predators", "Predators~n~vertes", "Espagnol", "Portugais", "Italien", "Allemand"},
	{19009,		0.0, 0.0, 90.0, 1.0,	0.1719, 0.0548, 0.0, 67.5, 0.0, 270.0, 1.0,			90.0, 90.0, 0.0, -0.95,			1, TYPE_CLOTHE,	false,	"Blue~n~Predators", "Predators~n~bleues", "Espagnol", "Portugais", "Italien", "Allemand"},
	{19022,		0.0, 0.0, 90.0, 1.0,	0.1719, 0.0548, 0.0, 67.5, 0.0, 270.0, 1.0,			90.0, 90.0, 0.0, -0.95,			1, TYPE_CLOTHE,	false,	"Black~n~Aviators", "Aviators~n~noires", "Espagnol", "Portugais", "Italien", "Allemand"},
	{19023,		0.0, 0.0, 90.0, 1.0,	0.1719, 0.0548, 0.0, 67.5, 0.0, 270.0, 1.0,			90.0, 90.0, 0.0, -0.95,			1, TYPE_CLOTHE,	false,	"Blue~n~Aviators", "Aviators~n~bleues", "Espagnol", "Portugais", "Italien", "Allemand"},
	{19024,		0.0, 0.0, 90.0, 1.0,	0.1719, 0.0548, 0.0, 67.5, 0.0, 270.0, 1.0,			90.0, 90.0, 0.0, -0.95,			1, TYPE_CLOTHE,	false,	"Purple~n~Aviators", "Aviators~n~mauves", "Espagnol", "Portugais", "Italien", "Allemand"},
	{19025,		0.0, 0.0, 90.0, 1.0,	0.1719, 0.0548, 0.0, 67.5, 0.0, 270.0, 1.0,			90.0, 90.0, 0.0, -0.95,			1, TYPE_CLOTHE,	false,	"Pink~n~Aviators", "Aviators~n~roses", "Espagnol", "Portugais", "Italien", "Allemand"},
	{19027,		0.0, 0.0, 90.0, 1.0,	0.1719, 0.0548, 0.0, 67.5, 0.0, 270.0, 1.0,			90.0, 90.0, 0.0, -0.95,			1, TYPE_CLOTHE,	false,	"Orange~n~Aviators", "Aviators~n~oranges", "Espagnol", "Portugais", "Italien", "Allemand"},//60
	{19028,		0.0, 0.0, 90.0, 1.0,	0.1719, 0.0548, 0.0, 67.5, 0.0, 270.0, 1.0,			90.0, 90.0, 0.0, -0.95,			1, TYPE_CLOTHE,	false,	"Yellow~n~Aviators", "Aviators~n~jaunes", "Espagnol", "Portugais", "Italien", "Allemand"},
	{19033,		0.0, 0.0, 90.0, 1.0,	0.1719, 0.0548, 0.0, 67.5, 0.0, 270.0, 1.0,			90.0, 90.0, 0.0, -0.95,			1, TYPE_CLOTHE,	false,	"Black~n~Wayfarers", "Wayfarers~n~noires", "Espagnol", "Portugais", "Italien", "Allemand"},
	{1098,		0.0, 0.0, 90.0, 1.0,	0.0572, 0.0685, 0.1781, 12.6294, 90.0, 90.0, 0.7,	0.0, 0.0, 90.0, -0.5079,		2, TYPE_VEH, true,		"Wheel", "Roue", "Espagnol", "Portugais", "Italien", "Rad"},
	{19917,		330.0, 0.0, 25.0, 1.0,	0.0652, -0.0213, 0.1633, 102.6, 180.0, 18.35, 0.5,	0.0, 0.0, 0.0, -1.0189,			5, TYPE_VEH, true,		"Engine", "Moteur", "Espagnol", "Portugais", "Italien", "Motor"},
	{19472,		0.0, 90.0, 0.0, 1.0,	0.0571, 0.0111, 0.0, 0.0, 247.0, 310.0, 1.0,		90.0, 0.0, 90.0, -0.95,			1, TYPE_CLOTHE, false,	"Gas mask", "Masque a~n~gaz", "Espagnol", "Portugais", "Italien", "Gasmaske"},
	{2880,		0.0, 0.0, 0.0, 1.0,		0.159, 0.0719, 0.1024, 90.0, 0.0, 180.0, 1.0,		335.0, 270.0, 0.0, -0.9335,		2, TYPE_FOOD, false,	"Burger", "Burger", "Espagnol", "Portugais", "Hamburger", "Hamburger"},
	{2881,		180.0,315.0,270.0,1.0,	0.159, 0.1728, 0.0607, 90.0, 90.0, 180.0, 1.0,		335.0, 270.0, 0.0, -0.9335,		2, TYPE_FOOD, false,	"Pizza slice", "Part de~n~pizza", "Espagnol", "Portugais", "Pezzo di~n~pizza", "Stück~n~pizza"},
	{19582, 	90.0, 0.0, 0.0, 1.0, 	0.1284, 0.0594, 0.0, 90.0, 0.0, 0.0, 1.0,			0.0, 0.0, 0.0, -0.9925,			3, TYPE_FOOD, false,	"Raw steak", "Steak cru", "Espagnol", "Portugais", "Italien", "Rohes~n~Steak"},
	{19882, 	90.0, 0.0, 0.0, 1.0, 	0.1284, 0.0594, 0.0, 90.0, 0.0, 0.0, 1.0,			0.0, 0.0, 0.0, -0.9925,			3, TYPE_FOOD, false,	"Cooked~n~steak", "Steak cuit", "Espagnol", "Portugais", "Italien", "Gebratenes~n~Steak"},
	{19570, 	0.0, 0.0, 0.0, 1.0, 	0.0528, 0.0483, 0.0688, 180.0, 0.0, 0.0, 0.7,		0.0, 0.0, 0.0, -1.0,			1, TYPE_FOOD, false,	"Milk", "Lait", "Leche", "Portugais", "Latte", "Milch"},//70
	{19793,		0.0, 0.0, 0.0, 1.0,		0.0528, 0.0483, -0.05, 0.0, 90.0, 0.0, 0.7,			0.0, 0.0, 0.0, -0.9139,			1, TYPE_RSRC, false,	"Log", "Bois", "Espagnol", "Portugais", "Legno", "Holz"},
	{19574,		315.0, 0.0, 0.0, 1.0,	0.0805, 0.0497, 0.0, 0.0, 0.0, 0.0, 1.0,			0.0, 0.0, 0.0, -0.9609,			1, TYPE_FOOD, false,	"Orange", "Orange", "Naranja", "Portugais", "Arancia", "Apfelsine"},
	{19575,		315.0, 0.0, 0.0, 1.0,	0.0805, 0.0497, 0.0, 0.0, 0.0, 0.0, 1.0,			0.0, 0.0, 0.0, -0.9609,			1, TYPE_FOOD, false,	"Apple", "Pomme", "Manzana", "Portugais", "Mela", "Apfel"},
	{19577,		315.0, 0.0, 0.0, 1.0,	0.0805, 0.0497, 0.0, 0.0, 0.0, 0.0, 1.0,			0.0, 0.0, 0.0, -0.9609,			1, TYPE_FOOD, false,	"Tomato", "Tomate", "Tomate", "Portugais", "Pomodoro", "Tomate"},
	{18916,		90.0, 180.0, 0.0, 1.0,	0.0269, 0.0336, 0.0, 90.0, 0.0, 90.0, 1.0,			90.0, 0.0, 90.0, -0.95,			1, TYPE_CLOTHE, false,	"Plaid~n~bandana", "Bandana~n~a carreaux", "Espagnol", "Portugais", "Italien", "Karriertes~n~band"},
	{18911,		90.0, 180.0, 0.0, 1.0,	0.0269, 0.0336, 0.0, 90.0, 0.0, 90.0, 1.0,			90.0, 0.0, 90.0, -0.95,			1, TYPE_CLOTHE, false,	"Skull~n~bandana", "Bandana~n~cranes", "Espagnol", "Portugais", "Italien", "Allemand"},
	{18913,		90.0, 180.0, 0.0, 1.0,	0.0269, 0.0336, 0.0, 90.0, 0.0, 90.0, 1.0,			90.0, 0.0, 90.0, -0.95,			1, TYPE_CLOTHE,	false,	"Green~n~bandana", "Bandana~n~vert", "Espagnol", "Portugais", "Italien", "Allemand"},
	{18912,		90.0, 180.0, 0.0, 1.0,	0.0269, 0.0336, 0.0, 90.0, 0.0, 90.0, 1.0,			90.0, 0.0, 90.0, -0.95,			1, TYPE_CLOTHE,	false,	"Black~n~bandana", "Bandana~n~noir", "Espagnol", "Portugais", "Italien", "Allemand"},
	{18914,		90.0, 180.0, 0.0, 1.0,	0.0269, 0.0336, 0.0, 90.0, 0.0, 90.0, 1.0,			90.0, 0.0, 90.0, -0.95,			2, TYPE_CLOTHE,	false,	"Army~n~bandana", "Bandana~n~soldat", "Espagnol", "Portugais", "Italien", "Allemand"},
	{1812, 		135.0, 0.0, 0.0, 1.0,	0.259, -0.393, 0.997, 279.2831, 349.0, 0.0, 0.7,	0.0, 0.0, 0.0, -0.987,			15, TYPE_OTHER,	true,	"Shitty bed", "Lit miteux", "Espagnol", "Portugais", "Italien", "Matratze"},//80
	//#if defined DOWNLOAD
	//{-1002, 	0.0, 0.0, 0.0, 1.0, 	0.0528, 0.0483, 0.0688, 180.0, 0.0, 0.0, 0.7,		0.0, 0.0, 0.0, -1.0,			1, TYPE_FOOD, false,	"Water bottle", "Bouteille~n~d'eau", "Bottela de~n~agua", "Portugais", "Italien", "Wasser~n~flasche"},
	//#else
	{1669, 		0.0, 0.0, 35.0, 1.0,	0.08, 0.06, -0.07, 0.0, 180.0, 0.0, 1.0,			0.0, 0.0, 0.0, -0.8101,			1, TYPE_FOOD, false,	"Water bottle", "Bouteille~n~d'eau", "Bottela de~n~agua", "Portugais", "Italien", "Wasser~n~flasche"},
	//#endif
	{2226, 		0.0, 0.0, 180.0, 1.0,	0.0, 0.0, 0.0, 0.0, 0.0, 180.0, 1.0,				0.0, 0.0, 180.0, -1.0,			8, TYPE_OTHER, false,	"Boombox", "Boombox", "Boombox", "Boombox", "Boombox", "Boombox"},
	{19515, 	0.0, 270.0, 0.0, 1.0,	0.2796, 0.0, 0.0, 0.0, 180.0, 0.0, 1.0,				0.0, 0.0, 0.0, -1.0118,			20, TYPE_CLOTHE, false,	"SWAT Armour", "Gilet SWAT", "Espagnol", "Portugais", "Italien", "Schutzweste"},
	{19515, 	0.0, 270.0, 0.0, 1.0,	0.2796, 0.0, 0.0, 0.0, 180.0, 0.0, 1.0,				0.0, 0.0, 0.0, -1.0118,			4, TYPE_CLOTHE, false,	"Shot~n~SWAT Armour", "Gilet SWAT~n~perce", "Espagnol", "Portugais", "Italien", "Zerschossene~n~Schutzweste"},
	{805,		0.0, 0.0, 0.0, 1.0,		0.1862, 0.0, 0.0, 90.0, 0.0, 0.0, 0.2,				90.0, 90.0, 0.0, -0.4628, 		2, TYPE_CLOTHE,	 false,	"Camo", "Camouflage", "Espagnol", "Portugais", "Italien", "Tarnung"},
	{1599,		0.0, 0.0, 90.0, 1.0,	0.228, 0.0283, 0.0, 180.0, 180.0, 90.0, 0.5,		0.0, 106.75, 90.0, -0.91,		1, TYPE_FOOD, false,	"Fish", "Poisson", "Espagnol", "Portugais", "Pesce", "Fisch"},
	{1600,		0.0, 0.0, 90.0, 1.0,	0.228, 0.0283, 0.0, 180.0, 180.0, 90.0, 0.5,		0.0, 106.75, 90.0, -0.91,		1, TYPE_FOOD, false,	"Cooked fish", "Poisson cuit", "Espagnol", "Portugais", "Pesce cotto", "Gebratener~n~fisch"},
	{19630,		0.0, 0.0, 0.0, 1.0,		0.0842, 0.0381, 0.0, 0.0, 270.0, 0.0, 1.0,			270.0, 0.0, 0.0, -0.993,		1, TYPE_FOOD, false,	"Bream", "Breme", "Espagnol", "Portugais", "Italien", "Allemand"},
	{19630,		0.0, 0.0, 0.0, 1.0,		0.0842, 0.0381, 0.0, 0.0, 270.0, 0.0, 1.0,			270.0, 0.0, 0.0, -0.993,		2, TYPE_FOOD, false,	"Cooked Bream", "Breme cuite", "Espagnol", "Portugais", "Italien", "Allemand"},
	{18632,		0.0, 0.0, 0.0, 1.0,		0.0842, 0.0381, 0.0, 41.8433, 337.5301, 0.0, 1.0,	0.0, 90.0, 0.0, -0.921,			10, TYPE_TOOL, false,	"Fishing rod", "Canne a~n~peche", "Espagnol", "Portugais", "Italien", "Angel"},//90
	{19998,		0.0, 0.0, 0.0, 1.0,		0.0606, 0.0435, 0.0, 180.0, 0.0, 0.0, 1.0,			90.0, 90.0, 0.0, -0.9054,		5, TYPE_TOOL, false,	"Lighter", "Briquet", "Espagnol", "Portugais", "Accendino", "Feuerzeug"},
	{19574,		315.0, 0.0, 0.0, 1.0,	0.0805, 0.0497, 0.0, 0.0, 0.0, 0.0, 1.0,			0.0, 0.0, 0.0, -0.9609,			1, TYPE_FOOD, false,	"Orange seeds", "Graines~n~d'orange", "Semillas de~n~naranja", "Portugais", "Semi di~n~arancia", "Orange~n~kern"},
	{19575,		315.0, 0.0, 0.0, 1.0,	0.0805, 0.0497, 0.0, 0.0, 0.0, 0.0, 1.0,			0.0, 0.0, 0.0, -0.9609,			1, TYPE_FOOD, false,	"Apple seeds", "Graines~n~de pomme", "Semillas de~n~manzana", "Portugais", "Semi di~n~mela", "Apfel~n~saat"},
	{19577,		315.0, 0.0, 0.0, 1.0,	0.0805, 0.0497, 0.0, 0.0, 0.0, 0.0, 1.0,			0.0, 0.0, 0.0, -0.9609,			1, TYPE_FOOD, false,	"Tomato seeds", "Graines~n~de tomate", "Semillas de~n~tomate", "Portugais", "Semi di~n~pomodoro", "Tomate~n~saat"},
	{3134,		0.0, 0.0, 0.0, 1.0,		0.0, 0.1165, 0.1425, 90.0, 317.428, 340.638, 0.5,	0.0, 90.0, 0.0, -0.578,			30, TYPE_TOOL, true,	"Water~n~collector", "Recuperateur~n~d'eau", "Espagnol", "Portugais", "Italien", "Wasser-~n~kollector"},
	{19627,		90.0, 0.0, 0.0, 1.0,	0.0827, 0.0275, 0.0, 90.0, 0.0, 270.0, 1.5,			0.0, 0.0, 0.0, -0.987,			25, TYPE_TOOL, false,	"Wrench", "Cle anglaise", "Espagnol", "Portugais", "Italien", "Gaszange"},
	{2332,		0.0, 0.0, 180.0, 1.0,	0.004, 0.1746, 0.24, 286.3804, 350.0, 107.657, 0.5,	300.0, 0.0, 0.0, -0.964,		1, TYPE_TOOL, true,		"Safe", "Coffre fort", "Espagnol", "Portugais", "Italien", "Safe"},
	//#if defined DOWNLOAD
	//{-1001,		0.0, 0.0, 0.0, 1.0, 	0.0528, 0.0483, 0.0688, 180.0, 0.0, 0.0, 0.7,		0.0, 0.0, 0.0, -1.0,			2, TYPE_VEH, false,		"Bottle full~n~of gas",	"Bouteille~n~d'essence", "Bottela de~n~gasolino", "Portugais", "Italien", "Gasflasche"},
	//#else
	{1544, 		0.0, 0.0, 0.0, 1.0, 	0.08, 0.06, -0.07, 0.0, 180.0, 0.0, 1.0,			0.0, 0.0, 0.0, -0.8101,			2, TYPE_VEH, false,		"Bottle full~n~of gas",	"Bouteille~n~d'essence", "Bottela de~n~gasolino", "Portugais", "Italien", "Gasflasche"},
	//#endif
	{19602, 	90.0, 0.0, 0.0, 1.0, 	0.1686, 0.0486, 0.0, 90.0, 0.0, 0.0, 1.0,			0.0, 0.0, 0.0, -0.7,			5, TYPE_WEAP, false,	"Landmine",	"Mine", "Espagnol", "Portugais", "Italien", "Mine"},
	{1252, 		0.0, 0.0, 0.0, 1.0, 	0.1686, 0.0486, 0.0, 0.0, 0.0, 0.0, 0.7,			90.0, 0.0, 0.0, -0.9,			5, TYPE_WEAP, false,	"Timerbomb", "Bombe a~n~timer", "Espagnol", "Portugais", "Italien", "Zeitbombe"},//100
	{19801,		0.0, 0.0, 0.0, 1.0,		0.1808, 0.0216, 0.0, 0.0, 90.0, 0.0, 1.0,			0.0, 0.0, 0.0, -0.886,			2, TYPE_CLOTHE, false, 	"Hood", "Cagoule", "Capucha", "Capô", "Cappuccio", "Kapuze"},
	{11718,		0.0, 0.0, 0.0, 1.0,		0.3206, -0.0131, -0.265, 270.0, 230.0, 43.38, 1.0,	0.0, 0.0, 0.0, -1.0,			8, TYPE_TOOL, false, 	"Pan", "Casserole", "Espagnol", "Portugais", "Italien", "Kochtopf"},
	{19846,		90.0, 0.0, 0.0, 1.0,	0.1418, 0.0251, 0.0, 71.8962, 0.0, 90.0, 0.5,		0.0, 90.0, 0.0, -1.1611,		3, TYPE_RSRC, false, 	"Metal", "Metal", "Espagnol", "Portugais", "Italien", "Schrott"},
	{19843,		90.0, 0.0, 0.0, 1.0,	-0.05, 0.2573, 0.1691, 270.3665, 55.3, 193.0, 0.7,	0.0, 90.0, 0.0, -1.1611,		5, TYPE_RSRC, true,		"Metal plate", "Plaque de~n~metal", "Espagnol", "Portugais", "Italien", "Metallplatte"},
	{19433,		90.0, 90.0, 0.0, 1.0,	0.2645, 0.0362, 0.1021, 11.0, 0.0, 90.0, 0.5,		0.0, 0.0, 0.0, -2.604,			2, TYPE_RSRC, true,		"Plank", "Planche", "Espagnol", "Portugais", "Italien", "Brett"},
	{19804,		90.0, 0.0, 270.0, 0.7,	0.0863, 0.0311, -0.0024, 0.0, 270.0, 0.0, 1.0,		0.0, 180.0, 90.0, -1.0131,		5, TYPE_TOOL, false,	"Lock", "Serrure", "Espagnol", "Portugais", "Italien", "Schloss"},
	{1575,		0.0, 0.0, 0.0, 1.0,		0.0834, 0.0682, -0.0218, 60.6669, 0.0, 90.0, 0.3,	0.0, 0.0, 0.0, -0.798,			3, TYPE_RSRC, false,	"Gunpowder", "Poudre", "Espagnol", "Portugais", "Italien", "Schiesspulver"},
	{2891,		0.0, 0.0, 0.0, 1.0,		0.2717, 0.1273, -0.1037, 43.4869, 0.0, 0.0, 1.0, 	0.0, 0.0, 0.0, -1.0,			1, TYPE_FOOD, false,	"Flour", "Farine", "Espagnol", "Portugais", "Italien", "Mehl"},
	{19580, 	90.0, 180.0, 0.0, 1.0, 	0.2621, 0.0268, 0.0, 73.9384, 0.0, 0.0, 1.0, 		0.0, 0.0, 0.0, -0.988,			3, TYPE_FOOD, false,	"Pizza", "Pizza", "Pizza", "Pizza", "Pizza", "Pizza"},
	{19579, 	90.0, 0.0, 0.0, 1.0, 	0.14, 0.0378, 0.0, 76.4778, 0.0, 0.0, 1.3,			0.0, 0.0, 0.0, -1.0,			2, TYPE_FOOD, false,	"Bread", "Pain", "Pan", "Portugais", "Pan", "Brodt"},//110
	{19366, 	90.0, 90.0, 0.0, 1.0,	0.6666, 0.0585, 0.0, 11.2624, 0.0, 90.0, 0.5, 		0.0, 90.0, 0.0, -1.089,			5, TYPE_OTHER, true,	"Wall", "Mur", "Espagnol", "Portugais", "Paretto", "Mauer"},
	{19802, 	90.0, 0.0, 90.0, 1.0,	-0.0415, 0.1514, -0.7014, 11.7901, 0.0, 20.0, 0.5,	90.0, 0.0, 90.0, -0.998,		10,	TYPE_OTHER,	true,	"Door", "Porte", "Puerta", "Porta", "Porta", "Tur"},
	{3017, 		0.0, 0.0, 0.0, 1.0,		0.1654, 0.1, 0.0, 0.0, 270.0, 0.0, 0.7, 			0.0, 0.0, 0.0, -0.985,			15, TYPE_OTHER,	false,	"Construction~n~plans", "Plans", "Espagnol", "Portugais", "Italien", "Allemand"},
	{19621,		0.0, 0.0, 0.0, 1.0, 	0.0981, 0.0275, 0.0, 330.0, 180.0, 270.0, 1.0,		0.0, 0.0, 0.0, -0.906,			0, TYPE_NOSELL,	false,	"Can", "Burette", "Espagnol", "Portugais", "Italien", "Ölkanne"},
	{19837,		0.0, 0.0, 0.0, 1.0,		0.0921, -0.0223, 0.0516, 180.0, 0.0, 0.0, 0.5,		0.0, 0.0, 0.0, -1.0,			1, TYPE_OTHER, false,	"Wheat seeds", "Graines~n~de ble", "Semillas de~n~trigo", "Portugais", "Semi di~n~grano", "Weizen~n~saat"},
	{1453,		0.0, 90.0, 0.0, 1.0,	0.0935, 0.0277, 0.0, 0.0, 0.0, 0.0, 0.3,			0.0, 0.0, 0.0, -2.018,			1, TYPE_OTHER, false,	"Wheat", "Ble", "Trigo", "Portugais", "Grano", "Weizen"},
	{920,		0.0, 0.0, 0.0, 1.0,		0.0593, 0.2803, 0.3084, 98.0, 180.0, 113.38, 0.6,	0.0, 0.0, 270.0, -0.516,		30, TYPE_TOOL, true,	"Shredder", "Broyeur", "Espagnol", "Portugais", "Italien", "Mühle"},
	{19563,		0.0, 0.0, 0.0, 1.0,		0.1243, 0.0455, 0.1193, 0.0, 180.0, 0.0, 1.0,		0.0, 0.0, 270.0, -1.0,			1, TYPE_FOOD, false,	"Orange~n~juice", "Jus d'orange", "Espagnol", "Portugais", "Italien", "Orangesaft"},
	{19564,		0.0, 0.0, 0.0, 1.0,		0.1243, 0.0455, 0.1193, 0.0, 180.0, 0.0, 1.0,		0.0, 0.0, 270.0, -1.0,			1, TYPE_FOOD, false,	"Apple~n~juice", "Jus de~n~pomme", "Espagnol", "Portugais", "Italien", "Apfelsaft"},
	{19585,		0.0, 0.0, 0.0, 1.0,		0.0837, -0.0482, 0.0, 90.0, 270.0, 0.0, 0.7,		0.0, 0.0, 0.0, -0.759,			3, TYPE_FOOD, false,	"Fish soup", "Soupe au~n~poisson", "Espagnol", "Portugais", "Minestre~n~di pesce", "Fischsuppe"},//120
	{19811,		0.0, 0.0, 0.0, 1.0,		0.1923, 0.0, 0.0, 90.0, 0.0, 0.0, 1.0,				0.0, 0.0, 0.0, -0.94,			2, TYPE_FOOD, false,	"Meat~n~sandwich", "Sandwich a~n~la viande", "Espagnol", "Portugais", "Italien", "Fleischbrot"},
	{19317,		0.0, 1.0, 1.0, 1.0,		-0.0447, 0.2862, 0.1587, 180.0, 150.0, 326.85, 1.0,	0.0, 0.0, 0.0, 0.0,				0, TYPE_NOSELL, false,	"Bass guitar", "Basse", "Espagnol", "Portugais", "Italien", "Bassguitarre"},
	{801,		0.0, 0.0, 0.0, 1.0,		0.0, 0.0, 0.0, 0.0, 90.0, 0.0, 0.2,					0.0, 0.0, 0.0, 0.0,				0, TYPE_NOSELL, false,	"Fern", "Fougere", "Espagnol", "Portugais", "Italien", "Farnkraut"},
	{1602,		0.0, 0.0, 0.0, 1.0,		0.05, 0.0, 0.0, 0.0, 270.0, 0.0, 0.7,				0.0, 0.0, 0.0, 0.0,				0, TYPE_NOSELL,	false,	"Jellyfish", "Meduse", "Espagnol", "Portugais", "Italien", "Qualle"},
	{2901, 		0.0, 0.0, 0.0, 1.0, 	0.2156, 0.2, 0.0, 0.0, 90.0, 0.0, 1.0,				0.0, 0.0, 0.0, 0.0,				0, TYPE_NOSELL, true, 	"Ballot", "Fagot", "Espagnol", "Portugais", "Italien", "Grassballen"},
	//#if defined DOWNLOAD
	//{-1002,		0.0, 0.0, 0.0, 1.0, 	0.0528, 0.0483, 0.0688, 180.0, 0.0, 0.0, 0.7,		0.0, 0.0, 0.0, -1.0,			1, TYPE_FOOD, false,	"Undrinkable~n~water", "Eau non~n~potable", "Aqua no~n~potable", "Portugais", "Italien", "Nicht~n~trinkwasser"},
 	//#else
	{1669, 		0.0, 0.0, 35.0, 1.0,	0.08, 0.06, -0.07, 0.0, 180.0, 0.0, 1.0,			0.0, 0.0, 0.0, -0.8101,			1, TYPE_FOOD, false,	"Undrinkable~n~water", "Eau non~n~potable", "Aqua no~n~potable", "Portugais", "Italien", "Nicht~n~trinkwasser"},
	//#endif
	{2328,		180.0, 270.0, 0.0, 0.5,	1.3, 0.0, 0.2, 90.0, 180.0, 270.0, 1.0,				0.0, 0.0, 0.0, -1.0,			25, TYPE_TOOL, true,	"Gunrack", "Etagere", "Espagnol", "Portugais", "Italien", "Regal"},
	{11725,		0.0, 0.0, 0.0, 1.0,		0.0, 0.23, 0.25, 282.0, 0.0, 90.0, 1.0,				0.0, 0.0, 0.0, -0.6119,			35, TYPE_TOOL, true,	"Brazier", "Brasero", "Brasero", "Portugais", "Italien", "Kohlebecken"},
	{19273,		0.0, 0.0, 0.0, 1.0,		0.2, 0.055, 0.0, 0.0, 90.0, 0.0, 0.5,				270.0, 0.0, 0.0, -0.9961,		50, TYPE_TOOL, false,	"Keycode", "Codeur", "Espagnol", "Portugais", "Italien", "Allemand"},
	{2144,		0.0, 0.0, 0.0, 1.0,		0.2, 0.0, 0.1, 280.0, 345.0, 0.0, 0.7,				270.0, 0.0, 0.0, -0.9,			50, TYPE_TOOL, true,	"Fridge", "Frigo", "Espagnol", "Portugais", "Italien", "Allemand"},//130
 	{2976, 		0.0, 0.0, 330.0, 1.0, 	0.18, 0.0, -0.2, 0.0, 0.0, 0.0, 0.5,				0.0, 0.0, 0.0, -0.991, 			2, TYPE_OTHER, false, 	"u238", "u238", "u238", "u238", "u238", "u238"},
 	{18888, 	0.0, 0.0, 330.0, 1.0, 	0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,					0.0, 0.0, 0.0, -1.0, 			1, TYPE_OTHER, false, 	"Exp", "Exp", "Exp", "Exp", "Exp", "Exp"},
 	{2034, 		0.0, 0.0, 0.0, 1.0,		0.17, 0.05, -0.05, 270.0, 0.0, 0.0, 1.0,			90.0, 0.0, 0.0, -0.955,			5, TYPE_WEAP, false,	"Grip", "Crosse", "Espagnol", "Portugais", "Italien", "Allemand"},
 	{2033, 		0.0, 0.0, 0.0, 1.0,		0.1, 0.05, -0.05, 270.0, 0.0, 90.0, 1.0,			90.0, 0.0, 0.0, -0.955,			5, TYPE_WEAP, false,	"Steel barrel", "Canon en acier", "Espagnol", "Portugais", "Italien", "Allemand"},
 	{19904, 	0.0, 270.0, 0.0, 1.0,	0.2796, 0.0, 0.0, 0.0, 180.0, 0.0, 1.0,				0.0, 0.0, 0.0, -1.0118,			10, TYPE_CLOTHE, false,	"Rain Coat", "Gilet thermique", "Espagnol", "Portugais", "Italien", "Wasserdichtweste"},
 	{1210, 		0.0, 0.0, 0.0, 1.0,		0.2873, 0.107, 0.0807, 0.0, 253.1701, 0.0, 1.0,		0.0, 0.0, 0.0, -0.8519,			10, TYPE_CLOTHE, false,	"Suitcase", "Valise", "Espagnol", "Portugais", "Italien", "Allemand"},
 	{19279,		0.0, 0.0, 0.0, 1.0,		0.0, 0.15, 0.2, 0.0, 110.0, 0.0, 1.0,				0.0, 90.0, 0.0, -0.7559,		4, TYPE_TOOL, true,		"Light", "Lampe", "Espagnol", "Portugais", "Italien", "Lampe"},
	{343,		0.0, 0.0, 60.0, 1.0,	0.0332, -0.0053, -0.0065, 0.0, 0.0, 0.0, 1.0,		0.0, 0.0, 100.0, -0.792,		3, TYPE_WEAP, false,	"Tear gas", "Lacrymogène", "Espagnol", "Portugais", "Italien", "Allemand"},
	{2247,		0.0, 0.0, 0.0, 1.0, 	0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,					0.0, 0.0, 0.0, -0.5359,			1, TYPE_OTHER, false, 	" ", " ", "Espagnol", "Portugais", "Italien", "Allemand"},
	{857,		0.0, 0.0, 0.0, 1.0,		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3,					0.0, 0.0, 0.0, -0.653,/*-0.407*/1, TYPE_OTHER, false,	"Belladonna", "Belladone", "Belladonna", "Portugais", "Italien", "Tollkirsche"},//140
	{19106, 	0.0, 270.0, 0.0, 1.0,	0.185, 0.0804, 0.0, 0.0, 0.0, 90.0, 1.0,			0.0, 270.0, 0.0, -0.961, 		5, TYPE_CLOTHE,	false,	"Shot soldier~n~helmet", "Casque troue~n~militaire", "Espagnol", "Portugais", "Italien", "Zerschossene~n~soldatenhelm"},
	{19107, 	0.0, 270.0, 0.0, 1.0,	0.185, 0.0804, 0.0, 0.0, 0.0, 90.0, 1.0,			0.0, 180.0, 0.0, -0.961, 		5, TYPE_CLOTHE,	false,	"Shot marine~n~helmet", "Casque troue~n~de marin", "Espagnol", "Portugais", "Italien", "Zerschossene~n~marinehelm"},
	{1736, 		0.0, 0.0, 0.0, 1.0,		0.1704, -0.1775, 0.0, 340.49, 270.0, 0.0, 0.7,		270.0, 0.0, 0.0, -0.704, 		15, TYPE_OTHER,	false,	"Hunting~n~trophy", "Trophee~n~de chasse", "Espagnol", "Portugais", "Italien", "Allemand"},
	{1828, 		0.0, 0.0, 0.0, 1.0,		0.338, 0.0675, 0.0, 244.06, 173.63, 278.59, 0.4,	0.0, 0.0, 0.0, -1.0, 			15, TYPE_OTHER,	false,	"Fur rug", "Tapis de fourrure", "Espagnol", "Portugais", "Italien", "Allemand"},
	{366,       0.0, 0.0, 0.0, 1.0,     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,                  0.0, 0.0, 0.0, -1.0,            6, TYPE_WEAP, false,  	"Extinguisher", "Exctincteur", "Espagnol", "Portugais", "Italien", "Allemand"},
	{3014,		0.0, 0.0, 0.0, 1.0,		0.014, 0.211, 0.0735, 288.56, 336.02, 288.84, 1.0,	0.0, 0.0, 0.0, -0.763,			10, TYPE_OTHER, true,	"Crate", "Boite", "Espagnol", "Portugais", "Italien", "Allemand"},
	{365,		0.0, 0.0, 0.0, 1.0,		0.1192, 0.0173, -0.1168, 0.0, 180.0, 0.0, 1.0,		0.0, 0.0, 0.0, 0.0,				10, TYPE_VEH, false,	"Spraycan", "Peinture", "Pintura", "Portugais", "Pintura", "Allemand"},
	{15038,		0.0, 0.0, 0.0, 1.0,		0.0529, 0.4305, 0.2043, 270.0, 0.0, 0.0, 0.7, 		0.0, 0.0, 0.0, -0.39,			5, TYPE_OTHER, true,	"Fir sapling", "Pousse de~n~sapin", "Pimpollo de~n~abeto", "Portugais", "Italien", "Allemand"},
	{2060,		0.0, 0.0, 0.0, 1.0,		-0.0194, 0.1036, 0.1782, 101.0, 0.0, 79.6399, 1.0,	0.0, 0.0, 0.0, -0.854,			10, TYPE_OTHER, true, 	"Weird bag", "Drole de sac", "Espagnol", "Portugais", "Italien", "Allemand"},
	{953,		0.0, 0.0, 180.0, 1.0,	0.0451, 0.2588, 0.1398, 270.0, 4.364, 117.31, 1.0,	0.0, 0.0, 0.0, -0.7131,			50, TYPE_OTHER, true,	"Oyster", "Huitre", "Espagnol", "Portugais", "Italien", "Allemand"},//150
	{1801, 		135.0, 0.0, 0.0, 1.0,	0.421, -0.13, 1.727, 270.0, 350.732, 10.697, 0.7,	0.0, 0.0, 0.0, -0.987,			35, TYPE_OTHER,	true,	"Bed", "Lit", "Espagnol", "Portugais", "Italien", "Matratze"},
	{964,		0.0, 0.0, 0.0, 1.0,		0.2, 0.0, 0.1, 280.0, 0.0, 20.0, 0.5,				0.0, 0.0, 0.0, -0.1,			0, TYPE_NOSELL, true,	"Box", "Boite", "Espagnol", "Portugais", "Italien", "Kiste"},
	{19346,		0.0, -45.0, 45.0, 1.0,	0.0811, 0.0353, 0.0, 0.0, 90.0, 90.0, 0.7,			0.0, 0.0, 0.0, -1.0,			1, TYPE_FOOD, false,	"Hotdog", "Hotdog", "Hotdog", "Hotdog", "Hotdog", "Hotdog"},
	{11743,		0.0, 0.0, 0.0, 1.0,		0.0, 0.014, 0.0, 0.0, 90.0, 0.0, 0.7,				0.0, 0.0, 0.0, -1.0,			10, TYPE_OTHER, true,	"Coffee machine", "Machine a~n~cafe", "Espagnol", "Portugais", "Italien", "Allemand"},
	{1729, 		135.0, 90.0, 0.0, 1.0,	0.133, -0.064, 0.213, 281.69, 350.0, 108.9, 0.7,	0.0, 0.0, 0.0, -1.0,			20, TYPE_OTHER,	true,	"Seat", "Siege", "Espagnol", "Portugais", "Italien", "Setz"},/*0.421, -0.13, 0.0, 270.0, 350.732, 10.697, 0.7*/
	{3927, 		0.0, 0.0, 0.0, 1.0,		0.029, 0.0413, -0.4417, 0.0, 180.0, 0.0, 0.3,		0.0, 0.0, 0.0, 0.0,				10, TYPE_OTHER,	false,	"Board", "Panneau", "Espagnol", "Portugais", "Italien", "Allemand"},
	{918, 		0.0, 0.0, 0.0, 1.0,		0.029, 0.0413, -0.4417, 0.0, 180.0, 0.0, 0.3,		0.0, 0.0, 0.0, -0.6,			10, TYPE_TOOL,	false,	"Compressor", "Compresseur", "Espagnol", "Portugais", "Italien", "Allemand"},
	{964,		0.0, 0.0, 0.0, 1.0,		0.2, 0.0, 0.1, 280.0, 0.0, 20.0, 0.5,				0.0, 0.0, 0.0, -0.1,			0, TYPE_OTHER, true,	"Return to~n~sender", "Retour a~n~l'envoyeur", "Espagnol", "Portugais", "Italien", "Allemand"}
};

public GetObjectName(playerid, objectid, language)
{
	switch(language)
	{
	    case LANGUAGE_EN: SetPVarString(playerid, "sShopName", aObjects[objectid][ObjectEnName]);
	    case LANGUAGE_FR: SetPVarString(playerid, "sShopName", aObjects[objectid][ObjectFrName]);
	    case LANGUAGE_ES: SetPVarString(playerid, "sShopName", aObjects[objectid][ObjectEsName]);
	    case LANGUAGE_PG: SetPVarString(playerid, "sShopName", aObjects[objectid][ObjectPgName]);
	    case LANGUAGE_IT: SetPVarString(playerid, "sShopName", aObjects[objectid][ObjectItName]);
	    case LANGUAGE_DE: SetPVarString(playerid, "sShopName", aObjects[objectid][ObjectDeName]);
	}
}

GetItemName(objectid, language)
{
	new string[30];
	switch(language)
	{
	    case LANGUAGE_EN: strcpy(string, NoNewLineSign(aObjects[objectid][ObjectEnName]));
	    case LANGUAGE_FR: strcpy(string, NoNewLineSign(aObjects[objectid][ObjectFrName]));
	    case LANGUAGE_ES: strcpy(string, NoNewLineSign(aObjects[objectid][ObjectEsName]));
	    case LANGUAGE_PG: strcpy(string, NoNewLineSign(aObjects[objectid][ObjectPgName]));
	    case LANGUAGE_IT: strcpy(string, NoNewLineSign(aObjects[objectid][ObjectItName]));
	    case LANGUAGE_DE: strcpy(string, NoNewLineSign(aObjects[objectid][ObjectDeName]));
	}
	return string;
}

//AUTRES
new pNPCType[MAX_PLAYERS] = {0, ...};
new dGoldDumpVar;//Variable pour donner de l'or à un joueur pendant qu'il n'est pas en ligne
new dAuctionParsingVar[50];
new zBlackZone;//Gangzone noire sur toute la map
new dEnvironment[Environment];//Variables de météo, de temps, etc.
new dMapRes[2];//Variable de protocole pour la taille du fichier BMP de terrain
new const bool:bLangue[] = {true, true, false, false, false, false};//Disponibilités des langues
new sDownloadServer[] = "http://www.c4nn4.com/samp/models";
new pAdminInfos[MAX_PLAYERS][Admin];//Administration
new bool:bKick[MAX_PLAYERS];
new dMaxPlayers = -1;
new dCheatersBusted = 0;

//---ENVIRONNEMENT
#if defined MYSQL_SYSTEM
public 	OnEnvironmentLoaded()
{
	if(cache_num_rows() == 1)
	{
		cache_get_value_name_int(0, "hours", dEnvironment[dHours]);
		cache_get_value_name_int(0, "minutes", dEnvironment[dMins]);
		cache_get_value_name_int(0, "daytime", dEnvironment[dDay]);
		cache_get_value_name_int(0, "weather", dEnvironment[dMeteo]);
		cache_get_value_name_int(0, "timeweather", dEnvironment[dMeteoTime]);
		cache_get_value_name_int(0, "cheatersbusted", dCheatersBusted);
		LogInfo(true, "[INIT] Infos generales d'environnements chargees !");
	}
	else
		LogInfo(true, "[MYSQL - ERROR] Erreur de chargement des informations generales (%d rows retrieved)", cache_num_rows());
}
stock SaveGeneralInfos()
{
	new string[512];
	mysql_format(mysqlPool, string, sizeof(string), "UPDATE environment SET \
		hours = %d,\
		minutes = %d,\
		daytime = %d,\
		weather = %d,\
		timeweather = %d,\
		cheatersbusted = %d", dEnvironment[dHours], dEnvironment[dMins], dEnvironment[dDay], dEnvironment[dMeteo], dEnvironment[dMeteoTime], dCheatersBusted);
	mysql_query(mysqlPool, string, false);
	LogInfo(true, "[SAVE] Variables d'environnements sauvegardees");
}
#else
public LoadGeneral_data(name[],value[])
{
	INI_Int("Heures", dEnvironment[dHours]);
	INI_Int("Minutes", dEnvironment[dMins]);
	INI_Int("Jour", dEnvironment[dDay]);
	INI_Int("Meteo", dEnvironment[dMeteo]);
	INI_Int("TempsMeteo", dEnvironment[dMeteoTime]);
	INI_Int("CheatersBusted", dCheatersBusted);
	return 1;
}

SaveGeneralInfos()
{
    new INI:File;
	File = INI_Open(GPATH);
    INI_SetTag(File,"data");
	INI_WriteInt(File,"Heures", dEnvironment[dHours]);
	INI_WriteInt(File,"Minutes", dEnvironment[dMins]);
	INI_WriteInt(File,"Jour", dEnvironment[dDay]);
	INI_WriteInt(File,"Meteo", dEnvironment[dMeteo]);
	INI_WriteInt(File,"TempsMeteo", dEnvironment[dMeteoTime]);
	INI_WriteInt(File,"CheatersBusted", dCheatersBusted);
    INI_Close(File);
}
#endif
ChangeWeather(weather, time)
{
	new dMeteos[] = {1, 8, 5, 9, 10, 17};
	SetWeather(dMeteos[weather]);
    dEnvironment[dMeteo] = weather;
	if(time <= 0)
		time = 1;
    dEnvironment[dMeteoTime] = time;
}

//---SYSTÈME ADMIN---//
new bool:bBannedIP;
new dIPInfo;
new sIPInfos[30][MAX_PLAYER_NAME + 1];

IsTextIP(const ip[])
{
 	#pragma unused ip
	/*if(strlen(ip[0]) > 18) return false;
	ne icnt;
	for(new i = 0, j = strlen(ip); i < j; i ++) if(ip[i] == '.') icnt ++;
	if(icnt != 3) return false;
	return false;*/
	return true;
}

IPFile(const ip[])//Pour avoir le fichier d'une IP
{
	new string[50];
	format(string,sizeof(string), IP, ip);
	return string;
}

PlayerFile(const name[])//Pour avoir le fichier d'un joueur
{
	new string[31 + MAX_PLAYER_NAME];
	format(string,sizeof(string), PSEUDO, name);
	return string;
}

GetIPFromPlayer(playerid)
{
	new ip[16];
	GetPlayerIp(playerid, ip, 16);
	return ip;
}

SetIPBan(const ip[], bool:banned)
{
    new INI:File;
	File = INI_Open(IPFile(ip));
    INI_SetTag(File,"ban");
    INI_WriteBool(File,"Banned", banned);
	INI_Close(File);
}

IsIPBanned(const ip[])
{
	if(!fexist(IPFile(ip))) return false;
	INI_ParseFile(IPFile(ip), "LoadIPBan_%s");
	return bBannedIP;
}

AddPlayerToIP(const name[], const ip[])
{
	if(!fexist(IPFile(ip)))
	{
	    dIPInfo = 0;
	    for(new i = 0; i < 30; i ++) format(sIPInfos[i], MAX_PLAYER_NAME + 1, " ");
	}
	INI_ParseFile(IPFile(ip), "LoadIPNicks_%s");
	//---
	for(new i = 0; i < dIPInfo; i ++) if(!strcmp(name, sIPInfos[i], false)) return 0;
	strcpy(sIPInfos[dIPInfo], name, MAX_PLAYER_NAME + 1);
	dIPInfo ++;
	SaveIPNicks(ip);
	//---
	return 1;
}

public LoadIPBan_ban(name[], value[])
{
	INI_Bool("Banned", bBannedIP);
	return 1;
}

public LoadIPNicks_nicks(name[], value[])
{
	new string[50];
	if(!fexist(PlayerFile(name)))
	{
	    dIPInfo = 0;
	    for(new i = 0; i < 30; i ++) format(sIPInfos[i], MAX_PLAYER_NAME + 1, " ");
	}
	INI_Int("Players", dIPInfo);
	for(new i = 0; i < dIPInfo; i ++)
	{
	    format(string, sizeof(string), "Player%d", i);
	    INI_String(string, sIPInfos[i], MAX_PLAYER_NAME + 1);
	}
	return 1;
}

SaveIPNicks(const ip[])
{
    new INI:File;
	new string[50];
	File = INI_Open(IPFile(ip));
    INI_SetTag(File,"nicks");
    INI_WriteInt(File,"Players", dIPInfo);
	for(new i = 0; i < dIPInfo; i ++)
	{
	    format(string, sizeof(string), "Player%d", i);
	    INI_WriteString(File,string, sIPInfos[i]);
	}
	INI_Close(File);
}

AddIPToPlayer(const ip[], const name[])
{
	if(!fexist(IPFile(ip)))
	{
	    dIPInfo = 0;
	    for(new i = 0; i < 30; i ++) format(sIPInfos[i], MAX_PLAYER_NAME + 1, " ");
	}
	INI_ParseFile(IPFile(ip), "LoadPlayerIP_%s");
	//---
	for(new i = 0; i < dIPInfo; i ++) if(!strcmp(ip, sIPInfos[i], false)) return 0;
	strcpy(sIPInfos[dIPInfo], ip, MAX_PLAYER_NAME + 1);
	dIPInfo ++;
	SavePlayerIPs(name);
	//---
	return 1;
}

BanAllPlayerIP(const name[])
{
	if(!fexist(PlayerFile(name))) return 0;
	INI_ParseFile(PlayerFile(name), "LoadPlayerIP_%s");
	//---
	for(new i = 0; i < dIPInfo; i ++)
	{
        SetIPBan(sIPInfos[i], true);
	}
	//---
	return 1;
}

UnbanAllPlayerIP(const name[])
{
	if(!fexist(PlayerFile(name))) return 0;
	INI_ParseFile(PlayerFile(name), "LoadPlayerIP_%s");
	//---
	for(new i = 0; i < dIPInfo; i ++)
	{
        SetIPBan(sIPInfos[i], false);
	}
	//---
	return 1;
}

public LoadPlayerIP_ip(name[], value[])
{
	new string[50];
	INI_Int("IPs", dIPInfo);
	for(new i = 0; i < dIPInfo; i ++)
	{
	    format(string, sizeof(string), "IP%d", i);
	    INI_String(string, sIPInfos[i], MAX_PLAYER_NAME + 1);
	}
	return 1;
}

SavePlayerIPs(const name[])
{
    new INI:File;
	new string[50];
	File = INI_Open(PlayerFile(name));
    INI_SetTag(File,"ip");
    INI_WriteInt(File,"IPs", dIPInfo);
	for(new i = 0; i < dIPInfo; i ++)
	{
	    format(string, sizeof(string), "IP%d", i);
	    INI_WriteString(File,string, sIPInfos[i]);
	}
	INI_Close(File);
}

//---INFOS JOUEURS---//
new lastco[30];
public GetUserLastCo_data(name[],value[])
{
	INI_String("LastConnection", lastco, 30);
	return 1;
}

GivePlayerExtraGold(playerid)
{
	new sQuery[128];
	format(sQuery, sizeof(sQuery), "SELECT * FROM `players` WHERE username = `%d`", GetName(playerid));
	mysql_function_query(MySQL, sQuery, true, "LoadPlayerExtraGold", "i", playerid);
}

public LoadPlayerExtraGold(playerid)
{
	/*
    new dGoldToGive, rows, fields;
    //cache_get_data(rows, fields, MySQL);
	if(rows)
	{
    	new result[64];
		for(new row; row < rows; row++)
		{
			//cache_get_row_int(row, fields, MySQL);
    		//cache_get_field_content(row,"gold",result,MySQL,1000000000000);
		    //dGoldToGive = result;
		}
	}
	return dGoldToGive;*/
}

/*public LoadPlayerExtraGold(playerid)
{
	new sQuery[128];
	new dGoldToGive;
	mysql_format(MySQL, sQuery, sizeof(sQuery), "SELECT `gold` FROM `players` WHERE `username` = '%s'", GetName(playerid));
    new Cache:result = mysql_query(MySQL, sQuery);
    //cache_get_value_int(0, 0, dGoldToGive);
    cache_get_value_name_int (0, "gold", dGoldToGive);
	cache_delete(result);
	mysql_format(MySQL, sQuery, sizeof(sQuery), "UPDATE `players` SET `gold` = '0' WHERE `username` = '%s'", GetName(playerid));
    mysql_query(MySQL, sQuery);
	return dGoldToGive;
}*/

public LoadUser_data(playerid,name[],value[])
{
	INI_Int("Password",pPlayerInfos[playerid][pPass]);
    INI_Int("Admin", pPlayerInfos[playerid][pAdmin]);
	INI_String("FirstCo", pPlayerInfos[playerid][sFirstCo], 30);
	INI_String("LastConnection", pPlayerInfos[playerid][sLastCo], 30);
	INI_Int("VIP", pPlayerInfos[playerid][pVIP][0]);
	INI_Int("VIPTime", pPlayerInfos[playerid][pVIP][1]);
	INI_Int("Ban", pPlayerInfos[playerid][pBan]);
    INI_Int("Langue", pPlayerInfos[playerid][pLangue]);
    INI_Int("Or", pPlayerInfos[playerid][pGold]);
    INI_Int("Kills", pPlayerInfos[playerid][pKills]);
    INI_Int("Morts", pPlayerInfos[playerid][pDeaths]);
    INI_Int("Headshots", pPlayerInfos[playerid][pHeadshots]);
    INI_Int("Zombies", pPlayerInfos[playerid][pZombies]);
    INI_Int("Bosses", pPlayerInfos[playerid][pBosses]);
    INI_Int("Missions", pPlayerInfos[playerid][pMissions]);
    INI_Float("DistanceVeh", pPlayerInfos[playerid][fDistanceWheel]);
    INI_Float("DistancePied", pPlayerInfos[playerid][fDistanceFoot]);
    INI_Int("TempsDeJeu", pPlayerInfos[playerid][pGameTime]);
    INI_Int("Sac", pPlayerInfos[playerid][pBag]);
    INI_Int("Faim", pPlayerInfos[playerid][pHunger]);
    INI_Int("Soif", pPlayerInfos[playerid][pThirst]);
    INI_Int("Sommeil", pPlayerInfos[playerid][pSleep]);
    INI_Int("Vie", pPlayerInfos[playerid][pHealth]);
    INI_Int("Armure", pPlayerInfos[playerid][pArmour]);
    INI_Float("X", pPlayerInfos[playerid][xPos]);
    INI_Float("Y", pPlayerInfos[playerid][yPos]);
    INI_Float("Z", pPlayerInfos[playerid][zPos]);
    INI_Float("A", pPlayerInfos[playerid][aPos]);
    INI_Bool("Jambe", pPlayerInfos[playerid][bLeg]);
    INI_Bool("Hemorragie", pPlayerInfos[playerid][bHemorragie]);
    INI_Int("Temperature", pPlayerInfos[playerid][pTemperature]);
    //ARMES
    INI_Int("Arme1", pPlayerInfos[playerid][pArme1][0]);
    INI_Int("Arme1Muns", pPlayerInfos[playerid][pArme1][1]);
    INI_Int("Arme1Skill", pPlayerInfos[playerid][pArme1][2]);
    INI_Int("Arme2", pPlayerInfos[playerid][pArme2][0]);
    INI_Int("Arme2Muns", pPlayerInfos[playerid][pArme2][1]);
    INI_Int("Arme2Skill", pPlayerInfos[playerid][pArme2][2]);
    INI_Int("Arme3", pPlayerInfos[playerid][pArme3][0]);
    INI_Int("Arme3Muns", pPlayerInfos[playerid][pArme3][1]);
    INI_Int("Arme3Skill", pPlayerInfos[playerid][pArme3][2]);
    INI_Int("Arme4", pPlayerInfos[playerid][pArme4][0]);
    INI_Int("Arme4Muns", pPlayerInfos[playerid][pArme4][1]);
    INI_Int("Arme4Skill", pPlayerInfos[playerid][pArme4][2]);
    //VÊTEMENTS
    INI_Int("Skin", pPlayerInfos[playerid][pSkin]);
    INI_Int("Chapeau", pPlayerInfos[playerid][pChapeau]);
    INI_Float("PosChapeau1", pPlayerInfos[playerid][fPosChapeau][0]);
    INI_Float("PosChapeau2", pPlayerInfos[playerid][fPosChapeau][1]);
    INI_Float("PosChapeau3", pPlayerInfos[playerid][fPosChapeau][2]);
    INI_Float("PosChapeau4", pPlayerInfos[playerid][fPosChapeau][3]);
    INI_Float("PosChapeau5", pPlayerInfos[playerid][fPosChapeau][4]);
    INI_Float("PosChapeau6", pPlayerInfos[playerid][fPosChapeau][5]);
    INI_Float("PosChapeau7", pPlayerInfos[playerid][fPosChapeau][6]);
    INI_Float("PosChapeau8", pPlayerInfos[playerid][fPosChapeau][7]);
    INI_Float("PosChapeau9", pPlayerInfos[playerid][fPosChapeau][8]);
    INI_Int("Lunettes", pPlayerInfos[playerid][pLunettes]);
    INI_Float("PosLunettes1", pPlayerInfos[playerid][fPosLunettes][0]);
    INI_Float("PosLunettes2", pPlayerInfos[playerid][fPosLunettes][1]);
    INI_Float("PosLunettes3", pPlayerInfos[playerid][fPosLunettes][2]);
    INI_Float("PosLunettes4", pPlayerInfos[playerid][fPosLunettes][3]);
    INI_Float("PosLunettes5", pPlayerInfos[playerid][fPosLunettes][4]);
    INI_Float("PosLunettes6", pPlayerInfos[playerid][fPosLunettes][5]);
    INI_Float("PosLunettes7", pPlayerInfos[playerid][fPosLunettes][6]);
    INI_Float("PosLunettes8", pPlayerInfos[playerid][fPosLunettes][7]);
    INI_Float("PosLunettes9", pPlayerInfos[playerid][fPosLunettes][8]);
    INI_Int("Masque", pPlayerInfos[playerid][pMasque]);
    INI_Float("PosMasque1", pPlayerInfos[playerid][fPosMasque][0]);
    INI_Float("PosMasque2", pPlayerInfos[playerid][fPosMasque][1]);
    INI_Float("PosMasque3", pPlayerInfos[playerid][fPosMasque][2]);
    INI_Float("PosMasque4", pPlayerInfos[playerid][fPosMasque][3]);
    INI_Float("PosMasque5", pPlayerInfos[playerid][fPosMasque][4]);
    INI_Float("PosMasque6", pPlayerInfos[playerid][fPosMasque][5]);
    INI_Float("PosMasque7", pPlayerInfos[playerid][fPosMasque][6]);
    INI_Float("PosMasque8", pPlayerInfos[playerid][fPosMasque][7]);
    INI_Float("PosMasque9", pPlayerInfos[playerid][fPosMasque][8]);
    INI_Int("Torse", pPlayerInfos[playerid][pTorse]);
    INI_Float("PosTorse1", pPlayerInfos[playerid][fPosTorse][0]);
    INI_Float("PosTorse2", pPlayerInfos[playerid][fPosTorse][1]);
    INI_Float("PosTorse3", pPlayerInfos[playerid][fPosTorse][2]);
    INI_Float("PosTorse4", pPlayerInfos[playerid][fPosTorse][3]);
    INI_Float("PosTorse5", pPlayerInfos[playerid][fPosTorse][4]);
    INI_Float("PosTorse6", pPlayerInfos[playerid][fPosTorse][5]);
    INI_Float("PosTorse7", pPlayerInfos[playerid][fPosTorse][6]);
    INI_Float("PosTorse8", pPlayerInfos[playerid][fPosTorse][7]);
    INI_Float("PosTorse9", pPlayerInfos[playerid][fPosTorse][8]);
    //INVENTAIRE
    INI_Int("ObjetMain", pPlayerInfos[playerid][HandObject]);
    INI_Int("Objet1", pPlayerInfos[playerid][BagObject][0]);
    INI_Int("Objet2", pPlayerInfos[playerid][BagObject][1]);
    INI_Int("Objet3", pPlayerInfos[playerid][BagObject][2]);
    INI_Int("Objet4", pPlayerInfos[playerid][BagObject][3]);
    INI_Int("Objet5", pPlayerInfos[playerid][BagObject][4]);
    INI_Int("Objet6", pPlayerInfos[playerid][BagObject][5]);
    INI_Int("Objet7", pPlayerInfos[playerid][BagObject][6]);
    INI_Int("Objet8", pPlayerInfos[playerid][BagObject][7]);
    INI_Int("Objet9", pPlayerInfos[playerid][BagObject][8]);
    INI_Int("Objet10", pPlayerInfos[playerid][BagObject][9]);
    INI_Int("Objet11", pPlayerInfos[playerid][BagObject][10]);
    INI_Int("Objet12", pPlayerInfos[playerid][BagObject][11]);
    INI_Int("Objet13", pPlayerInfos[playerid][BagObject][12]);
    INI_Int("Objet14", pPlayerInfos[playerid][BagObject][13]);
    INI_Int("Objet15", pPlayerInfos[playerid][BagObject][14]);
    INI_Int("Objet16", pPlayerInfos[playerid][BagObject][15]);
    INI_Int("Objet17", pPlayerInfos[playerid][BagObject][16]);
    INI_Int("Objet18", pPlayerInfos[playerid][BagObject][17]);
    INI_Int("Objet19", pPlayerInfos[playerid][BagObject][18]);
    INI_Int("Objet20", pPlayerInfos[playerid][BagObject][19]);
    INI_Int("Objet21", pPlayerInfos[playerid][BagObject][20]);
    INI_Int("Objet22", pPlayerInfos[playerid][BagObject][21]);
    INI_Int("Objet23", pPlayerInfos[playerid][BagObject][22]);
    INI_Int("Objet24", pPlayerInfos[playerid][BagObject][23]);
    INI_Int("Objet25", pPlayerInfos[playerid][BagObject][24]);
    INI_Int("Objet26", pPlayerInfos[playerid][BagObject][25]);
    INI_Int("Objet27", pPlayerInfos[playerid][BagObject][26]);
    INI_Int("Objet28", pPlayerInfos[playerid][BagObject][27]);
    INI_Int("Objet29", pPlayerInfos[playerid][BagObject][28]);
    INI_Int("Objet30", pPlayerInfos[playerid][BagObject][29]);
    INI_Int("Objet31", pPlayerInfos[playerid][BagObject][30]);
    INI_Int("Objet32", pPlayerInfos[playerid][BagObject][31]);
    INI_Int("Objet33", pPlayerInfos[playerid][BagObject][32]);
    INI_Int("Objet34", pPlayerInfos[playerid][BagObject][33]);
    INI_Int("Objet35", pPlayerInfos[playerid][BagObject][34]);
    INI_Int("Objet36", pPlayerInfos[playerid][BagObject][35]);
    //---
    INI_Int("Level", pPlayerInfos[playerid][pLevel]);
    INI_Int("Exp", pPlayerInfos[playerid][pExp]);
    INI_Int("PointsCompetence", pPlayerInfos[playerid][pCompetence]);
    //---
    INI_Int("Boucher", pPlayerInfos[playerid][dBoucher]);
    INI_Int("Medecine", pPlayerInfos[playerid][dMedecine]);
    INI_Int("Sante", pPlayerInfos[playerid][dSante]);
    INI_Int("Artisan", pPlayerInfos[playerid][dArtisan]);
    INI_Int("Transporteur", pPlayerInfos[playerid][dTransporteur]);
    INI_Int("Pecheur", pPlayerInfos[playerid][dPecheur]);
    INI_Int("Mecano", pPlayerInfos[playerid][dMecano]);
    INI_Int("Jardinie", pPlayerInfos[playerid][dJardinier]);
    INI_Int("Athlete", pPlayerInfos[playerid][dAthlete]);
    INI_Int("Survivaliste", pPlayerInfos[playerid][dSurvivaliste]);
    INI_Int("Tank", pPlayerInfos[playerid][dTank]);
    INI_Int("Bomberman", pPlayerInfos[playerid][dBomberman]);
    INI_Int("Hydratation", pPlayerInfos[playerid][dHydra]);
    //---
    INI_Int("Aide1_16", pPlayerInfos[playerid][dAide1_16]);
    INI_Int("Aide17_32", pPlayerInfos[playerid][dAide17_32]);
    //---
    INI_Int("MissionReggae", pPlayerInfos[playerid][pReggaeShark]);
    INI_Int("MissionBeginning", pPlayerInfos[playerid][pIntro]);
    INI_Int("MissionAmy", pPlayerInfos[playerid][pAmy]);
    INI_Int("MissionKen", pPlayerInfos[playerid][pKen]);
    INI_Int("MissionDPO", pPlayerInfos[playerid][pDPO]);
	return 1;
}

public SaveUser(playerid)
{
	ProcessPlayerSave(playerid, .save = true);
	//---
    new INI:File, string[30];
	File = INI_Open(UserPath(playerid));
    INI_SetTag(File,"data");
    INI_WriteInt(File,"Password", pPlayerInfos[playerid][pPass]);
    INI_WriteInt(File,"Admin", pPlayerInfos[playerid][pAdmin]);
    //---
	new date[6];
	getdate(date[0], date[1], date[2]);
	gettime(date[3], date[4], date[5]);
	format(string, sizeof(string), "%d/%d/%d - %d:%d:%d", date[2], date[1], date[0], date[3], date[4], date[5]);
	INI_WriteString(File,"LastConnection", string);
	//---
	INI_WriteInt(File,"VIP", pPlayerInfos[playerid][pVIP][0]);
	INI_WriteInt(File,"VIPTime", pPlayerInfos[playerid][pVIP][1]);
	INI_WriteInt(File,"Ban", pPlayerInfos[playerid][pBan]);
    INI_WriteInt(File,"Langue", pPlayerInfos[playerid][pLangue]);
    INI_WriteInt(File,"Or", pPlayerInfos[playerid][pGold]);
    INI_WriteInt(File,"Kills", pPlayerInfos[playerid][pKills]);
    INI_WriteInt(File,"Morts", pPlayerInfos[playerid][pDeaths]);
    INI_WriteInt(File,"Headshots", pPlayerInfos[playerid][pHeadshots]);
    INI_WriteInt(File,"Zombies", pPlayerInfos[playerid][pZombies]);
    INI_WriteInt(File,"Bosses", pPlayerInfos[playerid][pBosses]);
    INI_WriteInt(File,"Missions", pPlayerInfos[playerid][pMissions]);
    INI_WriteFloat(File,"DistanceVeh", pPlayerInfos[playerid][fDistanceWheel]);
    INI_WriteFloat(File,"DistancePied", pPlayerInfos[playerid][fDistanceFoot]);
    INI_WriteInt(File,"TempsDeJeu", pPlayerInfos[playerid][pGameTime]);
    INI_WriteInt(File,"Sac", pPlayerInfos[playerid][pBag]);
    INI_WriteInt(File,"Faim", pPlayerInfos[playerid][pHunger]);
    INI_WriteInt(File,"Soif", pPlayerInfos[playerid][pThirst]);
    INI_WriteInt(File,"Sommeil", pPlayerInfos[playerid][pSleep]);
    INI_WriteInt(File,"Vie", pPlayerInfos[playerid][pHealth]);
    INI_WriteInt(File,"Armure", pPlayerInfos[playerid][pArmour]);
    INI_WriteFloat(File,"X", pPlayerInfos[playerid][xPos]);
    INI_WriteFloat(File,"Y", pPlayerInfos[playerid][yPos]);
    INI_WriteFloat(File,"Z", pPlayerInfos[playerid][zPos]);
    INI_WriteFloat(File,"A", pPlayerInfos[playerid][aPos]);
    INI_WriteBool(File,"Jambe", pPlayerInfos[playerid][bLeg]);
    INI_WriteBool(File,"Hemorragie", pPlayerInfos[playerid][bHemorragie]);
	INI_WriteInt(File,"Temperature", pPlayerInfos[playerid][pTemperature]);
    //ARMES
    INI_WriteInt(File,"Arme1", pPlayerInfos[playerid][pArme1][0]);
    INI_WriteInt(File,"Arme1Muns", pPlayerInfos[playerid][pArme1][1]);
    INI_WriteInt(File,"Arme1Skill", pPlayerInfos[playerid][pArme1][2]);
    INI_WriteInt(File,"Arme2", pPlayerInfos[playerid][pArme2][0]);
    INI_WriteInt(File,"Arme2Muns", pPlayerInfos[playerid][pArme2][1]);
    INI_WriteInt(File,"Arme2Skill", pPlayerInfos[playerid][pArme2][2]);
    INI_WriteInt(File,"Arme3", pPlayerInfos[playerid][pArme3][0]);
    INI_WriteInt(File,"Arme3Muns", pPlayerInfos[playerid][pArme3][1]);
    INI_WriteInt(File,"Arme3Skill", pPlayerInfos[playerid][pArme3][2]);
    INI_WriteInt(File,"Arme4", pPlayerInfos[playerid][pArme4][0]);
    INI_WriteInt(File,"Arme4Muns", pPlayerInfos[playerid][pArme4][1]);
    INI_WriteInt(File,"Arme4Skill", pPlayerInfos[playerid][pArme4][2]);
    //VÊTEMENTS
    INI_WriteInt(File,"Skin", pPlayerInfos[playerid][pSkin]);
    INI_WriteInt(File,"Chapeau", pPlayerInfos[playerid][pChapeau]);
    INI_WriteFloat(File,"PosChapeau1", pPlayerInfos[playerid][fPosChapeau][0]);
    INI_WriteFloat(File,"PosChapeau2", pPlayerInfos[playerid][fPosChapeau][1]);
    INI_WriteFloat(File,"PosChapeau3", pPlayerInfos[playerid][fPosChapeau][2]);
    INI_WriteFloat(File,"PosChapeau4", pPlayerInfos[playerid][fPosChapeau][3]);
    INI_WriteFloat(File,"PosChapeau5", pPlayerInfos[playerid][fPosChapeau][4]);
    INI_WriteFloat(File,"PosChapeau6", pPlayerInfos[playerid][fPosChapeau][5]);
    INI_WriteFloat(File,"PosChapeau7", pPlayerInfos[playerid][fPosChapeau][6]);
    INI_WriteFloat(File,"PosChapeau8", pPlayerInfos[playerid][fPosChapeau][7]);
    INI_WriteFloat(File,"PosChapeau9", pPlayerInfos[playerid][fPosChapeau][8]);
    INI_WriteInt(File,"Lunettes", pPlayerInfos[playerid][pLunettes]);
    INI_WriteFloat(File,"PosLunettes1", pPlayerInfos[playerid][fPosLunettes][0]);
    INI_WriteFloat(File,"PosLunettes2", pPlayerInfos[playerid][fPosLunettes][1]);
    INI_WriteFloat(File,"PosLunettes3", pPlayerInfos[playerid][fPosLunettes][2]);
    INI_WriteFloat(File,"PosLunettes4", pPlayerInfos[playerid][fPosLunettes][3]);
    INI_WriteFloat(File,"PosLunettes5", pPlayerInfos[playerid][fPosLunettes][4]);
    INI_WriteFloat(File,"PosLunettes6", pPlayerInfos[playerid][fPosLunettes][5]);
    INI_WriteFloat(File,"PosLunettes7", pPlayerInfos[playerid][fPosLunettes][6]);
    INI_WriteFloat(File,"PosLunettes8", pPlayerInfos[playerid][fPosLunettes][7]);
    INI_WriteFloat(File,"PosLunettes9", pPlayerInfos[playerid][fPosLunettes][8]);
    INI_WriteInt(File,"Masque", pPlayerInfos[playerid][pMasque]);
    INI_WriteFloat(File,"PosMasque1", pPlayerInfos[playerid][fPosMasque][0]);
    INI_WriteFloat(File,"PosMasque2", pPlayerInfos[playerid][fPosMasque][1]);
    INI_WriteFloat(File,"PosMasque3", pPlayerInfos[playerid][fPosMasque][2]);
    INI_WriteFloat(File,"PosMasque4", pPlayerInfos[playerid][fPosMasque][3]);
    INI_WriteFloat(File,"PosMasque5", pPlayerInfos[playerid][fPosMasque][4]);
    INI_WriteFloat(File,"PosMasque6", pPlayerInfos[playerid][fPosMasque][5]);
    INI_WriteFloat(File,"PosMasque7", pPlayerInfos[playerid][fPosMasque][6]);
    INI_WriteFloat(File,"PosMasque8", pPlayerInfos[playerid][fPosMasque][7]);
    INI_WriteFloat(File,"PosMasque9", pPlayerInfos[playerid][fPosMasque][8]);
    INI_WriteInt(File,"Torse", pPlayerInfos[playerid][pTorse]);
    INI_WriteFloat(File,"PosTorse1", pPlayerInfos[playerid][fPosTorse][0]);
    INI_WriteFloat(File,"PosTorse2", pPlayerInfos[playerid][fPosTorse][1]);
    INI_WriteFloat(File,"PosTorse3", pPlayerInfos[playerid][fPosTorse][2]);
    INI_WriteFloat(File,"PosTorse4", pPlayerInfos[playerid][fPosTorse][3]);
    INI_WriteFloat(File,"PosTorse5", pPlayerInfos[playerid][fPosTorse][4]);
    INI_WriteFloat(File,"PosTorse6", pPlayerInfos[playerid][fPosTorse][5]);
    INI_WriteFloat(File,"PosTorse7", pPlayerInfos[playerid][fPosTorse][6]);
    INI_WriteFloat(File,"PosTorse8", pPlayerInfos[playerid][fPosTorse][7]);
    INI_WriteFloat(File,"PosTorse9", pPlayerInfos[playerid][fPosTorse][8]);
    //INVENTAIRE
    INI_WriteInt(File,"ObjetMain", pPlayerInfos[playerid][HandObject]);
    INI_WriteInt(File,"Objet1", pPlayerInfos[playerid][BagObject][0]);
    INI_WriteInt(File,"Objet2", pPlayerInfos[playerid][BagObject][1]);
    INI_WriteInt(File,"Objet3", pPlayerInfos[playerid][BagObject][2]);
    INI_WriteInt(File,"Objet4", pPlayerInfos[playerid][BagObject][3]);
    INI_WriteInt(File,"Objet5", pPlayerInfos[playerid][BagObject][4]);
    INI_WriteInt(File,"Objet6", pPlayerInfos[playerid][BagObject][5]);
    INI_WriteInt(File,"Objet7", pPlayerInfos[playerid][BagObject][6]);
    INI_WriteInt(File,"Objet8", pPlayerInfos[playerid][BagObject][7]);
    INI_WriteInt(File,"Objet9", pPlayerInfos[playerid][BagObject][8]);
    INI_WriteInt(File,"Objet10", pPlayerInfos[playerid][BagObject][9]);
    INI_WriteInt(File,"Objet11", pPlayerInfos[playerid][BagObject][10]);
    INI_WriteInt(File,"Objet12", pPlayerInfos[playerid][BagObject][11]);
    INI_WriteInt(File,"Objet13", pPlayerInfos[playerid][BagObject][12]);
    INI_WriteInt(File,"Objet14", pPlayerInfos[playerid][BagObject][13]);
    INI_WriteInt(File,"Objet15", pPlayerInfos[playerid][BagObject][14]);
    INI_WriteInt(File,"Objet16", pPlayerInfos[playerid][BagObject][15]);
    INI_WriteInt(File,"Objet17", pPlayerInfos[playerid][BagObject][16]);
    INI_WriteInt(File,"Objet18", pPlayerInfos[playerid][BagObject][17]);
    INI_WriteInt(File,"Objet19", pPlayerInfos[playerid][BagObject][18]);
    INI_WriteInt(File,"Objet20", pPlayerInfos[playerid][BagObject][19]);
    INI_WriteInt(File,"Objet21", pPlayerInfos[playerid][BagObject][20]);
    INI_WriteInt(File,"Objet22", pPlayerInfos[playerid][BagObject][21]);
    INI_WriteInt(File,"Objet23", pPlayerInfos[playerid][BagObject][22]);
    INI_WriteInt(File,"Objet24", pPlayerInfos[playerid][BagObject][23]);
    INI_WriteInt(File,"Objet25", pPlayerInfos[playerid][BagObject][24]);
    INI_WriteInt(File,"Objet26", pPlayerInfos[playerid][BagObject][25]);
    INI_WriteInt(File,"Objet27", pPlayerInfos[playerid][BagObject][26]);
    INI_WriteInt(File,"Objet28", pPlayerInfos[playerid][BagObject][27]);
    INI_WriteInt(File,"Objet29", pPlayerInfos[playerid][BagObject][28]);
    INI_WriteInt(File,"Objet30", pPlayerInfos[playerid][BagObject][29]);
    INI_WriteInt(File,"Objet31", pPlayerInfos[playerid][BagObject][30]);
    INI_WriteInt(File,"Objet32", pPlayerInfos[playerid][BagObject][31]);
    INI_WriteInt(File,"Objet33", pPlayerInfos[playerid][BagObject][32]);
    INI_WriteInt(File,"Objet34", pPlayerInfos[playerid][BagObject][33]);
    INI_WriteInt(File,"Objet35", pPlayerInfos[playerid][BagObject][34]);
    INI_WriteInt(File,"Objet36", pPlayerInfos[playerid][BagObject][35]);
    //---
    INI_WriteInt(File,"Level", pPlayerInfos[playerid][pLevel]);
    INI_WriteInt(File,"Exp", pPlayerInfos[playerid][pExp]);
    INI_WriteInt(File,"PointsCompetence", pPlayerInfos[playerid][pCompetence]);
    //---
    INI_WriteInt(File,"Boucher", pPlayerInfos[playerid][dBoucher]);
    INI_WriteInt(File,"Medecine", pPlayerInfos[playerid][dMedecine]);
    INI_WriteInt(File,"Sante", pPlayerInfos[playerid][dSante]);
    INI_WriteInt(File,"Artisan", pPlayerInfos[playerid][dArtisan]);
    INI_WriteInt(File,"Transporteur", pPlayerInfos[playerid][dTransporteur]);
    INI_WriteInt(File,"Pecheur", pPlayerInfos[playerid][dPecheur]);
    INI_WriteInt(File,"Mecano", pPlayerInfos[playerid][dMecano]);
    INI_WriteInt(File,"Jardinie", pPlayerInfos[playerid][dJardinier]);
    INI_WriteInt(File,"Athlete", pPlayerInfos[playerid][dAthlete]);
    INI_WriteInt(File,"Survivaliste", pPlayerInfos[playerid][dSurvivaliste]);
    INI_WriteInt(File,"Tank", pPlayerInfos[playerid][dTank]);
    INI_WriteInt(File,"Bomberman", pPlayerInfos[playerid][dBomberman]);
    INI_WriteInt(File,"Hydratation", pPlayerInfos[playerid][dHydra]);
    //---
    INI_WriteInt(File,"Aide1_16", pPlayerInfos[playerid][dAide1_16]);
    INI_WriteInt(File,"Aide17_32", pPlayerInfos[playerid][dAide17_32]);
    //---
    INI_WriteInt(File,"MissionReggae", pPlayerInfos[playerid][pReggaeShark]);
    INI_WriteInt(File,"MissionBeginning", pPlayerInfos[playerid][pIntro]);
    INI_WriteInt(File,"MissionAmy", pPlayerInfos[playerid][pAmy]);
    INI_WriteInt(File,"MissionKen", pPlayerInfos[playerid][pKen]);
    INI_WriteInt(File,"MissionDPO", pPlayerInfos[playerid][pDPO]);
	INI_Close(File);
}

public LoadUserOffline_auctions(playerid, name[], value[])
{
	new string[32];
    INI_Int("Or", pPlayerOfflineInfos[playerid][dRecievedGold]);
	for(new i = 0; i < 50; i ++)
	{
		format(string, sizeof(string), "Return%d", i);
    	INI_Int(string, pPlayerOfflineInfos[playerid][dReturnedItem][i]);
    }
    return 1;
}

SaveUserOffline(playerid)
{
	new string[64];
    new INI:File;
    format(string, sizeof(string), OFFPATH, GetName(playerid));
	File = INI_Open(string);
    INI_SetTag(File,"auctions");
    INI_WriteInt(File,"Or", pPlayerOfflineInfos[playerid][dRecievedGold]);
	for(new i = 0; i < 50; i ++)
	{
		format(string, sizeof(string), "Return%d", i);
    	INI_WriteInt(File,string, pPlayerOfflineInfos[playerid][dReturnedItem][i]);
    }
	INI_Close(File);
}

ShowStats(playerid, toplayerid)
{
    new sStats[512], string[128];
	switch(GetPlayerLanguage(toplayerid))
	{
	    case LANGUAGE_EN:
	    {
			format(string, sizeof(string), "{008800}%s - Registered on %s:\n\n\n", GetName(playerid), pPlayerInfos[playerid][sFirstCo]);
		  	strcat(sStats, string);
			format(string, sizeof(string), "{CC0000}DM:\n");
		  	strcat(sStats, string);
			format(string, sizeof(string), "{0033cc}Kills: {ffff00}%d\n", pPlayerInfos[playerid][pKills]);
		  	strcat(sStats, string);
			format(string, sizeof(string), "{0033cc}Headshots:{ffff00} %d\n", pPlayerInfos[playerid][pHeadshots]);
		  	strcat(sStats, string);
		  	format(string, sizeof(string), "{0033cc}Deaths: {ffff00}%d\n", pPlayerInfos[playerid][pDeaths]);
		  	strcat(sStats, string);
			format(string, sizeof(string), "{0033cc}Ratio:{ffff00} %.2f\n", floatdiv(pPlayerInfos[playerid][pKills], pPlayerInfos[playerid][pDeaths]));
		  	strcat(sStats, string);
			format(string, sizeof(string), "{0033cc}Zombies:{ffff00} %d\n", pPlayerInfos[playerid][pZombies]);
		  	strcat(sStats, string);
			format(string, sizeof(string), "{0033cc}Bosses:{ffff00} %d\n\n\n", pPlayerInfos[playerid][pBosses]);
		  	strcat(sStats, string);
		  	//---
			format(string, sizeof(string), "{CC0000}Game:\n");
		  	strcat(sStats, string);
		  	//---
		  	new dDays = floatround(floatdiv(pPlayerInfos[playerid][pGameTime], 1440), floatround_floor);
			format(string, sizeof(string), "{0033cc}Time online: {ffff00}%d days and %s\n", dDays, GetTimeString(pPlayerInfos[playerid][pGameTime] - (dDays * 1440)));
		  	strcat(sStats, string);
		  	//---
			format(string, sizeof(string), "{0033cc}Missions passed: {ffff00}%d\n", pPlayerInfos[playerid][pMissions]);
		  	strcat(sStats, string);
			format(string, sizeof(string), "{0033cc}Distance by foot: {ffff00}%.1fkm\n", floatdiv(pPlayerInfos[playerid][fDistanceFoot], 1000));
		  	strcat(sStats, string);
			format(string, sizeof(string), "{0033cc}Distance by wheels: {ffff00}%.1fkm\n", floatdiv(pPlayerInfos[playerid][fDistanceWheel], 1000));
		  	strcat(sStats, string);
		  	//---
			ShowPlayerDialog(playerid, 60, DIALOG_STYLE_MSGBOX, "Stats", sStats, "Close", "");
		}
		case LANGUAGE_FR:
	    {
			format(string, sizeof(string), "{008800}%s\n{ffff00}Inscrit le %s:\n\n\n", GetName(playerid), pPlayerInfos[playerid][sFirstCo]);
		  	strcat(sStats, string);
			format(string, sizeof(string), "{CC0000}DM:\n");
		  	strcat(sStats, string);
			format(string, sizeof(string), "{0033cc}Meurtres: {ffff00}%d\t\t\t", pPlayerInfos[playerid][pKills]);
		  	strcat(sStats, string);
			format(string, sizeof(string), "{0033cc}Headshots:{ffff00} %d\n", pPlayerInfos[playerid][pHeadshots]);
		  	strcat(sStats, string);
		  	format(string, sizeof(string), "{0033cc}Morts: {ffff00}%d\t\t\t", pPlayerInfos[playerid][pDeaths]);
		  	strcat(sStats, string);
			format(string, sizeof(string), "{0033cc}Ratio:{ffff00} %.2f\n", floatdiv(pPlayerInfos[playerid][pKills], pPlayerInfos[playerid][pDeaths]));
		  	strcat(sStats, string);
			format(string, sizeof(string), "{0033cc}Zombies:{ffff00} %d\n", pPlayerInfos[playerid][pZombies]);
		  	strcat(sStats, string);
			format(string, sizeof(string), "{0033cc}Bosses:{ffff00} %d\n\n\n", pPlayerInfos[playerid][pBosses]);
		  	strcat(sStats, string);
		  	//---
			format(string, sizeof(string), "{CC0000}Jeu:\n");
		  	strcat(sStats, string);
		  	//---
		  	new dDays = floatround(floatdiv(pPlayerInfos[playerid][pGameTime], 1440), floatround_floor);
			format(string, sizeof(string), "{0033cc}Temps de jeu: {ffff00}%d jours et %s\n", dDays, GetTimeString(pPlayerInfos[playerid][pGameTime] - (dDays * 1440)));
		  	strcat(sStats, string);
		  	//---
			format(string, sizeof(string), "{0033cc}Missions accomplies: {ffff00}%d\n", pPlayerInfos[playerid][pMissions]);
		  	strcat(sStats, string);
			format(string, sizeof(string), "{0033cc}Distance à pied: {ffff00}%.1fkm\n", floatdiv(pPlayerInfos[playerid][fDistanceFoot], 1000));
		  	strcat(sStats, string);
			format(string, sizeof(string), "{0033cc}Distance sur roues: {ffff00}%.1fkm\n", floatdiv(pPlayerInfos[playerid][fDistanceWheel], 1000));
		  	strcat(sStats, string);
		  	//---
			ShowPlayerDialog(playerid, 60, DIALOG_STYLE_MSGBOX, "Stats", sStats, "Fermer", "");
		}
		case LANGUAGE_ES:
	    {
		}
		case LANGUAGE_PG:
	    {
		}
		case LANGUAGE_IT:
	    {
		}
		case LANGUAGE_DE:
	    {
		}
	}
}

ResetPlayerVariables(playerid)//Pour remettre les variables à 0 quand un mec se co par exemple
{
	pPlayerInfos[playerid][dLogState] = UNLOGGED;
	pPlayerInfos[playerid][pPass] = 70123830;
	pPlayerInfos[playerid][pAdmin] = PLAYER;
	format(pPlayerInfos[playerid][sFirstCo], 30, " ");
	format(pPlayerInfos[playerid][sLastCo], 30, " ");
	pPlayerInfos[playerid][pBan] = 0;
	pPlayerInfos[playerid][pKills] = 0;
	pPlayerInfos[playerid][pDeaths] = 0;
	pPlayerInfos[playerid][pGameTime] = 0;
	pPlayerInfos[playerid][pHeadshots] = 0;
	pPlayerInfos[playerid][pZombies] = 0;
	pPlayerInfos[playerid][pBosses] = 0;
	pPlayerInfos[playerid][pMissions] = 0;
	pPlayerInfos[playerid][fDistanceWheel] = 0.0;
	pPlayerInfos[playerid][fDistanceFoot] = 0.0;
	pPlayerInfos[playerid][pGameTime] = 0;
	pPlayerInfos[playerid][pLangue] = LANGUAGE_EN;
	pPlayerInfos[playerid][pBag] = PATROL_PACK;
	pPlayerInfos[playerid][pHunger] = 100;
	pPlayerInfos[playerid][pThirst] = 100;
	pPlayerInfos[playerid][pSleep] = 100;
	pPlayerInfos[playerid][pGold] = 0;
	pPlayerInfos[playerid][pHealth] = 1000;
	pPlayerInfos[playerid][pArmour] = 0;
	pPlayerInfos[playerid][xPos] = 0.0;
	pPlayerInfos[playerid][yPos] = 0.0;
	pPlayerInfos[playerid][zPos] = 0.0;
	pPlayerInfos[playerid][aPos] = 0.0;
	pPlayerInfos[playerid][pTemperature] = 372;
	pPlayerInfos[playerid][bLeg] = true;
	pPlayerInfos[playerid][bHemorragie] = false;
	//---
	pPlayerInfos[playerid][pArme1][0] = 0;
	pPlayerInfos[playerid][pArme1][1] = 0;
	pPlayerInfos[playerid][pArme1][2] = 0;
	pPlayerInfos[playerid][pArme2][0] = 0;
	pPlayerInfos[playerid][pArme2][1] = 0;
	pPlayerInfos[playerid][pArme2][2] = 0;
	pPlayerInfos[playerid][pArme3][0] = 0;
	pPlayerInfos[playerid][pArme3][1] = 0;
	pPlayerInfos[playerid][pArme3][2] = 0;
	pPlayerInfos[playerid][pArme4][0] = 0;
	pPlayerInfos[playerid][pArme4][1] = 0;
	pPlayerInfos[playerid][pArme4][2] = 0;
	//---
	pPlayerInfos[playerid][pSkin] = 0;
	pPlayerInfos[playerid][pChapeau] = 0;
	pPlayerInfos[playerid][pLunettes] = 0;
	pPlayerInfos[playerid][pMasque] = 0;
	pPlayerInfos[playerid][pTorse] = 0;
	for(new i = 0; i < 9; i ++)
	{
	    pPlayerInfos[playerid][fPosChapeau][i] = 0.0;
	    pPlayerInfos[playerid][fPosLunettes][i] = 0.0;
	    pPlayerInfos[playerid][fPosMasque][i] = 0.0;
	    pPlayerInfos[playerid][fPosTorse][i] = 0.0;
	}
	//---
    pPlayerInfos[playerid][HandObject] = 0;
    for(new i = 0; i < 36; i ++) pPlayerInfos[playerid][BagObject][i] = 0;
    //---
    pPlayerInfos[playerid][pLevel] = 1;
    pPlayerInfos[playerid][pExp] = 0;
    pPlayerInfos[playerid][pCompetence] = 1;
    pPlayerInfos[playerid][dBoucher] = 0;
    pPlayerInfos[playerid][dMedecine] = 0;
    pPlayerInfos[playerid][dSante] = 0;
    pPlayerInfos[playerid][dArtisan] = 0;
	pPlayerInfos[playerid][dTransporteur] = 0;
	pPlayerInfos[playerid][dPecheur] = 0;
	pPlayerInfos[playerid][dMecano] = 0;
	pPlayerInfos[playerid][dJardinier] = 0;
	pPlayerInfos[playerid][dAthlete] = 0;
	pPlayerInfos[playerid][dSurvivaliste] = 0;
	pPlayerInfos[playerid][dTank] = 0;
    pPlayerInfos[playerid][dBomberman]  = 0;
    pPlayerInfos[playerid][dHydra]  = 0;
    //---
	pPlayerInfos[playerid][pReggaeShark] = 0;
	pPlayerInfos[playerid][pIntro] = 0;
	pPlayerInfos[playerid][pAmy] = 0;
	pPlayerInfos[playerid][pKen] = 0;
	pPlayerInfos[playerid][pDPO] = 0;
    //---
    for(new i = 0; i < 32; i ++) pPlayerInfos[playerid][bAide][i] = false;
	pPlayerInfos[playerid][dAide1_16] = 0;
	pPlayerInfos[playerid][dAide17_32] = 0;
}

public HasPlayerGold(playerid, gold)
{
	return (pPlayerInfos[playerid][pGold] >= gold) ? true : false;
}

SetupConstructibles()
{
	//---TANKS
	for(new i = 0; i < MAX_TANKS; i ++)
	{
		dTanks[i][oTank][0] = INVALID_OBJECT_ID;
		dTanks[i][oTank][1] = INVALID_OBJECT_ID;
		//dTanks[i][oTank][2] = INVALID_OBJECT_ID;
		dTanks[i][dTankGas] = -1;
		dTanks[i][tTankFuel] = Text3D:INVALID_3DTEXT_ID;
		dTanks[i][xTank] = 0.0;
		dTanks[i][yTank] = 0.0;
		dTanks[i][zTank] = 0.0;
		dTanks[i][aTank] = 0.0;
	}
	//---LINGOTS
	for(new i = 0; i < MAX_GOLD_INGOTS; i ++)
	{
		dOr[i][dOrAmount] = 0;
		dOr[i][oOr] = INVALID_OBJECT_ID;
		dOr[i][OrText] = Text3D:INVALID_3DTEXT_ID;
		dOr[i][xOr] = 0.0;
		dOr[i][yOr] = 0.0;
		dOr[i][zOr] = 0.0;
	}
	//---GUNRACKS
	for(new i = 0; i < MAX_GUNRACKS; i ++)
	{
	    dGunRackInfos[i][oRack] = INVALID_OBJECT_ID;
	    dGunRackInfos[i][bRack] = false;
	    dGunRackInfos[i][xRack] = 0.0;
	    dGunRackInfos[i][yRack] = 0.0;
	    dGunRackInfos[i][zRack] = 0.0;
	    dGunRackInfos[i][aRack] = 0.0;
	    for(new j = 0; j < 4; j ++)
		{
			dGunRackInfos[i][oGun][j] = INVALID_OBJECT_ID;
	    	dGunRackInfos[i][dGun][j] = 0;
	    	dGunRackInfos[i][dGunAmmo][j] = 0;
		}
	}
	//---FRIGOS
	for(new i = 0; i < MAX_FRIDGES; i ++)
	{
	    dFridgeInfos[i][oFridge] = INVALID_OBJECT_ID;
	    dFridgeInfos[i][bFridge] = false;
	    dFridgeInfos[i][xFridge] = 0.0;
	    dFridgeInfos[i][yFridge] = 0.0;
	    dFridgeInfos[i][zFridge] = 0.0;
	    dFridgeInfos[i][aFridge] = 0.0;
	    for(new j = 0; j < 5; j ++)
		{
	    	dFridgeInfos[i][dFood][j] = 0;
	    	dFridgeInfos[i][dFoodAmount][j] = 0;
		}
	}
	//---SAFES
	for(new i = 0; i < MAX_SAFES; i ++)
	{
	    dSafeInfos[i][oSafe][0] = INVALID_OBJECT_ID;
	    dSafeInfos[i][oSafe][1] = INVALID_OBJECT_ID;
	    dSafeInfos[i][bSafe] = false;
	    dSafeInfos[i][bOpenSafe] = false;
	    dSafeInfos[i][xSafe] = 0.0;
	    dSafeInfos[i][ySafe] = 0.0;
	    dSafeInfos[i][zSafe] = 0.0;
	    dSafeInfos[i][aSafe] = 0.0;
	    for(new j = 0; j < 12; j ++) dSafeInfos[i][dItem][j] = 0;
	}
	//---COLLECTEURS
	for(new i = 0; i < MAX_COLLECTORS; i ++)
	{
		dCollector[i][dEau] = -1;
		dCollector[i][oCollector][0] = INVALID_OBJECT_ID;
		dCollector[i][oCollector][1] = INVALID_OBJECT_ID;
		dCollector[i][CollectorText] = Text3D:INVALID_3DTEXT_ID;
		dCollector[i][xEau] = 0.0;
		dCollector[i][yEau] = 0.0;
		dCollector[i][zEau] = 0.0;
		dCollector[i][aEau] = 0.0;
	}
	//---BROYEURS
	for(new i = 0; i < MAX_SHREDDERS; i ++)
	{
		dShredder[i][dBroyeur] = -1;
		dShredder[i][oBroyeur] = INVALID_OBJECT_ID;
		dShredder[i][xBroyeur] = 0.0;
		dShredder[i][yBroyeur] = 0.0;
		dShredder[i][zBroyeur] = 0.0;
		dShredder[i][aBroyeur] = 0.0;
	}
	//---BRASERO
	for(new i = 0; i < MAX_BRASEROS; i ++)
	{
		dBraseroInfos[i][oBrasero] = INVALID_OBJECT_ID;
		dBraseroInfos[i][oFire] = INVALID_OBJECT_ID;
		dBraseroInfos[i][dBrasero] = 0;
		dBraseroInfos[i][xBrasero] = 0.0;
		dBraseroInfos[i][yBrasero] = 0.0;
		dBraseroInfos[i][zBrasero] = 0.0;
		dBraseroInfos[i][aBrasero] = 0.0;
	}
	//---FEUX
	for(new i = 0; i < MAX_FIRES; i ++)
	{
		dFire[i][oFeu] = INVALID_OBJECT_ID;
		dFire[i][dTempsFeu] = 0;
		dFire[i][xFeu] = 0.0;
		dFire[i][yFeu] = 0.0;
		dFire[i][zFeu] = 0.0;
		dFire[i][aFeu] = 0.0;
	}
	//---TENTES
	for(new i = 0; i < MAX_TENTS; i ++)
	{
		dTent[i][bTent] = false;
		dTent[i][oTent][0] = INVALID_OBJECT_ID;
		dTent[i][oTent][1] = INVALID_OBJECT_ID;
		dTent[i][oTent][2] = INVALID_OBJECT_ID;
		dTent[i][oTent][3] = INVALID_OBJECT_ID;
		dTent[i][oTent][4] = INVALID_OBJECT_ID;
		dTent[i][oTent][5] = INVALID_OBJECT_ID;
		dTent[i][xTent] = 0.0;
		dTent[i][yTent] = 0.0;
		dTent[i][zTent] = 0.0;
		dTent[i][aTent] = 0.0;
	}
	//---MAISONS
	for(new i = 0; i < MAX_HOUSES; i ++)
	{
		dHouse[i][dHouseType] = 0;
		dHouse[i][oHouse][0] = INVALID_OBJECT_ID;
		dHouse[i][oHouse][1] = INVALID_OBJECT_ID;
		dHouse[i][oHouse][2] = INVALID_OBJECT_ID;
		dHouse[i][oPorte] = INVALID_OBJECT_ID;
		dHouse[i][bPorte][0] = false;
		dHouse[i][bPorte][1] = false;
		dHouse[i][xHouse] = 0.0;
		dHouse[i][yHouse] = 0.0;
		dHouse[i][zHouse] = 0.0;
		dHouse[i][aHouse] = 0.0;
	}
	//---GARAGES
	for(new i = 0; i < MAX_GARAGES; i ++)
	{
		dGarage[i][oGarage][0] = INVALID_OBJECT_ID;
		dGarage[i][oGarage][1] = INVALID_OBJECT_ID;
		dGarage[i][xGarage] = 0.0;
		dGarage[i][yGarage] = 0.0;
		dGarage[i][zGarage] = 0.0;
		dGarage[i][aGarage] = 0.0;
		dGarage[i][bGarage][0] = false;
		dGarage[i][bGarage][1] = false;
	}
	//---LITS
	for(new i = 0; i < MAX_BEDS; i ++)
	{
		dBed[i][dBedType] = -1;
		dBed[i][oBed] = INVALID_OBJECT_ID;
		dBed[i][xBed] = 0.0;
		dBed[i][yBed] = 0.0;
		dBed[i][zBed] = 0.0;
		dBed[i][aBed] = 0.0;
	}
	//---SIÈGES
	for(new i = 0; i < MAX_SEATS; i ++)
	{
		dSeat[i][dSeatType] = -1;
		dSeat[i][oSeat] = INVALID_OBJECT_ID;
		dSeat[i][xSeat] = 0.0;
		dSeat[i][ySeat] = 0.0;
		dSeat[i][zSeat] = 0.0;
		dSeat[i][aSeat] = 0.0;
	}
	//---PANNEAUX
	/*for(new i = 0; i < MAX_BOARDS; i ++)
	{
		dBoard[i][bBoard] = false;
		dBoard[i][oBoard] = INVALID_OBJECT_ID;
		dBoard[i][xBoard] = 0.0;
		dBoard[i][yBoard] = 0.0;
		dBoard[i][zBoard] = 0.0;
		dBoard[i][aBoard] = 0.0;
	}*/
	//---DÉCO
	for(new i = 0; i < MAX_FURN; i ++)
	{
		dFurn[i][dFurnitureID] = 0;
		dFurn[i][oFurniture] = INVALID_OBJECT_ID;
		dFurn[i][xFurn] = 0.0;
		dFurn[i][yFurn] = 0.0;
		dFurn[i][zFurn] = 0.0;
		dFurn[i][rxFurn] = 0.0;
		dFurn[i][ryFurn] = 0.0;
		dFurn[i][rzFurn] = 0.0;
	}
	//---PLANTES
	for(new i = 0; i < MAX_PLANTS; i ++)
	{
		dPlant[i][dPlantID] = 0;
		dPlant[i][dResistance] = 0;
		dPlant[i][dFruits] = 0;
		dPlant[i][oPlantObject] = INVALID_OBJECT_ID;
		dPlant[i][dGrowTime] = 0;
		dPlant[i][xPlant] = 0.0;
		dPlant[i][yPlant] = 0.0;
		dPlant[i][zPlant] = 0.0;
		dPlant[i][aPlant] = 0.0;
	}
	//---OBJETS
	for(new i = 0; i < MAX_GROUND_ITEMS; i ++)
	{
	    dItems[i][ItemID] = -1;
	    dItems[i][ObjectID] = INVALID_OBJECT_ID;
	    dItems[i][bAutoSpawn] = false;
	    dItems[i][ObjectText] = Text3D:INVALID_3DTEXT_ID;
	    dItems[i][xItem] = 0.0;
	    dItems[i][yItem] = 0.0;
	    dItems[i][zItem] = 0.0;
	}
	//---ARMES
	for(new i = 0; i < MAX_GROUND_WEAPONS; i ++)
	{
		dGuns[i][WeaponID] = 0;
		dGuns[i][ObjectID] = 0;
		dGuns[i][WeaponAmmo] = 0;
		dGuns[i][WeaponText] = Text3D:INVALID_3DTEXT_ID;
		dGuns[i][xWeapon] = 0.0;
		dGuns[i][yWeapon] = 0.0;
		dGuns[i][zWeapon] = 0.0;
	}
	//---VÉHICULES
	for(new i = 0; i < MAX_SPAWN_VEHICLES; i ++)
	{
	    dVehicleInfos[i][dVehicleID] = INVALID_VEHICLE_ID;
	    dVehicleInfos[i][dVehicleModel] = 0;
	    dVehicleInfos[i][dWheels] = 0;
	    dVehicleInfos[i][dItem] = 0;
	    dVehicleInfos[i][dFuel] = 0;
	    dVehicleInfos[i][fHealth] = 1000.0;
	    dVehicleInfos[i][bEngine] = false;
	    for(new j = 0; j < 4; j ++) dVehicleInfos[i][bWheel][j] = false;
	    dVehicleInfos[i][xVeh] = 0.0;
	    dVehicleInfos[i][yVeh] = 0.0;
	    dVehicleInfos[i][zVeh] = 0.0;
	    dVehicleInfos[i][aVeh] = 0.0;
	    for(new j = 0; j < 6; j ++) dVehicleInfos[i][TrunkObject][j] = 0;
		dVehicleInfos[i][dColor][0] = 86;
		dVehicleInfos[i][dColor][1] = 86;
	}
}

ProcessPlayerSave(playerid, bool:save)
{
	if(save)//Si c'est pour sauvegarder
	{
	    for(new i = 0; i < 16; i ++)
	    {
			pPlayerInfos[playerid][dAide1_16] = (pPlayerInfos[playerid][dAide1_16] | (pPlayerInfos[playerid][bAide][i] ? 1 : 0) << i);
		}
	    for(new i = 16; i < 32; i ++)
	    {
			pPlayerInfos[playerid][dAide17_32] = (pPlayerInfos[playerid][dAide17_32] | (pPlayerInfos[playerid][bAide][i] ? 1 : 0) << i);
		}
	}
	else
	{
	    for(new i = 0; i < 16; i ++)
	    {
		    pPlayerInfos[playerid][bAide][i] = (pPlayerInfos[playerid][dAide1_16] >> i & 1 == 1 ? true : false);
		}
	    for(new i = 16; i < 32; i ++)
	    {
		    pPlayerInfos[playerid][bAide][i] = (pPlayerInfos[playerid][dAide17_32] >> i & 1 == 1 ? true : false);
		}
	}
}

public GetPlayerLanguage(playerid)
{
	return pPlayerInfos[playerid][pLangue];
}

public SaveMissionProgress(playerid, const missionname[], info)
{
	if(!strcmp(missionname, "Intro", false))
	{
	    pPlayerInfos[playerid][pIntro] = info;
	}
	if(!strcmp(missionname, "Amy", false))
	{
	    pPlayerInfos[playerid][pAmy] = info;
	}
	if(!strcmp(missionname, "Ken", false))
	{
	    pPlayerInfos[playerid][pKen] = info;
	}
	if(!strcmp(missionname, "DPO", false))
	{
	    pPlayerInfos[playerid][pDPO] = info;
	}
	if(!strcmp(missionname, "Reggae Shark", false))
	{
	    pPlayerInfos[playerid][pReggaeShark] = info;
	}
	return false;
}

public LoadMissionProgress(playerid, const missionname[])
{
	if(!strcmp(missionname, "Intro", false))
	{
	    return pPlayerInfos[playerid][pIntro];
	}
	if(!strcmp(missionname, "Amy", false))
	{
	    return pPlayerInfos[playerid][pAmy];
	}
	if(!strcmp(missionname, "Ken", false))
	{
	    return pPlayerInfos[playerid][pKen];
	}
	if(!strcmp(missionname, "DPO", false))
	{
	    return pPlayerInfos[playerid][pDPO];
	}
	if(!strcmp(missionname, "Reggae Shark", false))
	{
	    return pPlayerInfos[playerid][pReggaeShark];
	}
	return 0;
}

UserPath(playerid)//Pour avoir le fichier d'un joueur
{
	new string[50];
	new sName[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, sName, MAX_PLAYER_NAME + 1);
	format(string,sizeof(string), UPATH, sName);
	return string;
}

udb_hash(buf[])//Fonction de cryptage
{
	new length = strlen(buf);
	new s1 = 1;
 	new s2 = 0;
	new n;
	for (n = 0; n < length; n ++)
	{
		s1 = (s1 + buf[n]) % 65521;
		s2 = (s2 + s1)     % 65521;
 	}
	return (s2 << 16) + s1;
}

//---GROUPES---//
public GetPlayerGroup(playerid)
{
	return pGroup[playerid];
}

GetFreeGroup()
{
	for(new i = 0; i < MAX_GROUPS; i ++)
	{
	    if(!dGroup[i][bActive]) return i;
	}
	return -1;
}

CreateGroup(groupid, playerid, const name[])
{
	if(dGroup[groupid][bActive]) return false;
	dGroup[groupid][bActive] = true;
	for(new i = 0; i < MAX_GROUP_SIZE; i ++) dGroup[groupid][dMembers][i] = INVALID_PLAYER_ID;
	dGroup[groupid][dMembers][0] = playerid;
	dGroup[groupid][dBoss] = playerid;
	format(dGroup[groupid][sGroupName], 16, name);
	pGroup[playerid] = groupid;
	//---
    tGroupText[playerid] = CreatePlayerTextDraw(playerid,0.000000, 140.000000, " ");
	PlayerTextDrawBackgroundColor(playerid, tGroupText[playerid], 255);
	PlayerTextDrawFont(playerid, tGroupText[playerid], 2);
	PlayerTextDrawLetterSize(playerid, tGroupText[playerid], 0.149999, 1.000000);
	PlayerTextDrawColor(playerid, tGroupText[playerid], BLEU);
	PlayerTextDrawSetOutline(playerid, tGroupText[playerid], 0);
	PlayerTextDrawSetProportional(playerid, tGroupText[playerid], 1);
	PlayerTextDrawSetShadow(playerid, tGroupText[playerid], 1);
	PlayerTextDrawUseBox(playerid, tGroupText[playerid], 1);
	PlayerTextDrawBoxColor(playerid, tGroupText[playerid], 119);
	PlayerTextDrawTextSize(playerid, tGroupText[playerid], 74.000000, 40.000000);
	PlayerTextDrawSetSelectable(playerid, tGroupText[playerid], true);
	//---
	UpdateGroupTextDraw(groupid);
	return true;
}

DissolveTeam(groupid)
{
    SendGroupMessage(groupid, "[TEAM]The team has been dissolved.", "[TEAM]Le groupe a été dissout.", "[TEAM]Espagnol", "[TEAM]Portugais", "[TEAM]Italien", "[TEAM]Allemand");
	for(new i = 0; i < MAX_GROUP_SIZE; i ++)
	{
	    if(dGroup[groupid][dMembers][i] != INVALID_PLAYER_ID) RemoveGroupMember(dGroup[groupid][dMembers][i], true);
	}
	format(dGroup[groupid][sGroupName], 16, "Team %d", groupid);
	dGroup[groupid][bActive] = false;
	dGroup[groupid][dBoss] = INVALID_PLAYER_ID;
}

GetGroupFreeSlot(groupid)
{
	for(new i = 0; i < MAX_GROUP_SIZE; i ++)
	{
	    if(dGroup[groupid][dMembers][i] == INVALID_PLAYER_ID) return i;
	}
	return -1;
}

public GetPlayerFreeMates(playerid)
{
	new groupid = GetPlayerGroup(playerid);
	new Float:x, Float:y, Float:z, dMates;
	GetPlayerPos(playerid, x, y, z);
	for(new i = 0; i < MAX_GROUP_SIZE; i ++) if(dGroup[groupid][dMembers][i] != INVALID_PLAYER_ID && !CallRemoteFunction("GetPlayerMission", "i", dGroup[groupid][dMembers][i]) && IsPlayerInRangeOfPoint(dGroup[groupid][dMembers][i], 5.0, x, y, z)) dMates ++;
	return dMates;
}

GetGroupSize(groupid)
{
	new dGroupSize = 0;
	for(new i = 0; i < MAX_GROUP_SIZE; i ++)
	{
	    if(dGroup[groupid][dMembers][i] != INVALID_PLAYER_ID) dGroupSize ++;
	}
	return dGroupSize;
}

AddGroupMember(playerid, groupid)
{
	new string[6][128];
	new dSlot = GetGroupFreeSlot(groupid);
	if(dSlot != -1)
	{
		pGroup[playerid] = groupid;
	}
	dGroup[groupid][dMembers][dSlot] = playerid;
	//---
    tGroupText[playerid] = CreatePlayerTextDraw(playerid,0.000000, 140.000000, " ");
	PlayerTextDrawBackgroundColor(playerid, tGroupText[playerid], 255);
	PlayerTextDrawFont(playerid, tGroupText[playerid], 2);
	PlayerTextDrawLetterSize(playerid, tGroupText[playerid], 0.149999, 1.000000);
	PlayerTextDrawColor(playerid, tGroupText[playerid], BLEU);
	PlayerTextDrawSetOutline(playerid, tGroupText[playerid], 0);
	PlayerTextDrawSetProportional(playerid, tGroupText[playerid], 1);
	PlayerTextDrawSetShadow(playerid, tGroupText[playerid], 1);
	PlayerTextDrawUseBox(playerid, tGroupText[playerid], 1);
	PlayerTextDrawBoxColor(playerid, tGroupText[playerid], 119);
	PlayerTextDrawTextSize(playerid, tGroupText[playerid], 74.000000, 40.000000);
	PlayerTextDrawSetSelectable(playerid, tGroupText[playerid], true);
	//---
	UpdateGroupTextDraw(groupid);
	//---
	format(string[0], 128, "[TEAM]%s joined the team.", GetName(playerid));
	format(string[1], 128, "[TEAM]%s a rejoint le groupe.", GetName(playerid));
	format(string[2], 128, "[TEAM]%s Espagnol.", GetName(playerid));
	format(string[3], 128, "[TEAM]%s Portugais.", GetName(playerid));
	format(string[4], 128, "[TEAM]%s Italien.", GetName(playerid));
	format(string[5], 128, "[TEAM]%s Allemand.", GetName(playerid));
	SendGroupMessage(groupid, string[0], string[1], string[2], string[3], string[4], string[5]);
	//---
	for(new i = 0; i < MAX_GROUP_SIZE; i ++)
	{
	    SetPlayerMarkerForPlayer(playerid, dGroup[groupid][dMembers][i], BLEU);
	    SetPlayerMarkerForPlayer(dGroup[groupid][dMembers][i], playerid, BLEU);
	    
	}
}

RemoveGroupMember(playerid, bool:dissolve)
{
	new string[6][128];
	new groupid = pGroup[playerid];
	for(new i = 0; i < MAX_GROUP_SIZE; i ++)
	{
		if(dGroup[groupid][dMembers][i] == playerid)
		{
			dGroup[groupid][dMembers][i] = INVALID_PLAYER_ID;
			break;
		}
	}
	if(dGroup[groupid][dBoss] == playerid)
	{
		for(new i = 0; i < MAX_GROUP_SIZE; i ++)
		{
			if(dGroup[groupid][dMembers][i] != INVALID_PLAYER_ID)
			{
				dGroup[groupid][dBoss] = dGroup[groupid][dMembers][i];
				break;
			}
		}
		format(string[0], 128, "[TEAM]%s has become the team leader.", GetName(dGroup[groupid][dBoss]));
		format(string[1], 128, "[TEAM]%s est devenu le chef de groupe.", GetName(dGroup[groupid][dBoss]));
		format(string[2], 128, "[TEAM]%s Espagnol.", GetName(dGroup[groupid][dBoss]));
		format(string[3], 128, "[TEAM]%s Portugais.", GetName(dGroup[groupid][dBoss]));
		format(string[4], 128, "[TEAM]%s Italien.", GetName(dGroup[groupid][dBoss]));
		format(string[5], 128, "[TEAM]%s Allemand.", GetName(dGroup[groupid][dBoss]));
		SendGroupMessage(groupid, string[0], string[1], string[2], string[3], string[4], string[5]);
	}
	format(string[0], 128, "[TEAM]%s left the team.", GetName(playerid));
	format(string[1], 128, "[TEAM]%s a quitté le groupe.", GetName(playerid));
	format(string[2], 128, "[TEAM]%s Espagnol.", GetName(playerid));
	format(string[3], 128, "[TEAM]%s Portugais.", GetName(playerid));
	format(string[4], 128, "[TEAM]%s Italien.", GetName(playerid));
	format(string[5], 128, "[TEAM]%s Allemand.", GetName(playerid));
	SendGroupMessage(groupid, string[0], string[1], string[2], string[3], string[4], string[5]);
	UpdateGroupTextDraw(groupid);
	pGroup[playerid] = -1;
	//---
	for(new i = 0; i < MAX_GROUP_SIZE; i ++)
	{
	    SetPlayerMarkerForPlayer(playerid, dGroup[groupid][dMembers][i], 0xCC000000);
	    SetPlayerMarkerForPlayer(dGroup[groupid][dMembers][i], playerid, 0xCC000000);

	}
	//---
	PlayerTextDrawHide(playerid, tGroupText[playerid]);
	PlayerTextDrawDestroy(playerid, tGroupText[playerid]);
	tGroupText[playerid] = PlayerText:INVALID_TEXT_DRAW;
	//---
	if(!dissolve)
	{
		new dGroupMembers = 0;
		for(new i = 0; i < MAX_GROUP_SIZE; i ++)
		{
		    if(dGroup[groupid][dMembers][i] != INVALID_PLAYER_ID)
		    {
		        dGroupMembers ++;
		    }
		}
		if(dGroupMembers < 2)
		{
		    DissolveTeam(groupid);
		}
	}
}

SendGroupMessage(groupid, const en[], const fr[], const es[], const pg[], const it[], const de[])//Envoyer un message à un joueur
{
	for(new i = 0; i < MAX_GROUP_SIZE; i ++)
	{
		if(dGroup[groupid][dMembers][i] != INVALID_PLAYER_ID)
		{
			switch(pPlayerInfos[dGroup[groupid][dMembers][i]][pLangue])//Pour envoyer un message à un joueur, on doit l'écrire dans toutes les langues, puis on lui envoie celle qui lui correspond
			{
			    case LANGUAGE_EN: SendClientMessage(dGroup[groupid][dMembers][i], BLEU, en);
			    case LANGUAGE_FR: SendClientMessage(dGroup[groupid][dMembers][i], BLEU, fr);
			    case LANGUAGE_ES: SendClientMessage(dGroup[groupid][dMembers][i], BLEU, es);
			    case LANGUAGE_PG: SendClientMessage(dGroup[groupid][dMembers][i], BLEU, pg);
			    case LANGUAGE_IT: SendClientMessage(dGroup[groupid][dMembers][i], BLEU, it);
			    case LANGUAGE_DE: SendClientMessage(dGroup[groupid][dMembers][i], BLEU, de);
			}
		}
	}
}

UpdateGroupTextDraw(groupid)
{
	new string[256], string2[MAX_PLAYER_NAME + 9], dFreeSlots;
	format(string, sizeof(string), "%s:~n~", dGroup[groupid][sGroupName]);
	strcat(string, "~w~");
	for(new i = 0; i < MAX_GROUP_SIZE; i ++)
	{
		if(dGroup[groupid][dMembers][i] == INVALID_PLAYER_ID)
		{
			dFreeSlots ++;
		}
		else
		{
		    if(dGroup[groupid][dBoss] == dGroup[groupid][dMembers][i])
			{
				if(i == MAX_GROUP_SIZE - 1) format(string2, sizeof(string2), "~r~%s", GetName(dGroup[groupid][dMembers][i]));
				else format(string2, sizeof(string2), "~r~%s~n~~w~", GetName(dGroup[groupid][dMembers][i]));
				strcat(string, string2);
			}
		    else
			{
				if(i == MAX_GROUP_SIZE - 1) format(string2, sizeof(string2), "%s", GetName(dGroup[groupid][dMembers][i]));
				else format(string2, sizeof(string2), "%s~n~", GetName(dGroup[groupid][dMembers][i]));
				strcat(string, string2);
			}
		}
	}
	if(dFreeSlots != 0)
	{
		for(new i = 0; i < dFreeSlots; i ++)
		{
		    strcat(string, "~n~");
		}
	}
	//---
	for(new i = 0; i < MAX_GROUP_SIZE; i ++)
	{
	    if(dGroup[groupid][dMembers][i] != INVALID_PLAYER_ID)
		{
		    PlayerTextDrawSetString(dGroup[groupid][dMembers][i], tGroupText[dGroup[groupid][dMembers][i]], string);
			if(!IsHUDHiddenForPlayer(dGroup[groupid][dMembers][i])) PlayerTextDrawShow(dGroup[groupid][dMembers][i], tGroupText[dGroup[groupid][dMembers][i]]);
		}
	}
}

//---SAC À DOS---//
AttachPlayerBackPack(playerid)
{
	switch(pPlayerInfos[playerid][pBag])
	{
	    case PATROL_PACK: S_SetPlayerAttachedObject(playerid, BAG_ID, 19944, 1, 0.1243, -0.0686, 0.0, 270.0, 180.0, 90.0, 0.5, 0.2, 0.5, -1, -1);
	    case CZECH_VEST: S_SetPlayerAttachedObject(playerid, BAG_ID, 371, 1, 0.075, -0.162, 0.0, 0.0, 90.0, 0.0, 1.0, 1.0, 1.0, -1, -1);//, 0xFF073B00, 0xFF073B00);
	    case ASSAULT_PACK: S_SetPlayerAttachedObject(playerid, BAG_ID, 3026, 1, -0.1049, -0.0418, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, -1, -1);
	    case ALICE_PACK: S_SetPlayerAttachedObject(playerid, BAG_ID, 1310, 1, -0.0960, -0.162, 0.0, 0.0, 90.0, 0.0, 1.0, 1.0, 1.0, -1, -1);//, 0xFF073B00, 0xFF073B00);
		case COYOTE_PACK: S_SetPlayerAttachedObject(playerid, BAG_ID, 19559, 1, 0.1403, -0.0316, 0.0, 0.0, 90.0, 0.0, 1.0, 1.0, 1.0, -1, -1);
	}
}

//---CULTURE---//
CreatePlant(plant, fruits, growtime, Float:x, Float:y, Float:z, Float:angle, load = -1)
{
	static slotid;
	if(load == -1 && dPlant[slotid][dPlantID] != 0)
	{
		for(new i = 0; i < MAX_PLANTS; i ++)
		{
			if(dPlant[i][dPlantID] == 0)
		    {
		    	slotid = i;
		        break;
		    }
		}
	}
	if(load == -1 && dPlant[slotid][dPlantID] != 0) DestroyDynamicObject(dPlant[slotid][oPlantObject]);
	//---
	new dModelID;
	switch(plant)
	{
	    case 1, 4: dModelID = 19837;
	    case 2: dModelID = 19838;
	    case 3, 5: dModelID = 19839;
	}
	dPlant[(load == -1) ? slotid : load][oPlantObject] = CreateDynamicObject(dModelID, x, y, z - 1.128, 0.0, 0.0, angle, -1, -1, -1, 25.0, 20.0);
	//---
	dPlant[(load == -1) ? slotid : load][xPlant] = x;
	dPlant[(load == -1) ? slotid : load][yPlant] = y;
	dPlant[(load == -1) ? slotid : load][zPlant] = z;
	dPlant[(load == -1) ? slotid : load][aPlant] = angle;
	dPlant[(load == -1) ? slotid : load][dGrowTime] = (growtime > 0) ? growtime : 0;
	dPlant[(load == -1) ? slotid : load][dPlantID] = plant;
	dPlant[(load == -1) ? slotid : load][dFruits] = fruits;
	switch(plant)
	{
	    case 1: dPlant[(load == -1) ? slotid : load][dResistance] = 1;
	    case 2: dPlant[(load == -1) ? slotid : load][dResistance] = 2;
	    case 3: dPlant[(load == -1) ? slotid : load][dResistance] = 5;
	    case 4: dPlant[(load == -1) ? slotid : load][dResistance] = 2;
	    case 5: dPlant[(load == -1) ? slotid : load][dResistance] = 10;
	}
	//---
	if(dPlant[(load == -1) ? slotid : load][dGrowTime] == 0) GrowPlant((load == -1) ? slotid : load);
	//---
    slotid ++;
    if(slotid == MAX_PLANTS) slotid = 0;
    return (slotid == 0) ? MAX_PLANTS : slotid - 1;
}

DestroyPlant(plantid)
{
	DestroyDynamicObject(dPlant[plantid][oPlantObject]);
	dPlant[plantid][oPlantObject] = INVALID_OBJECT_ID;
	dPlant[plantid][dGrowTime] = 0;
	dPlant[plantid][dFruits] = 0;
	dPlant[plantid][dPlantID] = 0;
	dPlant[plantid][xPlant] = 0.0;
	dPlant[plantid][yPlant] = 0.0;
	dPlant[plantid][zPlant] = 0.0;
	dPlant[plantid][aPlant] = 0.0;
}

GrowPlant(plantid)
{
    //							Blé  	Oranger     Pommier     Tomatier    Sapin
	new dPlantModels[] = 		{862, 	904,		673,		2010,		687};
	new Float:fPlantZOffset[] = {2.0,	1.0097,		3.7,		1.297,		2.0};
	switch(dPlant[plantid][dPlantID])
	{
	    case 1: dPlant[plantid][dResistance] = 1;
	    case 2: dPlant[plantid][dResistance] = 2;
	    case 3: dPlant[plantid][dResistance] = 5;
	    case 4: dPlant[plantid][dResistance] = 2;
	    case 5: dPlant[plantid][dResistance] = 10;
	}
	DestroyDynamicObject(dPlant[plantid][oPlantObject]);
	dPlant[plantid][oPlantObject] = CreateDynamicObject(dPlantModels[dPlant[plantid][dPlantID] - 1], dPlant[plantid][xPlant], dPlant[plantid][yPlant], dPlant[plantid][zPlant] - fPlantZOffset[dPlant[plantid][dPlantID] - 1], 0.0, 0.0, dPlant[plantid][aPlant], -1, -1, -1, 25.0, 20.0);
}

public LoadPlants_data(name[],value[])
{
	new string[50];
	for(new i = 0; i < MAX_PLANTS; i ++)
	{
	    format(string, sizeof(string), "Plante%d", i);
		INI_Int(string, dPlant[i][dPlantID]);
	    format(string, sizeof(string), "Fruits%d", i);
		INI_Int(string, dPlant[i][dFruits]);
	    format(string, sizeof(string), "GrowTime%d", i);
		INI_Int(string, dPlant[i][dGrowTime]);
	    format(string, sizeof(string), "xPlant%d", i);
		INI_Float(string, dPlant[i][xPlant]);
	    format(string, sizeof(string), "yPlant%d", i);
		INI_Float(string, dPlant[i][yPlant]);
	    format(string, sizeof(string), "zPlant%d", i);
		INI_Float(string, dPlant[i][zPlant]);
	    format(string, sizeof(string), "aPlant%d", i);
		INI_Float(string, dPlant[i][aPlant]);
	}
	return 1;
}

SavePlants()
{
	new string[50];
	new INI:File = INI_Open(PPATH);
	INI_SetTag(File, "data");
	for(new i = 0; i < MAX_PLANTS; i ++)
	{
	    format(string, sizeof(string), "Plante%d", i);
		INI_WriteInt(File,string, dPlant[i][dPlantID]);
	    format(string, sizeof(string), "Fruits%d", i);
		INI_WriteInt(File,string, dPlant[i][dFruits]);
	    format(string, sizeof(string), "GrowTime%d", i);
		INI_WriteInt(File,string, dPlant[i][dGrowTime]);
	    format(string, sizeof(string), "xPlant%d", i);
		INI_WriteFloat(File,string, dPlant[i][xPlant]);
	    format(string, sizeof(string), "yPlant%d", i);
		INI_WriteFloat(File,string, dPlant[i][yPlant]);
	    format(string, sizeof(string), "zPlant%d", i);
		INI_WriteFloat(File,string, dPlant[i][zPlant]);
	    format(string, sizeof(string), "aPlant%d", i);
		INI_WriteFloat(File,string, dPlant[i][aPlant]);
	}
	INI_Close(File);
}

//---FONCTIONS DIVERSES
public InitColAndreas()
{
	static bool:bColAndreasLoaded;
	if(!bColAndreasLoaded)
	{
    	CA_Init();
		bColAndreasLoaded = true;
	}
}

bool:IsColBetweenTwoPos(Float:x, Float:y, Float:z, Float:x2, Float:y2, Float:z2)
{
	new Float:fDump;
	new dFound = CA_RayCastLine(x, y, z, x2, y2, z2, fDump, fDump, fDump);
	return (dFound == 0) ? false : true;
}

//---AIDE---//
/*
AIDE:

1- Ramasser un objet:
	Vous pouvez ramasser un objet, un lit, une tente sur le sol.
	Appuyez sur H pour ramasser quelque chose à côté de vous.
	S'il y a plusieurs objets à côté de vous, vous pourrez choisir.

2- Utiliser un objet:
	Si vous avez un objet dans la main, appuyez sur N pour l'utiliser.
	Sinon, ouvrez votre sac à dos avec Y et double-cliquez sur l'objet.

3- Le sac à dos:
	Appuyez sur Y pour ouvrir votre sac à dos.
	Pour changer deux objets de place, cliquez consécutivement sur eux.
	Pour utiliser ou jeter un objet, double-cliquez sur celui-ci.
	Vous pouvez trouver de meilleurs sac à dos ou en acheter !
	Si vous mourrez, vous perdrez tout le contenu de votre sac.

4- Faim:
	Si vous ne mangez pas, vous allez mourir de faim.
	Vous pouvez trouver, acheter ou faire vous-même à manger.
	Vous pouvez chasser, pêcher ou cultiver !

5- Soif:
	Si vous ne buvez pas, vous allez mourir de soif.
	Vous pouvez trouver ou collecter vous-même à boire.
	Vous pouvez fabriquer ou trouver un collecteur d'eau !

6- Sommeil:
	Si vous ne dormez pas, vous allez vous affaiblir.
	Vous pouvez trouver ou acheter un lit.
	Vous ne pouvez poser de lits que dans les maisons ou dans les tentes.
	Vous pouvez aussi prendre une pillule de caféine pour vous réveiller.

7- Température:
	Si vous passez votre temps dans l'eau, votre température baissera.
	Si votre température de surface atteint 20°, vous mourrez de froid.
	En courrant ou en restant près du feu, vous vous réchaufferez.

8- Récupérateurs d'eau:
	Vous pouvez fabriquer ou voler un collecteur d'eau.
	Il se remplira quand il pleuvra, et vous pourrez remplir vos bouteilles.
	Pour le fabriquer, trouvez un ingénieur.

9- Coffres forts:
	Pour stocker vos objets les plus précieux, vous aurez besoin d'un coffre.
	Vous pouvez fabriquer un coffre chez un ingénieur.
	Utilisez un coffre pour le poser, vous devrez mettre un code à 4 chiffres.
	Appuyez sur C pour l'ouvrir, Y pour regarder dedans.

10- Véhicules:
	Pour aller plus vite, vous pourrez trouver des véhicules.
	Pour qu'un véhicule roule, il doit avoir un moteur et de l'essence.
	Vous pourrez trouver un moteur près des garages.
	Vous pourrez trouver de l'essence un peu partout ou dans les stations.
	Vous pourrez réparer votre véhicule avec une clé anglaise.

11- Coffre de véhicule:
	Un véhicule a un coffre dans lequel vous pourrez ranger des objets.
	Appuyez sur Y à l'intérieur du véhicule pour regarder.

12- Culture:
	Si vous trouvez des graines, vous pourrez planter dans la terre.
	Les plantes poussent le jour, et plus vite s'il pleut.
	Une plante donne des fruits.
	Vous pourrez couper avec une tronçonneuse si vous voulez du bois.

13- Magasins:
	Vous pourrez trouver des magasins dans les camps de survivants.
	Vous pourrez vendre des objets en double-cliquant dessus dans votre sac.
	Vous gagnerez de l'or que vous pourrez dépenser pour d'autres objets.
	Certains objets ne peuvent être trouvés nulle part ailleurs.

14- Ingénieurs:
	Vous pourrez trouver des ingénieurs dans les camps de survivants.
	Vous pourrez démonter des objets en double-cliquant dessus dans votre sac.
	Vous obtiendrez du bois, du fer ou autres.
	Vous pourrez aussi fabriquer de nouveaux objets uniques !

15- Armes:
	Pour survivre, chasser ou vous battre, vous aurez besoin d'armes.
	Vous pourrez en trouver/acheter un peu partout ou en fabriquer chez un ingénieur.
	Pour une arme à feu, vous aurez besoin de munitions.
	Si vous mourrez, vous perdrez toutes vos armes.

16- Cuisine:
	Trouvez, achetez ou fabriquez une casserole pour cuisiner.
	Utilisez-la près d'un feu.
	Sélectionnez une recette dont vous avez les ingrédients et cuisinez !
	La nourriture issue de la cuisine est plus nourrissante que tout !
*/
public ShowPlayerHelp(playerid, helpid, time)//Fonction pour afficher une partie de l'aide.
{
	if(dHelp[playerid] != 0 || CallRemoteFunction("IsPlayerOnCinematic", "i", playerid) || IsPlayerOnSpectate(playerid)) return 0;
	new string[1024];
	switch(helpid)
	{
		case 1://Ramasser un objet
	    {
	    	pPlayerInfos[playerid][bAide][helpid - 1] = true;
			switch(pPlayerInfos[playerid][pLangue])//On l'affiche dans la bonne langue...
			{
				case LANGUAGE_EN: strcpy(string, "You can pick-up an item, a bed, a tent from the ground.~n~Press ~k~~GROUP_CONTROL_BWD~ to pick something up.~n~If there are more than just a single one, you'll have to choose.");
				case LANGUAGE_FR: strcpy(string, "Vous pouvez ramasser un objet, un lit, une tente sur le sol.~n~Appuyez sur ~k~~GROUP_CONTROL_BWD~ pour ramasser quelque chose à côté de vous.~n~S'il y a plusieurs objets à côté de vous, vous pourrez choisir.");
   				case LANGUAGE_ES: strcpy(string, "Puede tomar un objecto o otrás del suelo.~n~Imprensa ~k~~GROUP_CONTROL_BWD~ para tomar alguna cosa.~n~Si están varios, podrá eligir esto que quiere.");
   				case LANGUAGE_PG: strcpy(string, "Portugais");
				case LANGUAGE_IT: strcpy(string, "Italien");
				case LANGUAGE_DE: strcpy(string, "Sie können einen Gegenstand, ein Bett, ein Zelt vom Boden aufheben.~n~Drücken auf ~k~~GROUP_CONTROL_BWD~ um etwas aufzuheben.~n~Liegen mehrere Gegenstände neben Ihnen, dann müssen Sie wählen.");
			}
		}
	    case 2://Utiliser un objet
	    {
	    	pPlayerInfos[playerid][bAide][helpid - 1] = true;
			switch(pPlayerInfos[playerid][pLangue])//On l'affiche dans la bonne langue...
			{
				case LANGUAGE_EN: strcpy(string, "If you have any object in your hand, press ~k~~CONVERSATION_NO~ to use it.~n~Else, open your backpack with ~k~~CONVERSATION_YES~ and double-click on the object.");
				case LANGUAGE_FR: strcpy(string, "Si vous avez un objet dans la main, appuyez sur ~k~~CONVERSATION_NO~ pour l'utiliser.~n~Sinon, ouvrez votre sac à dos avec ~k~~CONVERSATION_YES~ et double-cliquez sur l'objet.");
				case LANGUAGE_ES: strcpy(string, "Si tiene un objecto en la mano, presiona la tecla k~~CONVERSATION_NO para lo utilizar.~n~De lo contrario, abra su mochila con  k~~CONVERSATION_YES~ y haga un doble clic sobre el objecto.");
				case LANGUAGE_PG: strcpy(string, "Portugais");
				case LANGUAGE_IT: strcpy(string, "Italien");
				case LANGUAGE_DE: strcpy(string, "Wenn Sie einen Gegenstand in ihrer hand halten, drücken Sie auf ~k~~CONVERSATION_NO~ um es zu benutzen.~n~Sonst, öffnen Sie ihren Rucksack durch drücken auf ~k~~CONVERSATION_YES~;~n~dann zwei mal darauf clicken.");
			}
		}
	    case 3://Le sac à dos
	    {
	    	pPlayerInfos[playerid][bAide][helpid - 1] = true;
			switch(pPlayerInfos[playerid][pLangue])//On l'affiche dans la bonne langue...
			{
				case LANGUAGE_EN: strcpy(string, "Hit ~k~~CONVERSATION_YES~ to open your backpack.~n~To switch two items, click on both.~n~To use or to drop an object, double-click on it.~n~You can find or buy better backpacks.~n~If you get whacked, you'll loose your backpack and its content.");
				case LANGUAGE_FR: strcpy(string, "Appuyez sur ~k~~CONVERSATION_YES~ pour ouvrir votre sac à dos.~n~Pour changer deux objets de place, cliquez consécutivement sur eux.~n~Pour utiliser ou jeter un objet, double-cliquez sur celui-ci.~n~Vous pouvez trouver de meilleurs sac à dos ou en acheter !~n~Si vous mourrez, vous perdrez tout le contenu de votre sac.");
			   	case LANGUAGE_ES: strcpy(string, "Imprensa ~k~~CONVERSATION_YES para abrir su mochila.~n~Pulsar consicutivamente sobre ambos objectos que quiere intercambiar.~n~Para utilizar o tirar un objecto, hacer un doble clic sobre éste.~n~¡ Puede encontrar mejores mochilas o comprarlos !~n~Si muere, perderá todos los objectos que estabán en su mochila.");
			   	case LANGUAGE_PG: strcpy(string, "Portugais");
			   	case LANGUAGE_IT: strcpy(string, "Italien");
			   	case LANGUAGE_DE: strcpy(string, "Drücken Sie auf ~k~~CONVERSATION_YES~ um ihren Rucksack zu öffnen.~n~Um die Stelle zweier Objekte zu tauschen, clicken Sie nacheinande auf beide.~n~Um ein Objekt zu benutzen oder wegzuwerfen, clicken Sie zwei mal darauf.~n~Sie können besserer Rucksäcke finden oder kaufen!~n~Sollten Sie sterben, verlieren Sie den ganzen Inhalt ihres Rucksacks.");
			}
		}
	    case 4://Faim
	    {
	    	pPlayerInfos[playerid][bAide][helpid - 1] = true;
			switch(pPlayerInfos[playerid][pLangue])//On l'affiche dans la bonne langue...
			{
				case LANGUAGE_EN: strcpy(string, "Eating is what keeps you from dying.~n~You can find, buy or make yourself something to eat.~n~You can hunt, go fishing or grow things to eat.~n~If you get a pan, you'll be able to enhance your food.");
				case LANGUAGE_FR: strcpy(string, "Si vous ne mangez pas, vous allez mourir de faim.~n~Vous pouvez trouver, acheter ou faire vous-même à manger.~n~Vous pouvez chasser, pêcher ou cultiver !~n~Si vous trouvez une casserole, vous pourrez améliorer de la nourriture.");
			   	case LANGUAGE_ES: strcpy(string, "Si no come, va a morir de hambre.~n~Puede encontrar, comprar o hacer comida.~n~¡ Puede cazar, pescar o cultivar !~n~Si encontrar una olla, podrá mejorar la comida.");
			   	case LANGUAGE_PG: strcpy(string, "Portugais");
			   	case LANGUAGE_IT: strcpy(string, "Italien");
			   	case LANGUAGE_DE: strcpy(string, "Allemand");
			}
		}
	    case 5://Soif
	    {
	    	pPlayerInfos[playerid][bAide][helpid - 1] = true;
			switch(pPlayerInfos[playerid][pLangue])//On l'affiche dans la bonne langue...
			{
				case LANGUAGE_EN: strcpy(string, "If you don't drink, you'll die.~n~You can find or get yourself drinks.~n~You can build or find a water collector, being able to get free water.");
				case LANGUAGE_FR: strcpy(string, "Si vous ne buvez pas, vous allez mourir de soif.~n~Vous pouvez trouver ou collecter vous-même à boire.~n~Vous pouvez fabriquer ou trouver un collecteur d'eau !");
			   	case LANGUAGE_ES: strcpy(string, "Espagnol");
			   	case LANGUAGE_PG: strcpy(string, "Portugais");
			   	case LANGUAGE_IT: strcpy(string, "Italien");
			   	case LANGUAGE_DE: strcpy(string, "Allemand");
			}
		}
	    case 6://Sommeil
	    {
	    	pPlayerInfos[playerid][bAide][helpid - 1] = true;
			switch(pPlayerInfos[playerid][pLangue])//On l'affiche dans la bonne langue...
			{
				case LANGUAGE_EN: strcpy(string, "If you don't sleep, you'll get weak.~n~You can buy or find a bed.~n~You will have to find a house or a tent to set your bed.~n~You can also find cofein pills to wake up without sleeping.");
				case LANGUAGE_FR: strcpy(string, "Si vous ne dormez pas, vous allez vous affaiblir.~n~Vous pouvez trouver ou acheter un lit.~n~Vous ne pouvez poser de lits que dans les maisons ou dans les tentes.~n~Vous pouvez aussi prendre une pillule de caféine pour vous réveiller.");
			   	case LANGUAGE_ES: strcpy(string, "Si no duerme, va a debilitarse.~n~Puede encontrar o comprar un cama.~n~Puede poner camas que en casas o tiendas.~n~Puede tomar nodoses para despetarse también.");
			   	case LANGUAGE_PG: strcpy(string, "Portugais");
			   	case LANGUAGE_IT: strcpy(string, "Italien");
			   	case LANGUAGE_DE: strcpy(string, "Allemand");
			}
		}
	    case 7://Température
	    {
	    	pPlayerInfos[playerid][bAide][helpid - 1] = true;
			switch(pPlayerInfos[playerid][pLangue])//On l'affiche dans la bonne langue...
			{
				case LANGUAGE_EN: strcpy(string, "If you go into water, your body temperature will drop.~n~If your surface temperature reaches 20° or below, you'll die.~n~By running or staying close to fire, you'll heat up.");
				case LANGUAGE_FR: strcpy(string, "Si vous passez votre temps dans l'eau, votre température baissera.~n~Si votre température de surface atteint 20°, vous mourrez de froid.~n~En courrant ou en restant près du feu, vous vous réchaufferez.");
			   	case LANGUAGE_ES: strcpy(string, "Espagnol");
			   	case LANGUAGE_PG: strcpy(string, "Portugais");
			   	case LANGUAGE_IT: strcpy(string, "Italien");
			   	case LANGUAGE_DE: strcpy(string, "Allemand");
			}
		}
	    case 8://Récupérateurs d'eau
	    {
	    	pPlayerInfos[playerid][bAide][helpid - 1] = true;
			switch(pPlayerInfos[playerid][pLangue])//On l'affiche dans la bonne langue...
			{
				case LANGUAGE_EN: strcpy(string, "You can build or steal a water collector.~n~It'll fill by itself when it's raining, making you able to refill empty bottles.~n~To build it, find a ingeneer.");
				case LANGUAGE_FR: strcpy(string, "Vous pouvez fabriquer ou voler un collecteur d'eau.~n~Il se remplira quand il pleuvra, et vous pourrez remplir vos bouteilles.~n~Pour le fabriquer, trouvez un ingénieur.");
			   	case LANGUAGE_ES: strcpy(string, "Espagnol");
			   	case LANGUAGE_PG: strcpy(string, "Portugais");
			   	case LANGUAGE_IT: strcpy(string, "Italien");
			   	case LANGUAGE_DE: strcpy(string, "Allemand");
			}
		}
	    case 9://Coffres forts
	    {
	    	pPlayerInfos[playerid][bAide][helpid - 1] = true;
			switch(pPlayerInfos[playerid][pLangue])//On l'affiche dans la bonne langue...
			{
				case LANGUAGE_EN: strcpy(string, "To save your precious items, you'll maybe need a safe.~n~You can build a safe at an ingeneer.~n~Use a safe to set it on the ground, you'll have to set a 4 numbered code.~n~Hit ~k~~PED_DUCK~ to open it, ~k~~CONVERSATION_YES~ to look inside.");
				case LANGUAGE_FR: strcpy(string, "Pour stocker vos objets les plus précieux, vous aurez besoin d'un coffre.~n~Vous pouvez fabriquer un coffre chez un ingénieur.~n~Utilisez un coffre pour le poser, vous devrez mettre un code à 4 chiffres.~n~Appuyez sur ~k~~PED_DUCK~ pour l'ouvrir, ~k~~CONVERSATION_YES~ pour regarder dedans.");
			   	case LANGUAGE_ES: strcpy(string, "Espagnol");
			   	case LANGUAGE_PG: strcpy(string, "Portugais");
			   	case LANGUAGE_IT: strcpy(string, "Italien");
			   	case LANGUAGE_DE: strcpy(string, "Allemand");
			}
		}
	    case 10://Véhicules
	    {
	    	pPlayerInfos[playerid][bAide][helpid - 1] = true;
			switch(pPlayerInfos[playerid][pLangue])//On l'affiche dans la bonne langue...
			{
				case LANGUAGE_EN: strcpy(string, "You'll be able to find vehicles to go faster.~n~For a vehicle to move, it has to have an engine and gas.~n~You may find an engine near garages or others.~n~You'll be able to find gas pretty much anywhere or in gas stations.~n~If you find a wrench, you'll be able to repair your vehicle everytime.");
				case LANGUAGE_FR: strcpy(string, "Pour aller plus vite, vous pourrez trouver des véhicules.~n~Pour qu'un véhicule roule, il doit avoir un moteur et de l'essence.~n~Vous pourrez trouver un moteur près des garages.~n~Vous pourrez trouver de l'essence un peu partout ou dans les stations.~n~Vous pourrez réparer votre véhicule avec une clé anglaise.");
			   	case LANGUAGE_ES: strcpy(string, "Espagnol");
			   	case LANGUAGE_PG: strcpy(string, "Portugais");
			   	case LANGUAGE_IT: strcpy(string, "Italien");
			   	case LANGUAGE_DE: strcpy(string, "Allemand");
			}
		}
	    case 11://Coffre du véhicule
	    {
	    	pPlayerInfos[playerid][bAide][helpid - 1] = true;
			switch(pPlayerInfos[playerid][pLangue])//On l'affiche dans la bonne langue...
			{
				case LANGUAGE_EN: strcpy(string, "A vehicle has a trunk in which you can store items.~n~Hit ~k~~CONVERSATION_YES~ inside of a vehicle to look what's inside.");
				case LANGUAGE_FR: strcpy(string, "Un véhicule a un coffre dans lequel vous pourrez ranger des objets.~n~Appuyez sur ~k~~CONVERSATION_YES~ à l'intérieur du véhicule pour regarder.");
			   	case LANGUAGE_ES: strcpy(string, "Espagnol");
			   	case LANGUAGE_PG: strcpy(string, "Portugais");
			   	case LANGUAGE_IT: strcpy(string, "Italien");
			   	case LANGUAGE_DE: strcpy(string, "Allemand");
			}
		}
	    case 12://Culture
	    {
	    	pPlayerInfos[playerid][bAide][helpid - 1] = true;
			switch(pPlayerInfos[playerid][pLangue])//On l'affiche dans la bonne langue...
			{
				case LANGUAGE_EN: strcpy(string, "If you find seeds, you'll be able to plant them in the ground.~n~Plants only grow on daylight, and faster if it's raining.~n~A plant gives fruits and others.~n~You can saw your plant if you need wood.");
				case LANGUAGE_FR: strcpy(string, "Si vous trouvez des graines, vous pourrez planter dans la terre.~n~Les plantes poussent le jour, et plus vite s'il pleut.~n~Une plante donne des fruits et autres.~n~Vous pourrez la couper avec une tronçonneuse si vous voulez du bois.");
			   	case LANGUAGE_ES: strcpy(string, "Espagnol");
			   	case LANGUAGE_PG: strcpy(string, "Portugais");
			   	case LANGUAGE_IT: strcpy(string, "Italien");
			   	case LANGUAGE_DE: strcpy(string, "Allemand");
			}
		}
	    case 13://Magasin
	    {
	    	pPlayerInfos[playerid][bAide][helpid - 1] = true;
			switch(pPlayerInfos[playerid][pLangue])//On l'affiche dans la bonne langue...
			{
				case LANGUAGE_EN: strcpy(string, "You can find shops in survivor camps.~n~You can sell items by double-clicking on them in your backpack.~n~You'll get gold, which you'll be able to spend for other items at shops.~n~Some objects cannot be found in any other place than in shops.");
				case LANGUAGE_FR: strcpy(string, "Vous pourrez trouver des magasins dans les camps de survivants.~n~Vous pourrez vendre des objets en double-cliquant dessus dans votre sac.~n~Vous gagnerez de l'or que vous pourrez dépenser pour d'autres objets.~n~Certains objets ne peuvent être trouvés nulle part ailleurs.");
			   	case LANGUAGE_ES: strcpy(string, "Espagnol");
			   	case LANGUAGE_PG: strcpy(string, "Portugais");
			   	case LANGUAGE_IT: strcpy(string, "Italien");
			   	case LANGUAGE_DE: strcpy(string, "Allemand");
			}
		}
	    case 14://Ingénieur
	    {
	    	pPlayerInfos[playerid][bAide][helpid - 1] = true;
			switch(pPlayerInfos[playerid][pLangue])//On l'affiche dans la bonne langue...
			{
				case LANGUAGE_EN: strcpy(string, "You can find engineer in survivor camps.~n~You may disassemble objects by double-clicking on them in your backpack.~n~You'll get wood, iron or others.~n~You can also craft other items!");
				case LANGUAGE_FR: strcpy(string, "Vous pourrez trouver des ingénieurs dans les camps de survivants.~n~Vous pourrez démonter des objets en double-cliquant dessus dans votre sac.~n~Vous obtiendrez du bois, du fer ou autres.~n~Vous pourrez aussi fabriquer de nouveaux objets uniques !");
			   	case LANGUAGE_ES: strcpy(string, "Espagnol");
			   	case LANGUAGE_PG: strcpy(string, "Portugais");
			   	case LANGUAGE_IT: strcpy(string, "Italien");
			   	case LANGUAGE_DE: strcpy(string, "Allemand");
			}
		}
	    case 15://Armes
	    {
	    	pPlayerInfos[playerid][bAide][helpid - 1] = true;
			switch(pPlayerInfos[playerid][pLangue])//On l'affiche dans la bonne langue...
			{
				case LANGUAGE_EN: strcpy(string, "To survive, hunt or fight, you'll need a weapon.~n~You can find/buy them pretty much everywhere or craft them at an engineer.~n~For a firearm, you'll need ammo which you also can find/buy.~n~If you die, you'll drop all your guns.");
				case LANGUAGE_FR: strcpy(string, "Pour survivre, chasser ou vous battre, vous aurez besoin d'armes.~n~Vous pourrez en trouver/acheter un peu partout ou en fabriquer chez un ingénieur.~n~Pour une arme à feu, vous aurez besoin de munitions.~n~Si vous mourrez, vous perdrez toutes vos armes.");
			   	case LANGUAGE_ES: strcpy(string, "Espagnol");
			   	case LANGUAGE_PG: strcpy(string, "Portugais");
			   	case LANGUAGE_IT: strcpy(string, "Italien");
			   	case LANGUAGE_DE: strcpy(string, "Allemand");
			}
		}
	    case 16://Cuisine
	    {
	    	pPlayerInfos[playerid][bAide][helpid - 1] = true;
			switch(pPlayerInfos[playerid][pLangue])//On l'affiche dans la bonne langue...
			{
				case LANGUAGE_EN: strcpy(string, "Find, buy or craft a pan to become a cook.~n~Use it near a fire.~n~Select a recipe you have all the ingredients for and cook!~n~Food that has been cooked is better than any other!");
				case LANGUAGE_FR: strcpy(string, "Trouvez, achetez ou fabriquez une casserole pour cuisiner.~n~Utilisez-la près d'un feu.~n~Sélectionnez une recette dont vous avez les ingrédients et cuisinez !~n~La nourriture issue de la cuisine est plus nourrissante que tout !");
			   	case LANGUAGE_ES: strcpy(string, "Espagnol");
			   	case LANGUAGE_PG: strcpy(string, "Portugais");
			   	case LANGUAGE_IT: strcpy(string, "Italien");
			   	case LANGUAGE_DE: strcpy(string, "Allemand");
			}
		}
	    case 17://Levels
	    {
	    	pPlayerInfos[playerid][bAide][helpid - 1] = true;
			switch(pPlayerInfos[playerid][pLangue])//On l'affiche dans la bonne langue...
			{
				case LANGUAGE_EN: strcpy(string, "You earn experience by doing things.~n~Get killed and you'll lose some.~n~When your exp bars get full, you'll level up.~n~Each level gives you a skill point.~n~You can buy new skills:~n~- Open your backpack and click on the '~r~+~w~'.~n~- Select a skill and power it up.");
				case LANGUAGE_FR: strcpy(string, "Vous gagnez de l'expérience en faisant des trucs.~n~Si vous mourrez, vous en perdrez.~n~Quand votre jauge sera pleine, vous gagnez un niveau.~n~Chaque niveau vous donne un point de compétence.~n~Vous pouvez acheter de nouvelles compétences:~n~- Ouvrez votre sac et cliquez sur '~r~+~w~'.~n~Sélectionnez une compétence et augmentez !");
			   	case LANGUAGE_ES: strcpy(string, "Espagnol");
			   	case LANGUAGE_PG: strcpy(string, "Portugais");
			   	case LANGUAGE_IT: strcpy(string, "Italien");
			   	case LANGUAGE_DE: strcpy(string, "Allemand");
			}
		}
	}
	ConvertGameText(string);
	if(!dHelp[playerid])//Si y'a pas déjà un texte, on crée le textdraw
	{
		tHelpText[playerid] = CreatePlayerTextDraw(playerid, 140.000000, 170.000000, string);
		PlayerTextDrawAlignment(playerid, tHelpText[playerid], 1);//On change les paramètres du textdraw
		PlayerTextDrawBackgroundColor(playerid, tHelpText[playerid], 255);
		PlayerTextDrawFont(playerid, tHelpText[playerid], 1);
		PlayerTextDrawLetterSize(playerid, tHelpText[playerid], 0.270000, 1.000000);
		PlayerTextDrawColor(playerid, tHelpText[playerid], -1);
		PlayerTextDrawSetOutline(playerid, tHelpText[playerid], 0);
		PlayerTextDrawSetProportional(playerid, tHelpText[playerid], 1);
		PlayerTextDrawSetShadow(playerid, tHelpText[playerid], 1);
		PlayerTextDrawSetSelectable(playerid, tHelpText[playerid], false);
	}
	else//Si y'a déjà un texte d'affiché...
	{
	 	KillTimer(dHelpTimer[playerid]);//On casse le timer-
		PlayerTextDrawSetString(playerid, tHelpText[playerid], string);
	}
	//---
	CloseTextDraws(playerid);
 	dHelp[playerid] = helpid;//On dit que y'a un texte
	TextDrawShowForPlayer(playerid, tFondDialog[0]);
	TextDrawShowForPlayer(playerid, tFondDialog[1]);
	TextDrawShowForPlayer(playerid, tFondDialog[2 + pPlayerInfos[playerid][pLangue]]);
	PlayerTextDrawShow(playerid, tHelpText[playerid]);//On affiche le textdraw
	if(time != -1) dHelpTimer[playerid] = SetTimerEx("HidePlayerHelp", time, false, "i", playerid);//Et on met un timer
	return 1;
}

public HidePlayerHelp(playerid)//Fonction pour cacher le texte
{
	for(new i = 0; i < 8; i ++) TextDrawHideForPlayer(playerid, tFondDialog[i]);
	PlayerTextDrawHide(playerid, tHelpText[playerid]);
	PlayerTextDrawDestroy(playerid, tHelpText[playerid]);
	tHelpText[playerid] = PlayerText:INVALID_TEXT_DRAW;
	KillTimer(dHelpTimer[playerid]);
	dHelpTimer[playerid] = -1;
	dHelp[playerid] = 0;
}

//---INFO TEXT---//
public ShowPlayerTextInfo(playerid, time, en[], fr[], es[], pg[], it[], de[])//Pour afficher un texte en bas de l'écran
{
	if(!bAlreadyText[playerid])//Si y'a pas déjà un texte, on crée le textdraw
	{
		switch(pPlayerInfos[playerid][pLangue])//On l'affiche dans la bonne langue...
		{
			case LANGUAGE_EN: ConvertGameText(en), tInfoText[playerid] = CreatePlayerTextDraw(playerid, 330.000000, 340.000000, en);
		   	case LANGUAGE_FR: ConvertGameText(fr), tInfoText[playerid] = CreatePlayerTextDraw(playerid, 330.000000, 340.000000, fr);
		   	case LANGUAGE_ES: ConvertGameText(es), tInfoText[playerid] = CreatePlayerTextDraw(playerid, 330.000000, 340.000000, es);
		   	case LANGUAGE_PG: ConvertGameText(pg), tInfoText[playerid] = CreatePlayerTextDraw(playerid, 330.000000, 340.000000, pg);
		   	case LANGUAGE_IT: ConvertGameText(it), tInfoText[playerid] = CreatePlayerTextDraw(playerid, 330.000000, 340.000000, it);
		   	case LANGUAGE_DE: ConvertGameText(de), tInfoText[playerid] = CreatePlayerTextDraw(playerid, 330.000000, 340.000000, de);
		}
		PlayerTextDrawAlignment(playerid, tInfoText[playerid], 2);//On change les paramètres du textdraw
		PlayerTextDrawBackgroundColor(playerid, tInfoText[playerid], 255);
		PlayerTextDrawFont(playerid, tInfoText[playerid], 1);
		PlayerTextDrawLetterSize(playerid, tInfoText[playerid], 0.400000, 1.000000);
		PlayerTextDrawColor(playerid, tInfoText[playerid], -1);
		PlayerTextDrawSetOutline(playerid, tInfoText[playerid], 0);
		PlayerTextDrawSetProportional(playerid, tInfoText[playerid], 1);
		PlayerTextDrawSetShadow(playerid, tInfoText[playerid], 1);
		PlayerTextDrawSetSelectable(playerid, tInfoText[playerid], false);
	}
	else//Si y'a déjà un texte d'affiché...
	{
	 	KillTimer(dInfoTimer[playerid]);//On casse le timer
		switch(pPlayerInfos[playerid][pLangue])//On change le texte dans la bonne langue...
		{
			case LANGUAGE_EN: ConvertGameText(en), PlayerTextDrawSetString(playerid, tInfoText[playerid], en);
		   	case LANGUAGE_FR: ConvertGameText(fr), PlayerTextDrawSetString(playerid, tInfoText[playerid], fr);
		   	case LANGUAGE_ES: ConvertGameText(es), PlayerTextDrawSetString(playerid, tInfoText[playerid], es);
		   	case LANGUAGE_PG: ConvertGameText(pg), PlayerTextDrawSetString(playerid, tInfoText[playerid], pg);
		   	case LANGUAGE_IT: ConvertGameText(it), PlayerTextDrawSetString(playerid, tInfoText[playerid], it);
		   	case LANGUAGE_DE: ConvertGameText(de), PlayerTextDrawSetString(playerid, tInfoText[playerid], de);
		}
	}
 	bAlreadyText[playerid] = true;//On dit que y'a un texte
	PlayerTextDrawShow(playerid, tInfoText[playerid]);//On affiche le textdraw
	if(time != -1) dInfoTimer[playerid] = SetTimerEx("HidePlayerTextInfo", time, false, "i", playerid);//Et on met un timer
	return 1;
}

public HidePlayerTextInfo(playerid)//Fonction pour cacher le texte
{
	if(bAlreadyText[playerid])
	{
		PlayerTextDrawHide(playerid, tInfoText[playerid]);
		PlayerTextDrawDestroy(playerid, tInfoText[playerid]);
		tInfoText[playerid] = PlayerText:INVALID_TEXT_DRAW;
		KillTimer(dInfoTimer[playerid]);
		dInfoTimer[playerid] = -1;
	 	bAlreadyText[playerid] = false;
 	}
}

ConvertGameText(string[])//Fonction pour convertir certains caractères qui buguent dans les textdraws ou les gametexts, genre les accents
{
	new original[52] = {192,193,194,196,198,199,200,201,202,203,204,205,206,207,210,211,212,214,217,218,219,220,223,224,225,226,228,230,231,232,233,234,235,236,237,238,239,242,243,244,246,249,250,251,252,209,241,191,161,176,91,93};
	new fixed[52] = {128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,94,124,40,41};
	new len = strlen(string);
	for (new i; i < len; i++) for(new j;j < 50;j++)
	{
		if(string[i] == original[j])
		{
			string[i] = fixed[j];
			break;
		}
	}
}

//---HUD---//
public HidePlayerHUD(playerid, bool:hide)
{
	if(hide != bHideHUD[playerid])
	{
	    if(hide == true)
	    {
	        for(new i = 0; i < 9; i ++) TextDrawHideForPlayer(playerid, tBarettesLevel[i]);
	        TextDrawHideForPlayer(playerid, tFondLevel);
	        #if defined RADAR_HIDDEN
	        for(new i = 0; i < 9; i ++) TextDrawHideForPlayer(playerid, tHUDFont[i]);
			#else
	        for(new i = 0; i < 8; i ++) TextDrawHideForPlayer(playerid, tHUDFont[i]);
			#endif
			if(pPlayerInfos[playerid][pAdmin] > PLAYER) TextDrawHideForPlayer(playerid, tAdmin);
	        //---
	        if(pGroup[playerid] != -1) PlayerTextDrawHide(playerid, tGroupText[playerid]);
	        for(new i = 0; i < 2; i ++) PlayerTextDrawHide(playerid, tInventObjet[playerid][i]);
	        for(new i = 0; i < 8; i ++) PlayerTextDrawHide(playerid, tPlayerInfos[playerid][i]);
	        for(new i = 0; i < 3; i ++) PlayerTextDrawHide(playerid, tLevel[playerid][i]);
	        if(tBossHealth[playerid][0] != PlayerText:INVALID_TEXT_DRAW) for(new i = 0; i < 2; i ++) PlayerTextDrawHide(playerid, tBossHealth[playerid][i]);
	    }
	    else
	    {
	        for(new i = 0; i < 9; i ++) TextDrawShowForPlayer(playerid, tBarettesLevel[i]);
	        TextDrawShowForPlayer(playerid, tFondLevel);
	        #if defined RADAR_HIDDEN
	        for(new i = 0; i < 9; i ++) TextDrawShowForPlayer(playerid, tHUDFont[i]);
			#else
	        for(new i = 0; i < 8; i ++) TextDrawShowForPlayer(playerid, tHUDFont[i]);
			#endif
			if(pPlayerInfos[playerid][pAdmin] > PLAYER) TextDrawShowForPlayer(playerid, tAdmin);
	        //---
	        if(pGroup[playerid] != -1) PlayerTextDrawShow(playerid, tGroupText[playerid]);
	        for(new i = 0; i < 2; i ++) PlayerTextDrawShow(playerid, tInventObjet[playerid][i]);
	        for(new i = 0; i < 7; i ++) PlayerTextDrawShow(playerid, tPlayerInfos[playerid][i]);
	        if(GetVehicleID(GetPlayerVehicleID(playerid)) != -1) PlayerTextDrawShow(playerid, tPlayerInfos[playerid][7]);
	        for(new i = 0; i < 3; i ++) PlayerTextDrawShow(playerid, tLevel[playerid][i]);
	        if(tBossHealth[playerid][0] != PlayerText:INVALID_TEXT_DRAW) for(new i = 0; i < 2; i ++) PlayerTextDrawShow(playerid, tBossHealth[playerid][i]);
	    }
	    bHideHUD[playerid] = hide;
  	}
}

public ShowStopMission(playerid, bool:show)
{
	if(show) TextDrawShowForPlayer(playerid, tStop);
	else TextDrawHideForPlayer(playerid, tStop);
}

CreateBloodScreen()
{
	for(new i = 0; i < 10; i ++)
	{
		tRedScreen[i] = TextDrawCreate(0.000000, 0.000000, "~n~");
		TextDrawBackgroundColor(tRedScreen[i], 255);
		TextDrawFont(tRedScreen[i], 1);
		TextDrawLetterSize(tRedScreen[i], 0.500000, 49.600006);
		TextDrawColor(tRedScreen[i], -1);
		TextDrawSetOutline(tRedScreen[i], 0);
		TextDrawSetProportional(tRedScreen[i], 1);
		TextDrawSetShadow(tRedScreen[i], 1);
		TextDrawUseBox(tRedScreen[i], 1);
		TextDrawTextSize(tRedScreen[i], 640.000000, 100.000000);
		TextDrawSetSelectable(tRedScreen[i], 0);
	}
	TextDrawBoxColor(tRedScreen[0], 0xCC0000AA);
	TextDrawBoxColor(tRedScreen[1], 0xCC000099);
	TextDrawBoxColor(tRedScreen[2], 0xCC000088);
	TextDrawBoxColor(tRedScreen[3], 0xCC000077);
	TextDrawBoxColor(tRedScreen[4], 0xCC000066);
	TextDrawBoxColor(tRedScreen[5], 0xCC000055);
	TextDrawBoxColor(tRedScreen[6], 0xCC000044);
	TextDrawBoxColor(tRedScreen[7], 0xCC000033);
	TextDrawBoxColor(tRedScreen[8], 0xCC000022);
	TextDrawBoxColor(tRedScreen[9], 0xCC000011);
}

public ShowRedScreen(playerid)
{
	if(!bRedScreen[playerid])
	{
	    bRedScreen[playerid] = true;
	    ShowPlayerBloodScreen(playerid, -4);
	}
}

public ShowPlayerRules(playerid)
{
	dNewCo[playerid] = 10;
	//---
	TextDrawShowForPlayer(playerid, tBloodSplat);
	TextDrawShowForPlayer(playerid, tRules[pPlayerInfos[playerid][pLangue]][0]);
	TextDrawShowForPlayer(playerid, tRules[pPlayerInfos[playerid][pLangue]][1]);
}

HidePlayerRules(playerid)
{
	if(dNewCo[playerid] != 0) dNewCo[playerid] = 0;
	//---
	TextDrawHideForPlayer(playerid, tBloodSplat);
	TextDrawHideForPlayer(playerid, tRules[pPlayerInfos[playerid][pLangue]][0]);
	TextDrawHideForPlayer(playerid, tRules[pPlayerInfos[playerid][pLangue]][1]);
}

public ShowPlayerBloodScreen(playerid, step)
{
	switch(step)
	{
		case -4: TextDrawShowForPlayer(playerid, tRedScreen[4]), SetTimerEx("ShowPlayerBloodScreen", 100, false, "ii", playerid, -3);
		case -3: TextDrawHideForPlayer(playerid, tRedScreen[4]), TextDrawShowForPlayer(playerid, tRedScreen[3]), SetTimerEx("ShowPlayerBloodScreen", 100, false, "ii", playerid, -2);
		case -2: TextDrawHideForPlayer(playerid, tRedScreen[3]), TextDrawShowForPlayer(playerid, tRedScreen[2]), SetTimerEx("ShowPlayerBloodScreen", 100, false, "ii", playerid, -1);
		case -1: TextDrawHideForPlayer(playerid, tRedScreen[2]), TextDrawShowForPlayer(playerid, tRedScreen[1]), SetTimerEx("ShowPlayerBloodScreen", 100, false, "ii", playerid, 0);
		case 0: TextDrawHideForPlayer(playerid, tRedScreen[1]), TextDrawShowForPlayer(playerid, tRedScreen[0]), SetTimerEx("ShowPlayerBloodScreen", 100, false, "ii", playerid, 1);
		case 1: TextDrawHideForPlayer(playerid, tRedScreen[0]), TextDrawShowForPlayer(playerid, tRedScreen[1]), SetTimerEx("ShowPlayerBloodScreen", 100, false, "ii", playerid, 2);
		case 2: TextDrawHideForPlayer(playerid, tRedScreen[1]), TextDrawShowForPlayer(playerid, tRedScreen[2]), SetTimerEx("ShowPlayerBloodScreen", 100, false, "ii", playerid, 3);
		case 3: TextDrawHideForPlayer(playerid, tRedScreen[2]), TextDrawShowForPlayer(playerid, tRedScreen[3]), SetTimerEx("ShowPlayerBloodScreen", 100, false, "ii", playerid, 4);
		case 4: TextDrawHideForPlayer(playerid, tRedScreen[3]), TextDrawShowForPlayer(playerid, tRedScreen[4]), SetTimerEx("ShowPlayerBloodScreen", 100, false, "ii", playerid, 5);
		case 5: TextDrawHideForPlayer(playerid, tRedScreen[4]), TextDrawShowForPlayer(playerid, tRedScreen[5]), SetTimerEx("ShowPlayerBloodScreen", 100, false, "ii", playerid, 6);
		case 6: TextDrawHideForPlayer(playerid, tRedScreen[5]), TextDrawShowForPlayer(playerid, tRedScreen[6]), SetTimerEx("ShowPlayerBloodScreen", 100, false, "ii", playerid, 7);
		case 7: TextDrawHideForPlayer(playerid, tRedScreen[6]), TextDrawShowForPlayer(playerid, tRedScreen[7]), SetTimerEx("ShowPlayerBloodScreen", 100, false, "ii", playerid, 8);
		case 8: TextDrawHideForPlayer(playerid, tRedScreen[7]), TextDrawShowForPlayer(playerid, tRedScreen[8]), SetTimerEx("ShowPlayerBloodScreen", 100, false, "ii", playerid, 9);
		case 9: TextDrawHideForPlayer(playerid, tRedScreen[8]), TextDrawShowForPlayer(playerid, tRedScreen[9]), SetTimerEx("ShowPlayerBloodScreen", 100, false, "ii", playerid, 10);
		case 10: TextDrawHideForPlayer(playerid, tRedScreen[9]), bRedScreen[playerid] = false;
	}
}

CreateHUDForAll()
{
	//---
	tStop = TextDrawCreate(471.500000, 120.000000, "Stop mission");
	TextDrawBackgroundColor(tStop, 85);
	TextDrawFont(tStop, 2);
	TextDrawLetterSize(tStop, 0.300000, 0.930000);
	TextDrawColor(tStop, -1);
	TextDrawSetOutline(tStop, 1);
	TextDrawSetProportional(tStop, 1);
	TextDrawUseBox(tStop, false);
	TextDrawBoxColor(tStop, 170);
	TextDrawTextSize(tStop, 536.000000, 10.000000);
	TextDrawSetSelectable(tStop, true);
	//---
    tKnifeAim = TextDrawCreate(305.000000, 160.000000, "(+)");//Cible lancer de couteau
	TextDrawBackgroundColor(tKnifeAim, 255);
	TextDrawFont(tKnifeAim, 2);
	TextDrawLetterSize(tKnifeAim, 0.500000, 1.000000);
	TextDrawColor(tKnifeAim, -1);
	TextDrawSetOutline(tKnifeAim, 1);
	TextDrawSetProportional(tKnifeAim, 1);
	TextDrawSetSelectable(tKnifeAim, 0);
	//---
    tFondDialog[0] = TextDrawCreate(160.000000, 40.000000, " ");//Mare de sang
	TextDrawBackgroundColor(tFondDialog[0], 0);
	TextDrawFont(tFondDialog[0], 5);
	TextDrawLetterSize(tFondDialog[0], 0.500000, 1.000000);
	TextDrawColor(tFondDialog[0], -1);
	TextDrawSetOutline(tFondDialog[0], 0);
	TextDrawSetProportional(tFondDialog[0], 1);
	TextDrawSetShadow(tFondDialog[0], 1);
	TextDrawUseBox(tFondDialog[0], 1);
	TextDrawBoxColor(tFondDialog[0], 0);
	TextDrawTextSize(tFondDialog[0], 310.000000, 370.000000);
	TextDrawSetPreviewModel(tFondDialog[0], 19836);
	TextDrawSetPreviewRot(tFondDialog[0], 90.000000, 0.000000, -55.000000, 1.000000);
	TextDrawSetSelectable(tFondDialog[0], 0);
	//---
	tFondDialog[1] = TextDrawCreate(140.000000, 160.000000, "~n~");//Fond
	TextDrawBackgroundColor(tFondDialog[1], 255);
	TextDrawFont(tFondDialog[1], 1);
	TextDrawLetterSize(tFondDialog[1], 0.500000, 14.000000);
	TextDrawColor(tFondDialog[1], -1);
	TextDrawSetOutline(tFondDialog[1], 0);
	TextDrawSetProportional(tFondDialog[1], 1);
	TextDrawSetShadow(tFondDialog[1], 1);
	TextDrawUseBox(tFondDialog[1], 1);
	TextDrawBoxColor(tFondDialog[1], 85);
	TextDrawTextSize(tFondDialog[1], 490.000000, 0.000000);
	TextDrawSetSelectable(tFondDialog[1], 0);
	//---
	tFondDialog[2] = TextDrawCreate(310.000000, 130.000000, "Help");//Titre
	tFondDialog[3] = TextDrawCreate(310.000000, 130.000000, "Aide");//Titre
	tFondDialog[4] = TextDrawCreate(310.000000, 130.000000, "Ayuda");//Titre
	tFondDialog[5] = TextDrawCreate(310.000000, 130.000000, "Ajuda");//Titre
	tFondDialog[6] = TextDrawCreate(310.000000, 130.000000, "Aiuto");//Titre
	tFondDialog[7] = TextDrawCreate(310.000000, 130.000000, "Hilfe");//Titre
	for(new i = 2; i < 8; i ++)
	{
		TextDrawAlignment(tFondDialog[i], 2);
		TextDrawBackgroundColor(tFondDialog[i], 255);
		TextDrawFont(tFondDialog[i], 3);
		TextDrawLetterSize(tFondDialog[i], 1.100000, 4.000000);
		TextDrawColor(tFondDialog[i], -1);
		TextDrawSetOutline(tFondDialog[i], 1);
		TextDrawSetProportional(tFondDialog[i], 1);
		TextDrawSetSelectable(tFondDialog[i], 0);
	}
	//---
	tAdmin = TextDrawCreate(610.000000, 120.000000, "LD_DRV:golfly");
	TextDrawBackgroundColor(tAdmin, 255);
	TextDrawFont(tAdmin, 4);
	TextDrawLetterSize(tAdmin, 0.300000, 6.699999);
	TextDrawColor(tAdmin, -1);
	TextDrawSetOutline(tAdmin, 1);
	TextDrawSetProportional(tAdmin, 1);
	TextDrawUseBox(tAdmin, 1);
	TextDrawBoxColor(tAdmin, 0);
	TextDrawTextSize(tAdmin, 30.000000, 30.000000);
	TextDrawSetSelectable(tAdmin, true);
	//---
	tFondLevel = TextDrawCreate(0.000000, 431.000000, "~n~");
	TextDrawBackgroundColor(tFondLevel, 255);
	TextDrawFont(tFondLevel, 1);
	TextDrawLetterSize(tFondLevel, 1.100000, 2.800000);
	TextDrawColor(tFondLevel, -1);
	TextDrawSetOutline(tFondLevel, 0);
	TextDrawSetProportional(tFondLevel, 1);
	TextDrawSetShadow(tFondLevel, 1);
	TextDrawUseBox(tFondLevel, 1);
	TextDrawBoxColor(tFondLevel, 0x00000055);
	TextDrawTextSize(tFondLevel, 142.000000, 0.000000);
	TextDrawSetSelectable(tFondLevel, 0);
	//---
	tBossBar = TextDrawCreate(480.000000, 170.000000, "~n~");
	TextDrawBackgroundColor(tBossBar, 255);
	TextDrawFont(tBossBar, 1);
	TextDrawLetterSize(tBossBar, 0.500000, 1.000000);
	TextDrawColor(tBossBar, -1);
	TextDrawSetOutline(tBossBar, 0);
	TextDrawSetProportional(tBossBar, 1);
	TextDrawSetShadow(tBossBar, 1);
	TextDrawUseBox(tBossBar, 1);
	TextDrawBoxColor(tBossBar, 85);
	TextDrawTextSize(tBossBar, 630.000000, 10.000000);
	TextDrawSetSelectable(tBossBar, false);
	//---
	tBarettesLevel[0] = TextDrawCreate(14.000000, 364.000000, ".");
	TextDrawBackgroundColor(tBarettesLevel[0], 255);
	TextDrawFont(tBarettesLevel[0], 2);
	TextDrawLetterSize(tBarettesLevel[0], 0.100000, 10.000000);
	TextDrawColor(tBarettesLevel[0], 255);
	TextDrawSetOutline(tBarettesLevel[0], 0);
	TextDrawSetProportional(tBarettesLevel[0], 1);
	TextDrawSetShadow(tBarettesLevel[0], 0);
	TextDrawSetSelectable(tBarettesLevel[0], 0);
	//---
	tBarettesLevel[1] = TextDrawCreate(28.000000, 364.000000, ".");
	TextDrawBackgroundColor(tBarettesLevel[1], 255);
	TextDrawFont(tBarettesLevel[1], 2);
	TextDrawLetterSize(tBarettesLevel[1], 0.100000, 10.000000);
	TextDrawColor(tBarettesLevel[1], 255);
	TextDrawSetOutline(tBarettesLevel[1], 0);
	TextDrawSetProportional(tBarettesLevel[1], 1);
	TextDrawSetShadow(tBarettesLevel[1], 0);
	TextDrawSetSelectable(tBarettesLevel[1], 0);
	//---
	tBarettesLevel[2] = TextDrawCreate(42.000000, 364.000000, ".");
	TextDrawBackgroundColor(tBarettesLevel[2], 255);
	TextDrawFont(tBarettesLevel[2], 2);
	TextDrawLetterSize(tBarettesLevel[2], 0.100000, 10.000000);
	TextDrawColor(tBarettesLevel[2], 255);
	TextDrawSetOutline(tBarettesLevel[2], 0);
	TextDrawSetProportional(tBarettesLevel[2], 1);
	TextDrawSetShadow(tBarettesLevel[2], 0);
	TextDrawSetSelectable(tBarettesLevel[2], 0);
	//---
	tBarettesLevel[3] = TextDrawCreate(56.000000, 364.000000, ".");
	TextDrawBackgroundColor(tBarettesLevel[3], 255);
	TextDrawFont(tBarettesLevel[3], 2);
	TextDrawLetterSize(tBarettesLevel[3], 0.100000, 10.000000);
	TextDrawColor(tBarettesLevel[3], 255);
	TextDrawSetOutline(tBarettesLevel[3], 0);
	TextDrawSetProportional(tBarettesLevel[3], 1);
	TextDrawSetShadow(tBarettesLevel[3], 0);
	TextDrawSetSelectable(tBarettesLevel[3], 0);
	//---
	tBarettesLevel[4] = TextDrawCreate(70.000000, 364.000000, ".");
	TextDrawBackgroundColor(tBarettesLevel[4], 255);
	TextDrawFont(tBarettesLevel[4], 2);
	TextDrawLetterSize(tBarettesLevel[4], 0.100000, 10.000000);
	TextDrawColor(tBarettesLevel[4], 255);
	TextDrawSetOutline(tBarettesLevel[4], 0);
	TextDrawSetProportional(tBarettesLevel[4], 1);
	TextDrawSetShadow(tBarettesLevel[4], 0);
	TextDrawSetSelectable(tBarettesLevel[4], 0);
	//---
	tBarettesLevel[5] = TextDrawCreate(84.000000, 364.000000, ".");
	TextDrawBackgroundColor(tBarettesLevel[5], 255);
	TextDrawFont(tBarettesLevel[5], 2);
	TextDrawLetterSize(tBarettesLevel[5], 0.100000, 10.000000);
	TextDrawColor(tBarettesLevel[5], 255);
	TextDrawSetOutline(tBarettesLevel[5], 0);
	TextDrawSetProportional(tBarettesLevel[5], 1);
	TextDrawSetShadow(tBarettesLevel[5], 0);
	TextDrawSetSelectable(tBarettesLevel[5], 0);
	//---
	tBarettesLevel[6] = TextDrawCreate(98.000000, 364.000000, ".");
	TextDrawBackgroundColor(tBarettesLevel[6], 255);
	TextDrawFont(tBarettesLevel[6], 2);
	TextDrawLetterSize(tBarettesLevel[6], 0.100000, 10.000000);
	TextDrawColor(tBarettesLevel[6], 255);
	TextDrawSetOutline(tBarettesLevel[6], 0);
	TextDrawSetProportional(tBarettesLevel[6], 1);
	TextDrawSetShadow(tBarettesLevel[6], 0);
	TextDrawSetSelectable(tBarettesLevel[6], 0);
	//---
	tBarettesLevel[7] = TextDrawCreate(112.000000, 364.000000, ".");
	TextDrawBackgroundColor(tBarettesLevel[7], 255);
	TextDrawFont(tBarettesLevel[7], 2);
	TextDrawLetterSize(tBarettesLevel[7], 0.100000, 10.000000);
	TextDrawColor(tBarettesLevel[7], 255);
	TextDrawSetOutline(tBarettesLevel[7], 0);
	TextDrawSetProportional(tBarettesLevel[7], 1);
	TextDrawSetShadow(tBarettesLevel[7], 0);
	TextDrawSetSelectable(tBarettesLevel[7], 0);
	//---
	tBarettesLevel[8] = TextDrawCreate(126.000000, 364.000000, ".");
	TextDrawBackgroundColor(tBarettesLevel[8], 255);
	TextDrawFont(tBarettesLevel[8], 2);
	TextDrawLetterSize(tBarettesLevel[8], 0.100000, 10.000000);
	TextDrawColor(tBarettesLevel[8], 255);
	TextDrawSetOutline(tBarettesLevel[8], 0);
	TextDrawSetProportional(tBarettesLevel[8], 1);
	TextDrawSetShadow(tBarettesLevel[8], 0);
	TextDrawSetSelectable(tBarettesLevel[8], 0);
	//---
	tBarettesLevel[9] = TextDrawCreate(140.000000, 364.000000, ".");
	TextDrawBackgroundColor(tBarettesLevel[9], 255);
	TextDrawFont(tBarettesLevel[9], 2);
	TextDrawLetterSize(tBarettesLevel[9], 0.100000, 10.000000);
	TextDrawColor(tBarettesLevel[9], 255);
	TextDrawSetOutline(tBarettesLevel[9], 0);
	TextDrawSetProportional(tBarettesLevel[9], 1);
	TextDrawSetShadow(tBarettesLevel[9], 0);
	TextDrawSetSelectable(tBarettesLevel[9], 0);
	//---
	tFondAtelier[0] = TextDrawCreate(197.000000, 140.000000, "~n~");
	TextDrawBackgroundColor(tFondAtelier[0], 255);
	TextDrawFont(tFondAtelier[0], 1);
	TextDrawLetterSize(tFondAtelier[0], 0.500000, 16.899997);
	TextDrawColor(tFondAtelier[0], -1);
	TextDrawSetOutline(tFondAtelier[0], 0);
	TextDrawSetProportional(tFondAtelier[0], 1);
	TextDrawSetShadow(tFondAtelier[0], 1);
	TextDrawUseBox(tFondAtelier[0], 1);
	TextDrawBoxColor(tFondAtelier[0], 153);
	TextDrawTextSize(tFondAtelier[0], 442.000000, 10.000000);
	TextDrawSetSelectable(tFondAtelier[0], 0);
	//---
	tFondAtelier[1] = TextDrawCreate(197.000000, 90.000000, "~n~");
	TextDrawBackgroundColor(tFondAtelier[1], 255);
	TextDrawFont(tFondAtelier[1], 1);
	TextDrawLetterSize(tFondAtelier[1], 0.519999, 5.099997);
	TextDrawColor(tFondAtelier[1], -1);
	TextDrawSetOutline(tFondAtelier[1], 0);
	TextDrawSetProportional(tFondAtelier[1], 1);
	TextDrawSetShadow(tFondAtelier[1], 1);
	TextDrawUseBox(tFondAtelier[1], 1);
	TextDrawBoxColor(tFondAtelier[1], 153);
	TextDrawTextSize(tFondAtelier[1], 442.000000, 10.000000);
	TextDrawSetSelectable(tFondAtelier[1], 0);
	//---
	tFondAtelier[2] = TextDrawCreate(197.000000, 314.000000, "~n~");
	TextDrawBackgroundColor(tFondAtelier[2], 255);
	TextDrawFont(tFondAtelier[2], 1);
	TextDrawLetterSize(tFondAtelier[2], 0.519999, 12.099995);
	TextDrawColor(tFondAtelier[2], -1);
	TextDrawSetOutline(tFondAtelier[2], 0);
	TextDrawSetProportional(tFondAtelier[2], 1);
	TextDrawSetShadow(tFondAtelier[2], 1);
	TextDrawUseBox(tFondAtelier[2], 1);
	TextDrawBoxColor(tFondAtelier[2], 153);
	TextDrawTextSize(tFondAtelier[2], 442.000000, 10.000000);
	TextDrawSetSelectable(tFondAtelier[2], 0);
	//---
	tBoutonsAtelier[0] = TextDrawCreate(210.000000, 82.000000, "Armes");
	TextDrawBackgroundColor(tBoutonsAtelier[0], 0);
	TextDrawFont(tBoutonsAtelier[0], 5);
	TextDrawLetterSize(tBoutonsAtelier[0], 0.500000, 1.000000);
	TextDrawColor(tBoutonsAtelier[0], -1);
	TextDrawSetOutline(tBoutonsAtelier[0], 0);
	TextDrawSetProportional(tBoutonsAtelier[0], 1);
	TextDrawSetShadow(tBoutonsAtelier[0], 1);
	TextDrawUseBox(tBoutonsAtelier[0], 1);
	TextDrawBoxColor(tBoutonsAtelier[0], 255);
	TextDrawTextSize(tBoutonsAtelier[0], 40.000000, 50.000000);
	TextDrawSetPreviewModel(tBoutonsAtelier[0], 346);
	TextDrawSetPreviewRot(tBoutonsAtelier[0], 0.000000, 0.000000, 0.000000, 1.000000);
	TextDrawSetSelectable(tBoutonsAtelier[0], 1);
	//---
	tBoutonsAtelier[1] = TextDrawCreate(250.000000, 82.000000, "Outils");
	TextDrawBackgroundColor(tBoutonsAtelier[1], 0);
	TextDrawFont(tBoutonsAtelier[1], 5);
	TextDrawLetterSize(tBoutonsAtelier[1], 0.500000, 1.000000);
	TextDrawColor(tBoutonsAtelier[1], -1);
	TextDrawSetOutline(tBoutonsAtelier[1], 0);
	TextDrawSetProportional(tBoutonsAtelier[1], 1);
	TextDrawSetShadow(tBoutonsAtelier[1], 1);
	TextDrawUseBox(tBoutonsAtelier[1], 1);
	TextDrawBoxColor(tBoutonsAtelier[1], 255);
	TextDrawTextSize(tBoutonsAtelier[1], 40.000000, 50.000000);
	TextDrawSetPreviewModel(tBoutonsAtelier[1], 19627);
	TextDrawSetPreviewRot(tBoutonsAtelier[1], 90.000000, 0.000000, 35.000000, 1.000000);
	TextDrawSetSelectable(tBoutonsAtelier[1], 1);
	//---
	tBoutonsAtelier[2] = TextDrawCreate(300.000000, 82.000000, "Machines");
	TextDrawBackgroundColor(tBoutonsAtelier[2], 0);
	TextDrawFont(tBoutonsAtelier[2], 5);
	TextDrawLetterSize(tBoutonsAtelier[2], 0.500000, 1.000000);
	TextDrawColor(tBoutonsAtelier[2], -1);
	TextDrawSetOutline(tBoutonsAtelier[2], 0);
	TextDrawSetProportional(tBoutonsAtelier[2], 1);
	TextDrawSetShadow(tBoutonsAtelier[2], 1);
	TextDrawUseBox(tBoutonsAtelier[2], 1);
	TextDrawBoxColor(tBoutonsAtelier[2], 255);
	TextDrawTextSize(tBoutonsAtelier[2], 40.000000, 50.000000);
	TextDrawSetPreviewModel(tBoutonsAtelier[2], 19917);
	TextDrawSetPreviewRot(tBoutonsAtelier[2], 330.000000, 0.000000, 0.000000, 1.000000);
	TextDrawSetSelectable(tBoutonsAtelier[2], 1);
	//---
	tBoutonsAtelier[3] = TextDrawCreate(350.000000, 82.000000, "Meubles");
	TextDrawBackgroundColor(tBoutonsAtelier[3], 0);
	TextDrawFont(tBoutonsAtelier[3], 5);
	TextDrawLetterSize(tBoutonsAtelier[3], 0.500000, 1.000000);
	TextDrawColor(tBoutonsAtelier[3], -1);
	TextDrawSetOutline(tBoutonsAtelier[3], 0);
	TextDrawSetProportional(tBoutonsAtelier[3], 1);
	TextDrawSetShadow(tBoutonsAtelier[3], 1);
	TextDrawUseBox(tBoutonsAtelier[3], 1);
	TextDrawBoxColor(tBoutonsAtelier[3], 255);
	TextDrawTextSize(tBoutonsAtelier[3], 40.000000, 50.000000);
	TextDrawSetPreviewModel(tBoutonsAtelier[3], 11503);
	TextDrawSetPreviewRot(tBoutonsAtelier[3], 0.000000, 0.000000, 180.000000, 1.000000);
	TextDrawSetSelectable(tBoutonsAtelier[3], 1);
	//------
	//---
	tFondHUD[0] = TextDrawCreate(77.000000, 140.000000, "~n~");
	TextDrawBackgroundColor(tFondHUD[0], 255);
	TextDrawFont(tFondHUD[0], 1);
	TextDrawLetterSize(tFondHUD[0], 0.500000, 18.000000);
	TextDrawColor(tFondHUD[0], -1);
	TextDrawSetOutline(tFondHUD[0], 0);
	TextDrawSetProportional(tFondHUD[0], 1);
	TextDrawSetShadow(tFondHUD[0], 1);
	TextDrawUseBox(tFondHUD[0], 1);
	TextDrawBoxColor(tFondHUD[0], 153);
	TextDrawTextSize(tFondHUD[0], 194.000000, 0.000000);
	TextDrawSetSelectable(tFondHUD[0], false);
	//---
	tFondHUD[1] = TextDrawCreate(445.000000, 140.000000, "~n~");
	TextDrawBackgroundColor(tFondHUD[1], 255);
	TextDrawFont(tFondHUD[1], 1);
	TextDrawLetterSize(tFondHUD[1], 0.500000, 18.000000);
	TextDrawColor(tFondHUD[1], -1);
	TextDrawSetOutline(tFondHUD[1], 0);
	TextDrawSetProportional(tFondHUD[1], 1);
	TextDrawSetShadow(tFondHUD[1], 1);
	TextDrawUseBox(tFondHUD[1], 1);
	TextDrawBoxColor(tFondHUD[1], 153);
	TextDrawTextSize(tFondHUD[1], 565.000000, 0.000000);
	TextDrawSetSelectable(tFondHUD[1], false);
	//---
	tFondHUD[2] = TextDrawCreate(197.000000, 140.000000, "~n~");
	TextDrawBackgroundColor(tFondHUD[2], 255);
	TextDrawFont(tFondHUD[2], 1);
	TextDrawLetterSize(tFondHUD[2], 0.500000, 33.900001);
	TextDrawColor(tFondHUD[2], -1);
	TextDrawSetOutline(tFondHUD[2], 0);
	TextDrawSetProportional(tFondHUD[2], 1);
	TextDrawSetShadow(tFondHUD[2], 1);
	TextDrawUseBox(tFondHUD[2], 1);
	TextDrawBoxColor(tFondHUD[2], 153);
	TextDrawTextSize(tFondHUD[2], 442.000000, 10.000000);
	TextDrawSetSelectable(tFondHUD[2], false);
	//---
	tFondHUD[3] = TextDrawCreate(445.000000, 306.000000, "~n~");
	TextDrawBackgroundColor(tFondHUD[3], 255);
	TextDrawFont(tFondHUD[3], 1);
	TextDrawLetterSize(tFondHUD[3], 0.500000, 15.449999);
	TextDrawColor(tFondHUD[3], -1);
	TextDrawSetOutline(tFondHUD[3], 0);
	TextDrawSetProportional(tFondHUD[3], 1);
	TextDrawSetShadow(tFondHUD[3], 1);
	TextDrawUseBox(tFondHUD[3], 1);
	TextDrawBoxColor(tFondHUD[3], 153);
	TextDrawTextSize(tFondHUD[3], 565.000000, 0.000000);
	TextDrawSetSelectable(tFondHUD[3], false);
	//---
	tFondHUD[4] = TextDrawCreate(197.000000, 28.000000, "~n~");
	TextDrawBackgroundColor(tFondHUD[4], 255);
	TextDrawFont(tFondHUD[4], 1);
	TextDrawLetterSize(tFondHUD[4], 0.500000, 11.199996);
	TextDrawColor(tFondHUD[4], -1);
	TextDrawSetOutline(tFondHUD[4], 0);
	TextDrawSetProportional(tFondHUD[4], 1);
	TextDrawSetShadow(tFondHUD[4], 1);
	TextDrawUseBox(tFondHUD[4], 1);
	TextDrawBoxColor(tFondHUD[4], 153);
	TextDrawTextSize(tFondHUD[4], 442.000000, 10.000000);
	TextDrawSetSelectable(tFondHUD[4], false);
	//---
	tDarkScreen = TextDrawCreate(0.000000, 0.000000, "~n~");
	TextDrawBackgroundColor(tDarkScreen, 255);
	TextDrawFont(tDarkScreen, 1);
	TextDrawLetterSize(tDarkScreen, 0.500000, 49.600006);
	TextDrawColor(tDarkScreen, -1);
	TextDrawSetOutline(tDarkScreen, 0);
	TextDrawSetProportional(tDarkScreen, 1);
	TextDrawSetShadow(tDarkScreen, 1);
	TextDrawUseBox(tDarkScreen, 1);
	TextDrawBoxColor(tDarkScreen, 0x00000077);
	TextDrawTextSize(tDarkScreen, 640.000000, 100.000000);
	TextDrawSetSelectable(tDarkScreen, 0);
	//---
	tHelp = TextDrawCreate(80.000000, 280.000000, "?");
	TextDrawBackgroundColor(tHelp, 255);
	TextDrawFont(tHelp, 2);
	TextDrawLetterSize(tHelp, 0.600000, 2.000000);
	TextDrawColor(tHelp, -1);
	TextDrawSetOutline(tHelp, 1);
	TextDrawSetProportional(tHelp, 1);
	TextDrawTextSize(tHelp, 100.000000, 20.000000);
	TextDrawSetSelectable(tHelp, true);
	//---
	tCompetence = TextDrawCreate(110.000000, 280.000000, "+");
	TextDrawBackgroundColor(tCompetence, 255);
	TextDrawFont(tCompetence, 2);
	TextDrawLetterSize(tCompetence, 0.600000, 2.000000);
	TextDrawColor(tCompetence, -1);
	TextDrawSetOutline(tCompetence, 1);
	TextDrawSetProportional(tCompetence, 1);
	TextDrawTextSize(tCompetence, 130.000000, 20.000000);
	TextDrawSetSelectable(tCompetence, true);
	//---
	tGroup = TextDrawCreate(140.000000, 280.000000, ")(");
	TextDrawBackgroundColor(tGroup, 255);
	TextDrawFont(tGroup, 2);
	TextDrawLetterSize(tGroup, 0.600000, 2.000000);
	TextDrawColor(tGroup, -1);
	TextDrawSetOutline(tGroup, 1);
	TextDrawSetProportional(tGroup, 1);
	TextDrawTextSize(tGroup, 160.000000, 20.000000);
	TextDrawSetSelectable(tGroup, true);
	//---
	tOptions = TextDrawCreate(170.000000, 280.000000, "§");
	TextDrawBackgroundColor(tOptions, 255);
	TextDrawFont(tOptions, 2);
	TextDrawLetterSize(tOptions, 0.600000, 2.000000);
	TextDrawColor(tOptions, -1);
	TextDrawSetOutline(tOptions, 1);
	TextDrawSetProportional(tOptions, 1);
	TextDrawTextSize(tOptions, 190.000000, 20.000000);
	TextDrawSetSelectable(tOptions, true);
	//---
	/*tConnection = TextDrawCreate(0.000000, -1.000000, "particle:coronamoon");
	TextDrawBackgroundColor(tConnection, 255);
	TextDrawFont(tConnection, 4);
	TextDrawLetterSize(tConnection, -0.099999, 40.599990);
	TextDrawColor(tConnection, -1);
	TextDrawSetOutline(tConnection, 0);
	TextDrawSetProportional(tConnection, 1);
	TextDrawSetShadow(tConnection, 1);
	TextDrawUseBox(tConnection, 1);
	TextDrawBoxColor(tConnection, 255);
	TextDrawTextSize(tConnection, 640.000000, 449.000000);
	TextDrawSetSelectable(tConnection, 0);*/
	//---
	tHUDFont[0] = TextDrawCreate(470.000000, -1.000000, "LD_DUAL:backgnd");
	TextDrawBackgroundColor(tHUDFont[0], -872414977);
	TextDrawFont(tHUDFont[0], 4);
	TextDrawLetterSize(tHUDFont[0], 0.500000, 1.000000);
	TextDrawColor(tHUDFont[0], -1);
	TextDrawSetOutline(tHUDFont[0], 1);
	TextDrawSetProportional(tHUDFont[0], 1);
	TextDrawUseBox(tHUDFont[0], 1);
	TextDrawBoxColor(tHUDFont[0], 255);
	TextDrawTextSize(tHUDFont[0], 170.000000, 120.000000);
	TextDrawSetSelectable(tHUDFont[0], 0);
	//---
	tHUDFont[1] = TextDrawCreate(488.500000, 1.000000, "~n~");
	TextDrawBackgroundColor(tHUDFont[1], 255);
	TextDrawFont(tHUDFont[1], 1);
	TextDrawLetterSize(tHUDFont[1], 0.490000, 11.800003);
	TextDrawColor(tHUDFont[1], -1);
	TextDrawSetOutline(tHUDFont[1], 0);
	TextDrawSetProportional(tHUDFont[1], 1);
	TextDrawSetShadow(tHUDFont[1], 1);
	TextDrawUseBox(tHUDFont[1], 1);
	TextDrawBoxColor(tHUDFont[1], 1275092070);
	TextDrawTextSize(tHUDFont[1], 469.000000, -30.000000);
	TextDrawSetSelectable(tHUDFont[1], 0);
	//---
	tHUDFont[2] = TextDrawCreate(471.000000, 2.000000, "hud:radar_burgershot");
	TextDrawBackgroundColor(tHUDFont[2], 255);
	TextDrawFont(tHUDFont[2], 4);
	TextDrawLetterSize(tHUDFont[2], 9.629997, 8.000000);
	TextDrawColor(tHUDFont[2], -1);
	TextDrawSetOutline(tHUDFont[2], 0);
	TextDrawSetProportional(tHUDFont[2], 1);
	TextDrawSetShadow(tHUDFont[2], 1);
	TextDrawUseBox(tHUDFont[2], 1);
	TextDrawBoxColor(tHUDFont[2], 255);
	TextDrawTextSize(tHUDFont[2], 15.000000, 15.000000);
	TextDrawSetSelectable(tHUDFont[2], 0);
	//---
	tHUDFont[3] = TextDrawCreate(471.000000, 20.000000, "hud:radar_dateDrink");
	TextDrawBackgroundColor(tHUDFont[3], 255);
	TextDrawFont(tHUDFont[3], 4);
	TextDrawLetterSize(tHUDFont[3], 9.629997, 8.000000);
	TextDrawColor(tHUDFont[3], -1);
	TextDrawSetOutline(tHUDFont[3], 0);
	TextDrawSetProportional(tHUDFont[3], 1);
	TextDrawSetShadow(tHUDFont[3], 1);
	TextDrawUseBox(tHUDFont[3], 1);
	TextDrawBoxColor(tHUDFont[3], 255);
	TextDrawTextSize(tHUDFont[3], 15.000000, 15.000000);
	TextDrawSetSelectable(tHUDFont[3], 0);
	//---
	tHUDFont[4] = TextDrawCreate(473.000000, 37.000000, "Zzz");
	TextDrawBackgroundColor(tHUDFont[4], 255);
	TextDrawFont(tHUDFont[4], 1);
	TextDrawLetterSize(tHUDFont[4], 0.199996, 2.000000);
	TextDrawColor(tHUDFont[4], -1);
	TextDrawSetOutline(tHUDFont[4], 0);
	TextDrawSetProportional(tHUDFont[4], 1);
	TextDrawSetShadow(tHUDFont[4], 1);
	TextDrawSetSelectable(tHUDFont[4], 0);
	//---
	tHUDFont[5] = TextDrawCreate(460.000000, 43.000000, "Or");
	TextDrawBackgroundColor(tHUDFont[5], 0);
	TextDrawFont(tHUDFont[5], 5);
	TextDrawLetterSize(tHUDFont[5], 0.500000, 1.000000);
	TextDrawColor(tHUDFont[5], -1);
	TextDrawSetOutline(tHUDFont[5], 0);
	TextDrawSetProportional(tHUDFont[5], 1);
	TextDrawSetShadow(tHUDFont[5], 1);
	TextDrawUseBox(tHUDFont[5], 1);
	TextDrawBoxColor(tHUDFont[5], 0);
	TextDrawTextSize(tHUDFont[5], 40.000000, 40.000000);
	TextDrawSetPreviewModel(tHUDFont[5], 19941);
	TextDrawSetPreviewRot(tHUDFont[5], -16.000000, 0.000000, -55.000000, 1.000000);
	TextDrawSetSelectable(tHUDFont[5], true);
	//---
	tHUDFont[6] = TextDrawCreate(471.000000, 74.000000, "hud:radar_girlfriend");
	TextDrawBackgroundColor(tHUDFont[6], 255);
	TextDrawFont(tHUDFont[6], 4);
	TextDrawLetterSize(tHUDFont[6], 9.629997, 8.000000);
	TextDrawColor(tHUDFont[6], -1);
	TextDrawSetOutline(tHUDFont[6], 0);
	TextDrawSetProportional(tHUDFont[6], 1);
	TextDrawSetShadow(tHUDFont[6], 1);
	TextDrawUseBox(tHUDFont[6], 1);
	TextDrawBoxColor(tHUDFont[6], 255);
	TextDrawTextSize(tHUDFont[6], 15.000000, 15.000000);
	TextDrawSetSelectable(tHUDFont[6], 0);
	//---
	tHUDFont[7] = TextDrawCreate(471.000000, 92.000000, "hud:radar_tshirt");
	TextDrawBackgroundColor(tHUDFont[7], 255);
	TextDrawFont(tHUDFont[7], 4);
	TextDrawLetterSize(tHUDFont[7], 9.629997, 8.000000);
	TextDrawColor(tHUDFont[7], -1);
	TextDrawSetOutline(tHUDFont[7], 0);
	TextDrawSetProportional(tHUDFont[7], 1);
	TextDrawSetShadow(tHUDFont[7], 1);
	TextDrawUseBox(tHUDFont[7], 1);
	TextDrawBoxColor(tHUDFont[7], 255);
	TextDrawTextSize(tHUDFont[7], 15.000000, 15.000000);
	TextDrawSetSelectable(tHUDFont[7], 0);
	//---
	tHUDFont[8] = TextDrawCreate(-40.000000, 270.000000, "New Textdraw");
	TextDrawBackgroundColor(tHUDFont[8], 0);
	TextDrawFont(tHUDFont[8], 5);
	TextDrawLetterSize(tHUDFont[8], 0.500000, 1.000000);
	TextDrawColor(tHUDFont[8], -1);
	TextDrawSetOutline(tHUDFont[8], 0);
	TextDrawSetProportional(tHUDFont[8], 1);
	TextDrawSetShadow(tHUDFont[8], 1);
	TextDrawUseBox(tHUDFont[8], 1);
	TextDrawBoxColor(tHUDFont[8], 255);
	TextDrawTextSize(tHUDFont[8], 240.000000, 220.000000);
	TextDrawSetPreviewModel(tHUDFont[8], 19836);
	TextDrawSetPreviewRot(tHUDFont[8], 90.000000, 0.000000, 0.000000, 1.000000);
	TextDrawSetSelectable(tHUDFont[8], false);
	//---
	tBrokenLeg[0] = TextDrawCreate(472.000000, 109.000000, "Broken leg!");
	tBrokenLeg[1] = TextDrawCreate(472.000000, 109.000000, "Jambe cassee !");
	tBrokenLeg[2] = TextDrawCreate(472.000000, 109.000000, "¡Pierna rotta!");
	tBrokenLeg[3] = TextDrawCreate(472.000000, 109.000000, "Perna quebrada !");
	tBrokenLeg[4] = TextDrawCreate(472.000000, 109.000000, "Gamba rotta !");
	tBrokenLeg[5] = TextDrawCreate(472.000000, 109.000000, "Gebrochenes Bein!");
	for(new i = 0; i < 6; i ++)
 	{
		TextDrawBackgroundColor(tBrokenLeg[i], 255);
		TextDrawFont(tBrokenLeg[i], 2);
		TextDrawLetterSize(tBrokenLeg[i], 0.200000, 1.000000);
		TextDrawColor(tBrokenLeg[i], -872414977);
		TextDrawSetOutline(tBrokenLeg[i], 1);
		TextDrawSetProportional(tBrokenLeg[i], 1);
		TextDrawSetSelectable(tBrokenLeg[i], 0);
	}
	tHemoragie[0] = TextDrawCreate(640.000000, 109.000000, "Hemorrhage!");
	tHemoragie[1] = TextDrawCreate(640.000000, 109.000000, "Hemorragie !");
	tHemoragie[2] = TextDrawCreate(640.000000, 109.000000, "¡Hemorragia!");
	tHemoragie[3] = TextDrawCreate(640.000000, 109.000000, "Portugais");
	tHemoragie[4] = TextDrawCreate(640.000000, 109.000000, "Emorragia !");
	tHemoragie[5] = TextDrawCreate(640.000000, 109.000000, "Blutung!");
	for(new i = 0; i < 6; i ++)
 	{
		TextDrawAlignment(tHemoragie[i], 3);
		TextDrawBackgroundColor(tHemoragie[i], 255);
		TextDrawFont(tHemoragie[i], 2);
		TextDrawLetterSize(tHemoragie[i], 0.200000, 1.000000);
		TextDrawColor(tHemoragie[i], -872414977);
		TextDrawSetOutline(tHemoragie[i], 1);
		TextDrawSetProportional(tHemoragie[i], 1);
		TextDrawSetSelectable(tHemoragie[i], 0);
	}
	//---
	tBoutonFabriquer[0] = TextDrawCreate(290.000000, 420.000000, "Craft");
	tBoutonFabriquer[1] = TextDrawCreate(290.000000, 420.000000, "Fabriquer");
	tBoutonFabriquer[2] = TextDrawCreate(290.000000, 420.000000, "Espagnol");
	tBoutonFabriquer[3] = TextDrawCreate(290.000000, 420.000000, "Fazer");
	tBoutonFabriquer[4] = TextDrawCreate(290.000000, 420.000000, "Italien");
	tBoutonFabriquer[5] = TextDrawCreate(290.000000, 420.000000, "Handwerken");
	for(new i = 0; i < 6; i ++)
 	{
		TextDrawBackgroundColor(tBoutonFabriquer[i], 255);
		TextDrawFont(tBoutonFabriquer[i], 3);
		TextDrawLetterSize(tBoutonFabriquer[i], 0.500000, 1.000000);
		TextDrawColor(tBoutonFabriquer[i], -1);
		TextDrawSetOutline(tBoutonFabriquer[i], 1);
		TextDrawSetProportional(tBoutonFabriquer[i], 1);
		TextDrawSetSelectable(tBoutonFabriquer[i], true);
	}
	//---
	tBoutonCuisiner[0] = TextDrawCreate(290.000000, 420.000000, "Cook");
	tBoutonCuisiner[1] = TextDrawCreate(290.000000, 420.000000, "Cuisiner");
	tBoutonCuisiner[2] = TextDrawCreate(290.000000, 420.000000, "Cucinar");
	tBoutonCuisiner[3] = TextDrawCreate(290.000000, 420.000000, "Cozinhar");
	tBoutonCuisiner[4] = TextDrawCreate(290.000000, 420.000000, "Cucinare");
	tBoutonCuisiner[5] = TextDrawCreate(290.000000, 420.000000, "Kochen");
	for(new i = 0; i < 6; i ++)
 	{
		TextDrawBackgroundColor(tBoutonCuisiner[i], 255);
		TextDrawFont(tBoutonCuisiner[i], 3);
		TextDrawLetterSize(tBoutonCuisiner[i], 0.500000, 1.000000);
		TextDrawColor(tBoutonCuisiner[i], -1);
		TextDrawSetOutline(tBoutonCuisiner[i], 1);
		TextDrawSetProportional(tBoutonCuisiner[i], 1);
		TextDrawSetSelectable(tBoutonCuisiner[i], true);
	}
	//---
	tBoutonBatir[0] = TextDrawCreate(290.000000, 420.000000, "Build");
	tBoutonBatir[1] = TextDrawCreate(290.000000, 420.000000, "Batir");
	tBoutonBatir[2] = TextDrawCreate(290.000000, 420.000000, "Espagnol");
	tBoutonBatir[3] = TextDrawCreate(290.000000, 420.000000, "Construir");
	tBoutonBatir[4] = TextDrawCreate(290.000000, 420.000000, "Italien");
	tBoutonBatir[5] = TextDrawCreate(290.000000, 420.000000, "Bauen");
	for(new i = 0; i < 6; i ++)
 	{
		TextDrawBackgroundColor(tBoutonBatir[i], 255);
		TextDrawFont(tBoutonBatir[i], 3);
		TextDrawLetterSize(tBoutonBatir[i], 0.500000, 1.000000);
		TextDrawColor(tBoutonBatir[i], -1);
		TextDrawSetOutline(tBoutonBatir[i], 1);
		TextDrawSetProportional(tBoutonBatir[i], 1);
		TextDrawSetSelectable(tBoutonBatir[i], true);
	}
	//---RÈGLES
	tRules[0][0] = TextDrawCreate(230.000000, 150.000000, "Rules");
	tRules[1][0] = TextDrawCreate(230.000000, 150.000000, "Regles");
	tRules[2][0] = TextDrawCreate(230.000000, 150.000000, "Espagnol");
	tRules[3][0] = TextDrawCreate(230.000000, 150.000000, "Portugais");
	tRules[4][0] = TextDrawCreate(230.000000, 150.000000, "Italien");
	tRules[5][0] = TextDrawCreate(230.000000, 150.000000, "Allemand");
	for(new i = 0; i < 6; i ++)
 	{
		TextDrawBackgroundColor(tRules[i][0], -872415096);
		TextDrawFont(tRules[i][0], 3);
		TextDrawLetterSize(tRules[i][0], 0.700000, 2.000000);
		TextDrawColor(tRules[i][0], 255);
		TextDrawSetOutline(tRules[i][0], 1);
		TextDrawSetProportional(tRules[i][0], 1);
		TextDrawSetSelectable(tRules[i][0], 0);
	}
	//
	tRules[0][1] = TextDrawCreate(220.000000, 170.000000, "1.  No cheat.~n~2. No explicit vocabulary.~n~3. No ad. for other servers.~n~4. No ban evade.~n~5. No bug exploiting.");
	tRules[1][1] = TextDrawCreate(220.000000, 170.000000, "1.  Pas de cheat.~n~2. Pas d'insultes.~n~3. Pas de pub.~n~4. Pas de ban evade.~n~5. Pas d'abus de bugs.");
	tRules[2][1] = TextDrawCreate(220.000000, 170.000000, "1.  Espgnol");
	tRules[3][1] = TextDrawCreate(220.000000, 170.000000, "1.  Portugais");
	tRules[4][1] = TextDrawCreate(220.000000, 170.000000, "1.  Italien");
	tRules[5][1] = TextDrawCreate(220.000000, 170.000000, "1.  Allemand");
	for(new i = 0; i < 6; i ++)
 	{
		TextDrawBackgroundColor(tRules[i][1], 255);
		TextDrawFont(tRules[i][1], 2);
		TextDrawLetterSize(tRules[i][1], 0.200000, 1.499999);
		TextDrawColor(tRules[i][1], -1);
		TextDrawSetOutline(tRules[i][1], 0);
		TextDrawSetProportional(tRules[i][1], 1);
		TextDrawSetShadow(tRules[i][1], 1);
		TextDrawUseBox(tRules[i][1], 1);
		TextDrawBoxColor(tRules[i][1], 102);
		TextDrawTextSize(tRules[i][1], 410.000000, -20.000000);
		TextDrawSetSelectable(tRules[i][1], 0);
 	}
	//---
	tBloodSplat = TextDrawCreate(370.000000, 180.000000, " ");
	TextDrawBackgroundColor(tBloodSplat, 0);
	TextDrawFont(tBloodSplat, 5);
	TextDrawLetterSize(tBloodSplat, 0.500000, 1.000000);
	TextDrawColor(tBloodSplat, -1);
	TextDrawSetOutline(tBloodSplat, 0);
	TextDrawSetProportional(tBloodSplat, 1);
	TextDrawSetShadow(tBloodSplat, 1);
	TextDrawUseBox(tBloodSplat, 1);
	TextDrawBoxColor(tBloodSplat, 0);
	TextDrawTextSize(tBloodSplat, 80.000000, 100.000000);
	TextDrawSetPreviewModel(tBloodSplat, 19836);
	TextDrawSetPreviewRot(tBloodSplat, 90.000000, 0.000000, -55.000000, 1.000000);
	TextDrawSetSelectable(tBloodSplat, 0);
	//---SÉLECTION SKIN---//
	tSkinSelect[0] = TextDrawCreate(240.000000, 130.000000, "Sang");
	TextDrawBackgroundColor(tSkinSelect[0], 0);
	TextDrawFont(tSkinSelect[0], 5);
	TextDrawLetterSize(tSkinSelect[0], 0.500000, 1.000000);
	TextDrawColor(tSkinSelect[0], -1);
	TextDrawSetOutline(tSkinSelect[0], 0);
	TextDrawSetProportional(tSkinSelect[0], 1);
	TextDrawSetShadow(tSkinSelect[0], 1);
	TextDrawUseBox(tSkinSelect[0], 1);
	TextDrawBoxColor(tSkinSelect[0], 255);
	TextDrawTextSize(tSkinSelect[0], 200.000000, 180.000000);
	TextDrawSetPreviewModel(tSkinSelect[0], 19836);
	TextDrawSetPreviewRot(tSkinSelect[0], 90.000000, 0.000000, 0.000000, 1.000000);
	TextDrawSetSelectable(tSkinSelect[0], false);
	//---
	tSkinSelect[1] = TextDrawCreate(190.000000, 240.000000, "Sang");
	TextDrawBackgroundColor(tSkinSelect[1], 0);
	TextDrawFont(tSkinSelect[1], 5);
	TextDrawLetterSize(tSkinSelect[1], 0.500000, 1.000000);
	TextDrawColor(tSkinSelect[1], -1);
	TextDrawSetOutline(tSkinSelect[1], 0);
	TextDrawSetProportional(tSkinSelect[1], 1);
	TextDrawSetShadow(tSkinSelect[1], 1);
	TextDrawUseBox(tSkinSelect[1], 1);
	TextDrawBoxColor(tSkinSelect[1], 255);
	TextDrawTextSize(tSkinSelect[1], 160.000000, 140.000000);
	TextDrawSetPreviewModel(tSkinSelect[1], 19836);
	TextDrawSetPreviewRot(tSkinSelect[1], 90.000000, 0.000000, 0.000000, 1.000000);
	TextDrawSetSelectable(tSkinSelect[1], true);
	//---
	tSkinSelect[2] = TextDrawCreate(330.000000, 240.000000, "Sang");
	TextDrawBackgroundColor(tSkinSelect[2], 0);
	TextDrawFont(tSkinSelect[2], 5);
	TextDrawLetterSize(tSkinSelect[2], 0.500000, 1.000000);
	TextDrawColor(tSkinSelect[2], -1);
	TextDrawSetOutline(tSkinSelect[2], 0);
	TextDrawSetProportional(tSkinSelect[2], 1);
	TextDrawSetShadow(tSkinSelect[2], 1);
	TextDrawUseBox(tSkinSelect[2], 1);
	TextDrawBoxColor(tSkinSelect[2], 255);
	TextDrawTextSize(tSkinSelect[2], 160.000000, 140.000000);
	TextDrawSetPreviewModel(tSkinSelect[2], 19836);
	TextDrawSetPreviewRot(tSkinSelect[2], 90.000000, 0.000000, 180.000000, 1.000000);
	TextDrawSetSelectable(tSkinSelect[2], true);
	//---
	tSkinSelect[3] = TextDrawCreate(250.000000, 290.000000, "hud:arrow");
	TextDrawBackgroundColor(tSkinSelect[3], 255);
	TextDrawFont(tSkinSelect[3], 4);
	TextDrawLetterSize(tSkinSelect[3], 1.000000, 10.000000);
	TextDrawColor(tSkinSelect[3], -1);
	TextDrawSetOutline(tSkinSelect[3], 0);
	TextDrawSetProportional(tSkinSelect[3], 1);
	TextDrawSetShadow(tSkinSelect[3], 1);
	TextDrawUseBox(tSkinSelect[3], 1);
	TextDrawBoxColor(tSkinSelect[3], 255);
	TextDrawTextSize(tSkinSelect[3], 40.000000, 40.000000);
	TextDrawSetSelectable(tSkinSelect[3], false);
	//---
	tSkinSelect[4] = TextDrawCreate(390.000000, 330.000000, "hud:arrow");
	TextDrawBackgroundColor(tSkinSelect[4], 255);
	TextDrawFont(tSkinSelect[4], 4);
	TextDrawLetterSize(tSkinSelect[4], 1.000000, 10.000000);
	TextDrawColor(tSkinSelect[4], -1);
	TextDrawSetOutline(tSkinSelect[4], 0);
	TextDrawSetProportional(tSkinSelect[4], 1);
	TextDrawSetShadow(tSkinSelect[4], 1);
	TextDrawUseBox(tSkinSelect[4], 1);
	TextDrawBoxColor(tSkinSelect[4], 255);
	TextDrawTextSize(tSkinSelect[4], 40.000000, -40.000000);
	TextDrawSetSelectable(tSkinSelect[4], false);
	//---
	tSkinSelect[5] = TextDrawCreate(305.000000, 250.000000, "Spawn");
	TextDrawBackgroundColor(tSkinSelect[5], 255);
	TextDrawFont(tSkinSelect[5], 3);
	TextDrawLetterSize(tSkinSelect[5], 0.600000, 3.000000);
	TextDrawColor(tSkinSelect[5], -1);
	TextDrawSetOutline(tSkinSelect[5], 1);
	TextDrawSetProportional(tSkinSelect[5], 1);
	TextDrawTextSize(tSkinSelect[5], 370.000000, 40.000000);
	TextDrawSetSelectable(tSkinSelect[5], true);
	//---
	tSkinSelect[6] = TextDrawCreate(305.000000, 250.000000, "OK");
	TextDrawBackgroundColor(tSkinSelect[6], 255);
	TextDrawFont(tSkinSelect[6], 3);
	TextDrawLetterSize(tSkinSelect[6], 0.600000, 3.000000);
	TextDrawColor(tSkinSelect[6], -1);
	TextDrawSetOutline(tSkinSelect[6], 1);
	TextDrawSetProportional(tSkinSelect[6], 1);
	TextDrawTextSize(tSkinSelect[6], 370.000000, 40.000000);
	TextDrawSetSelectable(tSkinSelect[6], true);
}

CreatePlayerVehicleHUD(playerid)
{
	tPlayerVehHUD[playerid][0] = CreatePlayerTextDraw(playerid,440.000000, 300.000000, "Moteur");
	PlayerTextDrawBackgroundColor(playerid,tPlayerVehHUD[playerid][0], 0);
	PlayerTextDrawFont(playerid,tPlayerVehHUD[playerid][0], 5);
	PlayerTextDrawLetterSize(playerid,tPlayerVehHUD[playerid][0], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,tPlayerVehHUD[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid,tPlayerVehHUD[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid,tPlayerVehHUD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid,tPlayerVehHUD[playerid][0], 1);
	PlayerTextDrawUseBox(playerid,tPlayerVehHUD[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid,tPlayerVehHUD[playerid][0], 255);
	PlayerTextDrawTextSize(playerid,tPlayerVehHUD[playerid][0], 30.000000, 30.000000);
	PlayerTextDrawSetPreviewModel(playerid, tPlayerVehHUD[playerid][0], 19917);
	PlayerTextDrawSetPreviewRot(playerid, tPlayerVehHUD[playerid][0], 330.000000, 0.000000, 25.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid,tPlayerVehHUD[playerid][0], 0);
	//---
	tPlayerVehHUD[playerid][1] = CreatePlayerTextDraw(playerid,470.000000, 310.000000, "Roue");
	PlayerTextDrawBackgroundColor(playerid,tPlayerVehHUD[playerid][1], 0);
	PlayerTextDrawFont(playerid,tPlayerVehHUD[playerid][1], 5);
	PlayerTextDrawLetterSize(playerid,tPlayerVehHUD[playerid][1], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,tPlayerVehHUD[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid,tPlayerVehHUD[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid,tPlayerVehHUD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid,tPlayerVehHUD[playerid][1], 1);
	PlayerTextDrawUseBox(playerid,tPlayerVehHUD[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid,tPlayerVehHUD[playerid][1], 255);
	PlayerTextDrawTextSize(playerid,tPlayerVehHUD[playerid][1], 20.000000, 20.000000);
	PlayerTextDrawSetPreviewModel(playerid, tPlayerVehHUD[playerid][1], 1098);
	PlayerTextDrawSetPreviewRot(playerid, tPlayerVehHUD[playerid][1], 0.000000, 0.000000, 90.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid,tPlayerVehHUD[playerid][1], 0);
	//---
	tPlayerVehHUD[playerid][2] = CreatePlayerTextDraw(playerid,495.000000, 310.000000, "Roue");
	PlayerTextDrawBackgroundColor(playerid,tPlayerVehHUD[playerid][2], 0);
	PlayerTextDrawFont(playerid,tPlayerVehHUD[playerid][2], 5);
	PlayerTextDrawLetterSize(playerid,tPlayerVehHUD[playerid][2], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,tPlayerVehHUD[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid,tPlayerVehHUD[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid,tPlayerVehHUD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid,tPlayerVehHUD[playerid][2], 1);
	PlayerTextDrawUseBox(playerid,tPlayerVehHUD[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid,tPlayerVehHUD[playerid][2], 255);
	PlayerTextDrawTextSize(playerid,tPlayerVehHUD[playerid][2], 20.000000, 20.000000);
	PlayerTextDrawSetPreviewModel(playerid, tPlayerVehHUD[playerid][2], 1098);
	PlayerTextDrawSetPreviewRot(playerid, tPlayerVehHUD[playerid][2], 0.000000, 0.000000, 90.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid,tPlayerVehHUD[playerid][2], 0);
	//---
	tPlayerVehHUD[playerid][3] = CreatePlayerTextDraw(playerid,520.000000, 310.000000, "Roue");
	PlayerTextDrawBackgroundColor(playerid,tPlayerVehHUD[playerid][3], 0);
	PlayerTextDrawFont(playerid,tPlayerVehHUD[playerid][3], 5);
	PlayerTextDrawLetterSize(playerid,tPlayerVehHUD[playerid][3], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,tPlayerVehHUD[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid,tPlayerVehHUD[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid,tPlayerVehHUD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid,tPlayerVehHUD[playerid][3], 1);
	PlayerTextDrawUseBox(playerid,tPlayerVehHUD[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid,tPlayerVehHUD[playerid][3], 255);
	PlayerTextDrawTextSize(playerid,tPlayerVehHUD[playerid][3], 20.000000, 20.000000);
	PlayerTextDrawSetPreviewModel(playerid, tPlayerVehHUD[playerid][3], 1098);
	PlayerTextDrawSetPreviewRot(playerid, tPlayerVehHUD[playerid][3], 0.000000, 0.000000, 90.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid,tPlayerVehHUD[playerid][3], 0);
	//---
	tPlayerVehHUD[playerid][4] = CreatePlayerTextDraw(playerid,545.000000, 310.000000, "Roue");
	PlayerTextDrawBackgroundColor(playerid,tPlayerVehHUD[playerid][4], 0);
	PlayerTextDrawFont(playerid,tPlayerVehHUD[playerid][4], 5);
	PlayerTextDrawLetterSize(playerid,tPlayerVehHUD[playerid][4], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,tPlayerVehHUD[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid,tPlayerVehHUD[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid,tPlayerVehHUD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid,tPlayerVehHUD[playerid][4], 1);
	PlayerTextDrawUseBox(playerid,tPlayerVehHUD[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid,tPlayerVehHUD[playerid][4], 255);
	PlayerTextDrawTextSize(playerid,tPlayerVehHUD[playerid][4], 20.000000, 20.000000);
	PlayerTextDrawSetPreviewModel(playerid, tPlayerVehHUD[playerid][4], 1098);
	PlayerTextDrawSetPreviewRot(playerid, tPlayerVehHUD[playerid][4], 0.000000, 0.000000, 90.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid,tPlayerVehHUD[playerid][4], 0);
}

CreatePlayerVehicleInventory(playerid)
{
	new Float:xText[6] = {444.0, 485.0, 526.0, 444.0, 485.0, 526.0};
	new Float:yText[6] = {340.0, 340.0, 340.0, 391.0, 391.0, 391.0};
	for(new i = 0; i < 6; i ++)
	{
		tVehicleTrunk[playerid][i][0] = CreatePlayerTextDraw(playerid, xText[i], yText[i], "Objet1");
		PlayerTextDrawBackgroundColor(playerid,tVehicleTrunk[playerid][i][0], 153);
		PlayerTextDrawFont(playerid,tVehicleTrunk[playerid][i][0], 5);
		PlayerTextDrawLetterSize(playerid,tVehicleTrunk[playerid][i][0], 0.500000, 1.000000);
		PlayerTextDrawColor(playerid,tVehicleTrunk[playerid][i][0], -1);
		PlayerTextDrawSetOutline(playerid,tVehicleTrunk[playerid][i][0], 0);
		PlayerTextDrawSetProportional(playerid,tVehicleTrunk[playerid][i][0], 1);
		PlayerTextDrawSetShadow(playerid,tVehicleTrunk[playerid][i][0], 1);
		PlayerTextDrawUseBox(playerid,tVehicleTrunk[playerid][i][0], 1);
		PlayerTextDrawBoxColor(playerid,tVehicleTrunk[playerid][i][0], 255);
		PlayerTextDrawTextSize(playerid,tVehicleTrunk[playerid][i][0], 40.000000, 50.000000);
		PlayerTextDrawSetSelectable(playerid,tVehicleTrunk[playerid][i][0], true);
		//---
		tVehicleTrunk[playerid][i][1] = CreatePlayerTextDraw(playerid, xText[i], yText[i] + 38.0, " ");
		PlayerTextDrawBackgroundColor(playerid,tVehicleTrunk[playerid][i][1], 136);
		PlayerTextDrawFont(playerid,tVehicleTrunk[playerid][i][1], 2);
		PlayerTextDrawLetterSize(playerid,tVehicleTrunk[playerid][i][1], 0.110000, 0.599999);
		PlayerTextDrawColor(playerid,tVehicleTrunk[playerid][i][1], -1);
		PlayerTextDrawSetOutline(playerid,tVehicleTrunk[playerid][i][1], 1);
		PlayerTextDrawSetProportional(playerid,tVehicleTrunk[playerid][i][1], 1);
		PlayerTextDrawSetSelectable(playerid,tVehicleTrunk[playerid][i][1], false);
	}
}

CreatePlayerHUD(playerid)
{
	tPlayerHUD[playerid][0] = CreatePlayerTextDraw(playerid,87.000000, 150.000000, "Skin");
	PlayerTextDrawBackgroundColor(playerid,tPlayerHUD[playerid][0], 0);
	PlayerTextDrawFont(playerid,tPlayerHUD[playerid][0], 5);
	PlayerTextDrawLetterSize(playerid,tPlayerHUD[playerid][0], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,tPlayerHUD[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid,tPlayerHUD[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid,tPlayerHUD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid,tPlayerHUD[playerid][0], 1);
	PlayerTextDrawUseBox(playerid,tPlayerHUD[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid,tPlayerHUD[playerid][0], 255);
	PlayerTextDrawTextSize(playerid,tPlayerHUD[playerid][0], 100.000000, 140.000000);
	PlayerTextDrawSetSelectable(playerid,tPlayerHUD[playerid][0], false);
	//---
	tPlayerHUD[playerid][1] = CreatePlayerTextDraw(playerid,449.000000, 150.000000, "Arme1");
	PlayerTextDrawBackgroundColor(playerid,tPlayerHUD[playerid][1], 85);
	PlayerTextDrawFont(playerid,tPlayerHUD[playerid][1], 5);
	PlayerTextDrawLetterSize(playerid,tPlayerHUD[playerid][1], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,tPlayerHUD[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid,tPlayerHUD[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid,tPlayerHUD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid,tPlayerHUD[playerid][1], 1);
	PlayerTextDrawUseBox(playerid,tPlayerHUD[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid,tPlayerHUD[playerid][1], 255);
	PlayerTextDrawTextSize(playerid,tPlayerHUD[playerid][1], 55.000000, 60.000000);
	PlayerTextDrawSetPreviewModel(playerid, tPlayerHUD[playerid][1], 355);
	PlayerTextDrawSetPreviewRot(playerid, tPlayerHUD[playerid][1], 0.000000, 315.000000, 0.000000, 2.000000);
	PlayerTextDrawSetSelectable(playerid,tPlayerHUD[playerid][1], true);
	//---
	tPlayerHUD[playerid][2] = CreatePlayerTextDraw(playerid,506.000000, 150.000000, "Arme2");
	PlayerTextDrawBackgroundColor(playerid,tPlayerHUD[playerid][2], 85);
	PlayerTextDrawFont(playerid,tPlayerHUD[playerid][2], 5);
	PlayerTextDrawLetterSize(playerid,tPlayerHUD[playerid][2], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,tPlayerHUD[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid,tPlayerHUD[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid,tPlayerHUD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid,tPlayerHUD[playerid][2], 1);
	PlayerTextDrawUseBox(playerid,tPlayerHUD[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid,tPlayerHUD[playerid][2], 255);
	PlayerTextDrawTextSize(playerid,tPlayerHUD[playerid][2], 55.000000, 60.000000);
	PlayerTextDrawSetPreviewModel(playerid, tPlayerHUD[playerid][2], 349);
	PlayerTextDrawSetPreviewRot(playerid, tPlayerHUD[playerid][2], 0.000000, 315.000000, 0.000000, 2.000000);
	PlayerTextDrawSetSelectable(playerid,tPlayerHUD[playerid][2], true);
	//---
	tPlayerHUD[playerid][3] = CreatePlayerTextDraw(playerid,449.000000, 212.000000, "Arme3");
	PlayerTextDrawBackgroundColor(playerid,tPlayerHUD[playerid][3], 85);
	PlayerTextDrawFont(playerid,tPlayerHUD[playerid][3], 5);
	PlayerTextDrawLetterSize(playerid,tPlayerHUD[playerid][3], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,tPlayerHUD[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid,tPlayerHUD[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid,tPlayerHUD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid,tPlayerHUD[playerid][3], 1);
	PlayerTextDrawUseBox(playerid,tPlayerHUD[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid,tPlayerHUD[playerid][3], 255);
	PlayerTextDrawTextSize(playerid,tPlayerHUD[playerid][3], 55.000000, 60.000000);
	PlayerTextDrawSetPreviewModel(playerid, tPlayerHUD[playerid][3], 352);
	PlayerTextDrawSetPreviewRot(playerid, tPlayerHUD[playerid][3], -16.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid,tPlayerHUD[playerid][3], true);
	//---
	tPlayerHUD[playerid][4] = CreatePlayerTextDraw(playerid,506.000000, 212.000000, "Arme4");
	PlayerTextDrawBackgroundColor(playerid,tPlayerHUD[playerid][4], 85);
	PlayerTextDrawFont(playerid,tPlayerHUD[playerid][4], 5);
	PlayerTextDrawLetterSize(playerid,tPlayerHUD[playerid][4], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,tPlayerHUD[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid,tPlayerHUD[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid,tPlayerHUD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid,tPlayerHUD[playerid][4], 1);
	PlayerTextDrawUseBox(playerid,tPlayerHUD[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid,tPlayerHUD[playerid][4], 255);
	PlayerTextDrawTextSize(playerid,tPlayerHUD[playerid][4], 55.000000, 60.000000);
	PlayerTextDrawSetPreviewModel(playerid, tPlayerHUD[playerid][4], 336);
	PlayerTextDrawSetPreviewRot(playerid, tPlayerHUD[playerid][4], 0.000000, 315.000000, 0.000000, 2.000000);
	PlayerTextDrawSetSelectable(playerid,tPlayerHUD[playerid][4], true);
	//---
	tPlayerHUD[playerid][5] = CreatePlayerTextDraw(playerid,120.000000, 142.000000, "Chapeau");
	PlayerTextDrawBackgroundColor(playerid,tPlayerHUD[playerid][5], 51);
	PlayerTextDrawFont(playerid,tPlayerHUD[playerid][5], 5);
	PlayerTextDrawLetterSize(playerid,tPlayerHUD[playerid][5], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,tPlayerHUD[playerid][5], -1);
	PlayerTextDrawSetOutline(playerid,tPlayerHUD[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid,tPlayerHUD[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid,tPlayerHUD[playerid][5], 1);
	PlayerTextDrawUseBox(playerid,tPlayerHUD[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid,tPlayerHUD[playerid][5], 255);
	PlayerTextDrawTextSize(playerid,tPlayerHUD[playerid][5], 35.000000, 40.000000);
	PlayerTextDrawSetPreviewModel(playerid, tPlayerHUD[playerid][5], 18970);
	PlayerTextDrawSetPreviewRot(playerid, tPlayerHUD[playerid][5], 0.000000, 0.000000, 90.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid,tPlayerHUD[playerid][5], true);
	//---
	tPlayerHUD[playerid][6] = CreatePlayerTextDraw(playerid,85.000000, 154.000000, "Lunettes");
	PlayerTextDrawBackgroundColor(playerid,tPlayerHUD[playerid][6], 51);
	PlayerTextDrawFont(playerid,tPlayerHUD[playerid][6], 5);
	PlayerTextDrawLetterSize(playerid,tPlayerHUD[playerid][6], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,tPlayerHUD[playerid][6], -1);
	PlayerTextDrawSetOutline(playerid,tPlayerHUD[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid,tPlayerHUD[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid,tPlayerHUD[playerid][6], 1);
	PlayerTextDrawUseBox(playerid,tPlayerHUD[playerid][6], 1);
	PlayerTextDrawBoxColor(playerid,tPlayerHUD[playerid][6], 255);
	PlayerTextDrawTextSize(playerid,tPlayerHUD[playerid][6], 35.000000, 40.000000);
	PlayerTextDrawSetPreviewModel(playerid, tPlayerHUD[playerid][6], 19033);
	PlayerTextDrawSetPreviewRot(playerid, tPlayerHUD[playerid][6], 0.000000, 0.000000, 90.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, tPlayerHUD[playerid][6], true);
	//---
	tPlayerHUD[playerid][7] = CreatePlayerTextDraw(playerid,155.000000, 154.000000, "Masque");
	PlayerTextDrawBackgroundColor(playerid,tPlayerHUD[playerid][7], 51);
	PlayerTextDrawFont(playerid,tPlayerHUD[playerid][7], 5);
	PlayerTextDrawLetterSize(playerid,tPlayerHUD[playerid][7], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,tPlayerHUD[playerid][7], -1);
	PlayerTextDrawSetOutline(playerid,tPlayerHUD[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid,tPlayerHUD[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid,tPlayerHUD[playerid][7], 1);
	PlayerTextDrawUseBox(playerid,tPlayerHUD[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid,tPlayerHUD[playerid][7], 255);
	PlayerTextDrawTextSize(playerid,tPlayerHUD[playerid][7], 35.000000, 40.000000);
	PlayerTextDrawSetPreviewModel(playerid, tPlayerHUD[playerid][7], 18913);
	PlayerTextDrawSetPreviewRot(playerid, tPlayerHUD[playerid][7], 90.000000, 180.000000, 0.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, tPlayerHUD[playerid][7], true);
	//---
	tPlayerHUD[playerid][8] = CreatePlayerTextDraw(playerid,120.000000, 182.000000, "Torse");
	PlayerTextDrawBackgroundColor(playerid,tPlayerHUD[playerid][8], 51);
	PlayerTextDrawFont(playerid,tPlayerHUD[playerid][8], 5);
	PlayerTextDrawLetterSize(playerid,tPlayerHUD[playerid][8], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,tPlayerHUD[playerid][8], -1);
	PlayerTextDrawSetOutline(playerid,tPlayerHUD[playerid][8], 0);
	PlayerTextDrawSetProportional(playerid,tPlayerHUD[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid,tPlayerHUD[playerid][8], 1);
	PlayerTextDrawUseBox(playerid,tPlayerHUD[playerid][8], 1);
	PlayerTextDrawBoxColor(playerid,tPlayerHUD[playerid][8], 255);
	PlayerTextDrawTextSize(playerid,tPlayerHUD[playerid][8], 35.000000, 40.000000);
	PlayerTextDrawSetPreviewModel(playerid, tPlayerHUD[playerid][8], 19142);
	PlayerTextDrawSetPreviewRot(playerid, tPlayerHUD[playerid][8], 0.000000, 270.000000, 0.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, tPlayerHUD[playerid][8], true);
}

CreatePlayerInventory(playerid)
{
	new Float:xPosText[6] = {197.0, 238.0, 279.0, 320.0, 361.0, 402.0};
	new Float:yPosText[6] = {140.0, 191.0, 242.0, 293.0, 344.0, 395.0};
	for(new i = 0; i < 36; i ++)
	{
		tInventory[playerid][i][0] = CreatePlayerTextDraw(playerid, xPosText[i % 6], yPosText[floatround(floatdiv(i, 6), floatround_floor)], " ");
		PlayerTextDrawBackgroundColor(playerid,tInventory[playerid][i][0], 136);
		PlayerTextDrawFont(playerid,tInventory[playerid][i][0], 5);
		PlayerTextDrawLetterSize(playerid,tInventory[playerid][i][0], 0.500000, 1.000000);
		PlayerTextDrawColor(playerid,tInventory[playerid][i][0], -1);
		PlayerTextDrawSetOutline(playerid,tInventory[playerid][i][0], 0);
		PlayerTextDrawSetProportional(playerid,tInventory[playerid][i][0], 1);
		PlayerTextDrawSetShadow(playerid,tInventory[playerid][i][0], 1);
		PlayerTextDrawUseBox(playerid,tInventory[playerid][i][0], 1);
		PlayerTextDrawBoxColor(playerid,tInventory[playerid][i][0], 255);
		PlayerTextDrawTextSize(playerid,tInventory[playerid][i][0], 40.000000, 50.000000);
		PlayerTextDrawSetPreviewModel(playerid, tInventory[playerid][i][0], 19300);
		PlayerTextDrawSetPreviewRot(playerid, tInventory[playerid][i][0], 0.000000, 0.000000, 0.000000, 1.000000);
		PlayerTextDrawSetSelectable(playerid,tInventory[playerid][i][0], true);
		//---
		tInventory[playerid][i][1] = CreatePlayerTextDraw(playerid, xPosText[i % 6], yPosText[floatround(floatdiv(i, 6), floatround_floor)] + 38.0, " ");
		PlayerTextDrawBackgroundColor(playerid,tInventory[playerid][i][1], 136);
		PlayerTextDrawFont(playerid,tInventory[playerid][i][1], 2);
		PlayerTextDrawLetterSize(playerid,tInventory[playerid][i][1], 0.110000, 0.599999);
		PlayerTextDrawColor(playerid,tInventory[playerid][i][1], -1);
		PlayerTextDrawSetOutline(playerid,tInventory[playerid][i][1], 1);
		PlayerTextDrawSetProportional(playerid,tInventory[playerid][i][1], 1);
		PlayerTextDrawSetSelectable(playerid,tInventory[playerid][i][1], false);
	}
	tSlots[playerid] = CreatePlayerTextDraw(playerid,196.000000, 130.000000, "Slots: 36/36");
	PlayerTextDrawBackgroundColor(playerid,tSlots[playerid], 255);
	PlayerTextDrawFont(playerid,tSlots[playerid], 1);
	PlayerTextDrawLetterSize(playerid,tSlots[playerid], 0.300000, 1.000000);
	PlayerTextDrawColor(playerid,tSlots[playerid], -1);
	PlayerTextDrawSetOutline(playerid,tSlots[playerid], 1);
	PlayerTextDrawSetProportional(playerid,tSlots[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,tSlots[playerid], 0);
}

CreatePlayerSafe(playerid)
{
	new Float:xPosText[6] = {197.0, 238.0, 279.0, 320.0, 361.0, 402.0};
	new Float:yPosText[2] = {28.0, 79.0};
	for(new i = 0; i < 12; i ++)
	{
		tSafe[playerid][i][0] = CreatePlayerTextDraw(playerid, xPosText[i % 6], yPosText[floatround(floatdiv(i, 6), floatround_floor)], " ");
		PlayerTextDrawBackgroundColor(playerid,tSafe[playerid][i][0], 136);
		PlayerTextDrawFont(playerid,tSafe[playerid][i][0], 5);
		PlayerTextDrawLetterSize(playerid,tSafe[playerid][i][0], 0.500000, 1.000000);
		PlayerTextDrawColor(playerid,tSafe[playerid][i][0], -1);
		PlayerTextDrawSetOutline(playerid,tSafe[playerid][i][0], 0);
		PlayerTextDrawSetProportional(playerid,tSafe[playerid][i][0], 1);
		PlayerTextDrawSetShadow(playerid,tSafe[playerid][i][0], 1);
		PlayerTextDrawUseBox(playerid,tSafe[playerid][i][0], 1);
		PlayerTextDrawBoxColor(playerid,tSafe[playerid][i][0], 255);
		PlayerTextDrawTextSize(playerid,tSafe[playerid][i][0], 40.000000, 50.000000);
		PlayerTextDrawSetPreviewModel(playerid, tSafe[playerid][i][0], 19300);
		PlayerTextDrawSetPreviewRot(playerid, tSafe[playerid][i][0], 0.000000, 0.000000, 0.000000, 1.000000);
		PlayerTextDrawSetSelectable(playerid,tSafe[playerid][i][0], true);
		//---
		tSafe[playerid][i][1] = CreatePlayerTextDraw(playerid, xPosText[i % 6], yPosText[floatround(floatdiv(i, 6), floatround_floor)] + 38.0, " ");
		PlayerTextDrawBackgroundColor(playerid,tSafe[playerid][i][1], 136);
		PlayerTextDrawFont(playerid,tSafe[playerid][i][1], 2);
		PlayerTextDrawLetterSize(playerid,tSafe[playerid][i][1], 0.110000, 0.599999);
		PlayerTextDrawColor(playerid,tSafe[playerid][i][1], -1);
		PlayerTextDrawSetOutline(playerid,tSafe[playerid][i][1], 1);
		PlayerTextDrawSetProportional(playerid,tSafe[playerid][i][1], 1);
		PlayerTextDrawSetSelectable(playerid,tSafe[playerid][i][1], false);
	}
}

UpdatePlayerWeaponTexts(playerid, slotid)
{
	if(slotid > GetPlayerBagSize(playerid, false))
	{
	    PlayerTextDrawSetPreviewModel(playerid, tPlayerHUD[playerid][slotid], 19300);
		PlayerTextDrawSetPreviewRot(playerid, tPlayerHUD[playerid][slotid], 0.0, 0.0, 0.0, 1.0);
		PlayerTextDrawSetSelectable(playerid, tPlayerHUD[playerid][slotid], false);
		PlayerTextDrawHide(playerid, tPlayerHUD[playerid][slotid]);
	}
	else
	{
		new dWeapon;
		switch(slotid)
		{
			case 1: dWeapon = pPlayerInfos[playerid][pArme1][0];
			case 2: dWeapon = pPlayerInfos[playerid][pArme2][0];
			case 3: dWeapon = pPlayerInfos[playerid][pArme3][0];
			case 4: dWeapon = pPlayerInfos[playerid][pArme4][0];
		}
		switch(dWeapon)
		{
		    case 0: PlayerTextDrawSetPreviewModel(playerid, tPlayerHUD[playerid][slotid], 19300), PlayerTextDrawSetPreviewRot(playerid, tPlayerHUD[playerid][slotid], 0.0, 0.0, 0.0, 1.0);
		    case 3: PlayerTextDrawSetPreviewModel(playerid, tPlayerHUD[playerid][slotid], 334), PlayerTextDrawSetPreviewRot(playerid, tPlayerHUD[playerid][slotid], 0.0, 315.0, 0.0, 1.5);
		    case 4: PlayerTextDrawSetPreviewModel(playerid, tPlayerHUD[playerid][slotid], 335), PlayerTextDrawSetPreviewRot(playerid, tPlayerHUD[playerid][slotid], 0.0, 315.0, 0.0, 1.0);
		    case 5: PlayerTextDrawSetPreviewModel(playerid, tPlayerHUD[playerid][slotid], 336), PlayerTextDrawSetPreviewRot(playerid, tPlayerHUD[playerid][slotid], 0.0, 315.0, 0.0, 2.0);
		    case 8: PlayerTextDrawSetPreviewModel(playerid, tPlayerHUD[playerid][slotid], 339), PlayerTextDrawSetPreviewRot(playerid, tPlayerHUD[playerid][slotid], 0.0, 315.0, 0.0, 2.0);
		    case 9: PlayerTextDrawSetPreviewModel(playerid, tPlayerHUD[playerid][slotid], 341), PlayerTextDrawSetPreviewRot(playerid, tPlayerHUD[playerid][slotid], 0.0, 0.0, 60.0, 2.0);
		    case 22: PlayerTextDrawSetPreviewModel(playerid, tPlayerHUD[playerid][slotid], 346), PlayerTextDrawSetPreviewRot(playerid, tPlayerHUD[playerid][slotid], 0.0, 0.0, 0.0, 1.0);
		    case 23: PlayerTextDrawSetPreviewModel(playerid, tPlayerHUD[playerid][slotid], 347), PlayerTextDrawSetPreviewRot(playerid, tPlayerHUD[playerid][slotid], 0.0, 0.0, 0.0, 1.25);
		    case 24: PlayerTextDrawSetPreviewModel(playerid, tPlayerHUD[playerid][slotid], 348), PlayerTextDrawSetPreviewRot(playerid, tPlayerHUD[playerid][slotid], 0.0, 0.0, 0.0, 1.25);
		    case 25: PlayerTextDrawSetPreviewModel(playerid, tPlayerHUD[playerid][slotid], 349), PlayerTextDrawSetPreviewRot(playerid, tPlayerHUD[playerid][slotid], 0.0, 315.0, 0.0, 2.0);
		    case 26: PlayerTextDrawSetPreviewModel(playerid, tPlayerHUD[playerid][slotid], 350), PlayerTextDrawSetPreviewRot(playerid, tPlayerHUD[playerid][slotid], 0.0, 315.0, 0.0, 2.0);
		    case 27: PlayerTextDrawSetPreviewModel(playerid, tPlayerHUD[playerid][slotid], 351), PlayerTextDrawSetPreviewRot(playerid, tPlayerHUD[playerid][slotid], 0.0, 315.0, 0.0, 2.0);
		    case 28: PlayerTextDrawSetPreviewModel(playerid, tPlayerHUD[playerid][slotid], 352), PlayerTextDrawSetPreviewRot(playerid, tPlayerHUD[playerid][slotid], 0.0, 0.0, 0.0, 1.0);
		    case 29: PlayerTextDrawSetPreviewModel(playerid, tPlayerHUD[playerid][slotid], 353), PlayerTextDrawSetPreviewRot(playerid, tPlayerHUD[playerid][slotid], 0.0, 315.0, 0.0, 2.0);
		    case 30: PlayerTextDrawSetPreviewModel(playerid, tPlayerHUD[playerid][slotid], 355), PlayerTextDrawSetPreviewRot(playerid, tPlayerHUD[playerid][slotid], 0.0, 315.0, 0.0, 2.0);
		    case 31: PlayerTextDrawSetPreviewModel(playerid, tPlayerHUD[playerid][slotid], 356), PlayerTextDrawSetPreviewRot(playerid, tPlayerHUD[playerid][slotid], 0.0, 315.0, 0.0, 2.0);
		    case 32: PlayerTextDrawSetPreviewModel(playerid, tPlayerHUD[playerid][slotid], 372), PlayerTextDrawSetPreviewRot(playerid, tPlayerHUD[playerid][slotid], 0.0, 0.0, 0.0, 1.0);
		    case 33: PlayerTextDrawSetPreviewModel(playerid, tPlayerHUD[playerid][slotid], 357), PlayerTextDrawSetPreviewRot(playerid, tPlayerHUD[playerid][slotid], 0.0, 315.0, 0.0, 2.0);
		    case 34: PlayerTextDrawSetPreviewModel(playerid, tPlayerHUD[playerid][slotid], 358), PlayerTextDrawSetPreviewRot(playerid, tPlayerHUD[playerid][slotid], 0.0, 315.0, 0.0, 2.0);
		    case 38: PlayerTextDrawSetPreviewModel(playerid, tPlayerHUD[playerid][slotid], 362), PlayerTextDrawSetPreviewRot(playerid, tPlayerHUD[playerid][slotid], 0.0, 315.0, 0.0, 2.0);
		}
		if(dWeapon != 0) PlayerTextDrawSetSelectable(playerid, tPlayerHUD[playerid][slotid], true);
		else PlayerTextDrawSetSelectable(playerid, tPlayerHUD[playerid][slotid], false);
		PlayerTextDrawShow(playerid, tPlayerHUD[playerid][slotid]);
	}
}

public ClosePlayerHUD(playerid)
{
	if(pUseInventory[playerid] != -1)
	{
	    #if defined KEEP_PLAYERTEXT

		for(new i = 0; i < 9; i ++) PlayerTextDrawHide(playerid, tPlayerHUD[playerid][i]);
		for(new i = 0; i < 36; i ++) PlayerTextDrawHide(playerid, tInventory[playerid][i][0]), PlayerTextDrawHide(playerid, tInventory[playerid][i][1]);
		PlayerTextDrawHide(playerid, tSlots[playerid]);
		TextDrawHideForPlayer(playerid, tFondHUD[0]);
		TextDrawHideForPlayer(playerid, tFondHUD[1]);
		TextDrawHideForPlayer(playerid, tFondHUD[2]);
		TextDrawHideForPlayer(playerid, tFondHUD[4]);
		TextDrawHideForPlayer(playerid, tHelp);
		TextDrawHideForPlayer(playerid, tCompetence);
		TextDrawHideForPlayer(playerid, tGroup);
		TextDrawHideForPlayer(playerid, tOptions);
		for(new i = 0; i < 12; i ++) PlayerTextDrawHide(playerid, tSafe[playerid][i][0]), PlayerTextDrawHide(playerid, tSafe[playerid][i][1]);
		if(pVehicleInventory[playerid] != -1)
		{
			SetVehicleTrunkState(dVehicleInfos[pVehicleInventory[playerid]][dVehicleID], false);
			pVehicleInventory[playerid] = -1;
			TextDrawHideForPlayer(playerid, tFondHUD[3]);
			for(new i = 0; i < 5; i ++) PlayerTextDrawHide(playerid, tPlayerVehHUD[playerid][i]);
			for(new i = 0; i < 6; i ++) PlayerTextDrawHide(playerid, tVehicleTrunk[playerid][i][0]), PlayerTextDrawHide(playerid, tVehicleTrunk[playerid][i][1]);
		}
	    #else

		for(new i = 0; i < 9; i ++) PlayerTextDrawHide(playerid, tPlayerHUD[playerid][i]), PlayerTextDrawDestroy(playerid, tPlayerHUD[playerid][i]), tPlayerHUD[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
		for(new i = 0; i < 36; i ++) PlayerTextDrawHide(playerid, tInventory[playerid][i][0]), PlayerTextDrawHide(playerid, tInventory[playerid][i][1]), PlayerTextDrawDestroy(playerid, tInventory[playerid][i][0]), PlayerTextDrawDestroy(playerid, tInventory[playerid][i][1]), tInventory[playerid][i][0] = PlayerText:INVALID_TEXT_DRAW, tInventory[playerid][i][1] = PlayerText:INVALID_TEXT_DRAW;
		PlayerTextDrawHide(playerid, tSlots[playerid]), PlayerTextDrawDestroy(playerid, tSlots[playerid]), tSlots[playerid] = PlayerText:INVALID_TEXT_DRAW;
		TextDrawHideForPlayer(playerid, tFondHUD[0]);
		TextDrawHideForPlayer(playerid, tFondHUD[1]);
		TextDrawHideForPlayer(playerid, tFondHUD[2]);
		TextDrawHideForPlayer(playerid, tFondHUD[4]);
		TextDrawHideForPlayer(playerid, tHelp);
		TextDrawHideForPlayer(playerid, tCompetence);
		TextDrawHideForPlayer(playerid, tGroup);
		TextDrawHideForPlayer(playerid, tOptions);
		if(pPlayerSafe[playerid] != -1)
		{
			for(new i = 0; i < 12; i ++) for(new j = 0; j < 2; j ++) PlayerTextDrawHide(playerid, tSafe[playerid][i][j]), PlayerTextDrawDestroy(playerid, tSafe[playerid][i][j]), tSafe[playerid][i][j] = PlayerText:INVALID_TEXT_DRAW;
		    pPlayerSafe[playerid] = -1;
		}
		if(pVehicleInventory[playerid] != -1)
		{
			SetVehicleTrunkState(dVehicleInfos[pVehicleInventory[playerid]][dVehicleID], false);
			pVehicleInventory[playerid] = -1;
			TextDrawHideForPlayer(playerid, tFondHUD[3]);
			for(new i = 0; i < 5; i ++) PlayerTextDrawHide(playerid, tPlayerVehHUD[playerid][i]), PlayerTextDrawDestroy(playerid, tPlayerVehHUD[playerid][i]), tPlayerVehHUD[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
			for(new i = 0; i < 6; i ++) PlayerTextDrawHide(playerid, tVehicleTrunk[playerid][i][0]), PlayerTextDrawHide(playerid, tVehicleTrunk[playerid][i][1]), PlayerTextDrawDestroy(playerid, tVehicleTrunk[playerid][i][0]), PlayerTextDrawDestroy(playerid, tVehicleTrunk[playerid][i][1]), tVehicleTrunk[playerid][i][0] = PlayerText:INVALID_TEXT_DRAW, tVehicleTrunk[playerid][i][1] = PlayerText:INVALID_TEXT_DRAW;
		}

	    #endif

		pUseInventory[playerid] = -1;
	}
}

CreatePlayerInventoryText(playerid)
{
	tInventObjet[playerid][0] = CreatePlayerTextDraw(playerid, 570.000000, 40.000000, "Object");//Textdraw avec l'image de l'objet
	PlayerTextDrawBackgroundColor(playerid, tInventObjet[playerid][0], 255);
	PlayerTextDrawFont(playerid, tInventObjet[playerid][0], 5);
	PlayerTextDrawLetterSize(playerid, tInventObjet[playerid][0], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, tInventObjet[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, tInventObjet[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, tInventObjet[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, tInventObjet[playerid][0], 1);
	PlayerTextDrawUseBox(playerid, tInventObjet[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, tInventObjet[playerid][0], 255);
	PlayerTextDrawTextSize(playerid, tInventObjet[playerid][0], 60.000000, 70.000000);
	PlayerTextDrawSetPreviewModel(playerid, tInventObjet[playerid][0], 19300);
	PlayerTextDrawSetPreviewRot(playerid, tInventObjet[playerid][0], 0.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, tInventObjet[playerid][0], true);
	//---
	tInventObjet[playerid][1] = CreatePlayerTextDraw(playerid, 570.000000, 100.000000, "Nothing");//Textdraw avec le nom de l'objet
	PlayerTextDrawBackgroundColor(playerid, tInventObjet[playerid][1], 255);
	PlayerTextDrawFont(playerid, tInventObjet[playerid][1], 2);
	PlayerTextDrawLetterSize(playerid, tInventObjet[playerid][1], 0.190000, 1.000000);
	PlayerTextDrawColor(playerid, tInventObjet[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid, tInventObjet[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, tInventObjet[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, tInventObjet[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, tInventObjet[playerid][1], 0);
}

CreatePlayerInfoTexts(playerid)
{
	tPlayerInfos[playerid][0] = CreatePlayerTextDraw(playerid, 495.000000, 8.000000, "~n~");//Barre de faim
	PlayerTextDrawBackgroundColor(playerid, tPlayerInfos[playerid][0], 255);
	PlayerTextDrawFont(playerid, tPlayerInfos[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, tPlayerInfos[playerid][0], 0.500000, 0.499998);
	PlayerTextDrawColor(playerid, tPlayerInfos[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, tPlayerInfos[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, tPlayerInfos[playerid][0], 1);
	PlayerTextDrawUseBox(playerid, tPlayerInfos[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, tPlayerInfos[playerid][0], 8388863);
	PlayerTextDrawTextSize(playerid, tPlayerInfos[playerid][0], 550.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, tPlayerInfos[playerid][0], 0);
	//---
	tPlayerInfos[playerid][1] = CreatePlayerTextDraw(playerid, 495.000000, 26.000000, "~n~");//Barre de soif
	PlayerTextDrawBackgroundColor(playerid, tPlayerInfos[playerid][1], 255);
	PlayerTextDrawFont(playerid, tPlayerInfos[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, tPlayerInfos[playerid][1], 0.500000, 0.499998);
	PlayerTextDrawColor(playerid, tPlayerInfos[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid, tPlayerInfos[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, tPlayerInfos[playerid][1], 1);
	PlayerTextDrawUseBox(playerid, tPlayerInfos[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, tPlayerInfos[playerid][1], 8388863);
	PlayerTextDrawTextSize(playerid, tPlayerInfos[playerid][1], 550.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, tPlayerInfos[playerid][1], 0);
	//---
	tPlayerInfos[playerid][2] = CreatePlayerTextDraw(playerid, 495.000000, 45.000000, "~n~");//Barre de sommeil
	PlayerTextDrawBackgroundColor(playerid, tPlayerInfos[playerid][2], 255);
	PlayerTextDrawFont(playerid, tPlayerInfos[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid, tPlayerInfos[playerid][2], 0.500000, 0.499998);
	PlayerTextDrawColor(playerid, tPlayerInfos[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid, tPlayerInfos[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, tPlayerInfos[playerid][2], 1);
	PlayerTextDrawUseBox(playerid, tPlayerInfos[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, tPlayerInfos[playerid][2], 8388863);
	PlayerTextDrawTextSize(playerid, tPlayerInfos[playerid][2], 550.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, tPlayerInfos[playerid][2], 0);
	//---
	tPlayerInfos[playerid][3] = CreatePlayerTextDraw(playerid, 552.000000, 60.000000, "Ouro: 1000.00");//Le textdraw qui dit combien on a d'or
	PlayerTextDrawAlignment(playerid, tPlayerInfos[playerid][3], 3);
	PlayerTextDrawBackgroundColor(playerid, tPlayerInfos[playerid][3], 255);
	PlayerTextDrawFont(playerid, tPlayerInfos[playerid][3], 2);
	PlayerTextDrawLetterSize(playerid, tPlayerInfos[playerid][3], 0.180000, 1.000000);
	PlayerTextDrawColor(playerid, tPlayerInfos[playerid][3], -2686721);
	PlayerTextDrawSetOutline(playerid, tPlayerInfos[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, tPlayerInfos[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, tPlayerInfos[playerid][3], 0);
	//---
	tPlayerInfos[playerid][4] = CreatePlayerTextDraw(playerid, 495.000000, 80.000000, "~n~");//Barre de vie
	PlayerTextDrawBackgroundColor(playerid, tPlayerInfos[playerid][4], 255);
	PlayerTextDrawFont(playerid, tPlayerInfos[playerid][4], 1);
	PlayerTextDrawLetterSize(playerid, tPlayerInfos[playerid][4], 0.500000, 0.499998);
	PlayerTextDrawColor(playerid, tPlayerInfos[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid, tPlayerInfos[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, tPlayerInfos[playerid][4], 1);
	PlayerTextDrawUseBox(playerid, tPlayerInfos[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, tPlayerInfos[playerid][4], -872414977);
	PlayerTextDrawTextSize(playerid, tPlayerInfos[playerid][4], 550.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, tPlayerInfos[playerid][4], 0);
	//---
	tPlayerInfos[playerid][5] = CreatePlayerTextDraw(playerid, 495.000000, 98.000000, "~n~");//Barre d'armure
	PlayerTextDrawBackgroundColor(playerid, tPlayerInfos[playerid][5], 255);
	PlayerTextDrawFont(playerid, tPlayerInfos[playerid][5], 1);
	PlayerTextDrawLetterSize(playerid, tPlayerInfos[playerid][5], 0.500000, 0.499998);
	PlayerTextDrawColor(playerid, tPlayerInfos[playerid][5], -1);
	PlayerTextDrawSetOutline(playerid, tPlayerInfos[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, tPlayerInfos[playerid][5], 1);
	PlayerTextDrawUseBox(playerid, tPlayerInfos[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, tPlayerInfos[playerid][5], -1);
	PlayerTextDrawTextSize(playerid, tPlayerInfos[playerid][5], 550.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, tPlayerInfos[playerid][5], 0);
	//---
	tPlayerInfos[playerid][6] = CreatePlayerTextDraw(playerid, 595.000000, 17.000000, "Temperatura:~n~36.8");//Température
	PlayerTextDrawAlignment(playerid, tPlayerInfos[playerid][6], 2);
	PlayerTextDrawBackgroundColor(playerid, tPlayerInfos[playerid][6], 255);
	PlayerTextDrawFont(playerid, tPlayerInfos[playerid][6], 2);
	PlayerTextDrawLetterSize(playerid, tPlayerInfos[playerid][6], 0.200000, 1.000000);
	PlayerTextDrawColor(playerid, tPlayerInfos[playerid][6], 65535);
	PlayerTextDrawSetOutline(playerid, tPlayerInfos[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, tPlayerInfos[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, tPlayerInfos[playerid][6], 0);
	//---
	tPlayerInfos[playerid][7] = CreatePlayerTextDraw(playerid,620.000000, 420.000000, "Fuel:~n~100 l");
	PlayerTextDrawAlignment(playerid,tPlayerInfos[playerid][7], 3);
	PlayerTextDrawBackgroundColor(playerid,tPlayerInfos[playerid][7], 255);
	PlayerTextDrawFont(playerid,tPlayerInfos[playerid][7], 3);
	PlayerTextDrawLetterSize(playerid,tPlayerInfos[playerid][7], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,tPlayerInfos[playerid][7], -1);
	PlayerTextDrawSetOutline(playerid,tPlayerInfos[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid,tPlayerInfos[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid,tPlayerInfos[playerid][7], 0);
	//---
	//------
	//---
	tLevel[playerid][0] = CreatePlayerTextDraw(playerid, 2.000000, 423.000000, "Level 0");
	PlayerTextDrawBackgroundColor(playerid, tLevel[playerid][0], 255);
	PlayerTextDrawFont(playerid, tLevel[playerid][0], 2);
	PlayerTextDrawLetterSize(playerid, tLevel[playerid][0], 0.200000, 1.000000);
	PlayerTextDrawColor(playerid, tLevel[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, tLevel[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, tLevel[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, tLevel[playerid][0], 0);
	//---
	tLevel[playerid][1] = CreatePlayerTextDraw(playerid, 3.000000, 434.000000, "~n~");
	PlayerTextDrawBackgroundColor(playerid, tLevel[playerid][1], 16777215);
	PlayerTextDrawFont(playerid, tLevel[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, tLevel[playerid][1], 0.500000, 0.599999);
	PlayerTextDrawColor(playerid, tLevel[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid, tLevel[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, tLevel[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, tLevel[playerid][1], 1);
	PlayerTextDrawUseBox(playerid, tLevel[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, tLevel[playerid][1], -2147483393);
	PlayerTextDrawTextSize(playerid, tLevel[playerid][1], 138.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, tLevel[playerid][1], 0);
	//---
	tLevel[playerid][2] = CreatePlayerTextDraw(playerid, 3.000000, 445.000000, "~n~");
	PlayerTextDrawBackgroundColor(playerid, tLevel[playerid][2], 16777215);
	PlayerTextDrawFont(playerid, tLevel[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid, tLevel[playerid][2], 0.500000, 0.000000);
	PlayerTextDrawColor(playerid, tLevel[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid, tLevel[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, tLevel[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, tLevel[playerid][2], 1);
	PlayerTextDrawUseBox(playerid, tLevel[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, tLevel[playerid][2], -872414977);
	PlayerTextDrawTextSize(playerid, tLevel[playerid][2], 138.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, tLevel[playerid][2], 0);
}

//---FONCTIONS
GivePlayerHunger(playerid, amount)//Pour donner de la faim ou en enlever, dépend du signe de amount
{
	if(pPlayerInfos[playerid][pHunger] + amount > 100) pPlayerInfos[playerid][pHunger] = 100;//Si ça devient supérieur à 100, on lui met à 100
	else if(pPlayerInfos[playerid][pHunger] + amount < 0) pPlayerInfos[playerid][pHunger] = 0;//Si ça devient inférieur à 0, on lui met à 0
    else pPlayerInfos[playerid][pHunger] += amount;//Sinon, on respecte la consigne originale
    if(pPlayerInfos[playerid][pHunger] == 0)//Si le joueur a 0 points de bouffe, il meurt
 	{
	 	if(!IsPlayerInvincible(playerid)) GivePlayerHealth(playerid, -50, REASON_HUNGER);//On le fait donc mourir
	}
    UpdateInfo(playerid, 1);
    //---AIDE
    if(!pPlayerInfos[playerid][bAide][3] && pPlayerInfos[playerid][pHunger] < 50) ShowPlayerHelp(playerid, 4, 10000);
    //-------
	return pPlayerInfos[playerid][pHunger];
}

GivePlayerThirst(playerid, amount)
{
	if(pPlayerInfos[playerid][pThirst] + amount > 100) pPlayerInfos[playerid][pThirst] = 100;
	else if(pPlayerInfos[playerid][pThirst] + amount < 0) pPlayerInfos[playerid][pThirst] = 0;
    else pPlayerInfos[playerid][pThirst] += amount;
    if(pPlayerInfos[playerid][pThirst] == 0)
	{
		if(!IsPlayerInvincible(playerid)) GivePlayerHealth(playerid, -200, REASON_THIRST);
	}
    UpdateInfo(playerid, 2);
    //---AIDE
    if(!pPlayerInfos[playerid][bAide][4] && pPlayerInfos[playerid][pThirst] < 50) ShowPlayerHelp(playerid, 5, 10000);
    //-------
	return pPlayerInfos[playerid][pThirst];
}

GivePlayerSleep(playerid, amount)//Pour donner ou pas des points de dodo à un joueur
{
	if(pPlayerInfos[playerid][pSleep] + amount > 100) pPlayerInfos[playerid][pSleep] = 100;//S'il a plus de 100, on lui met à 100
	else if(pPlayerInfos[playerid][pSleep] + amount < 0) pPlayerInfos[playerid][pSleep] = 0;//S'il a en dessous de 0, on lui met à 0
    else pPlayerInfos[playerid][pSleep] += amount;//Sinon c'bon, on respecte la consigne
    UpdateInfo(playerid, 3);//On augmente sa barre de dodo
    //---AIDE
    if(!pPlayerInfos[playerid][bAide][5] && pPlayerInfos[playerid][pSleep] < 50) ShowPlayerHelp(playerid, 6, 10000);
    //-------
	return pPlayerInfos[playerid][pSleep];
	/*----------------------------------------------------------------------------¦
	¦Pour le sommeil, on tue pas le mec s'il arrive à 0,                          ¦
	¦par contre on lui fout un blackscreen pour montrer que le perso est fatigué, ¦
	¦et s'il essaie de courir ou de sauter, le mec tombe tellement il est fatigué ¦
	¦-----------------------------------------------------------------------------¦*/
}

public GivePlayerGold(playerid, amount)//Pour donner de l'or
{
	if(amount > 50) PlayerPlaySound(playerid, 4201, 0.0, 0.0, 0.0);
	else if(amount > 0) PlayerPlaySound(playerid, 1100, 0.0, 0.0, 0.0);
    pPlayerInfos[playerid][pGold] += amount;//On additionne l'or présent du joueur avec le nouveau
    UpdateInfo(playerid, 4);//On actualise le textdraw
	LogInfo(true, "[JOUEUR]%s a gagne %.1fg d'or: %.1fg.", GetName(playerid), floatdiv(amount, 10), floatdiv(pPlayerInfos[playerid][pGold], 10));
	return pPlayerInfos[playerid][pGold];
}

GiveOfflinePlayerGold(const playername[], amount)
{
    new string[50];
    format(string,sizeof(string), OFFPATH, playername);
    if(!fexist(string)) return 0;
	INI_ParseFile(string, "LoadUserGold_%s");
    new INI:File = INI_Open(string);
	INI_SetTag(File,"auctions");
	INI_WriteInt(File,"Or", dGoldDumpVar + amount);
	INI_Close(File);
	return dGoldDumpVar + amount;
}

public LoadUserGold_auctions(name[],value[])
{
    INI_Int("Or", dGoldDumpVar);
    return 1;
}

IsThereUnsoldItem(playerid)
{
	for(new i = 0; i < 50; i ++) if(pPlayerOfflineInfos[playerid][dReturnedItem][i] != 0) return true;
	return false;
}

//---

GetPlayerMaxHealth(playerid)
{
	new dMaxHealth;
	switch(pPlayerInfos[playerid][dSante])
	{
		case 1: dMaxHealth = 1150;
		case 2: dMaxHealth = 1250;
		default: dMaxHealth = 1000;
	}
	return dMaxHealth;
}

GetPlayerMaxArmour(playerid)
{
	new dMaxArmour;
	switch(pPlayerInfos[playerid][dTank])
	{
		case 1: dMaxArmour = 1250;
		default: dMaxArmour = 1000;
	}
	return dMaxArmour;
}

GivePlayerTemperature(playerid, amount)//Donner ou enlever de la chaleur (Dépend du signe de amount)
{
    if(420 > pPlayerInfos[playerid][pTemperature] + amount) pPlayerInfos[playerid][pTemperature] += amount;//Pour que la température bouge encore faut qu'elle soit entre 20 et 42
    UpdateInfo(playerid, 7);//On actualise la température
    if(200 >= pPlayerInfos[playerid][pTemperature] && !IsPlayerInvincible(playerid)) GivePlayerHealth(playerid, -100, WEAPON_DROWN);//Si la température est inférieure à 20°, on zigouille le mec
    //---AIDE
    if(!pPlayerInfos[playerid][bAide][6] && pPlayerInfos[playerid][pTemperature] < 350) ShowPlayerHelp(playerid, 7, 10000);
    //-------
	return pPlayerInfos[playerid][pTemperature];
}

SetHealthForPlayer(playerid, amount, reason, issuerid = INVALID_PLAYER_ID)//Changer la vie sans prendre en considération ce qu'elle était avant
{
	new dMaxHealth = GetPlayerMaxHealth(playerid);
    if(amount > dMaxHealth) pPlayerInfos[playerid][pHealth] = dMaxHealth;//Si on tente de mettre la vie supérieure à 1000, on la met à 1000
    else if(amount < 0) pPlayerInfos[playerid][pHealth] = 0;//Pareil si on tente de la mettre à moins de 0, on la met à 0
    else pPlayerInfos[playerid][pHealth] = amount;//Sinon, c'est bon, on respecte
    UpdateInfo(playerid, 5);//On actualise la barre de vie
    if(pPlayerInfos[playerid][pHealth] == 0) OnPlayerDies(playerid, issuerid, reason), SetPlayerHealth(playerid, 0.0);//Si la vie est à 0, le joueur meurt
    else SetPlayerHealth(playerid, 999999999.9);//Sinon, on le garde avec la vie à l'infini, pour pas qu'il meurt autrement que si on le décide
	return pPlayerInfos[playerid][pHealth];
}

SetArmourForPlayer(playerid, amount)//Pour changer l'armure sans prendre en considération ce qu'elle était avant
{
	new dMaxHealth = GetPlayerMaxArmour(playerid);
	//---
    if(amount > dMaxHealth) pPlayerInfos[playerid][pArmour] = dMaxHealth;//Si on tente de la mettre à plus que 1000, on la met à 1000
    else if(amount < 0) pPlayerInfos[playerid][pArmour] = 0;//Si on tente de la mettre à moins que 0, on la met à 0
    else pPlayerInfos[playerid][pArmour] = amount;//Sinon, on respecte la consigne originale
    //---GILETS
    if(pPlayerInfos[playerid][pArmour] < dMaxHealth && pPlayerInfos[playerid][pTorse] == 83)
    {
        pPlayerInfos[playerid][pTorse] = 84;
        DressPlayer(playerid, 4);
    }
    //---
    UpdateInfo(playerid, 6);//On change la barre
	return pPlayerInfos[playerid][pArmour];
}

GivePlayerHealth(playerid, amount, reason, issuerid = INVALID_PLAYER_ID)//Donner ou enlever de la vie (Dépend du signe de amount)
{
	if(IsPlayerInvincible(playerid)) return -1;
	if(pPlayerInfos[playerid][dLogState] == SPAWNED)
	{
		if(amount < 0)
		{
		    #if defined SHOW_DAMAGE_SCREEN
			ShowRedScreen(playerid);
			#endif
			new Float:x, Float:y, Float:z, dBlood = AbsoluteValue(floatround(floatdiv(amount, 10), floatround_ceil));
			GetPlayerPos(playerid, x, y, z);
			CreateBloodSplat(x, y, z);
			for(new i = 0; i < dBlood + 1; i ++) CreateBlood(x + floatdiv(RandomEx(0, 15), 10), y + floatdiv(RandomEx(0, 15), 10), z);
		}
		//---VIE MAXI
		new dMaxHealth = GetPlayerMaxHealth(playerid);
	    if(pPlayerInfos[playerid][pHealth] + amount < 0) pPlayerInfos[playerid][pHealth] = 0;//Si la vie est inférieure à 0, on la met à 0
		else if(pPlayerInfos[playerid][pHealth] + amount > dMaxHealth) pPlayerInfos[playerid][pHealth] = dMaxHealth;//Si la vie devient supérieure à 1000, on la met à 1000
	    else pPlayerInfos[playerid][pHealth] += amount;//Sinon, c'est bon
	    UpdateInfo(playerid, 5);//On actualise la barre de vie
	    if(pPlayerInfos[playerid][pHealth] == 0) OnPlayerDies(playerid, issuerid, reason), SetPlayerHealth(playerid, 0.0);//Si la vie est égale à 0, on zigouille le mec
	    else SetPlayerHealth(playerid, 999999999.9);//Sinon, on lui met la vie à l'infini, comme ça, il meurt que si on le décide
    }
	return pPlayerInfos[playerid][pHealth];
}

GivePlayerArmour(playerid, amount, reason, issuerid = INVALID_PLAYER_ID)//Pour ajouter ou enlever de la vie (Dépend du signe de amount)
{
	if(IsPlayerInvincible(playerid)) return -1;
	if(pPlayerInfos[playerid][dLogState] == SPAWNED)
	{
		new dMaxArmour = GetPlayerMaxArmour(playerid);
		//---
	    if(pPlayerInfos[playerid][pArmour] + amount < 0)//Si on enlève plus que l'armure disponnible, on reporte le reste sur la vie
		{
		    new dHealth = pPlayerInfos[playerid][pArmour] + amount;
			GivePlayerHealth(playerid, dHealth, reason, issuerid);
			pPlayerInfos[playerid][pArmour] = 0;//...et on met l'armure à 0
		}
		else if(pPlayerInfos[playerid][pArmour] + amount > dMaxArmour)//Si ça devient supérieur à 1000, on lui remet à 1000
		{
			pPlayerInfos[playerid][pArmour] = dMaxArmour;
		}
	    else pPlayerInfos[playerid][pArmour] += amount;//Sinon, on respecte la consigne originale
	    //---GILETS
	    if(pPlayerInfos[playerid][pArmour] < dMaxArmour && pPlayerInfos[playerid][pTorse] == 83)
	    {
	        pPlayerInfos[playerid][pTorse] = 84;
	        DressPlayer(playerid, 4);
	    }
	    //---
	    UpdateInfo(playerid, 6);//On actualise la barre
    }
	return pPlayerInfos[playerid][pArmour];
}

//---DÉTECTEUR DE SON---//
DrawPlayerMarker(playerid, playerid2)
{
	static dPlayers[MAX_PLAYERS][15];
	static slot[MAX_PLAYERS] = {0, ...};
	static dLastBlip[MAX_PLAYERS];
	if(playerid == playerid2) return 0;
	//---
	if(pGroup[playerid] != -1 && pGroup[playerid] == pGroup[playerid2]) return 0;
	//---
	if(IsPlayerOnSpectate(playerid2)) return 0;
	//---
	if(TimePassedSince(dLastBlip[playerid]) < 6 && (dPlayers[playerid][(slot[playerid] == 0) ? 14 : slot[playerid] - 1] == playerid2 || dPlayers[playerid][(slot[playerid] == 0 || slot[playerid] == 1) ? 13 : slot[playerid] - 2] == playerid2)) return 0;
	//---
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid2, x, y, z);
	if(pPlayerBlip[playerid][slot[playerid]] != 0) KillTimer(pPlayerBlip[playerid][slot[playerid]]);
	SetPlayerMapIcon(playerid, slot[playerid], x, y, z, 0, 0xCC0000FF, MAPICON_LOCAL);
	pPlayerBlip[playerid][slot[playerid]] = SetTimerEx("FadeBlip", 600, false, "iiifff", playerid, slot[playerid], 9, x, y, z);
    dLastBlip[playerid] = gettime();
    dPlayers[playerid][slot[playerid]] = playerid2;
	if(++ slot[playerid] == 15) slot[playerid] = 0;
	return 1;
}

public FadeBlip(playerid, blipid, fade, Float:x, Float:y, Float:z)
{
	new hColors[9] =
	{
	    0xCC0000DE, 0xCC0000BC, 0xCC00009A, 0xCC000078, 0xCC000056,
	    0xCC000034, 0xCC000012, 0xCC00000F, 0xCC000000
	};
	RemovePlayerMapIcon(playerid, blipid);
	if(fade == 0)
	{
		pPlayerBlip[playerid][blipid] = 0;
 	}
	else
	{
	    SetPlayerMapIcon(playerid, blipid, x, y, z, 0, hColors[9 - fade], MAPICON_LOCAL);
		pPlayerBlip[playerid][blipid] = SetTimerEx("FadeBlip", 600, false, "iiifff", playerid, blipid, fade -1, x, y, z);
 	}
}

CheckPlayersNoise()
{
	for(new playerid = 0, k = GetPlayerPoolSize(); playerid <= k; playerid ++)
	{
	    if(IsPlayerConnected(playerid) && !FCNPC_IsValid(playerid))
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i ++)
		{
		    if(IsPlayerConnected(i) && !FCNPC_IsValid(i) && !IsPlayerOnSpectate(i))
			{
			    if(GetDistanceBetweenPlayers(playerid, i) < fDetectRange[i][1] && GetPlayerSpecialAction(i) != SPECIAL_ACTION_DUCK) DrawPlayerMarker(playerid, i);
			}
		}
	}
}

//---SYSTÈME VÉHICULES
public LoadVehicles_data(name[],value[])
{
	new string[50];
	for(new i = 0; i < MAX_SPAWN_VEHICLES; i ++)
	{
	    format(string, sizeof(string), "VehicleID%d", i);
		INI_Int(string, dVehicleInfos[i][dVehicleModel]);
	    format(string, sizeof(string), "Wheels%d", i);
		INI_Int(string, dVehicleInfos[i][dWheels]);
	    format(string, sizeof(string), "Items%d", i);
		INI_Int(string, dVehicleInfos[i][dItem]);
	    format(string, sizeof(string), "Fuel%d", i);
		INI_Int(string, dVehicleInfos[i][dFuel]);
	    format(string, sizeof(string), "Health%d", i);
		INI_Float(string, dVehicleInfos[i][fHealth]);
		//---
	    format(string, sizeof(string), "Engine%d", i);
		INI_Bool(string, dVehicleInfos[i][bEngine]);
	    format(string, sizeof(string), "WheelOne%d", i);
		INI_Bool(string, dVehicleInfos[i][bWheel][0]);
	    format(string, sizeof(string), "WheelTwo%d", i);
		INI_Bool(string, dVehicleInfos[i][bWheel][1]);
	    format(string, sizeof(string), "WheelThree%d", i);
		INI_Bool(string, dVehicleInfos[i][bWheel][2]);
	    format(string, sizeof(string), "WheelFour%d", i);
		INI_Bool(string, dVehicleInfos[i][bWheel][3]);
		//---
	    format(string, sizeof(string), "xVeh%d", i);
		INI_Float(string, dVehicleInfos[i][xVeh]);
	    format(string, sizeof(string), "yVeh%d", i);
		INI_Float(string, dVehicleInfos[i][yVeh]);
	    format(string, sizeof(string), "zVeh%d", i);
		INI_Float(string, dVehicleInfos[i][zVeh]);
	    format(string, sizeof(string), "aVeh%d", i);
		INI_Float(string, dVehicleInfos[i][aVeh]);
		//---
	    format(string, sizeof(string), "ObjectOne%d", i);
		INI_Int(string, dVehicleInfos[i][TrunkObject][0]);
	    format(string, sizeof(string), "ObjectTwo%d", i);
		INI_Int(string, dVehicleInfos[i][TrunkObject][1]);
	    format(string, sizeof(string), "ObjectThree%d", i);
		INI_Int(string, dVehicleInfos[i][TrunkObject][2]);
	    format(string, sizeof(string), "ObjectFour%d", i);
		INI_Int(string, dVehicleInfos[i][TrunkObject][3]);
	    format(string, sizeof(string), "ObjectFive%d", i);
		INI_Int(string, dVehicleInfos[i][TrunkObject][4]);
	    format(string, sizeof(string), "ObjectSix%d", i);
		INI_Int(string, dVehicleInfos[i][TrunkObject][5]);
		//---
	    format(string, sizeof(string), "ColorOne%d", i);
		INI_Int(string, dVehicleInfos[i][dColor][0]);
	    format(string, sizeof(string), "ColorTwo%d", i);
		INI_Int(string, dVehicleInfos[i][dColor][1]);
	}
	return 1;
}

SaveVehicles()
{
	new string[50];
	new INI:File = INI_Open(VPATH);
	INI_SetTag(File, "data");
	for(new i = 0; i < MAX_SPAWN_VEHICLES; i ++)
	{
	    format(string, sizeof(string), "VehicleID%d", i);
		INI_WriteInt(File,string, dVehicleInfos[i][dVehicleModel]);
	    format(string, sizeof(string), "Wheels%d", i);
		INI_WriteInt(File,string, dVehicleInfos[i][dWheels]);
	    format(string, sizeof(string), "Items%d", i);
		INI_WriteInt(File,string, dVehicleInfos[i][dItem]);
	    format(string, sizeof(string), "Fuel%d", i);
		INI_WriteInt(File,string, dVehicleInfos[i][dFuel]);
	    format(string, sizeof(string), "Health%d", i);
		INI_WriteFloat(File,string, dVehicleInfos[i][fHealth]);
		//---
	    format(string, sizeof(string), "Engine%d", i);
		INI_WriteBool(File,string, dVehicleInfos[i][bEngine]);
	    format(string, sizeof(string), "WheelOne%d", i);
		INI_WriteBool(File,string, dVehicleInfos[i][bWheel][0]);
	    format(string, sizeof(string), "WheelTwo%d", i);
		INI_WriteBool(File,string, dVehicleInfos[i][bWheel][1]);
	    format(string, sizeof(string), "WheelThree%d", i);
		INI_WriteBool(File,string, dVehicleInfos[i][bWheel][2]);
	    format(string, sizeof(string), "WheelFour%d", i);
		INI_WriteBool(File,string, dVehicleInfos[i][bWheel][3]);
		//---
	    format(string, sizeof(string), "xVeh%d", i);
		INI_WriteFloat(File,string, dVehicleInfos[i][xVeh]);
	    format(string, sizeof(string), "yVeh%d", i);
		INI_WriteFloat(File,string, dVehicleInfos[i][yVeh]);
	    format(string, sizeof(string), "zVeh%d", i);
		INI_WriteFloat(File,string, dVehicleInfos[i][zVeh]);
	    format(string, sizeof(string), "aVeh%d", i);
		INI_WriteFloat(File,string, dVehicleInfos[i][aVeh]);
		//---
	    format(string, sizeof(string), "ObjectOne%d", i);
		INI_WriteInt(File,string, dVehicleInfos[i][TrunkObject][0]);
	    format(string, sizeof(string), "ObjectTwo%d", i);
		INI_WriteInt(File,string, dVehicleInfos[i][TrunkObject][1]);
	    format(string, sizeof(string), "ObjectThree%d", i);
		INI_WriteInt(File,string, dVehicleInfos[i][TrunkObject][2]);
	    format(string, sizeof(string), "ObjectFour%d", i);
		INI_WriteInt(File,string, dVehicleInfos[i][TrunkObject][3]);
	    format(string, sizeof(string), "ObjectFive%d", i);
		INI_WriteInt(File,string, dVehicleInfos[i][TrunkObject][4]);
	    format(string, sizeof(string), "ObjectSix%d", i);
		INI_WriteInt(File,string, dVehicleInfos[i][TrunkObject][5]);
		//---
	    format(string, sizeof(string), "ColorOne%d", i);
		INI_WriteInt(File,string, dVehicleInfos[i][dColor][0]);
	    format(string, sizeof(string), "ColorTwo%d", i);
		INI_WriteInt(File,string, dVehicleInfos[i][dColor][1]);
	}
	INI_Close(File);
}

GiveVehicleFuel(vehicleid, amount)//Pour donner de l'essence ou en enlever
{
	if(dVehicleInfos[vehicleid][dFuel] + amount > GetVehicleMaxFuel(vehicleid)) dVehicleInfos[vehicleid][dFuel] = GetVehicleMaxFuel(vehicleid);//Si ça devient supérieur à 100, on lui met à 100
	else if(dVehicleInfos[vehicleid][dFuel] + amount < 0) dVehicleInfos[vehicleid][dFuel] = 0;//Si ça devient inférieur à 0, on lui met à 0
    else dVehicleInfos[vehicleid][dFuel] += amount;//Sinon, on respecte la consigne originale
    if(dVehicleInfos[vehicleid][dFuel] == 0)//Si le véhicule a 0 d'essence, il s'éteint
 	{
	    SetVehicleEngineState(dVehicleInfos[vehicleid][dVehicleID], false);
	}
    for(new i = 0, j = GetPlayerPoolSize(); i <= j; i ++) if(GetPlayerVehicleID(i) == dVehicleInfos[vehicleid][dVehicleID] && GetPlayerVehicleSeat(i) == 0) UpdateInfo(i, 10);
	return dVehicleInfos[vehicleid][dFuel];
}

DecreaseVehicleFuel(vehicleid)
{
	new Float:fSpeed = GetVehicleSpeed(dVehicleInfos[vehicleid][dVehicleID]);
	switch(GetVehicleFuelType(dVehicleInfos[vehicleid][dVehicleModel]))
	{
    	case 1: GiveVehicleFuel(vehicleid, -(floatround(floatdiv(fSpeed, 35), floatround_round)));//Motos
  		case 2: GiveVehicleFuel(vehicleid, -(floatround(floatdiv(fSpeed, 35), floatround_round)));//Voitures
  		case 3: GiveVehicleFuel(vehicleid, -(floatround(floatdiv(fSpeed, 35), floatround_round)));//Camions & Utilitaires
  		case 4: GiveVehicleFuel(vehicleid, -(floatround(floatdiv(fSpeed, 35), floatround_round)));//Bateaux
  		case 5: GiveVehicleFuel(vehicleid, -3 * (floatround(floatdiv(fSpeed, 35), floatround_round)));//Avions
  		case 6: GiveVehicleFuel(vehicleid, -2 * (floatround(floatdiv(fSpeed, 35), floatround_round)));//Hélicos
	}
}

//---RÉPARATION VÉHICULES
UpdateRepairTimer(playerid)
{
	if(dRepair[playerid][0] != 0)
	{
		dRepair[playerid][0] --;
		//---
		if(dRepair[playerid][0] == 0)
		{
			ShowPlayerTextInfo(playerid, 5000, "~r~You failed to repair your engine!", "~r~Vous avez échoué votre réparation !", "~r~¡Espagnol!", "~r~Portugais!", "~r~Italien!", "~r~Allemand!");
			TogglePlayerControllable(playerid, true);
			SetVehicleBonnetState(dRepair[playerid][3], false);
			dRepair[playerid][1] = -1;
			dRepair[playerid][2] = 0;
			dRepair[playerid][3] = -1;
  		}
		else if(0 < dRepair[playerid][0] < 15)
		{
			new Float:x, Float:y, Float:z;
			GetVehiclePos(dRepair[playerid][3], x, y, z);
			if(!IsPlayerInRangeOfPoint(playerid, 11.0, x, y, z))
			{
				ShowPlayerTextInfo(playerid, 5000, "~r~The vehicle is too far from you!", "~r~Le véhicule est trop loin de vous !", "~r~¡Espagnol!", "~r~Portugais!", "~r~Italien!", "~r~Allemand!");
				TogglePlayerControllable(playerid, true);
				SetVehicleBonnetState(dRepair[playerid][3], false);
				dRepair[playerid][0] = 0;
				dRepair[playerid][1] = -1;
				dRepair[playerid][2] = 0;
				dRepair[playerid][3] = -1;
				return 1;
			}
			ApplyAnimation(playerid, "RAPPING", "RAP_A_Loop", 4.0, 0, 1, 1, 1, 0);
			if(Success(45))
   			{
			   switch(RandomEx(0, 4))
				{
    				case 0://S'accroupir
					{
						if(dRepair[playerid][1] != -1) HidePlayerTextInfo(playerid);
      					dRepair[playerid][1] = 0;
						ShowPlayerTextInfo(playerid, -1, "~r~Hit ~w~~k~~PED_DUCK~~r~!", "~r~Appuyez sur ~w~~k~~PED_DUCK~ ~r~ !", "~r~¡Prensa usted ~w~~k~~PED_DUCK~~r~!", "~r~Imprensa ~w~~k~~PED_DUCK~ ~r~!", "~r~Italien ~w~~k~~PED_DUCK~ ~r~!", "~r~Drücken sie auf ~w~~k~~PED_DUCK~~r~!");
					}
     				case 1://No
					{
						if(dRepair[playerid][1] != -1) HidePlayerTextInfo(playerid);
      					dRepair[playerid][1] = 1;
						ShowPlayerTextInfo(playerid, -1, "~r~Hit ~w~~k~~CONVERSATION_NO~~r~!", "~r~Appuyez sur ~w~~k~~CONVERSATION_NO~ ~r~ !", "~r~¡Prensa usted ~w~~k~~CONVERSATION_NO~~r~!", "~r~Imprensa ~w~~k~~CONVERSATION_NO~ ~r~!", "~r~Italien ~w~~k~~CONVERSATION_NO~ ~r~!", "~r~Drücken sie auf ~w~~k~~CONVERSATION_NO~~r~!");
					}
     				case 2://Yes
					{
						if(dRepair[playerid][1] != -1) HidePlayerTextInfo(playerid);
					 	dRepair[playerid][1] = 2;
						ShowPlayerTextInfo(playerid, -1, "~r~Hit ~w~~k~~CONVERSATION_YES~~r~!", "~r~Appuyez sur ~w~~k~~CONVERSATION_YES~ ~r~ !", "~r~¡Prensa usted ~w~~k~~CONVERSATION_YES~~r~!", "~r~Imprensa ~w~~k~~CONVERSATION_YES~ ~r~!", "~r~Italien ~w~~k~~CONVERSATION_YES~ ~r~!", "~r~Drücken sie auf ~w~~k~~CONVERSATION_YES~~r~!");
					}
					case 3://H
					{
						if(dRepair[playerid][1] != -1) HidePlayerTextInfo(playerid);
						dRepair[playerid][1] = 3;
						ShowPlayerTextInfo(playerid, -1, "~r~Hit ~w~~k~~GROUP_CONTROL_BWD~~r~!", "~r~Appuyez sur ~w~~k~~GROUP_CONTROL_BWD~ ~r~ !", "~r~¡Prensa usted ~w~~k~~GROUP_CONTROL_BWD~~r~!", "~r~Imprensa ~w~~k~~GROUP_CONTROL_BWD~ ~r~!", "~r~Italien ~w~~k~~GROUP_CONTROL_BWD~ ~r~!", "~r~Drücken sie auf ~w~~k~~GROUP_CONTROL_BWD~~r~!");
					}
				}
			}
		}
	}
	return 1;
}

//---STATIONS ESSENCE
IsPlayerNearGasStation(playerid)
{
	#if defined MYSQL_SYSTEM
	new i = 0;
	new Pointer: data_ptr;
	LIST_foreach<my_iterator>(gasStationsList)
	{
		data_ptr = LIST_IT_data_ptr(my_iterator);
		new gas[GasStation];
		MEM::get_arr(data_ptr, _, gas);
		if(IsPlayerInRangeOfPoint(playerid, 10.0, gas[xGas], gas[yGas], gas[zGas]))
			return i;
		i++;
	}
	#else
	new Float:x, Float:y, Float:z;
	for(new i = 0; i < 19; i ++)
	{
	    GetGasStationPos(i, x, y, z);
		if(IsPlayerInRangeOfPoint(playerid, 10.0, x, y, z)) return i;
	}
	#endif
	return -1; // Retourne -1
}

public GetStationFuel(stationid)
{
	#if defined MYSQL_SYSTEM
	new ListIt: node = GetNodeAt(gasStationsList, stationid);
	new gas[GasStation];
	MEM_get_arr(LIST_IT_data_ptr(node), _, gas);
	return gas[dStationGas];
	#else
	return dGasStation[stationid][dStationGas];
	#endif
}

public GiveStationFuel(stationid, fuel)//Pour donner de l'essence ou en enlever d'une station essence
{
	#if defined MYSQL_SYSTEM
	new ListIt: node = GetNodeAt(gasStationsList, stationid);
	new gas[GasStation];
	MEM_get_arr(LIST_IT_data_ptr(node), _, gas);
	if(gas[dStationGas] + fuel > 38000) gas[dStationGas] = 38000;//Si ça devient supérieur à 100, on lui met à 100
	else if(gas[dStationGas] + fuel < 0) gas[dStationGas] = 0;//Si ça devient inférieur à 0, on lui met à 0
    else gas[dStationGas] += fuel;//Sinon, on respecte la consigne originale
	UpdateGasStationInfo(gas);
	return gas[dStationGas];
	#else
	if(dGasStation[stationid][dStationGas] + fuel > 38000) dGasStation[stationid][dStationGas] = 38000;//Si ça devient supérieur à 100, on lui met à 100
	else if(dGasStation[stationid][dStationGas] + fuel < 0) dGasStation[stationid][dStationGas] = 0;//Si ça devient inférieur à 0, on lui met à 0
    else dGasStation[stationid][dStationGas] += fuel;//Sinon, on respecte la consigne originale
	UpdateGasStationInfo(stationid);
	return dGasStation[stationid][dStationGas];
	#endif
}

UpdateGasStationInfo(const gas[GasStation])
{
	new string[10];
	format(string, sizeof(string), "%.2f l", floatdiv(gas[dStationGas], 100));
	UpdateDynamic3DTextLabelText(gas[tGasText], KAKI, string);
}
#if defined MYSQL_SYSTEM

public OnGasStationsLoaded()
{
	new string[128];
	for(new i = 0; i < cache_num_rows(); i++)
	{
		new gas[GasStation];
		cache_get_value_name_int(i, "idstation", gas[gasID]);
		cache_get_value_name_int(i, "quantite", gas[dStationGas]);
		cache_get_value_name_float(i, "xstation", gas[xGas]);
		cache_get_value_name_float(i, "ystation", gas[yGas]);
		cache_get_value_name_float(i, "zstation", gas[zGas]);
		format(string, sizeof(string), "%d l", gas[dStationGas]);
		gas[tGasText] = CreateDynamic3DTextLabel(string, KAKI, gas[xGas], gas[yGas], gas[zGas], 40.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 50.0);
		LIST_push_back_arr(gasStationsList, gas);
	}
	format(string, sizeof(string), "[INIT] %d stations services chargees", cache_num_rows());
	LogInfo(true, string);
	return 1;
}
stock SaveGasStations()
{
	new Pointer: data_ptr;
	LIST_foreach<my_iterator>(gasStationsList)
	{
		new string[256];
		data_ptr = LIST_IT_data_ptr(my_iterator);
		new gas[GasStation];
		MEM_get_arr(data_ptr, _, gas);
		mysql_format(mysqlPool, string, sizeof(string), "UPDATE gasstation SET quantite = %d WHERE idstation = %d", gas[dStationGas], gas[gasID]);
		mysql_query(mysqlPool, string);
	}
	LogInfo(true, "[SAVE] Stations-essences sauvegardees");
}
#else
public LoadGasStations_data(name[],value[])
{
	new string[50];
	for(new i = 0; i < 19; i ++)
	{
	    format(string, sizeof(string), "Fuel%d", i);
		INI_Int(string, dGasStation[i][dStationGas]);
	}
	return 1;
}

SaveGasStations()
{
	new string[50];
	new INI:File = INI_Open(GASPATH);
	INI_SetTag(File, "data");
	for(new i = 0; i < 19; i ++)
	{
	    format(string, sizeof(string), "Fuel%d", i);
		INI_WriteInt(File,string, dGasStation[i][dStationGas]);
	}
	INI_Close(File);
}
#endif
//DÉCLARATIONS DE FONCTIONS
GivePlayerHandObject(playerid, objectid)//Fonction pour give un objet à un mec dans son main
{
	if(objectid == -1 || objectid == 0)//Si l'objet est nul, on remet ses variables à 0
	{
	    if(pPlayerInfos[playerid][HandObject] != 0) UpdatePlayerHand(playerid, 0);
		pPlayerInfos[playerid][HandObject] = 0;
	}
	else
	{
		if(pPlayerInfos[playerid][HandObject] != objectid) UpdatePlayerHand(playerid, objectid);
		pPlayerInfos[playerid][HandObject] = objectid;
		if(!pPlayerInfos[playerid][bAide][1]) ShowPlayerHelp(playerid, 2, 10000);
	}
	return 1;
}

GivePlayerInventoryObject(playerid, objectid, slotid)//Fonction pour give un objet à un mec dans son sac
{
	if(objectid == -1 || objectid == 0)//Si l'objet est nul, on remet ses variables à 0
	{
	    if(pPlayerInfos[playerid][BagObject][slotid] != 0) UpdatePlayerInventory(playerid, slotid, 0);
		pPlayerInfos[playerid][BagObject][slotid] = 0;
	}
	else
	{
		if(pPlayerInfos[playerid][BagObject][slotid] != objectid) UpdatePlayerInventory(playerid, slotid, objectid);
		pPlayerInfos[playerid][BagObject][slotid] = objectid;
		if(!pPlayerInfos[playerid][bAide][1]) ShowPlayerHelp(playerid, 2, 10000);
	}
	UpdatePlayerInventorySlots(playerid);
	return 1;
}

GivePlayerTrunkObject(playerid, vehicleid, objectid, slotid)//Fonction pour foutre un objet dans le coffre d'une bagnole
{
	if(vehicleid != -1)
	{
		if(objectid == -1 || objectid == 0)//Si l'objet est nul, on remet ses variables à 0
		{
		    if(playerid != INVALID_PLAYER_ID && dVehicleInfos[vehicleid][TrunkObject][slotid] != 0) UpdateVehicleInventory(playerid, vehicleid, slotid, 0);
			dVehicleInfos[vehicleid][TrunkObject][slotid] = 0;
		}
		else
		{
			if(playerid != INVALID_PLAYER_ID && dVehicleInfos[vehicleid][TrunkObject][slotid] != objectid) UpdateVehicleInventory(playerid, vehicleid, slotid, objectid);
			dVehicleInfos[vehicleid][TrunkObject][slotid] = objectid;
		}
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i ++)
		{
		    if(i != playerid && pVehicleInventory[i] == vehicleid)
		    {
				UpdateVehicleInventory(i, vehicleid, slotid, (objectid == -1 || objectid == 0) ? 0 : objectid);
		    }
		}
	}
	return 1;
}

public HasPlayerItem(playerid, objectid)
{
	new dBagSize = GetPlayerBagSize(playerid, true);
	for(new i = 0; i < dBagSize + 1; i ++) if(GetPlayerSlotObject(playerid, i) == objectid) return i;
	return -1;
}

public GetPlayerNextFreeSlot(playerid)
{
	new dBagSize = GetPlayerBagSize(playerid, true);
	for(new i = 0; i < dBagSize + 1; i ++) if(GetPlayerSlotObject(playerid, i) == 0) return i;
	return -1;
}

public GetPlayerFreeSlots(playerid)
{
	new dFreeSlots;
	new dBagSize = GetPlayerBagSize(playerid, true);
	for(new i = 0; i < dBagSize + 1; i ++) if(GetPlayerSlotObject(playerid, i) == 0) dFreeSlots ++;
	return dFreeSlots;
}

public GivePlayerSlotObject(playerid, objectid, slot)
{
	switch(slot)
	{
	    case 0, 37:
		{
			GivePlayerHandObject(playerid, objectid);
		}
	    case 1 .. 36:
		{
			GivePlayerInventoryObject(playerid, objectid, slot - 1);
		}
	    case 38 .. 43:
		{
			if(objectid == 0) LogInfo(true, "[ADMIN]%s prend %s du vehicule %d.", GetName(playerid), NoNewLineSign(aObjects[GetPlayerSlotObject(playerid, slot)][ObjectFrName]), pVehicleInventory[playerid]);
			else LogInfo(true, "[ADMIN]%s met %s dans le vehicule %d.", GetName(playerid), NoNewLineSign(aObjects[objectid][ObjectFrName]), pVehicleInventory[playerid]);
			GivePlayerTrunkObject(playerid, pVehicleInventory[playerid], objectid, slot - 38);
		}
	    case 44 .. 55:
		{
			if(objectid == 0) LogInfo(true, "[ADMIN]%s prend %s du coffre %d.", GetName(playerid), NoNewLineSign(aObjects[GetPlayerSlotObject(playerid, slot)][ObjectFrName]), pPlayerSafe[playerid]);
			else LogInfo(true, "[ADMIN]%s met %s dans le coffre %d.", GetName(playerid), NoNewLineSign(aObjects[objectid][ObjectFrName]), pPlayerSafe[playerid]);
			GivePlayerSafeObject(playerid, pPlayerSafe[playerid], objectid, slot - 44);
		}
	}
}

public GetPlayerNextFreeWeaponSlot(playerid)
{
	new dWeapons[4];
	dWeapons[0] = pPlayerInfos[playerid][pArme1][0];
	dWeapons[1] = pPlayerInfos[playerid][pArme2][0];
	dWeapons[2] = pPlayerInfos[playerid][pArme3][0];
	dWeapons[3] = pPlayerInfos[playerid][pArme4][0];
	for(new i = 0; i < GetPlayerBagSize(playerid, false); i ++) if(dWeapons[i] == 0) return i + 1;
	return 0;
}

HasPlayerWeapon(playerid, weaponid)
{
	if(pPlayerInfos[playerid][pArme1][0] == weaponid) return 1;
	else if(pPlayerInfos[playerid][pArme2][0] == weaponid) return 2;
	else if(pPlayerInfos[playerid][pArme3][0] == weaponid) return 3;
	else if(pPlayerInfos[playerid][pArme4][0] == weaponid) return 4;
	return 0;
}

ApplyReloadAnim(playerid, weaponid)
{
	if(IsPlayerConnected(playerid) && HasPlayerWeapon(playerid, weaponid))
	{
	    SetPlayerArmedWeapon(playerid, 0);
		switch(weaponid)
		{
		    case 22: ApplyAnimation(playerid,"COLT45", "colt45_reload", 4.0, 0, 0, 0, 0, 0);//Pistolet
		    case 23: ApplyAnimation(playerid,"SILENCED", "Silence_reload", 4.0, 0, 0, 0, 0, 0);//Silencieux
		    case 24: ApplyAnimation(playerid,"PYTHON", "python_reload", 4.0, 0, 0, 0, 0, 0);//Deagle
		    case 25: ApplyAnimation(playerid,"SHOTGUN", "shotgun_fire_poor", 4.0, 0, 0, 0, 0, 0);//Fusil à pompe
		    case 26: ApplyAnimation(playerid,"COLT45", "sawnoff_reload", 4.0, 0, 0, 0, 0, 0);//Sawn off
		    case 27: ApplyAnimation(playerid,"SHOTGUN", "shotgun_fire_poor", 4.0, 0, 0, 0, 0, 0);//Spas 12
		    case 28: ApplyAnimation(playerid,"UZI", "UZI_reload", 4.0, 0, 0, 0, 0, 0);//UZI
		    case 29: ApplyAnimation(playerid,"PYTHON","python_reload", 4.0, 0, 0, 0, 0, 0);//MP5
		    case 32: ApplyAnimation(playerid,"TEC", "TEC_reload", 4.0, 0, 0, 0, 0, 0);//TEC9
		    case 30: ApplyAnimation(playerid,"PYTHON","python_reload", 4.0, 0, 0, 0, 0, 0);//AK47
		    case 31: ApplyAnimation(playerid,"PYTHON","python_reload", 4.0, 0, 0, 0, 0, 0);//M4
		    case 33: ApplyAnimation(playerid,"RIFLE", "RIFLE_load", 4.0, 0, 0, 0, 0, 0);//Fusil de chasse
		    case 34: ApplyAnimation(playerid,"RIFLE", "RIFLE_load", 4.0, 0, 0, 0, 0, 0);//Sniper
		    case 38: ApplyAnimation(playerid,"PYTHON","python_reload", 4.0, 0, 0, 0, 0, 0);//Minigun
		}
		PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
	    SetPlayerArmedWeapon(playerid, weaponid);
	}
	return 1;
}
				
PlayerThrowProjectile(playerid, type)
{
	if(pThrown[playerid][2] != 0)
	{
		OnProjectileExplode(playerid, fThrown[playerid][0], fThrown[playerid][1], fThrown[playerid][2], pThrown[playerid][1]);
		pThrown[playerid][2] = 0;
		DestroyObject(pThrown[playerid][0]);
		pThrown[playerid][0] = INVALID_OBJECT_ID;
	}
    new Float:x, Float:y, Float:z, Float:x2, Float:y2, Float:z2, Float:rx, Float:ry, Float:rz, Float:angle;
    new modelid;
    switch(type)
    {
    	case THROW_GRENADE: modelid = 342;
    	case THROW_MOLOTOV: modelid = 344;
    	case THROW_GAS: modelid = 343;
    }
    GetPlayerPos(playerid, x, y, z);
    pThrown[playerid][1] = type;
    pThrown[playerid][2] = 1;
    GetPlayerFacingAngle(playerid, angle);
    x2 = x + (10.1 * floatsin(-angle, degrees));
    y2 = y + (10.1 * floatcos(-angle, degrees));
    z2 = z + 3.4;
    pThrown[playerid][0] = CreateObject(modelid, x + (0.1 * floatsin(-angle, degrees)), y + (0.1 * floatcos(-angle, degrees)), z + 0.4, 0.0, 0.0, 96.0, 65.0);
	//---
	#pragma unused rx
	#pragma unused ry
	#pragma unused rz
	//CA_RayCastLineAngle(x, y, z + 0.4, x2, y2, z + 3.4, x2, y2, z2, rx, ry, rz);
	//---
	MoveObject(pThrown[playerid][0], x2, y2, z2, 20.00);
	fThrown[playerid][0] = x2 + (20.0 * floatsin(-angle, degrees));
	fThrown[playerid][1] = y2 + (20.0 * floatcos(-angle, degrees));
	CA_RayCastLine(fThrown[playerid][0], fThrown[playerid][1], z + 3.4, fThrown[playerid][0], fThrown[playerid][1], z - 500.0, x, y, fThrown[playerid][2]);
	if(CA_RayCastLine(x2, y2, z2, fThrown[playerid][0], fThrown[playerid][1], fThrown[playerid][2], x, y, z) != 0)
	{
		fThrown[playerid][0] = x;
		fThrown[playerid][1] = y;
		fThrown[playerid][2] = z;
	}
    ApplyAnimation(playerid, "GRENADE", "WEAPON_throw", 4.0, 0, 0, 0, 0, 0, 1);
}

public OnProjectileExplode(playerid, Float:x, Float:y, Float:z, type)
{
	switch(type)
	{
	    case THROW_GRENADE:
	    {
	        CreateExplosionEx(playerid, x, y, z, EXPLOSION_LARGE, 10.0);
	    }
	    case THROW_MOLOTOV:
	    {
	        CreateExplosionEx(playerid, x, y, z, EXPLOSION_FIRE, 10.0);
	    }
	    case THROW_GAS:
	    {
	        CreateSmoke(x, y, z, 20);
	    }
	}
}

ThrowPlayerKnife(playerid)
{
	static slot = 0;
	TextDrawHideForPlayer(playerid, tKnifeAim);
    new Float:fPX, Float:fPY, Float:fPZ, Float:angle, Float:fVX, Float:fVY, Float:fVZ, Float:x, Float:y, Float:z;
	//---
    GetPlayerCameraPos(playerid, fPX, fPY, fPZ);
    GetPlayerCameraFrontVector(playerid, fVX, fVY, fVZ);
	fVZ += 0.15;
	GetPlayerPos(playerid, fPX, fPY, fPZ);
	GetPlayerFacingAngle(playerid, angle);
	fPX += (0.1 * floatsin(-angle, degrees));
	fPY += (0.1 * floatcos(-angle, degrees));
	fPZ += 0.4;
	//---
    x = fPX + floatmul(fVX, 30.0);
    y = fPY + floatmul(fVY, 30.0);
    z = fPZ + floatmul(fVZ, 30.0);
    //---
	if(oThrowKnife[slot] != INVALID_OBJECT_ID)
	{
	    DestroyObject(oThrowKnife[slot]);
	    oThrowKnife[slot] = INVALID_OBJECT_ID;
	    dThrowKnife[slot] = 0;
	    fLandKnife[slot][0] = 0.0;
	    fLandKnife[slot][1] = 0.0;
	    fLandKnife[slot][2] = 0.0;
	}
    oThrowKnife[slot] = CreateObject(335, fPX, fPY, fPZ, 0.0, 90.0, angle + 90.0);
	if(CA_RayCastLine(fPX, fPY, fPZ, x, y, z, fVX, fVY, fVZ) != 0)
	{
		dThrowKnife[slot] = 2;
		fLandKnife[slot][0] = fVX;
		fLandKnife[slot][1] = fVY;
		fLandKnife[slot][2] = fVZ;
		MoveObject(oThrowKnife[slot], fVX, fVY, fVZ, 20.0);
		SetTimerEx("CheckKnifeTarget", 100, false, "ii", playerid, slot);
	}
	else
	{
		dThrowKnife[slot] = 1;
		MoveObject(oThrowKnife[slot], x, y, z, 20.0);
		fLandKnife[slot][0] = x + (7.5 * floatsin(-angle, degrees));
		fLandKnife[slot][1] = y + (7.5 * floatcos(-angle, degrees));
		fLandKnife[slot][2] = z;
		CA_RayCastLine(fLandKnife[slot][0], fLandKnife[slot][1], z, fLandKnife[slot][0], fLandKnife[slot][1], z - 500.0, fVX, fVY, fVZ);
		if(CA_RayCastLine(x, y, z, fVX, fVY, fVZ, fPX, fPY, fPZ) != 0)
		{
			fLandKnife[slot][0] = fPX;
			fLandKnife[slot][1] = fPY;
			fLandKnife[slot][2] = fPZ;
			SetTimerEx("CheckKnifeTarget", 100, false, "ii", playerid, slot);
		}
		else
		{
			fLandKnife[slot][0] = fVX;
			fLandKnife[slot][1] = fVY;
			fLandKnife[slot][2] = fVZ;
			SetTimerEx("CheckKnifeTarget", 100, false, "ii", playerid, slot);
		}
	}
	//---
	if(++ slot == 10) slot = 0;
}

public CheckKnifeTarget(playerid, knifeid)
{
	if(dThrowKnife[knifeid] == 1 || dThrowKnife[knifeid] == 2)
	{
	    new Float:x, Float:y, Float:z, victim = INVALID_PLAYER_ID;
	    GetObjectPos(oThrowKnife[knifeid], x, y, z);
	    for(new i = 0, j = GetPlayerPoolSize(); i <= j; i ++)
	    {
			if(i != playerid && IsPlayerInRangeOfPoint(i, 2.3, x, y, z))
			{
				victim = i;
				break;
			}
	    }
	    if(victim != INVALID_PLAYER_ID)
	    {
			DestroyObject(oThrowKnife[knifeid]);
		    oThrowKnife[knifeid] = INVALID_OBJECT_ID;
		    dThrowKnife[knifeid] = 0;
		    fLandKnife[knifeid][0] = 0.0;
		    fLandKnife[knifeid][1] = 0.0;
		    fLandKnife[knifeid][2] = 0.0;
		    //---
		    if(FCNPC_IsValid(victim) && victim != dJason[dJasonID])
		    {
				OnPlayerGiveDamage(playerid, victim, 0.1, 4, 3);
				FCNPC_SetHealth(victim, 0);
		    }
		    else
		    {
				OnPlayerGiveDamage(playerid, victim, 100, 4, 3);
			}
			PlayerDropWeapon(victim, 4, 1, 0.5);
			ApplyAnimation(victim,"ped","SHOT_partial",4.1,0,1,1,1,1,1);
	    }
	    else
	    {
	        if(TestKnifePos(playerid, x, y, z))
	        {
				DestroyObject(oThrowKnife[knifeid]);
			    oThrowKnife[knifeid] = INVALID_OBJECT_ID;
			    dThrowKnife[knifeid] = 0;
			    fLandKnife[knifeid][0] = 0.0;
			    fLandKnife[knifeid][1] = 0.0;
			    fLandKnife[knifeid][2] = 0.0;
	        }
	        else
	        {
				SetTimerEx("CheckKnifeTarget", 100, false, "ii", playerid, knifeid);
			}
	    }
	}
}

TestKnifePos(playerid, Float:x, Float:y, Float:z)
{
	new Float:x2, Float:y2, Float:z2, dTarget = -1;
	for(new i = 0; i < MAX_BAMBIS; i ++)
	{
		GetDynamicObjectPos(dBambi[i][oBambi], x2, y2, z2);
	    if(GetDistanceBetweenPoints(x, y, z, x2, y2, z2) < 2.3)
	    {
	        dTarget = i;
	        break;
	    }
	}
	if(dTarget != -1)
	{
		UpdateHealthBar(playerid, 0, 1, "Bambi", "Bambi", "Bambi", "Bambi", "Bambi", "Bambi");
		GivePlayerExp(playerid, 1);
		if(IsDynamicObjectMoving(dBambi[dTarget][oBambi])) StopDynamicObject(dBambi[dTarget][oBambi]);
		dBambi[dTarget][bBambiDead] = true;
		new Float:fPosX, Float:fPosY, Float:fPosZ;
		new Float:rx, Float:ry, Float:rz;
		GetDynamicObjectPos(dBambi[dTarget][oBambi], fPosX, fPosY, fPosZ);
		CA_RayCastLineAngle(fPosX, fPosY, fPosZ, fPosX, fPosY, fPosZ - 50.0, fPosX, fPosY, fPosZ, rx, ry, rz);
		MoveDynamicObject(dBambi[dTarget][oBambi], fPosX, fPosY, fPosZ, 1.5, ry + 90.0, rx + 90.0, rz + 90.0);
		SetDynamicObjectMaterial(dBambi[dTarget][oBambi], 0, 2905, "dead_mantxd", "billyblood", 0xFFFFFF77);
		CreateBloodSplat(fPosX, fPosY, fPosZ);
		//---
		CreateWeapon(4, 1, fPosX, fPosY, fPosZ + 1.0, -1);
		//---
		OnPlayerGroupKillMob(playerid, MOB_BAMBI);
	}
	if(dTarget == -1)
	{
		for(new i = 0; i < MAX_BLOPTS; i ++)
		{
			GetObjectPos(dBlopt[i][oBlopt], x2, y2, z2);
		    if(GetDistanceBetweenPoints(x, y, z, x2, y2, z2) < 2.3)
		    {
		        dTarget = i;
		        break;
		    }
		}
		if(dTarget != -1)
		{
	    	UpdateHealthBar(playerid, 0, 180, "Blopt", "Blopt", "Blopt", "Blopt", "Blopt", "Blopt");
			OnPlayerKillsBlopt(playerid, dTarget);
			CA_RayCastLine(x, y, z, x, y, z - 50.0, x2, y2, z2);
			//---
			CreateWeapon(4, 1, x2, y2, z2 + 1.0, -1);
		}
	}
	//---
	if(dTarget != -1) return true;
	return false;
}

public IsPlayerThrowingKnife(playerid)
{
	TextDrawShowForPlayer(playerid, tKnifeAim);
	pThrowKnifeTimer[playerid] = 0;
}

GetWeaponAmmoType(weaponid)
{
	switch(weaponid)
	{
	    case 30, 31, 38: return ASSAULT_AMMO;
	    case 22, 23, 28, 29, 32: return PISTOL_AMMO;
	    case 24: return DEAGLE_AMMO;
		case 25, 26, 27: return SHOTGUN_AMMO;
		case 33, 34: return RIFLE_AMMO;
	}
	return NO_AMMO;
}

public HasPlayerSameTypeWeapon(playerid, weaponid)//Retourne 0 si le mec n'a pas d'armes du même type, 1 si le mec a une arme du même type, 2 si le mec a l'arme en question
{
	switch(weaponid)
	{
	    case 3, 4, 5, 8, 9: if(HasPlayerWeapon(playerid, 3) || HasPlayerWeapon(playerid, 4) || HasPlayerWeapon(playerid, 5) || HasPlayerWeapon(playerid, 8) || HasPlayerWeapon(playerid, 9))//ARMES BLANCHES
		{
			if(HasPlayerWeapon(playerid, weaponid)) return 2;
			else return 1;
		}
	    case 22, 23, 24: if(HasPlayerWeapon(playerid, 22) || HasPlayerWeapon(playerid, 23) || HasPlayerWeapon(playerid, 24))//PISTOLETS
		{
			if(HasPlayerWeapon(playerid, weaponid)) return 2;
			else return 1;
		}
	    case 25, 26, 27: if(HasPlayerWeapon(playerid, 25) || HasPlayerWeapon(playerid, 26) || HasPlayerWeapon(playerid, 27))//FUSILS À POMPE
		{
			if(HasPlayerWeapon(playerid, weaponid)) return 2;
			else return 1;
		}
	    case 28, 29, 32: if(HasPlayerWeapon(playerid, 28) || HasPlayerWeapon(playerid, 29) || HasPlayerWeapon(playerid, 32))//PISTOLETS MITRAILLEURS
		{
			if(HasPlayerWeapon(playerid, weaponid)) return 2;
			else return 1;
		}
	    case 30, 31: if(HasPlayerWeapon(playerid, 30) || HasPlayerWeapon(playerid, 31))//FUSILS D'ASSAUT
		{
			if(HasPlayerWeapon(playerid, weaponid)) return 2;
			else return 1;
		}
	    case 33, 34: if(HasPlayerWeapon(playerid, 33) || HasPlayerWeapon(playerid, 34))//FUSILS DE PRÉCISION
		{
			if(HasPlayerWeapon(playerid, weaponid)) return 2;
			else return 1;
		}
	    case 38: if(HasPlayerWeapon(playerid, 38))//ARMES LOURDES
		{
			if(HasPlayerWeapon(playerid, weaponid)) return 2;
			else return 1;
		}
	}
	return 0;
}

public GivePlayerWeaponEx(playerid, weaponid, ammo)
{
	new dWeaponSlot = HasPlayerWeapon(playerid, weaponid);
	if(dWeaponSlot != 0)
	{
	 	switch(dWeaponSlot)
	 	{
	 	    case 1:
	 	    {
	 	        pPlayerInfos[playerid][pArme1][1] += ammo;
	 	        GivePlayerWeapon(playerid, weaponid, ammo);
	 	        return 1;
	 	    }
	 	    case 2:
	 	    {
	 	        pPlayerInfos[playerid][pArme2][1] += ammo;
	 	        GivePlayerWeapon(playerid, weaponid, ammo);
	 	        return 2;
	 	    }
	 	    case 3:
	 	    {
	 	        pPlayerInfos[playerid][pArme3][1] += ammo;
	 	        GivePlayerWeapon(playerid, weaponid, ammo);
	 	        return 3;
	 	    }
	 	    case 4:
	 	    {
	 	        pPlayerInfos[playerid][pArme4][1] += ammo;
	 	        GivePlayerWeapon(playerid, weaponid, ammo);
	 	        return 4;
	 	    }
		}
		SetPlayerWeaponSkill(playerid, dWeaponSlot, WEAPON_AKIMBO);
	}
	else
	{
	    new dFreeSlot = GetPlayerNextFreeWeaponSlot(playerid);
	 	switch(dFreeSlot)
	 	{
	 	    case 1:
	 	    {
	 	        pPlayerInfos[playerid][pArme1][0] = weaponid;
	 	        pPlayerInfos[playerid][pArme1][1] = ammo;
	 	        GivePlayerWeapon(playerid, weaponid, ammo);
	 	        return 1;
	 	    }
	 	    case 2:
	 	    {
	 	        pPlayerInfos[playerid][pArme2][0] = weaponid;
	 	        pPlayerInfos[playerid][pArme2][1] = ammo;
	 	        GivePlayerWeapon(playerid, weaponid, ammo);
	 	        return 2;
	 	    }
	 	    case 3:
	 	    {
	 	        pPlayerInfos[playerid][pArme3][0] = weaponid;
	 	        pPlayerInfos[playerid][pArme3][1] = ammo;
	 	        GivePlayerWeapon(playerid, weaponid, ammo);
	 	        return 3;
	 	    }
	 	    case 4:
	 	    {
	 	        pPlayerInfos[playerid][pArme4][0] = weaponid;
	 	        pPlayerInfos[playerid][pArme4][1] = ammo;
	 	        GivePlayerWeapon(playerid, weaponid, ammo);
	 	        return 4;
	 	    }
		}
		PlayerPlaySound(playerid, 36401, 0.0, 0.0, 0.0);
		SetPlayerWeaponSkill(playerid, dFreeSlot, WEAPON_SIMPLE);
	}
 	return 0;
}

SetPlayerWeaponSkill(playerid, slotid, skill)
{
	switch(slotid)
	{
	    case 1:
	    {
	        pPlayerInfos[playerid][pArme1][2] = skill;
	        switch(pPlayerInfos[playerid][pArme1][0])
	        {
	            case 22: SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, (skill == WEAPON_SIMPLE) ? 998 : 999);//Pistolets
	            case 26: SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, (skill == WEAPON_SIMPLE) ? 998 : 999);//Sawn off
	            case 28: SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, (skill == WEAPON_SIMPLE) ? 998 : 999);//UZI
	            case 32: SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, (skill == WEAPON_SIMPLE) ? 998 : 999);//Tec9
	            default: pPlayerInfos[playerid][pArme1][2] = WEAPON_SIMPLE;
	        }
	    }
	    case 2:
	    {
	        pPlayerInfos[playerid][pArme2][2] = skill;
	        switch(pPlayerInfos[playerid][pArme2][0])
	        {
	            case 22: SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, (skill == WEAPON_SIMPLE) ? 998 : 999);//Pistolets
	            case 26: SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, (skill == WEAPON_SIMPLE) ? 998 : 999);//Sawn off
	            case 28: SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, (skill == WEAPON_SIMPLE) ? 998 : 999);//UZI
	            case 32: SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, (skill == WEAPON_SIMPLE) ? 998 : 999);//Tec9
	            default: pPlayerInfos[playerid][pArme2][2] = WEAPON_SIMPLE;
	        }
	    }
	    case 3:
	    {
	        pPlayerInfos[playerid][pArme3][2] = skill;
	        switch(pPlayerInfos[playerid][pArme3][0])
	        {
	            case 22: SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, (skill == WEAPON_SIMPLE) ? 998 : 999);//Pistolets
	            case 26: SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, (skill == WEAPON_SIMPLE) ? 998 : 999);//Sawn off
	            case 28: SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, (skill == WEAPON_SIMPLE) ? 998 : 999);//UZI
	            case 32: SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, (skill == WEAPON_SIMPLE) ? 998 : 999);//Tec9
	            default: pPlayerInfos[playerid][pArme3][2] = WEAPON_SIMPLE;
	        }
	    }
	    case 4:
	    {
	        pPlayerInfos[playerid][pArme4][2] = skill;
	        switch(pPlayerInfos[playerid][pArme4][0])
	        {
	            case 22: SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, (skill == WEAPON_SIMPLE) ? 998 : 999);//Pistolets
	            case 26: SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, (skill == WEAPON_SIMPLE) ? 998 : 999);//Sawn off
	            case 28: SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, (skill == WEAPON_SIMPLE) ? 998 : 999);//UZI
	            case 32: SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, (skill == WEAPON_SIMPLE) ? 998 : 999);//Tec9
	            default: pPlayerInfos[playerid][pArme4][2] = WEAPON_SIMPLE;
	        }
	    }
	}
}

GetPlayerWeaponSkill(playerid, slotid)
{
	switch(slotid)
	{
		case 1: return pPlayerInfos[playerid][pArme1][2];
		case 2: return pPlayerInfos[playerid][pArme2][2];
		case 3: return pPlayerInfos[playerid][pArme3][2];
		case 4: return pPlayerInfos[playerid][pArme4][2];
	}
	return WEAPON_SIMPLE;
}

RemovePlayerWeapon(playerid, weaponid)
{
	new dRemoveSlot = -1;
	new dArmedWeapon = GetPlayerWeapon(playerid);
    new dWeapons[13][2];
	for (new i = 0; i < 13; i++) GetPlayerWeaponData(playerid, i, dWeapons[i][0], dWeapons[i][1]);
	switch(weaponid)
	{
	    case 0, 1: dRemoveSlot = 0;
	    case 2, 3, 4, 5, 6, 7, 8, 9: dRemoveSlot = 1;
	    case 22, 23, 24: dRemoveSlot = 2;
	    case 25, 26, 27: dRemoveSlot = 3;
	    case 28, 29, 32: dRemoveSlot = 4;
	    case 30, 31: dRemoveSlot = 5;
	    case 33, 34: dRemoveSlot = 6;
	    case 35, 36, 37, 38: dRemoveSlot = 7;
	    case 16, 17, 18, 39: dRemoveSlot = 8;
	    case 41, 42, 43: dRemoveSlot = 9;
	    case 10, 11, 12, 13, 14, 15: dRemoveSlot = 10;
	    case 44, 45: dRemoveSlot = 11;
	    case 40: dRemoveSlot = 12;
	}
	ResetPlayerWeapons(playerid);
	for(new i = 0; i < 13; i ++) if(i != dRemoveSlot) GivePlayerWeapon(playerid, dWeapons[i][0], dWeapons[i][1]);
	SetPlayerArmedWeapon(playerid, (dArmedWeapon != weaponid) ? dArmedWeapon : 0);
}

KnockPlayer(playerid, bool:heavy = false)
{
	if(FCNPC_IsValid(playerid))
 	{
		if(pNPCType[playerid] == MOB_ZOMBIE)
		{
			if(pKnockOut[playerid] > 1) return false;
	        pKnockOut[playerid] = 5;
			new zombie = IsNPCZombie(playerid);
			if(dZombie[zombie][bZombieAttack])
			{
				FCNPC_StopAim(dZombie[zombie][dZombieID]);
				FCNPC_StopAttack(dZombie[zombie][dZombieID]);
				dZombie[zombie][bZombieAttack] = false;
			}
	        if(heavy)
	        {
				FCNPC_ApplyAnimation(dZombie[zombie][dZombieID], "PED", "BIKE_fallR", 4.0, 0, 1, 1, 1, 0);
	        }
	        else
	        {
				FCNPC_ApplyAnimation(dZombie[zombie][dZombieID], "PED", "BIKE_fall_off", 4.0, 0, 1, 1, 1, 0);
			}
	    }
		else if(pNPCType[playerid] == MOB_JOHN)
		{
			if(pKnockOut[playerid] > 1) return false;
	        pKnockOut[playerid] = 5;
			new john = IsNPCJohn(playerid);
			if(dJohn[john][dJohnAction] == JOHN_ATTACK)
			{
				FCNPC_StopAim(dJohn[john][dJohnID]);
				FCNPC_StopAttack(dJohn[john][dJohnID]);
				dJohn[john][dJohnAction] = JOHN_STAND;
			}
	        if(heavy)
	        {
				FCNPC_ApplyAnimation(dJohn[john][dJohnID], "PED", "BIKE_fallR", 4.0, 0, 1, 1, 1, 0);
	        }
	        else
	        {
				FCNPC_ApplyAnimation(dJohn[john][dJohnID], "PED", "BIKE_fall_off", 4.0, 0, 1, 1, 1, 0);
			}
	    }
	}
	else
 	{
 	    if(pKnockOut[playerid] != 0) return false;
		pKnockOut[playerid] = 5;
		ShowPlayerTextInfo(playerid, 2500, "~r~Spam ~k~~PED_JUMPING~ to get up!", "~r~Appuyez à répétition sur ~k~~PED_JUMPING~ pour vous relever !", "~r~¡Espagnol!", "Portugais", "Italien", "Allemand");
		if(heavy)
		{
		    new Float:angle;
		    GetPlayerFacingAngle(playerid, angle);
		    SetPlayerVelocity(playerid, -0.5 * floatsin(-angle, degrees), -0.5 * floatcos(-angle, degrees), 2.0);
			ApplyAnimation(playerid, "PED", "BIKE_fallR", 4.0, 0, 1, 1, 1, 0, 1);
		}
		else
		{
			ApplyAnimation(playerid, "PED", "BIKE_fall_off", 4.0, 0, 1, 1, 1, 0, 1);
		}
		TogglePlayerControllable(playerid, false);
	}
	return true;
}

DecreaseKnockOut(playerid)
{
	if(pKnockOut[playerid] <= 0)
	{
	    pKnockOut[playerid] = 0;
	    return false;
	}
	if(FCNPC_IsValid(playerid))
 	{
		if(pNPCType[playerid] == MOB_ZOMBIE)
		{
			for(new i = 0; i < MAX_ZOMBIES; i ++)
			{
			    if(playerid == dZombie[i][dZombieID])
			    {
					pKnockOut[playerid] --;
			 	    if(pKnockOut[playerid] == 0)
			 	    {
						FCNPC_ApplyAnimation(dZombie[i][dZombieID], "PED", "getup", 4.0, 0, 1, 1, 0, 0);
					}
					break;
			    }
			}
		}
		else if(pNPCType[playerid] == MOB_JOHN)
		{
			for(new i = 0; i < MAX_JOHNS; i ++)
			{
			    if(playerid == dJohn[i][dJohnID])
			    {
					pKnockOut[playerid] --;
			 	    if(pKnockOut[playerid] == 0)
			 	    {
						FCNPC_ApplyAnimation(dJohn[i][dJohnID], "PED", "getup", 4.0, 0, 1, 1, 0, 0);
					}
					break;
			    }
			}
		}
	}
	else
 	{
		pKnockOut[playerid] --;
 	    if(pKnockOut[playerid] == 0)
 	    {
			HidePlayerTextInfo(playerid);
			ApplyAnimation(playerid, "PED", "getup", 4.0, 0, 1, 1, 0, 0, 1);
			TogglePlayerControllable(playerid, true);
		}
		else
		{
			ShowPlayerTextInfo(playerid, 2500, "~r~Spam ~k~~PED_JUMPING~ to get up!", "~r~Appuyez à répétition sur ~k~~PED_JUMPING~ pour vous relever !", "~r~¡Espagnol!", "Portugais", "Italien", "Allemand");
		}
	}
	return true;
}

UpdateVehicleHUD(playerid)
{
	new vehicleid = pVehicleInventory[playerid];
	if(vehicleid != -1)
	{
 		PlayerTextDrawColor(playerid, tPlayerVehHUD[playerid][0], (dVehicleInfos[vehicleid][bEngine]) ? 0xFFFFFFFF : 0xCC0000FF);
		if(!IsVehicleBicycle(dVehicleInfos[vehicleid][dVehicleID])) PlayerTextDrawShow(playerid, tPlayerVehHUD[playerid][0]);
	    if(dVehicleInfos[vehicleid][dWheels] != 0)
	    {
	        for(new i = 0; i < dVehicleInfos[vehicleid][dWheels]; i ++)
	        {
	            PlayerTextDrawColor(playerid, tPlayerVehHUD[playerid][i + 1], (dVehicleInfos[vehicleid][bWheel][i]) ? 0xFFFFFFFF : 0xCC0000FF);
				PlayerTextDrawShow(playerid, tPlayerVehHUD[playerid][i + 1]);
	        }
	    }
	}
}

GetPlayerBagSize(playerid, bool:objects)
{
	switch(pPlayerInfos[playerid][pBag])
	{
	    case 1: return (objects ? 8 : 2);
	    case 2: return (objects ? 16 : 2);
	    case 3: return (objects ? 20 : 3);
	    case 4: return (objects ? 28 : 4);
	    case 5: return (objects ? 36 : 4);
	}
	return 1;
}

UpdatePlayerInventorySlots(playerid)
{
	new dObjects[2];
	if(pUseInventory[playerid] != -1)
	{
		new string[128];
		new sBackPacks[5][] =
		{
		    "Patrol Pack", "Czech Vest", "Assault Pack", "Alice Pack", "Coyote Backpack"
		};
		dObjects[1] = GetPlayerBagSize(playerid, .objects = true);
		for(new i = 0; i < dObjects[1]; i ++) if(pPlayerInfos[playerid][BagObject][i] != 0) dObjects[0] ++;
		format(string, sizeof(string), "%s - Slots: %d/%d", sBackPacks[pPlayerInfos[playerid][pBag] - 1], dObjects[0], dObjects[1]);
		PlayerTextDrawSetString(playerid, tSlots[playerid], string);
		PlayerTextDrawShow(playerid, tSlots[playerid]);
	}
	return dObjects[0];
}

//---OR
#if defined MYSQL_SYSTEM
new LIST_init<goldList>;
public OnGoldsLoaded()
{
	new string[128];
	for(new i = 0; i < cache_num_rows(); i++)
	{
		new Float:x, Float:y, Float:z, amount = 0, goldid;
		cache_get_value_name_int(i, "amount", amount);
		cache_get_value_name_float(i, "xgold", x);
		cache_get_value_name_float(i, "ygold", y);
		cache_get_value_name_float(i, "zgold", z);
		cache_get_value_name_int(i, "idgold", goldid);
		CreateGoldIngot(amount, x, y, z, goldid);
	}
	format(string, sizeof(string), "[INIT] %d lingots d'or charges", cache_num_rows());
	LogInfo(true, string);
	return 1;
}
stock CreateGoldIngot(amount, Float:x, Float:y, Float:z, id = -1)
{
	new gold[Or];
	if(amount != 0)
	{
		new string[16];
		gold[dOrAmount] = amount;
		gold[xOr] = x;
		gold[yOr] = y;
		gold[zOr] = z;
		
		gold[oOr] = CreateDynamicObject(19941, x, y, z - 1.0, 0.0, 0.0, floatrand(0.0, 360.0), -1, -1, -1, 25.0, 20.0);
		format(string, sizeof(string), "%.1f g", floatdiv(amount, 10));
	    gold[OrText] = CreateDynamic3DTextLabel(string, 0xFFD700FF, x, y, z - 1.0, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 3.5);
		gold[orID] = id;
		if(id == -1)
		{
			new query[512], Cache: result;
			mysql_format(mysqlPool, query, sizeof(query), "CALL `insertGold`(%d, %f, %f, %f)", amount, x, y, z);
			result = mysql_query(mysqlPool, query);
			cache_set_active(result);
			cache_get_value_name_int(0, "nextID", gold[orID]);
			cache_delete(result);
		}
		LIST_push_back_arr(goldList, gold);
	}
	return gold;
}
stock SaveGold()
{
	new string[1024];
	mysql_query(mysqlPool, "TRUNCATE TABLE gold");
	LIST_foreach<my_iterator>(goldList)
	{
		new Pointer:data_ptr = LIST_IT_data_ptr(my_iterator);
		new gold[Or];
		MEM_get_arr(data_ptr, _, gold);
		mysql_format(mysqlPool, string, sizeof(string), "%s%s('', %d, %f, %f, %f)", string, strlen(string) ? "," : " ", gold[dOrAmount], gold[xOr], gold[yOr], gold[zOr]);
	}
	mysql_format(mysqlPool, string, sizeof(string), "INSERT INTO gold VALUES%s", string);
	mysql_query(mysqlPool, string);
	LogInfo(true, "[SAVE] Lingots d'or sauvegardes");

}
stock DestroyGold(ListIt: node)
{	
	new gold[Or], query[256];
	MEM_get_arr(LIST_IT_data_ptr(node), _, gold);
	DestroyDynamicObject(gold[oOr]);
	DestroyDynamic3DTextLabel(gold[OrText]);
	mysql_format(mysqlPool, query, sizeof(query), "DELETE FROM `gold` WHERE idgold = %d", gold[orID]);
	mysql_tquery(mysqlPool, query);
	LIST_erase(goldList, node);
}
#else
public LoadGold_data(name[],value[])
{
	new string[50];
	for(new i = 0; i < MAX_GOLD_INGOTS; i ++)
	{
	    format(string, sizeof(string), "Or%d", i);
		INI_Int(string, dOr[i][dOrAmount]);
	    format(string, sizeof(string), "xOr%d", i);
		INI_Float(string, dOr[i][xOr]);
	    format(string, sizeof(string), "yOr%d", i);
		INI_Float(string, dOr[i][yOr]);
	    format(string, sizeof(string), "zOr%d", i);
		INI_Float(string, dOr[i][zOr]);
	}
	return 1;
}

SaveGold()
{
	new string[50];
	new INI:File = INI_Open(GOLDPATH);
	INI_SetTag(File, "data");
	for(new i = 0; i < MAX_GOLD_INGOTS; i ++)
	{
	    format(string, sizeof(string), "Or%d", i);
		INI_WriteInt(File,string, dOr[i][dOrAmount]);
	    format(string, sizeof(string), "xOr%d", i);
		INI_WriteFloat(File,string, dOr[i][xOr]);
	    format(string, sizeof(string), "yOr%d", i);
		INI_WriteFloat(File,string, dOr[i][yOr]);
	    format(string, sizeof(string), "zOr%d", i);
		INI_WriteFloat(File,string, dOr[i][zOr]);
	}
	INI_Close(File);
}

CreateGoldIngot(amount, Float:x, Float:y, Float:z, load = -1)
{

	static slotid;
	if(amount != 0)
	{
		if(load == -1 && dOr[slotid][dOrAmount] != 0)
		{
		    for(new i = 0; i < MAX_GOLD_INGOTS; i ++)
		    {
		        if(dOr[i][dOrAmount] == 0)
		        {
		            slotid = i;
		            break;
		        }
		    }
		}
		if(load == -1 && dOr[slotid][dOrAmount] != 0)
		{
			DestroyDynamicObject(dOr[slotid][oOr]);
			DestroyDynamic3DTextLabel(dOr[slotid][OrText]);
		}
		new string[10];
	 	dOr[(load == -1) ? slotid : load][oOr] = CreateDynamicObject(19941, x, y, z - 1.0, 0.0, 0.0, floatrand(0.0, 360.0), -1, -1, -1, 25.0, 20.0);
	    dOr[(load == -1) ? slotid : load][dOrAmount] = amount;
		dOr[(load == -1) ? slotid : load][xOr] = x;
		dOr[(load == -1) ? slotid : load][yOr] = y;
		dOr[(load == -1) ? slotid : load][zOr] = z;
		format(string, sizeof(string), "%.1f g", floatdiv(amount, 10));
	    dOr[(load == -1) ? slotid : load][OrText] = CreateDynamic3DTextLabel(string, 0xFFD700FF, x, y, z - 1.0, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 3.5);
    }
	slotid ++;
	if(slotid == MAX_GOLD_INGOTS) slotid = 0;
    return (slotid == 0) ? MAX_GOLD_INGOTS : slotid - 1;
	
}
DestroyGold(goldid)
{
	DestroyDynamicObject(dOr[goldid][oOr]);
	dOr[goldid][oOr] = INVALID_OBJECT_ID;
	dOr[goldid][dOrAmount] = 0;
	dOr[goldid][xOr] = 0.0;
	dOr[goldid][yOr] = 0.0;
	dOr[goldid][zOr] = 0.0;
	DestroyDynamic3DTextLabel(dOr[goldid][OrText]);
	dOr[goldid][OrText] = Text3D:INVALID_3DTEXT_ID;
}
#endif
PlayerDropGold(playerid, amount, Float:distance)//Fonction pour faire qu'un lingot soit drop par un joueur
{
	if(!FCNPC_IsValid(playerid)) ApplyAnimation(playerid, "GRENADE", "WEAPON_throwu", 4.0, 0, 0, 0, 0, 0, 1);//La seule fois où un NPC peut drop, c'est quand il meurt, donc on ne met l'animation que si c'est un joueur vivant
	//---
	new Float:x, Float:y, Float:z, Float:a, Float:x2, Float:y2, Float:z2;
	GetPlayerPos(playerid, x, y, z);//On prend la position du joueur
	GetPlayerFacingAngle(playerid, a);//...et son angle
	a += floatrand(-45.0, 45.0);//On ajoute un nombre random pour la direction
	x2 = x, y2 = y, z2 = z;//On donne la même valeur aux deux groupes de variables
	GetXYInFrontOfPoint(x2, y2, a, distance);//Et on prend la position dans la distance donnée
	//---
	new dFound = CA_RayCastLine(x, y, z, x2, y2, z2, x, y, z);//On regarde si le joueur ne va pas balancer le truc dans le mur
	//---
	if(dFound == 0)
	{
		swapfloat(x, x2);
		swapfloat(y, y2);
		swapfloat(z, z2);
	}
	//---
	CA_RayCastLine(x, y, z, x, y, z - 500.0, x2, y2, z2);//On regarde où est le sol à partir de la nouvelle position
	new gold[Or];
	memcpy(gold, CreateGoldIngot(amount, x2, y2, z2 + 1.0), 0, sizeof(gold));//On crée le lingot, là, au sol
	Streamer_Update(playerid);//On actualise le streamer pour que l'objet soit vu en train de tomber
	//---
	SetDynamicObjectPos(gold[oOr], x, y, z);//On remonte l'objet à hauteur du joueur
	MoveDynamicObject(gold[oOr], x2, y2, z2, 10.0);//Et on le fait tomber vers le sol
}


//---MÉCANICIEN
IsPlayerNearMechanic(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 3.5, 2443.8588, -1674.453, 13.527)) return 0;//Mécanicien Grove St.
	else if(IsPlayerInRangeOfPoint(playerid, 3.5, -26.5084, -227.0425, 5.4297)) return 1;//Blueberry
	return -1;
}

//---DOCTEURS---//
new bool:bHeal[MAX_PLAYERS];
IsPlayerNearDoctor(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 3.5, 939.9223, 2431.6440, 12.0331)) return 0;//Docteur LV Nord
	else if(IsPlayerInRangeOfPoint(playerid, 3.5, -11.0567, -370.3130, 5.4297)) return 1;//Blueberry
	return -1;
}

HealPlayer(playerid)
{
    bHeal[playerid] = true;
	TogglePlayerControllable(playerid, false);
	SetCameraBehindPlayer(playerid);
	SetTimerEx("HealPlayerid", 1000, false, "ii", playerid, 0);
}

public HealPlayerid(playerid, step)
{
	switch(step)
	{
	    case 0, 1, 2:
	    {
			ShowRedScreen(playerid);
			SetTimerEx("HealPlayerid", 1000, false, "ii", playerid, step + 1);
	    }
	    case 3:
	    {
	    	ApplyAnimation(playerid,"FAT","IDLE_tired", 4.0, 0, 0, 0, 0, 0);
	    	pPlayerInfos[playerid][bLeg] = true;
	    	pPlayerInfos[playerid][bHemorragie] = false;
	    	UpdateInfo(playerid, 8);
	    	UpdateInfo(playerid, 9);
			SetHealthForPlayer(playerid, 1000, REASON_HEAL);
			TogglePlayerControllable(playerid, true);
    		bHeal[playerid] = false;
    		ShowPlayerTextInfo(playerid, 3000, "You're healed.", "Vous êtes soigné.", "Esta curado.", "Portugais", "Italien", "Allemand");
	    }
	}
}

public RespawnPlayer(playerid)
{
	SetSpawnInfo(playerid, 0, (pPlayerInfos[playerid][pSkin] > 311) ? 252 : pPlayerInfos[playerid][pSkin], 0.0, 0.0, 3.0, 0.0, 0, 0, 0, 0, 0, 0);
 	SpawnPlayer(playerid);
}

//---COMPÉTENCES---//
new pSkill[MAX_PLAYERS];
ShowPlayerSkills(playerid)
{
	new string[1024];
	switch(pPlayerInfos[playerid][pLangue])//On l'affiche dans la bonne langue...
	{
		case LANGUAGE_EN:
		{
			format(string, sizeof(string), "{FFFFFF}Butcher: {33AA33}%d{FFFFFF}/{33AA33}%d\n\
			{FFFFFF}Doctor: {33AA33}%d{FFFFFF}/{33AA33}%d\n\
			{FFFFFF}Healthy: {33AA33}%d{FFFFFF}/{33AA33}%d\n\
			{FFFFFF}Craftsman: {33AA33}%d{FFFFFF}/{33AA33}%d\n\
			{FFFFFF}Transporter: {33AA33}%d{FFFFFF}/{33AA33}%d\n\
			{FFFFFF}Fisherman: {33AA33}%d{FFFFFF}/{33AA33}%d\n\
			{FFFFFF}Mechanics: {33AA33}%d{FFFFFF}/{33AA33}%d\n\
			{FFFFFF}Farmer: {33AA33}%d{FFFFFF}/{33AA33}%d\n\
			{FFFFFF}Athlete: {33AA33}%d{FFFFFF}/{33AA33}%d\n\
			{FFFFFF}Survivor: {33AA33}%d{FFFFFF}/{33AA33}%d\n\
			{FFFFFF}Tank: {33AA33}%d{FFFFFF}/{33AA33}%d\n\
			{FFFFFF}Bomberman: {33AA33}%d{FFFFFF}/{33AA33}%d\n\
			{FFFFFF}Hydratation: {33AA33}%d{FFFFFF}/{33AA33}%d", \
			pPlayerInfos[playerid][dBoucher], BUTCHER, pPlayerInfos[playerid][dMedecine], DOCTOR, pPlayerInfos[playerid][dSante], HEALTH, \
			pPlayerInfos[playerid][dArtisan], CRAFTER, pPlayerInfos[playerid][dTransporteur], TRANSPORTER, pPlayerInfos[playerid][dPecheur], FISHERMAN, \
			pPlayerInfos[playerid][dMecano], MECANIC, pPlayerInfos[playerid][dJardinier], FARMER, pPlayerInfos[playerid][dAthlete], ATHLETE, \
			pPlayerInfos[playerid][dSurvivaliste], SURVIVOR, pPlayerInfos[playerid][dTank], TANK, pPlayerInfos[playerid][dBomberman], BOMBERMAN, \
			pPlayerInfos[playerid][dHydra], HYDRATATION);
			ShowPlayerDialog(playerid, 34, DIALOG_STYLE_LIST, "Skills", string, "See", "Close");
		}
		case LANGUAGE_FR:
		{
			format(string, sizeof(string), "{FFFFFF}Boucher: {33AA33}%d{FFFFFF}/{33AA33}%d\n\
			{FFFFFF}Médecin: {33AA33}%d{FFFFFF}/{33AA33}%d\n\
			{FFFFFF}Santé: {33AA33}%d{FFFFFF}/{33AA33}%d\n\
			{FFFFFF}Artisan: {33AA33}%d{FFFFFF}/{33AA33}%d\n\
			{FFFFFF}Transporteur: {33AA33}%d{FFFFFF}/{33AA33}%d\n\
			{FFFFFF}Pêcheur: {33AA33}%d{FFFFFF}/{33AA33}%d\n\
			{FFFFFF}Mécano: {33AA33}%d{FFFFFF}/{33AA33}%d\n\
			{FFFFFF}Jardinier: {33AA33}%d{FFFFFF}/{33AA33}%d\n\
			{FFFFFF}Athlète: {33AA33}%d{FFFFFF}/{33AA33}%d\n\
			{FFFFFF}Survivaliste: {33AA33}%d{FFFFFF}/{33AA33}%d\n\
			{FFFFFF}Tank: {33AA33}%d{FFFFFF}/{33AA33}%d\n\
			{FFFFFF}Bomberman: {33AA33}%d{FFFFFF}/{33AA33}%d\n\
			{FFFFFF}Hydratation: {33AA33}%d{FFFFFF}/{33AA33}%d", \
			pPlayerInfos[playerid][dBoucher], BUTCHER, pPlayerInfos[playerid][dMedecine], DOCTOR, pPlayerInfos[playerid][dSante], HEALTH, \
			pPlayerInfos[playerid][dArtisan], CRAFTER, pPlayerInfos[playerid][dTransporteur], TRANSPORTER, pPlayerInfos[playerid][dPecheur], FISHERMAN, \
			pPlayerInfos[playerid][dMecano], MECANIC, pPlayerInfos[playerid][dJardinier], FARMER, pPlayerInfos[playerid][dAthlete], ATHLETE, \
			pPlayerInfos[playerid][dSurvivaliste], SURVIVOR, pPlayerInfos[playerid][dTank], TANK, pPlayerInfos[playerid][dBomberman], BOMBERMAN, \
			pPlayerInfos[playerid][dHydra], HYDRATATION);
			ShowPlayerDialog(playerid, 34, DIALOG_STYLE_LIST, "Compétences", string, "Voir", "Fermer");
		}
   		case LANGUAGE_ES:
		{
			ShowPlayerDialog(playerid, 34, DIALOG_STYLE_LIST, "Espagnol", "Espagnol", "See", "Close");
		}
   		case LANGUAGE_PG:
		{
			ShowPlayerDialog(playerid, 34, DIALOG_STYLE_LIST, "Portugais", "Portugais", "See", "Close");
		}
		case LANGUAGE_IT:
		{
			ShowPlayerDialog(playerid, 34, DIALOG_STYLE_LIST, "Italien", "Italien", "See", "Close");
		}
		case LANGUAGE_DE:
		{
			ShowPlayerDialog(playerid, 34, DIALOG_STYLE_LIST, "Allemand", "Allemand", "See", "Close");
		}
	}
	return 1;
}

//---HDV---//
new pHDVSale[MAX_PLAYERS][3];
new pHDV[MAX_PLAYERS][2];
enum ItemForSale
{
	dItemSale,//ID de l'objet
	dItemPrice,//Prix
	dSalesID,//
	sSalesman[MAX_PLAYER_NAME + 1],
	dTimeLeft
}

new dAuctionSellerTool[MAX_AUCTION_ITEMS][ItemForSale];
new dAuctionSellerMedic[MAX_AUCTION_ITEMS][ItemForSale];
new dAuctionSellerWeapon[MAX_AUCTION_ITEMS][ItemForSale];
new dAuctionSellerOther[MAX_AUCTION_ITEMS][ItemForSale];
new dAuctionSellerVehicle[MAX_AUCTION_ITEMS][ItemForSale];
new dAuctionSellerClothes[MAX_AUCTION_ITEMS][ItemForSale];
new dAuctionSellerFood[MAX_AUCTION_ITEMS][ItemForSale];
new dAuctionSellerRessource[MAX_AUCTION_ITEMS][ItemForSale];

new PlayerText:tHDVCats[MAX_PLAYERS][8];
new PlayerText:tHDVItem[MAX_PLAYERS][2];
new Text:tHDVButtons[3] = {Text:INVALID_TEXT_DRAW, ...};

CreateHDV()
{
	tHDVButtons[0] = TextDrawCreate(270.000000, 265.000000, "<");
	TextDrawBackgroundColor(tHDVButtons[0], 255);
	TextDrawFont(tHDVButtons[0], 2);
	TextDrawLetterSize(tHDVButtons[0], 0.800000, 3.000000);
	TextDrawColor(tHDVButtons[0], -1);
	TextDrawSetOutline(tHDVButtons[0], 1);
	TextDrawSetProportional(tHDVButtons[0], 1);
	TextDrawTextSize(tHDVButtons[0], 295.000000, 20.000000);
	TextDrawSetSelectable(tHDVButtons[0], true);
	//---
	tHDVButtons[1] = TextDrawCreate(375.000000, 265.000000, ">");
	TextDrawBackgroundColor(tHDVButtons[1], 255);
	TextDrawFont(tHDVButtons[1], 2);
	TextDrawLetterSize(tHDVButtons[1], 0.800000, 3.000000);
	TextDrawColor(tHDVButtons[1], -1);
	TextDrawSetOutline(tHDVButtons[1], 1);
	TextDrawSetProportional(tHDVButtons[1], 1);
	TextDrawTextSize(tHDVButtons[1], 400.000000, 20.000000);
	TextDrawSetSelectable(tHDVButtons[1], true);
	//---
	tHDVButtons[2] = TextDrawCreate(325.000000, 276.000000, "LD_CHAT:thumbup");
	TextDrawBackgroundColor(tHDVButtons[2], 255);
	TextDrawFont(tHDVButtons[2], 4);
	TextDrawLetterSize(tHDVButtons[2], -0.399999, 6.000000);
	TextDrawColor(tHDVButtons[2], 8388761);
	TextDrawSetOutline(tHDVButtons[2], 1);
	TextDrawSetProportional(tHDVButtons[2], 1);
	TextDrawUseBox(tHDVButtons[2], 1);
	TextDrawBoxColor(tHDVButtons[2], 0);
	TextDrawTextSize(tHDVButtons[2], 20.000000, 20.000000);
	TextDrawSetSelectable(tHDVButtons[2], true);

}

CreatePlayerHDV(playerid)
{
	tHDVCats[playerid][0] = CreatePlayerTextDraw(playerid, 180.000000, 150.000000, "Outils");
	PlayerTextDrawBackgroundColor(playerid, tHDVCats[playerid][0], 255);
	PlayerTextDrawFont(playerid, tHDVCats[playerid][0], 2);
	PlayerTextDrawLetterSize(playerid, tHDVCats[playerid][0], 0.300000, 1.000000);
	PlayerTextDrawColor(playerid, tHDVCats[playerid][0], -335544167);
	PlayerTextDrawSetOutline(playerid, tHDVCats[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, tHDVCats[playerid][0], 1);
	PlayerTextDrawUseBox(playerid, tHDVCats[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, tHDVCats[playerid][0], 153);
	PlayerTextDrawTextSize(playerid, tHDVCats[playerid][0], 270.000000, 10.000000);
	PlayerTextDrawSetSelectable(playerid, tHDVCats[playerid][0], true);
	//---
	tHDVCats[playerid][1] = CreatePlayerTextDraw(playerid, 180.000000, 163.000000, "Medecine");
	PlayerTextDrawBackgroundColor(playerid, tHDVCats[playerid][1], 255);
	PlayerTextDrawFont(playerid, tHDVCats[playerid][1], 2);
	PlayerTextDrawLetterSize(playerid, tHDVCats[playerid][1], 0.300000, 1.000000);
	PlayerTextDrawColor(playerid, tHDVCats[playerid][1], -103);
	PlayerTextDrawSetOutline(playerid, tHDVCats[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, tHDVCats[playerid][1], 1);
	PlayerTextDrawUseBox(playerid, tHDVCats[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, tHDVCats[playerid][1], 153);
	PlayerTextDrawTextSize(playerid, tHDVCats[playerid][1], 270.000000, 10.000000);
	PlayerTextDrawSetSelectable(playerid, tHDVCats[playerid][1], true);
	//---
	tHDVCats[playerid][2] = CreatePlayerTextDraw(playerid, 180.000000, 176.000000, "Armes");
	PlayerTextDrawBackgroundColor(playerid, tHDVCats[playerid][2], 255);
	PlayerTextDrawFont(playerid, tHDVCats[playerid][2], 2);
	PlayerTextDrawLetterSize(playerid, tHDVCats[playerid][2], 0.300000, 1.000000);
	PlayerTextDrawColor(playerid, tHDVCats[playerid][2], -103);
	PlayerTextDrawSetOutline(playerid, tHDVCats[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, tHDVCats[playerid][2], 1);
	PlayerTextDrawUseBox(playerid, tHDVCats[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, tHDVCats[playerid][2], 153);
	PlayerTextDrawTextSize(playerid, tHDVCats[playerid][2], 270.000000, 10.000000);
	PlayerTextDrawSetSelectable(playerid, tHDVCats[playerid][2], true);
	//---
	tHDVCats[playerid][3] = CreatePlayerTextDraw(playerid, 180.000000, 189.000000, "Autres");
	PlayerTextDrawBackgroundColor(playerid, tHDVCats[playerid][3], 255);
	PlayerTextDrawFont(playerid, tHDVCats[playerid][3], 2);
	PlayerTextDrawLetterSize(playerid, tHDVCats[playerid][3], 0.300000, 1.000000);
	PlayerTextDrawColor(playerid, tHDVCats[playerid][3], -103);
	PlayerTextDrawSetOutline(playerid, tHDVCats[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, tHDVCats[playerid][3], 1);
	PlayerTextDrawUseBox(playerid, tHDVCats[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, tHDVCats[playerid][3], 153);
	PlayerTextDrawTextSize(playerid, tHDVCats[playerid][3], 270.000000, 10.000000);
	PlayerTextDrawSetSelectable(playerid, tHDVCats[playerid][3], true);
	//---
	tHDVCats[playerid][4] = CreatePlayerTextDraw(playerid, 180.000000, 202.000000, "Vehicules");
	PlayerTextDrawBackgroundColor(playerid, tHDVCats[playerid][4], 255);
	PlayerTextDrawFont(playerid, tHDVCats[playerid][4], 2);
	PlayerTextDrawLetterSize(playerid, tHDVCats[playerid][4], 0.300000, 1.000000);
	PlayerTextDrawColor(playerid, tHDVCats[playerid][4], -103);
	PlayerTextDrawSetOutline(playerid, tHDVCats[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, tHDVCats[playerid][4], 1);
	PlayerTextDrawUseBox(playerid, tHDVCats[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, tHDVCats[playerid][4], 153);
	PlayerTextDrawTextSize(playerid, tHDVCats[playerid][4], 270.000000, 10.000000);
	PlayerTextDrawSetSelectable(playerid, tHDVCats[playerid][4], true);
	//---
	tHDVCats[playerid][5] = CreatePlayerTextDraw(playerid, 180.000000, 215.000000, "Vetements");
	PlayerTextDrawBackgroundColor(playerid, tHDVCats[playerid][5], 255);
	PlayerTextDrawFont(playerid, tHDVCats[playerid][5], 2);
	PlayerTextDrawLetterSize(playerid, tHDVCats[playerid][5], 0.300000, 1.000000);
	PlayerTextDrawColor(playerid, tHDVCats[playerid][5], -103);
	PlayerTextDrawSetOutline(playerid, tHDVCats[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, tHDVCats[playerid][5], 1);
	PlayerTextDrawUseBox(playerid, tHDVCats[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, tHDVCats[playerid][5], 153);
	PlayerTextDrawTextSize(playerid, tHDVCats[playerid][5], 270.000000, 10.000000);
	PlayerTextDrawSetSelectable(playerid, tHDVCats[playerid][5], true);
	//---
	tHDVCats[playerid][6] = CreatePlayerTextDraw(playerid, 180.000000, 228.000000, "Nourriture");
	PlayerTextDrawBackgroundColor(playerid, tHDVCats[playerid][6], 255);
	PlayerTextDrawFont(playerid, tHDVCats[playerid][6], 2);
	PlayerTextDrawLetterSize(playerid, tHDVCats[playerid][6], 0.300000, 1.000000);
	PlayerTextDrawColor(playerid, tHDVCats[playerid][6], -103);
	PlayerTextDrawSetOutline(playerid, tHDVCats[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, tHDVCats[playerid][6], 1);
	PlayerTextDrawUseBox(playerid, tHDVCats[playerid][6], 1);
	PlayerTextDrawBoxColor(playerid, tHDVCats[playerid][6], 153);
	PlayerTextDrawTextSize(playerid, tHDVCats[playerid][6], 270.000000, 10.000000);
	PlayerTextDrawSetSelectable(playerid, tHDVCats[playerid][6], true);
	//---
	tHDVCats[playerid][7] = CreatePlayerTextDraw(playerid, 180.000000, 241.000000, "Ressources");
	PlayerTextDrawBackgroundColor(playerid, tHDVCats[playerid][7], 255);
	PlayerTextDrawFont(playerid, tHDVCats[playerid][7], 2);
	PlayerTextDrawLetterSize(playerid, tHDVCats[playerid][7], 0.300000, 1.000000);
	PlayerTextDrawColor(playerid, tHDVCats[playerid][7], -103);
	PlayerTextDrawSetOutline(playerid, tHDVCats[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, tHDVCats[playerid][7], 1);
	PlayerTextDrawUseBox(playerid, tHDVCats[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid, tHDVCats[playerid][7], 153);
	PlayerTextDrawTextSize(playerid, tHDVCats[playerid][7], 270.000000, 10.000000);
	PlayerTextDrawSetSelectable(playerid, tHDVCats[playerid][7], true);
	//---
	tHDVItem[playerid][0] = CreatePlayerTextDraw(playerid, 272.000000, 148.000000, "Objet");
	PlayerTextDrawBackgroundColor(playerid, tHDVItem[playerid][0], 153);
	PlayerTextDrawFont(playerid, tHDVItem[playerid][0], 5);
	PlayerTextDrawLetterSize(playerid, tHDVItem[playerid][0], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, tHDVItem[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, tHDVItem[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, tHDVItem[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, tHDVItem[playerid][0], 1);
	PlayerTextDrawUseBox(playerid, tHDVItem[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, tHDVItem[playerid][0], 153);
	PlayerTextDrawTextSize(playerid, tHDVItem[playerid][0], 120.000000, 120.000000);
	PlayerTextDrawSetPreviewModel(playerid, tHDVItem[playerid][0], 18888);
	PlayerTextDrawSetPreviewRot(playerid, tHDVItem[playerid][0], 0.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, tHDVItem[playerid][0], false);
	//---
	tHDVItem[playerid][1] = CreatePlayerTextDraw(playerid, 280.000000, 150.000000, "Prix");
	PlayerTextDrawBackgroundColor(playerid, tHDVItem[playerid][1], 255);
	PlayerTextDrawFont(playerid, tHDVItem[playerid][1], 2);
	PlayerTextDrawLetterSize(playerid, tHDVItem[playerid][1], 0.300000, 1.000000);
	PlayerTextDrawColor(playerid, tHDVItem[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid, tHDVItem[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, tHDVItem[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, tHDVItem[playerid][1], false);
}

ShowPlayerAuctionHouse(playerid)
{
	CreatePlayerHDV(playerid);
	pHDV[playerid][0] = 8;
	pHDV[playerid][1] = 0;
	SetPlayerAuctionHouse(playerid, 8, 0);
	TextDrawShowForPlayer(playerid, tHDVButtons[0]);
	TextDrawShowForPlayer(playerid, tHDVButtons[1]);
	TextDrawShowForPlayer(playerid, tHDVButtons[2]);
	SelectTextDraw(playerid, VERT);
}

HidePlayerAuctionHouse(playerid)
{
	pHDV[playerid][0] = -1;
	pHDV[playerid][1] = -1;
	TextDrawHideForPlayer(playerid, tHDVButtons[0]);
	TextDrawHideForPlayer(playerid, tHDVButtons[1]);
	TextDrawHideForPlayer(playerid, tHDVButtons[2]);
	PlayerTextDrawHide(playerid, tHDVItem[playerid][0]);
	PlayerTextDrawHide(playerid, tHDVItem[playerid][1]);
	PlayerTextDrawDestroy(playerid, tHDVItem[playerid][0]);
	PlayerTextDrawDestroy(playerid, tHDVItem[playerid][1]);
	tHDVItem[playerid][0] = PlayerText:INVALID_TEXT_DRAW;
	tHDVItem[playerid][1] = PlayerText:INVALID_TEXT_DRAW;
	for(new i = 0; i < 8; i ++)
	{
		PlayerTextDrawHide(playerid, tHDVCats[playerid][i]);
		PlayerTextDrawDestroy(playerid, tHDVCats[playerid][i]);
		tHDVCats[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
	}
	CancelSelectTextDraw(playerid);
}

SetPlayerAuctionHouse(playerid, category, item)
{
	if(category == 8)
	{
	    pHDV[playerid][0] = 8;
        pHDV[playerid][1] = 0;
	    UpdatePlayerAuctionHouse(playerid, 8, 0);
	    return true;
	}
 	new i = 0;
 	new slot = -1;
	if(category != pHDV[playerid][0])
	{
		switch(category)
		{
			case 0:
			{
				for(i = 0; i < MAX_AUCTION_ITEMS; i ++) if(dAuctionSellerTool[i][dItemSale] != 0)
				{
					slot = i;
					break;
				}
				if(slot == -1) return false;
			}
			case 1:
			{
				for(i = 0; i < MAX_AUCTION_ITEMS; i ++) if(dAuctionSellerMedic[i][dItemSale] != 0)
				{
					slot = i;
					break;
				}
				if(slot == -1) return false;
			}
			case 2:
			{
				for(i = 0; i < MAX_AUCTION_ITEMS; i ++) if(dAuctionSellerWeapon[i][dItemSale] != 0)
				{
					slot = i;
					break;
				}
				if(slot == -1) return false;
			}
			case 3:
			{
				for(i = 0; i < MAX_AUCTION_ITEMS; i ++) if(dAuctionSellerOther[i][dItemSale] != 0)
				{
					slot = i;
					break;
				}
				if(slot == -1) return false;
			}
			case 4:
			{
				for(i = 0; i < MAX_AUCTION_ITEMS; i ++) if(dAuctionSellerVehicle[i][dItemSale] != 0)
				{
					slot = i;
					break;
				}
				if(slot == -1) return false;
			}
			case 5:
			{
				for(i = 0; i < MAX_AUCTION_ITEMS; i ++) if(dAuctionSellerClothes[i][dItemSale] != 0)
				{
					slot = i;
					break;
				}
				if(slot == -1) return false;
			}
			case 6:
			{
				for(i = 0; i < MAX_AUCTION_ITEMS; i ++) if(dAuctionSellerFood[i][dItemSale] != 0)
				{
					slot = i;
					break;
				}
				if(slot == -1) return false;
			}
			case 7:
			{
				for(i = 0; i < MAX_AUCTION_ITEMS; i ++) if(dAuctionSellerRessource[i][dItemSale] != 0)
				{
					slot = i;
					break;
				}
				if(slot == -1) return false;
			}
	    }
	}
	slot = pHDV[playerid][1];
	switch(category)
	{
		case 0:
		{
			do
			{
				slot += item;
				if(item == 1 && slot == MAX_AUCTION_ITEMS) slot = 0;
				else if(item == -1 && slot == -1) slot = MAX_AUCTION_ITEMS - 1;
			}
			while(dAuctionSellerTool[slot][dItemSale] == 0);
			if(pHDV[playerid][1] == slot && category == pHDV[playerid][0]) return false;
			else pHDV[playerid][1] = slot;
		}
		case 1:
		{
			do
			{
				slot += item;
				if(item == 1 && slot == MAX_AUCTION_ITEMS) slot = 0;
				else if(item == -1 && slot == -1) slot = MAX_AUCTION_ITEMS - 1;
			}
			while(dAuctionSellerMedic[slot][dItemSale] == 0);
			if(pHDV[playerid][1] == slot && category == pHDV[playerid][0]) return false;
			else pHDV[playerid][1] = slot;
		}
		case 2:
		{
			do
			{
				slot += item;
				if(item == 1 && slot == MAX_AUCTION_ITEMS) slot = 0;
				else if(item == -1 && slot == -1) slot = MAX_AUCTION_ITEMS - 1;
			}
			while(dAuctionSellerWeapon[slot][dItemSale] == 0);
			if(pHDV[playerid][1] == slot && category == pHDV[playerid][0]) return false;
			else pHDV[playerid][1] = slot;
		}
		case 3:
		{
			do
			{
				slot += item;
				if(item == 1 && slot == MAX_AUCTION_ITEMS) slot = 0;
				else if(item == -1 && slot == -1) slot = MAX_AUCTION_ITEMS - 1;
			}
			while(dAuctionSellerOther[slot][dItemSale] == 0);
			if(pHDV[playerid][1] == slot && category == pHDV[playerid][0]) return false;
			else pHDV[playerid][1] = slot;
		}
		case 4:
		{
			do
			{
				slot += item;
				if(item == 1 && slot == MAX_AUCTION_ITEMS) slot = 0;
				else if(item == -1 && slot == -1) slot = MAX_AUCTION_ITEMS - 1;
			}
			while(dAuctionSellerVehicle[slot][dItemSale] == 0);
			if(pHDV[playerid][1] == slot && category == pHDV[playerid][0]) return false;
			else pHDV[playerid][1] = slot;
		}
		case 5:
		{
			do
			{
				slot += item;
				if(item == 1 && slot == MAX_AUCTION_ITEMS) slot = 0;
				else if(item == -1 && slot == -1) slot = MAX_AUCTION_ITEMS - 1;
			}
			while(dAuctionSellerClothes[slot][dItemSale] == 0);
			if(pHDV[playerid][1] == slot && category == pHDV[playerid][0]) return false;
			else pHDV[playerid][1] = slot;
		}
		case 6:
		{
			do
			{
				slot += item;
				if(item == 1 && slot == MAX_AUCTION_ITEMS) slot = 0;
				else if(item == -1 && slot == -1) slot = MAX_AUCTION_ITEMS - 1;
			}
			while(dAuctionSellerFood[slot][dItemSale] == 0);
			if(pHDV[playerid][1] == slot && category == pHDV[playerid][0]) return false;
			else pHDV[playerid][1] = slot;
		}
		case 7:
		{
			do
			{
				slot += item;
				if(item == 1 && slot == MAX_AUCTION_ITEMS) slot = 0;
				else if(item == -1 && slot == -1) slot = MAX_AUCTION_ITEMS - 1;
			}
			while(dAuctionSellerRessource[slot][dItemSale] == 0);
			if(pHDV[playerid][1] == slot && category == pHDV[playerid][0]) return false;
			else pHDV[playerid][1] = slot;
		}
	}
	pHDV[playerid][0] = category;
	UpdatePlayerAuctionHouse(playerid, pHDV[playerid][0], pHDV[playerid][1]);
	return true;
}

UpdatePlayerAuctionHouse(playerid, category, item)
{
	new string[128];
	new dAuctionInfos[2];
	//---MENU---//
	for(new i = 0; i < 8; i ++)
	{
	    if(pHDV[playerid][0] != i) PlayerTextDrawColor(playerid, tHDVCats[playerid][i], 0xFFFFFF99);
	    else PlayerTextDrawColor(playerid, tHDVCats[playerid][i], 0xCC000099);
		PlayerTextDrawShow(playerid, tHDVCats[playerid][i]);
	}
	//---
	if(category == 8)
	{
		PlayerTextDrawSetPreviewModel(playerid, tHDVItem[playerid][0], 18888);
		PlayerTextDrawSetPreviewRot(playerid, tHDVItem[playerid][0], 0.0, 0.0, 0.0, 1.0);
		PlayerTextDrawSetString(playerid, tHDVItem[playerid][1], " ");
		//---
		PlayerTextDrawShow(playerid, tHDVItem[playerid][0]);
		PlayerTextDrawShow(playerid, tHDVItem[playerid][1]);
	}
	else
	{
		switch(pHDV[playerid][0])
		{
			case 0: dAuctionInfos[0] = dAuctionSellerTool[item][dItemSale], dAuctionInfos[1] = dAuctionSellerTool[item][dItemPrice];
			case 1: dAuctionInfos[0] = dAuctionSellerMedic[item][dItemSale], dAuctionInfos[1] = dAuctionSellerMedic[item][dItemPrice];
			case 2: dAuctionInfos[0] = dAuctionSellerWeapon[item][dItemSale], dAuctionInfos[1] = dAuctionSellerWeapon[item][dItemPrice];
			case 3: dAuctionInfos[0] = dAuctionSellerOther[item][dItemSale], dAuctionInfos[1] = dAuctionSellerOther[item][dItemPrice];
			case 4: dAuctionInfos[0] = dAuctionSellerVehicle[item][dItemSale], dAuctionInfos[1] = dAuctionSellerVehicle[item][dItemPrice];
			case 5: dAuctionInfos[0] = dAuctionSellerClothes[item][dItemSale], dAuctionInfos[1] = dAuctionSellerClothes[item][dItemPrice];
			case 6: dAuctionInfos[0] = dAuctionSellerFood[item][dItemSale], dAuctionInfos[1] = dAuctionSellerFood[item][dItemPrice];
			case 7: dAuctionInfos[0] = dAuctionSellerRessource[item][dItemSale], dAuctionInfos[1] = dAuctionSellerRessource[item][dItemPrice];
		}
		//---
		PlayerTextDrawSetPreviewModel(playerid, tHDVItem[playerid][0], aObjects[dAuctionInfos[0]][ObjectModelID]);
		PlayerTextDrawSetPreviewRot(playerid, tHDVItem[playerid][0], aObjects[dAuctionInfos[0]][ObjectRotX], aObjects[dAuctionInfos[0]][ObjectRotY], aObjects[dAuctionInfos[0]][ObjectRotZ], aObjects[dAuctionInfos[0]][ObjectZoom]);
		//---
		switch(GetPlayerLanguage(playerid))
		{
		    case LANGUAGE_EN: format(string, sizeof(string), "%s~n~Price: %.1fg", aObjects[dAuctionInfos[0]][ObjectEnName], floatdiv(dAuctionInfos[1], 10));
		    case LANGUAGE_FR: format(string, sizeof(string), "%s~n~Prix: %.1fg", aObjects[dAuctionInfos[0]][ObjectFrName], floatdiv(dAuctionInfos[1], 10));
		    case LANGUAGE_ES: format(string, sizeof(string), "%s~n~Precio: %.1fg", aObjects[dAuctionInfos[0]][ObjectEsName], floatdiv(dAuctionInfos[1], 10));
		    case LANGUAGE_PG: format(string, sizeof(string), "%s~n~Portugais: %.1fg", aObjects[dAuctionInfos[0]][ObjectPgName], floatdiv(dAuctionInfos[1], 10));
		    case LANGUAGE_IT: format(string, sizeof(string), "%s~n~Italien: %.1fg", aObjects[dAuctionInfos[0]][ObjectItName], floatdiv(dAuctionInfos[1], 10));
		    case LANGUAGE_DE: format(string, sizeof(string), "%s~n~Preis: %.1fg", aObjects[dAuctionInfos[0]][ObjectDeName], floatdiv(dAuctionInfos[1], 10));
		}
		PlayerTextDrawSetString(playerid, tHDVItem[playerid][1], string);
		//---
		PlayerTextDrawShow(playerid, tHDVItem[playerid][0]);
		PlayerTextDrawShow(playerid, tHDVItem[playerid][1]);
	}
}

AddAuctionHouseItem(playerid, category, item, price, time, slotid = -1)
{
	if(item == 0) return -1;
	//---
    if(slotid == -1)
    {
		for(new i = 0; i < MAX_AUCTION_ITEMS; i ++)
		{
			switch(category)
			{
			    case 0: if(dAuctionSellerTool[i][dItemSale] == 0)
				{
					slotid = i;
					break;
				}
			    case 1: if(dAuctionSellerMedic[i][dItemSale] == 0)
				{
					slotid = i;
					break;
				}
			    case 2: if(dAuctionSellerWeapon[i][dItemSale] == 0)
				{
					slotid = i;
					break;
				}
			    case 3: if(dAuctionSellerOther[i][dItemSale] == 0)
				{
					slotid = i;
					break;
				}
			    case 4: if(dAuctionSellerVehicle[i][dItemSale] == 0)
				{
					slotid = i;
					break;
				}
			    case 5: if(dAuctionSellerClothes[i][dItemSale] == 0)
				{
					slotid = i;
					break;
				}
			    case 6: if(dAuctionSellerFood[i][dItemSale] == 0)
				{
					slotid = i;
					break;
				}
			    case 7: if(dAuctionSellerRessource[i][dItemSale] == 0)
				{
					slotid = i;
					break;
				}
			}
		}
    }
    //---
    if(slotid == -1) return -1;
    //---
    switch(category)
    {
        case 0:
        {
            dAuctionSellerTool[slotid][dItemSale] = item;
            dAuctionSellerTool[slotid][dItemPrice] = price;
            dAuctionSellerTool[slotid][dTimeLeft] = time;
            format(dAuctionSellerTool[slotid][sSalesman], MAX_PLAYER_NAME + 1, GetName(playerid));
        }
        case 1:
        {
            dAuctionSellerMedic[slotid][dItemSale] = item;
            dAuctionSellerMedic[slotid][dItemPrice] = price;
            dAuctionSellerMedic[slotid][dTimeLeft] = time;
            format(dAuctionSellerMedic[slotid][sSalesman], MAX_PLAYER_NAME + 1, "%s", GetName(playerid));
        }
        case 2:
        {
            dAuctionSellerWeapon[slotid][dItemSale] = item;
            dAuctionSellerWeapon[slotid][dItemPrice] = price;
            dAuctionSellerWeapon[slotid][dTimeLeft] = time;
            format(dAuctionSellerWeapon[slotid][sSalesman], MAX_PLAYER_NAME + 1, "%s", GetName(playerid));
        }
        case 3:
        {
            dAuctionSellerOther[slotid][dItemSale] = item;
            dAuctionSellerOther[slotid][dItemPrice] = price;
            dAuctionSellerOther[slotid][dTimeLeft] = time;
            format(dAuctionSellerOther[slotid][sSalesman], MAX_PLAYER_NAME + 1, "%s", GetName(playerid));
        }
        case 4:
        {
            dAuctionSellerVehicle[slotid][dItemSale] = item;
            dAuctionSellerVehicle[slotid][dItemPrice] = price;
            dAuctionSellerVehicle[slotid][dTimeLeft] = time;
            format(dAuctionSellerVehicle[slotid][sSalesman], MAX_PLAYER_NAME + 1, "%s", GetName(playerid));
        }
        case 5:
        {
            dAuctionSellerClothes[slotid][dItemSale] = item;
            dAuctionSellerClothes[slotid][dItemPrice] = price;
            dAuctionSellerClothes[slotid][dTimeLeft] = time;
            format(dAuctionSellerClothes[slotid][sSalesman], MAX_PLAYER_NAME + 1, "%s", GetName(playerid));
        }
        case 6:
        {
            dAuctionSellerFood[slotid][dItemSale] = item;
            dAuctionSellerFood[slotid][dItemPrice] = price;
            dAuctionSellerFood[slotid][dTimeLeft] = time;
            format(dAuctionSellerFood[slotid][sSalesman], MAX_PLAYER_NAME + 1, "%s", GetName(playerid));
        }
        case 7:
        {
            dAuctionSellerRessource[slotid][dItemSale] = item;
            dAuctionSellerRessource[slotid][dItemPrice] = price;
            dAuctionSellerRessource[slotid][dTimeLeft] = time;
            format(dAuctionSellerRessource[slotid][sSalesman], MAX_PLAYER_NAME + 1, "%s", GetName(playerid));
        }
    }
	return slotid;
}

RemoveAuctionHouseItem(category, slotid)
{
	if(slotid == -1) return -1;
	//---
    switch(category)
	{
	    case 0: if(dAuctionSellerTool[slotid][dItemSale] == 0) return 0;
	    case 1: if(dAuctionSellerMedic[slotid][dItemSale] == 0) return 0;
	    case 2: if(dAuctionSellerWeapon[slotid][dItemSale] == 0) return 0;
	    case 3: if(dAuctionSellerOther[slotid][dItemSale] == 0) return 0;
	    case 4: if(dAuctionSellerVehicle[slotid][dItemSale] == 0) return 0;
	    case 5: if(dAuctionSellerClothes[slotid][dItemSale] == 0) return 0;
	    case 6: if(dAuctionSellerFood[slotid][dItemSale] == 0) return 0;
	    case 7: if(dAuctionSellerRessource[slotid][dItemSale] == 0) return 0;
	}
    //---
    switch(category)
    {
        case 0:
        {
            dAuctionSellerTool[slotid][dItemSale] = 0;
            dAuctionSellerTool[slotid][dItemPrice] = 0;
            dAuctionSellerTool[slotid][dTimeLeft] = 0;
            format(dAuctionSellerTool[slotid][sSalesman], MAX_PLAYER_NAME + 1, "N/A");
        }
        case 1:
        {
            dAuctionSellerMedic[slotid][dItemSale] = 0;
            dAuctionSellerMedic[slotid][dItemPrice] = 0;
            dAuctionSellerMedic[slotid][dTimeLeft] = 0;
            format(dAuctionSellerMedic[slotid][sSalesman], MAX_PLAYER_NAME + 1, "N/A");
        }
        case 2:
        {
            dAuctionSellerWeapon[slotid][dItemSale] = 0;
            dAuctionSellerWeapon[slotid][dItemPrice] = 0;
            dAuctionSellerWeapon[slotid][dTimeLeft] = 0;
            format(dAuctionSellerWeapon[slotid][sSalesman], MAX_PLAYER_NAME + 1, "N/A");
        }
        case 3:
        {
            dAuctionSellerOther[slotid][dItemSale] = 0;
            dAuctionSellerOther[slotid][dItemPrice] = 0;
            dAuctionSellerOther[slotid][dTimeLeft] = 0;
            format(dAuctionSellerOther[slotid][sSalesman], MAX_PLAYER_NAME + 1, "N/A");
        }
        case 4:
        {
            dAuctionSellerVehicle[slotid][dItemSale] = 0;
            dAuctionSellerVehicle[slotid][dItemPrice] = 0;
            dAuctionSellerVehicle[slotid][dTimeLeft] = 0;
            format(dAuctionSellerVehicle[slotid][sSalesman], MAX_PLAYER_NAME + 1, "N/A");
        }
        case 5:
        {
            dAuctionSellerClothes[slotid][dItemSale] = 0;
            dAuctionSellerClothes[slotid][dItemPrice] = 0;
            dAuctionSellerClothes[slotid][dTimeLeft] = 0;
            format(dAuctionSellerClothes[slotid][sSalesman], MAX_PLAYER_NAME + 1, "N/A");
        }
        case 6:
        {
            dAuctionSellerFood[slotid][dItemSale] = 0;
            dAuctionSellerFood[slotid][dItemPrice] = 0;
            dAuctionSellerFood[slotid][dTimeLeft] = 0;
            format(dAuctionSellerFood[slotid][sSalesman], MAX_PLAYER_NAME + 1, "N/A");
        }
        case 7:
        {
            dAuctionSellerRessource[slotid][dItemSale] = 0;
            dAuctionSellerRessource[slotid][dItemPrice] = 0;
            dAuctionSellerRessource[slotid][dTimeLeft] = 0;
            format(dAuctionSellerRessource[slotid][sSalesman], MAX_PLAYER_NAME + 1, "N/A");
        }
    }
    return 1;
}

BuyAuctionHouseItem(playerid, category, itemid)
{
	new dPrice, dItemID, sSeller[MAX_PLAYER_NAME + 1];
    switch(category)
    {
        case 0:
        {
    		new dFreeSlot = GetPlayerNextFreeSlot(playerid);
    		if(dFreeSlot == -1) return -2;
            if(!HasPlayerGold(playerid, dAuctionSellerTool[itemid][dItemPrice])) return -1;
			if(dAuctionSellerTool[itemid][dItemSale] == 0) return 0;
            //---
            dPrice = dAuctionSellerTool[itemid][dItemPrice];
            strcpy(sSeller, dAuctionSellerTool[itemid][sSalesman]);
            dItemID = dAuctionSellerTool[itemid][dItemSale];
            //---
    		GivePlayerGold(playerid, -dAuctionSellerTool[itemid][dItemPrice]);
    		GivePlayerSlotObject(playerid, dAuctionSellerTool[itemid][dItemSale], dFreeSlot);
    		PayAuctionSeller(dAuctionSellerTool[itemid][sSalesman], dAuctionSellerTool[itemid][dItemPrice]);
        }
        case 1:
        {
    		new dFreeSlot = GetPlayerNextFreeSlot(playerid);
    		if(dFreeSlot == -1) return -2;
            if(!HasPlayerGold(playerid, dAuctionSellerMedic[itemid][dItemPrice])) return -1;
            if(dAuctionSellerMedic[itemid][dItemSale] == 0) return 0;
            //---
            dPrice = dAuctionSellerMedic[itemid][dItemPrice];
            strcpy(sSeller, dAuctionSellerMedic[itemid][sSalesman]);
            dItemID = dAuctionSellerMedic[itemid][dItemSale];
            //---
    		GivePlayerGold(playerid, -dAuctionSellerMedic[itemid][dItemPrice]);
    		GivePlayerSlotObject(playerid, dAuctionSellerMedic[itemid][dItemSale], dFreeSlot);
    		PayAuctionSeller(dAuctionSellerMedic[itemid][sSalesman], dAuctionSellerMedic[itemid][dItemPrice]);
        }
        case 2:
        {
    		new dFreeSlot = GetPlayerNextFreeSlot(playerid);
    		if(dFreeSlot == -1) return -2;
            if(!HasPlayerGold(playerid, dAuctionSellerWeapon[itemid][dItemPrice])) return -1;
            if(dAuctionSellerWeapon[itemid][dItemSale] == 0) return 0;
            //---
            dPrice = dAuctionSellerWeapon[itemid][dItemPrice];
            strcpy(sSeller, dAuctionSellerWeapon[itemid][sSalesman]);
            dItemID = dAuctionSellerWeapon[itemid][dItemSale];
            //---
    		GivePlayerGold(playerid, -dAuctionSellerWeapon[itemid][dItemPrice]);
    		GivePlayerSlotObject(playerid, dAuctionSellerWeapon[itemid][dItemSale], dFreeSlot);
    		PayAuctionSeller(dAuctionSellerWeapon[itemid][sSalesman], dAuctionSellerWeapon[itemid][dItemPrice]);
        }
        case 3:
        {
    		new dFreeSlot = GetPlayerNextFreeSlot(playerid);
    		if(dFreeSlot == -1) return -2;
            if(!HasPlayerGold(playerid, dAuctionSellerOther[itemid][dItemPrice])) return -1;
            if(dAuctionSellerOther[itemid][dItemSale] == 0) return 0;
            //---
            dPrice = dAuctionSellerOther[itemid][dItemPrice];
            strcpy(sSeller, dAuctionSellerOther[itemid][sSalesman]);
            dItemID = dAuctionSellerOther[itemid][dItemSale];
            //---
    		GivePlayerGold(playerid, -dAuctionSellerOther[itemid][dItemPrice]);
    		GivePlayerSlotObject(playerid, dAuctionSellerOther[itemid][dItemSale], dFreeSlot);
    		PayAuctionSeller(dAuctionSellerOther[itemid][sSalesman], dAuctionSellerOther[itemid][dItemPrice]);
        }
        case 4:
        {
    		new dFreeSlot = GetPlayerNextFreeSlot(playerid);
    		if(dFreeSlot == -1) return -2;
            if(!HasPlayerGold(playerid, dAuctionSellerVehicle[itemid][dItemPrice])) return -1;
            if(dAuctionSellerVehicle[itemid][dItemSale] == 0) return 0;
            //---
            dPrice = dAuctionSellerVehicle[itemid][dItemPrice];
            strcpy(sSeller, dAuctionSellerVehicle[itemid][sSalesman]);
            dItemID = dAuctionSellerVehicle[itemid][dItemSale];
            //---
    		GivePlayerGold(playerid, -dAuctionSellerVehicle[itemid][dItemPrice]);
    		GivePlayerSlotObject(playerid, dAuctionSellerVehicle[itemid][dItemSale], dFreeSlot);
    		PayAuctionSeller(dAuctionSellerVehicle[itemid][sSalesman], dAuctionSellerVehicle[itemid][dItemPrice]);
        }
        case 5:
        {
    		new dFreeSlot = GetPlayerNextFreeSlot(playerid);
    		if(dFreeSlot == -1) return -2;
            if(!HasPlayerGold(playerid, dAuctionSellerClothes[itemid][dItemPrice])) return -1;
            if(dAuctionSellerClothes[itemid][dItemSale] == 0) return 0;
            //---
            dPrice = dAuctionSellerClothes[itemid][dItemPrice];
            strcpy(sSeller, dAuctionSellerClothes[itemid][sSalesman]);
            dItemID = dAuctionSellerClothes[itemid][dItemSale];
            //---
    		GivePlayerGold(playerid, -dAuctionSellerClothes[itemid][dItemPrice]);
    		GivePlayerSlotObject(playerid, dAuctionSellerClothes[itemid][dItemSale], dFreeSlot);
    		PayAuctionSeller(dAuctionSellerClothes[itemid][sSalesman], dAuctionSellerClothes[itemid][dItemPrice]);
        }
        case 6:
        {
    		new dFreeSlot = GetPlayerNextFreeSlot(playerid);
    		if(dFreeSlot == -1) return -2;
            if(!HasPlayerGold(playerid, dAuctionSellerFood[itemid][dItemPrice])) return -1;
            if(dAuctionSellerFood[itemid][dItemSale] == 0) return 0;
            //---
            dPrice = dAuctionSellerFood[itemid][dItemPrice];
            strcpy(sSeller, dAuctionSellerFood[itemid][sSalesman]);
            dItemID = dAuctionSellerFood[itemid][dItemSale];
            //---
    		GivePlayerGold(playerid, -dAuctionSellerFood[itemid][dItemPrice]);
    		GivePlayerSlotObject(playerid, dAuctionSellerFood[itemid][dItemSale], dFreeSlot);
    		PayAuctionSeller(dAuctionSellerFood[itemid][sSalesman], dAuctionSellerFood[itemid][dItemPrice]);
        }
        case 7:
        {
    		new dFreeSlot = GetPlayerNextFreeSlot(playerid);
    		if(dFreeSlot == -1) return -2;
            if(!HasPlayerGold(playerid, dAuctionSellerRessource[itemid][dItemPrice])) return -1;
            if(dAuctionSellerRessource[itemid][dItemSale] == 0) return 0;
            //---
            dPrice = dAuctionSellerRessource[itemid][dItemPrice];
            strcpy(sSeller, dAuctionSellerRessource[itemid][sSalesman]);
            dItemID = dAuctionSellerRessource[itemid][dItemSale];
            //---
    		GivePlayerGold(playerid, -dAuctionSellerRessource[itemid][dItemPrice]);
    		GivePlayerSlotObject(playerid, dAuctionSellerRessource[itemid][dItemSale], dFreeSlot);
    		PayAuctionSeller(dAuctionSellerRessource[itemid][sSalesman], dAuctionSellerRessource[itemid][dItemPrice]);
        }
    }
	LogInfo(true, "[JOUEUR]%s achete le %s de %s pour %.1fg d'or a l'HDV.", GetName(playerid), NoNewLineSign(aObjects[dItemID][ObjectFrName]), sSeller, floatdiv(dPrice, 10));
    RemoveAuctionHouseItem(category, itemid);
	HidePlayerAuctionHouse(playerid);
    return 1;
}

PayAuctionSeller(const sellersname[], amount)
{
	new playerid = PlayeridFromName(sellersname);
	LogInfo(true, "Test: %s - %d", sellersname, playerid);
	if(playerid == INVALID_PLAYER_ID)//Si le vendeur n'est pas connecté
	{
	    GiveOfflinePlayerGold(sellersname, amount);
	}
	else//S'il est connecté
	{
	    new string[128];
	    GivePlayerGold(playerid, amount);
		switch(GetPlayerLanguage(playerid))
		{
		    case LANGUAGE_EN: format(string, sizeof(string), "[SALE]Your sale has paid you {FFFF00}%.1fg {784F10}of gold!", floatdiv(amount, 10));
		    case LANGUAGE_FR: format(string, sizeof(string), "[VENTE]Votre vente vous a rapporté {FFFF00}%.1fg {784F10}d'or !", floatdiv(amount, 10));
		    case LANGUAGE_ES: format(string, sizeof(string), "%s~n~Espagnol: %.1fg", floatdiv(amount, 10));
		    case LANGUAGE_PG: format(string, sizeof(string), "%s~n~Portugais: %.1fg", floatdiv(amount, 10));
		    case LANGUAGE_IT: format(string, sizeof(string), "%s~n~Italien: %.1fg", floatdiv(amount, 10));
		    case LANGUAGE_DE: format(string, sizeof(string), "%s~n~Allemand: %.1fg", floatdiv(amount, 10));
		}
		SendClientMessageEx(playerid, BRUN, string, string, string, string, string, string);
	}
}

public LoadAuctionHouse_data(name[],value[])
{
	new string[50];
	for(new i = 0; i < MAX_AUCTION_ITEMS; i ++)
	{
	    format(string, sizeof(string), "ToolID%d", i);
		INI_Int(string, dAuctionSellerTool[i][dItemSale]);
	    format(string, sizeof(string), "ToolPrice%d", i);
		INI_Int(string, dAuctionSellerTool[i][dItemPrice]);
	    format(string, sizeof(string), "ToolTime%d", i);
		INI_Int(string, dAuctionSellerTool[i][dTimeLeft]);
	    format(string, sizeof(string), "ToolVendor%d", i);
		INI_String(string, dAuctionSellerTool[i][sSalesman], MAX_PLAYER_NAME + 1);
	}
	//---
	for(new i = 0; i < MAX_AUCTION_ITEMS; i ++)
	{
	    format(string, sizeof(string), "MedicID%d", i);
		INI_Int(string, dAuctionSellerMedic[i][dItemSale]);
	    format(string, sizeof(string), "MedicPrice%d", i);
		INI_Int(string, dAuctionSellerMedic[i][dItemPrice]);
	    format(string, sizeof(string), "MedicTime%d", i);
		INI_Int(string, dAuctionSellerMedic[i][dTimeLeft]);
	    format(string, sizeof(string), "MedicVendor%d", i);
		INI_String(string, dAuctionSellerMedic[i][sSalesman], MAX_PLAYER_NAME + 1);
	}
	//---
	for(new i = 0; i < MAX_AUCTION_ITEMS; i ++)
	{
	    format(string, sizeof(string), "WeaponID%d", i);
		INI_Int(string, dAuctionSellerWeapon[i][dItemSale]);
	    format(string, sizeof(string), "WeaponPrice%d", i);
		INI_Int(string, dAuctionSellerWeapon[i][dItemPrice]);
	    format(string, sizeof(string), "WeaponTime%d", i);
		INI_Int(string, dAuctionSellerWeapon[i][dTimeLeft]);
	    format(string, sizeof(string), "WeaponVendor%d", i);
		INI_String(string, dAuctionSellerWeapon[i][sSalesman], MAX_PLAYER_NAME + 1);
	}
	//---
	for(new i = 0; i < MAX_AUCTION_ITEMS; i ++)
	{
	    format(string, sizeof(string), "OtherID%d", i);
		INI_Int(string, dAuctionSellerOther[i][dItemSale]);
	    format(string, sizeof(string), "OtherPrice%d", i);
		INI_Int(string, dAuctionSellerOther[i][dItemPrice]);
	    format(string, sizeof(string), "OtherTime%d", i);
		INI_Int(string, dAuctionSellerOther[i][dTimeLeft]);
	    format(string, sizeof(string), "OtherVendor%d", i);
		INI_String(string, dAuctionSellerOther[i][sSalesman], MAX_PLAYER_NAME + 1);
	}
	//---
	for(new i = 0; i < MAX_AUCTION_ITEMS; i ++)
	{
	    format(string, sizeof(string), "VehicleID%d", i);
		INI_Int(string, dAuctionSellerVehicle[i][dItemSale]);
	    format(string, sizeof(string), "VehiclePrice%d", i);
		INI_Int(string, dAuctionSellerVehicle[i][dItemPrice]);
	    format(string, sizeof(string), "VehicleTime%d", i);
		INI_Int(string, dAuctionSellerVehicle[i][dTimeLeft]);
	    format(string, sizeof(string), "VehicleVendor%d", i);
		INI_String(string, dAuctionSellerVehicle[i][sSalesman], MAX_PLAYER_NAME + 1);
	}
	//---
	for(new i = 0; i < MAX_AUCTION_ITEMS; i ++)
	{
	    format(string, sizeof(string), "ClotheID%d", i);
		INI_Int(string, dAuctionSellerClothes[i][dItemSale]);
	    format(string, sizeof(string), "ClothePrice%d", i);
		INI_Int(string, dAuctionSellerClothes[i][dItemPrice]);
	    format(string, sizeof(string), "ClotheTime%d", i);
		INI_Int(string, dAuctionSellerClothes[i][dTimeLeft]);
	    format(string, sizeof(string), "ClotheVendor%d", i);
		INI_String(string, dAuctionSellerClothes[i][sSalesman], MAX_PLAYER_NAME + 1);
	}
	//---
	for(new i = 0; i < MAX_AUCTION_ITEMS; i ++)
	{
	    format(string, sizeof(string), "FoodID%d", i);
		INI_Int(string, dAuctionSellerFood[i][dItemSale]);
	    format(string, sizeof(string), "FoodPrice%d", i);
		INI_Int(string, dAuctionSellerFood[i][dItemPrice]);
	    format(string, sizeof(string), "FoodTime%d", i);
		INI_Int(string, dAuctionSellerFood[i][dTimeLeft]);
	    format(string, sizeof(string), "FoodVendor%d", i);
		INI_String(string, dAuctionSellerFood[i][sSalesman], MAX_PLAYER_NAME + 1);
	}
	//---
	for(new i = 0; i < MAX_AUCTION_ITEMS; i ++)
	{
	    format(string, sizeof(string), "RessID%d", i);
		INI_Int(string, dAuctionSellerRessource[i][dItemSale]);
	    format(string, sizeof(string), "RessPrice%d", i);
		INI_Int(string, dAuctionSellerRessource[i][dItemPrice]);
	    format(string, sizeof(string), "RessTime%d", i);
		INI_Int(string, dAuctionSellerRessource[i][dTimeLeft]);
	    format(string, sizeof(string), "RessVendor%d", i);
		INI_String(string, dAuctionSellerRessource[i][sSalesman], MAX_PLAYER_NAME + 1);
	}
	return 1;
}

SaveAuctionHouse()
{
	new string[50];
	new INI:File = INI_Open(APATH);
	INI_SetTag(File, "data");
	for(new i = 0; i < MAX_AUCTION_ITEMS; i ++)
	{
	    format(string, sizeof(string), "ToolID%d", i);
		INI_WriteInt(File, string, dAuctionSellerTool[i][dItemSale]);
	    format(string, sizeof(string), "ToolPrice%d", i);
		INI_WriteInt(File, string, dAuctionSellerTool[i][dItemPrice]);
	    format(string, sizeof(string), "ToolTime%d", i);
		INI_WriteInt(File, string, dAuctionSellerTool[i][dTimeLeft]);
	    format(string, sizeof(string), "ToolVendor%d", i);
		INI_WriteString(File, string, dAuctionSellerTool[i][sSalesman]);
	}
	//---
	for(new i = 0; i < MAX_AUCTION_ITEMS; i ++)
	{
	    format(string, sizeof(string), "MedicID%d", i);
		INI_WriteInt(File, string, dAuctionSellerMedic[i][dItemSale]);
	    format(string, sizeof(string), "MedicPrice%d", i);
		INI_WriteInt(File, string, dAuctionSellerMedic[i][dItemPrice]);
	    format(string, sizeof(string), "MedicTime%d", i);
		INI_WriteInt(File, string, dAuctionSellerMedic[i][dTimeLeft]);
	    format(string, sizeof(string), "MedicVendor%d", i);
		INI_WriteString(File, string, dAuctionSellerMedic[i][sSalesman]);
	}
	//---
	for(new i = 0; i < MAX_AUCTION_ITEMS; i ++)
	{
	    format(string, sizeof(string), "WeaponID%d", i);
		INI_WriteInt(File, string, dAuctionSellerWeapon[i][dItemSale]);
	    format(string, sizeof(string), "WeaponPrice%d", i);
		INI_WriteInt(File, string, dAuctionSellerWeapon[i][dItemPrice]);
	    format(string, sizeof(string), "WeaponTime%d", i);
		INI_WriteInt(File, string, dAuctionSellerWeapon[i][dTimeLeft]);
	    format(string, sizeof(string), "WeaponVendor%d", i);
		INI_WriteString(File, string, dAuctionSellerWeapon[i][sSalesman]);
	}
	//---
	for(new i = 0; i < MAX_AUCTION_ITEMS; i ++)
	{
	    format(string, sizeof(string), "OtherID%d", i);
		INI_WriteInt(File, string, dAuctionSellerOther[i][dItemSale]);
	    format(string, sizeof(string), "OtherPrice%d", i);
		INI_WriteInt(File, string, dAuctionSellerOther[i][dItemPrice]);
	    format(string, sizeof(string), "OtherTime%d", i);
		INI_WriteInt(File, string, dAuctionSellerOther[i][dTimeLeft]);
	    format(string, sizeof(string), "OtherVendor%d", i);
		INI_WriteString(File, string, dAuctionSellerOther[i][sSalesman]);
	}
	//---
	for(new i = 0; i < MAX_AUCTION_ITEMS; i ++)
	{
	    format(string, sizeof(string), "VehicleID%d", i);
		INI_WriteInt(File, string, dAuctionSellerVehicle[i][dItemSale]);
	    format(string, sizeof(string), "VehiclePrice%d", i);
		INI_WriteInt(File, string, dAuctionSellerVehicle[i][dItemPrice]);
	    format(string, sizeof(string), "VehicleTime%d", i);
		INI_WriteInt(File, string, dAuctionSellerVehicle[i][dTimeLeft]);
	    format(string, sizeof(string), "VehicleVendor%d", i);
		INI_WriteString(File, string, dAuctionSellerVehicle[i][sSalesman]);
	}
	//---
	for(new i = 0; i < MAX_AUCTION_ITEMS; i ++)
	{
	    format(string, sizeof(string), "ClotheID%d", i);
		INI_WriteInt(File, string, dAuctionSellerClothes[i][dItemSale]);
	    format(string, sizeof(string), "ClothePrice%d", i);
		INI_WriteInt(File, string, dAuctionSellerClothes[i][dItemPrice]);
	    format(string, sizeof(string), "ClotheTime%d", i);
		INI_WriteInt(File, string, dAuctionSellerClothes[i][dTimeLeft]);
	    format(string, sizeof(string), "ClotheVendor%d", i);
		INI_WriteString(File, string, dAuctionSellerClothes[i][sSalesman]);
	}
	//---
	for(new i = 0; i < MAX_AUCTION_ITEMS; i ++)
	{
	    format(string, sizeof(string), "FoodID%d", i);
		INI_WriteInt(File, string, dAuctionSellerFood[i][dItemSale]);
	    format(string, sizeof(string), "FoodPrice%d", i);
		INI_WriteInt(File, string, dAuctionSellerFood[i][dItemPrice]);
	    format(string, sizeof(string), "FoodTime%d", i);
		INI_WriteInt(File, string, dAuctionSellerFood[i][dTimeLeft]);
	    format(string, sizeof(string), "FoodVendor%d", i);
		INI_WriteString(File, string, dAuctionSellerFood[i][sSalesman]);
	}
	//---
	for(new i = 0; i < MAX_AUCTION_ITEMS; i ++)
	{
	    format(string, sizeof(string), "RessID%d", i);
		INI_WriteInt(File, string, dAuctionSellerRessource[i][dItemSale]);
	    format(string, sizeof(string), "RessPrice%d", i);
		INI_WriteInt(File, string, dAuctionSellerRessource[i][dItemPrice]);
	    format(string, sizeof(string), "RessTime%d", i);
		INI_WriteInt(File, string, dAuctionSellerRessource[i][dTimeLeft]);
	    format(string, sizeof(string), "RessVendor%d", i);
		INI_WriteString(File, string, dAuctionSellerRessource[i][sSalesman]);
	}
	INI_Close(File);
}

ReturnOfflinePlayerItem(const playername[], itemid)
{
    new string[50];
    format(string,sizeof(string), OFFPATH, playername);
    if(!fexist(string)) return 0;
	INI_ParseFile(string, "LoadUserItems_%s");
	for(new i = 0; i < 50; i ++)
	{
	    if(dAuctionParsingVar[i] == 0)
	    {
		    new INI:File = INI_Open(string);
			INI_SetTag(File,"auctions");
			format(string, sizeof(string), "Return%d", i);
			INI_WriteInt(File, string, itemid);
			INI_Close(File);
	        return true;
	    }
	}
	return false;
}

ReturnPlayerItem(category, itemid)
{
	new playerid;
	switch(category)
	{
		case 0:
		{
			playerid = PlayeridFromName(dAuctionSellerTool[itemid][sSalesman]);
			if(playerid == INVALID_PLAYER_ID)
			{
				ReturnOfflinePlayerItem(dAuctionSellerTool[itemid][sSalesman], dAuctionSellerTool[itemid][dItemSale]);
			}
			else
			{
				for(new i = 0; i < 50; i ++) if(pPlayerOfflineInfos[playerid][dReturnedItem][i] == 0)
				{
					pPlayerOfflineInfos[playerid][dReturnedItem][i] = dAuctionSellerTool[itemid][dItemSale];
					break;
				}
			}
		}
		case 1:
		{
			playerid = PlayeridFromName(dAuctionSellerMedic[itemid][sSalesman]);
			if(playerid == INVALID_PLAYER_ID)
			{
				ReturnOfflinePlayerItem(dAuctionSellerMedic[itemid][sSalesman], dAuctionSellerMedic[itemid][dItemSale]);
			}
			else
			{
				for(new i = 0; i < 50; i ++) if(pPlayerOfflineInfos[playerid][dReturnedItem][i] == 0)
				{
					pPlayerOfflineInfos[playerid][dReturnedItem][i] = dAuctionSellerMedic[itemid][dItemSale];
					break;
				}
			}
		}
		case 2:
		{
			playerid = PlayeridFromName(dAuctionSellerWeapon[itemid][sSalesman]);
			if(playerid == INVALID_PLAYER_ID)
			{
				ReturnOfflinePlayerItem(dAuctionSellerWeapon[itemid][sSalesman], dAuctionSellerWeapon[itemid][dItemSale]);
			}
			else
			{
				for(new i = 0; i < 50; i ++) if(pPlayerOfflineInfos[playerid][dReturnedItem][i] == 0)
				{
					pPlayerOfflineInfos[playerid][dReturnedItem][i] = dAuctionSellerWeapon[itemid][dItemSale];
					break;
				}
			}
		}
		case 3:
		{
			playerid = PlayeridFromName(dAuctionSellerOther[itemid][sSalesman]);
			if(playerid == INVALID_PLAYER_ID)
			{
				ReturnOfflinePlayerItem(dAuctionSellerOther[itemid][sSalesman], dAuctionSellerOther[itemid][dItemSale]);
			}
			else
			{
				for(new i = 0; i < 50; i ++) if(pPlayerOfflineInfos[playerid][dReturnedItem][i] == 0)
				{
					pPlayerOfflineInfos[playerid][dReturnedItem][i] = dAuctionSellerOther[itemid][dItemSale];
					break;
				}
			}
		}
		case 4:
		{
			playerid = PlayeridFromName(dAuctionSellerVehicle[itemid][sSalesman]);
			if(playerid == INVALID_PLAYER_ID)
			{
				ReturnOfflinePlayerItem(dAuctionSellerVehicle[itemid][sSalesman], dAuctionSellerVehicle[itemid][dItemSale]);
			}
			else
			{
				for(new i = 0; i < 50; i ++) if(pPlayerOfflineInfos[playerid][dReturnedItem][i] == 0)
				{
					pPlayerOfflineInfos[playerid][dReturnedItem][i] = dAuctionSellerVehicle[itemid][dItemSale];
					break;
				}
			}
		}
		case 5:
		{
			playerid = PlayeridFromName(dAuctionSellerClothes[itemid][sSalesman]);
			if(playerid == INVALID_PLAYER_ID)
			{
				ReturnOfflinePlayerItem(dAuctionSellerClothes[itemid][sSalesman], dAuctionSellerClothes[itemid][dItemSale]);
			}
			else
			{
				for(new i = 0; i < 50; i ++) if(pPlayerOfflineInfos[playerid][dReturnedItem][i] == 0)
				{
					pPlayerOfflineInfos[playerid][dReturnedItem][i] = dAuctionSellerClothes[itemid][dItemSale];
					break;
				}
			}
		}
		case 6:
		{
			playerid = PlayeridFromName(dAuctionSellerFood[itemid][sSalesman]);
			if(playerid == INVALID_PLAYER_ID)
			{
				ReturnOfflinePlayerItem(dAuctionSellerFood[itemid][sSalesman], dAuctionSellerFood[itemid][dItemSale]);
			}
			else
			{
				for(new i = 0; i < 50; i ++) if(pPlayerOfflineInfos[playerid][dReturnedItem][i] == 0)
				{
					pPlayerOfflineInfos[playerid][dReturnedItem][i] = dAuctionSellerFood[itemid][dItemSale];
					break;
				}
			}
		}
		case 7:
		{
			playerid = PlayeridFromName(dAuctionSellerRessource[itemid][sSalesman]);
			if(playerid == INVALID_PLAYER_ID)
			{
				ReturnOfflinePlayerItem(dAuctionSellerRessource[itemid][sSalesman], dAuctionSellerRessource[itemid][dItemSale]);
			}
			else
			{
				for(new i = 0; i < 50; i ++) if(pPlayerOfflineInfos[playerid][dReturnedItem][i] == 0)
				{
					pPlayerOfflineInfos[playerid][dReturnedItem][i] = dAuctionSellerRessource[itemid][dItemSale];
					break;
				}
			}
		}
	}
    RemoveAuctionHouseItem(category, itemid);
}

public LoadUserItems_auctions(name[], value[])
{
	new string[16];
	for(new i = 0; i < 50; i ++)
	{
		format(string, sizeof(string), "Return%d", i);
    	INI_Int(string, dAuctionParsingVar[i]);
    }
    return 1;
}

/*enum ItemForSale
{
	dItemSale,//ID de l'objet
	dItemPrice,//Prix
	dSalesID,//
	sSalesman[MAX_PLAYER_NAME + 1],
	dTimeLeft
}

new dAuctionSellerTool[MAX_AUCTION_ITEMS][ItemForSale];
new dAuctionSellerMedic[MAX_AUCTION_ITEMS][ItemForSale];
new dAuctionSellerWeapon[MAX_AUCTION_ITEMS][ItemForSale];
new dAuctionSellerOther[MAX_AUCTION_ITEMS][ItemForSale];
new dAuctionSellerVehicle[MAX_AUCTION_ITEMS][ItemForSale];
new dAuctionSellerClothes[MAX_AUCTION_ITEMS][ItemForSale];
new dAuctionSellerFood[MAX_AUCTION_ITEMS][ItemForSale];
new dAuctionSellerRessource[MAX_AUCTION_ITEMS][ItemForSale];*/
//---FLAQUES DE SANG---//
CreateBloodSplat(Float:x, Float:y, Float:z)
{
	SetTimerEx("DestroyObjectEx", 3000, false, "ii", CreateObject(18668, x, y, z - 0.75, 0.0, 0.0, 0.0, 500.0), false);
}

CreateBlood(Float:x, Float:y, Float:z)
{
	static slotid;
	static oBloodPool[100] = {INVALID_OBJECT_ID, ...};
	if(IsValidDynamicObject(oBloodPool[slotid])) DestroyDynamicObject(oBloodPool[slotid]);
	//---
	new Float:vx, Float:vy, Float:vz, Float:z2;
	CA_RayCastLineAngle (x, y, z, x, y, z - 500.0, x, y, z2, vx, vy, vz);
	//---
	oBloodPool[slotid] = CreateDynamicObject(19836, x, y, z - 1.0, vx, vy, vz, -1, -1, -1, 15.0, 10.0);
	MoveDynamicObject(oBloodPool[slotid], x, y, z2, 10.0);
	//---
    slotid ++;
    if(slotid == 100) slotid = 0;
    return (slotid == 0) ? 100 : slotid - 1;
}

//---FLÈCHES JAUNES MORT
CreateMarker(Float:x, Float:y, Float:z)
{
	static slotid;
	if(IsValidDynamicObject(dDeath[slotid][oMarker])) DestroyDynamicObject(dDeath[slotid][oMarker]);
	dDeath[slotid][xMark] = x;
	dDeath[slotid][yMark] = y;
	dDeath[slotid][zMark] = z;
	//---
	dDeath[slotid][oMarker] = CreateDynamicObject(19198, x, y, z, 0.0, 0.0, 0.0, -1, -1, -1, 300.0, 275.0);
	//---
    slotid ++;
    if(slotid == MAX_DEATH_MARKERS) slotid = 0;
    return (slotid == 0) ? MAX_DEATH_MARKERS : slotid - 1;
}

DestroyMarker(markerid)
{
	if(IsValidDynamicObject(dDeath[markerid][oMarker]))
	{
	    DestroyDynamicObject(dDeath[markerid][oMarker]);
	    dDeath[markerid][oMarker] = INVALID_OBJECT_ID;
		dDeath[markerid][xMark] = 0.0;
		dDeath[markerid][yMark] = 0.0;
		dDeath[markerid][zMark] = 0.0;
	}
}

ClearMarkers()
{
	for(new k = 0; k < MAX_DEATH_MARKERS; k ++)
	{
	    if(IsValidDynamicObject(dDeath[k][oMarker]))
	    {
			for(new i = 0, j = GetPlayerPoolSize(); i <= j; i ++)
			{
				if(IsPlayerInRangeOfPoint(i, 5.0, dDeath[k][xMark], dDeath[k][yMark], dDeath[k][zMark]) && !IsPlayerDead(i) && !FCNPC_IsValid(i))
				{
					DestroyMarker(k);
					break;
				}
			}
		}
	}
}

//---FRIGO
CreateFridge(Float:x, Float:y, Float:z, Float:angle, load = -1)
{
	static slotid;
	if(load == -1)
	{
		if(dFridgeInfos[slotid][bFridge])
		{
			for(new i = 0; i < MAX_FRIDGES; i ++)
		 	{
				if(!dFridgeInfos[i][bFridge])
			    {
			    	slotid = i;
			        break;
			    }
			}
			if(dFridgeInfos[slotid][bFridge])
			{
				DestroyDynamicObject(dFridgeInfos[slotid][oFridge]);
			}
		}
	}
	//---
	dFridgeInfos[(load == -1) ? slotid : load][bFridge] = true;
	dFridgeInfos[(load == -1) ? slotid : load][xFridge] = x;
	dFridgeInfos[(load == -1) ? slotid : load][yFridge] = y;
	dFridgeInfos[(load == -1) ? slotid : load][zFridge] = z;
	dFridgeInfos[(load == -1) ? slotid : load][aFridge] = angle;
	dFridgeInfos[(load == -1) ? slotid : load][oFridge] = CreateDynamicObject(2144, x, y, z - 1.0, 0.0, 0.0, angle, -1, -1, -1, 25.0, 20.0);
	//---
    slotid ++;
    if(slotid == MAX_FRIDGES) slotid = 0;
    return (slotid == 0) ? MAX_FRIDGES : slotid - 1;
}

DestroyFridge(fridgeid)
{
	DestroyDynamicObject(dFridgeInfos[fridgeid][oFridge]);
	dFridgeInfos[fridgeid][oFridge] = INVALID_OBJECT_ID;
	for(new i = 0; i < 5; i ++)
	{
	    if(dFridgeInfos[fridgeid][dFood][i] != 0)
	    {
			dFridgeInfos[fridgeid][dFood][i] = 0;
			dFridgeInfos[fridgeid][dFoodAmount][i] = 0;
		}
	}
	dFridgeInfos[fridgeid][xFridge] = 0.0;
	dFridgeInfos[fridgeid][yFridge] = 0.0;
	dFridgeInfos[fridgeid][zFridge] = 0.0;
	dFridgeInfos[fridgeid][aFridge] = 0.0;
}

AddFridgeFood(fridgeid, food, amount)
{
	new slotid = HasFridgeFood(fridgeid, food);
	if(slotid == -1)
	{
		slotid = GetFridgeNextFreeSlot(fridgeid);
		if(slotid != -1)
		{
			dFridgeInfos[fridgeid][dFood][slotid] = food;
			dFridgeInfos[fridgeid][dFoodAmount][slotid] += amount;
		}
	}
	else
	{
		dFridgeInfos[fridgeid][dFoodAmount][slotid] += amount;
		if(dFridgeInfos[fridgeid][dFoodAmount][slotid] == 0)
		{
			dFridgeInfos[fridgeid][dFood][slotid] = 0;
		}
	}
	return dFridgeInfos[fridgeid][dFoodAmount][slotid];
}

HasFridgeFood(fridgeid, food)
{
	for(new i = 0; i < 5; i ++) if(dFridgeInfos[fridgeid][dFood][i] == food) return i;
	return -1;
}

GetFridgeFood(fridgeid, slotid, &food, &amount)
{
	if(4 >= slotid >= 0)
	{
		food = dFridgeInfos[fridgeid][dFood][slotid];
		amount = dFridgeInfos[fridgeid][dFoodAmount][slotid];
	}
}

IsPlayerNearFridge(playerid)
{
	new Float:x, Float:y, Float:z, Float:fTrash;
	GetPlayerPos(playerid, x, y, z);
	for(new i = 0; i < MAX_FRIDGES; i ++)
	{
		if(dFridgeInfos[i][bFridge] && IsPlayerInRangeOfPoint(playerid, 1.5, dFridgeInfos[i][xFridge], dFridgeInfos[i][yFridge], dFridgeInfos[i][zFridge]))
		{
			if(CA_RayCastLine(x, y, z, dFridgeInfos[i][xFridge], dFridgeInfos[i][yFridge], dFridgeInfos[i][zFridge], fTrash, fTrash, fTrash) != 0) continue;
			return i;
		}
	}
	return -1;
}

GetFridgeNextFreeSlot(fridgeid)
{
	if(fridgeid == -1) return -1;
	for(new i = 0; i < 5; i ++) if(dFridgeInfos[fridgeid][dFood][i] == 0) return i;
	return -1;
}

/*IsFridgeEmpty(fridgeid)
{
	if(rackid == -1) return true;
	new dSlots = 0;
	for(new i = 0; i < 5; i ++) if(dFridgeInfos[fridgeid][dFood][i] == 0) dSlots ++;
	return (dSlots == 5) ? true : false;
}*/

public LoadFridges_data(name[],value[])
{
	new string[50];
	for(new i = 0; i < MAX_FRIDGES; i ++)
	{
	    format(string, sizeof(string), "Fridge%d", i);
		INI_Bool(string, dFridgeInfos[i][bFridge]);
	    format(string, sizeof(string), "xFridge%d", i);
		INI_Float(string, dFridgeInfos[i][xFridge]);
	    format(string, sizeof(string), "yFridge%d", i);
		INI_Float(string, dFridgeInfos[i][yFridge]);
	    format(string, sizeof(string), "zFridge%d", i);
		INI_Float(string, dFridgeInfos[i][zFridge]);
	    format(string, sizeof(string), "aFridge%d", i);
		INI_Float(string, dFridgeInfos[i][aFridge]);
		for(new j = 0; j < 5; j ++)
		{
	    	format(string, sizeof(string), "%dFood%d", j, i);
			INI_Int(string, dFridgeInfos[i][dFood][j]);
	    	format(string, sizeof(string), "%dFoodAmount%d", j, i);
			INI_Int(string, dFridgeInfos[i][dFoodAmount][j]);
		}
	}
	return 1;
}

SaveFridges()
{
	new string[50];
	new INI:File = INI_Open(FRPATH);
	INI_SetTag(File, "data");
	for(new i = 0; i < MAX_FRIDGES; i ++)
	{
	    format(string, sizeof(string), "Fridge%d", i);
		INI_WriteBool(File,string, dFridgeInfos[i][bFridge]);
	    format(string, sizeof(string), "xFridge%d", i);
		INI_WriteFloat(File,string, dFridgeInfos[i][xFridge]);
	    format(string, sizeof(string), "yFridge%d", i);
		INI_WriteFloat(File,string, dFridgeInfos[i][yFridge]);
	    format(string, sizeof(string), "zFridge%d", i);
		INI_WriteFloat(File,string, dFridgeInfos[i][zFridge]);
	    format(string, sizeof(string), "aFridge%d", i);
		INI_WriteFloat(File,string, dFridgeInfos[i][aFridge]);
		for(new j = 0; j < 5; j ++)
		{
	    	format(string, sizeof(string), "%dFood%d", j, i);
			INI_WriteInt(File,string, dFridgeInfos[i][dFood][j]);
	    	format(string, sizeof(string), "%dFoodAmount%d", j, i);
			INI_WriteInt(File,string, dFridgeInfos[i][dFoodAmount][j]);
		}
	}
	INI_Close(File);
}

//---ÉTAGÈRES ARMES---//
CreateGunRack(Float:x, Float:y, Float:z, Float:angle, load = -1)
{
	static slotid;
	if(load == -1)
	{
		if(dGunRackInfos[slotid][bRack])
		{
			for(new i = 0; i < MAX_GUNRACKS; i ++)
		 	{
				if(!dGunRackInfos[i][bRack])
			    {
			    	slotid = i;
			        break;
			    }
			}
			if(dGunRackInfos[slotid][bRack])
			{
				DestroyDynamicObject(dGunRackInfos[slotid][oRack]);
				for(new j = 0; j < 4; j ++)
				{
					if(dGunRackInfos[slotid][dGun] != 0)
					{
						if(load == -1) DestroyDynamicObject(dGunRackInfos[slotid][oGun][j]);
					}
				}
			}
		}
	}
	//---
	dGunRackInfos[(load == -1) ? slotid : load][bRack] = true;
	dGunRackInfos[(load == -1) ? slotid : load][xRack] = x;
	dGunRackInfos[(load == -1) ? slotid : load][yRack] = y;
	dGunRackInfos[(load == -1) ? slotid : load][zRack] = z;
	dGunRackInfos[(load == -1) ? slotid : load][aRack] = angle;
    /*-118.68917063
    -0.4128
    -0.2259*/
	dGunRackInfos[(load == -1) ? slotid : load][oRack] = CreateDynamicObject(2078, x, y, z - 1.0, 0.0, 0.0, angle, -1, -1, -1, 25.0, 20.0);
	if(load != -1) for(new j = 0; j < 4; j ++) UpdateGunRackSlot((load == -1) ? slotid : load, j);
	//---
    slotid ++;
    if(slotid == MAX_GUNRACKS) slotid = 0;
    return (slotid == 0) ? MAX_GUNRACKS : slotid - 1;
}

UpdateGunRackSlot(rackid, slot)
{
	if(dGunRackInfos[rackid][dGun][slot] == 0)
	{
	    if(dGunRackInfos[rackid][oGun][slot] != INVALID_OBJECT_ID)
		{
			DestroyDynamicObject(dGunRackInfos[rackid][oGun][slot]);
			dGunRackInfos[rackid][oGun][slot] = INVALID_OBJECT_ID;
		}
	}
	else
	{
	    if(dGunRackInfos[rackid][oGun][slot] != INVALID_OBJECT_ID)
		{
			DestroyDynamicObject(dGunRackInfos[rackid][oGun][slot]);
			dGunRackInfos[rackid][oGun][slot] = INVALID_OBJECT_ID;
		}
		//---
	    new Float:x, Float:y, Float:z, Float:ry, Float:angle, Float:distance;
	    switch(slot)
	    {
	        case 0:
			{
				angle = dGunRackInfos[rackid][aRack] + 270.0 + 177.8884;
				distance = 0.2701;
			}
	        case 1:
			{
				angle = dGunRackInfos[rackid][aRack] + 270.0 - 36.8111;
				distance = 0.2031;
			}
	        case 2:
			{
				angle = dGunRackInfos[rackid][aRack] + 270.0 - 12.0837;
				distance = 0.71;
			}
	        case 3:
			{
				angle = dGunRackInfos[rackid][aRack] + 270.0 - 7.4484;
				distance = 1.1621;
			}
	    }
		x = dGunRackInfos[rackid][xRack] + (distance * floatsin(-angle, degrees));
		y = dGunRackInfos[rackid][yRack] + (distance * floatcos(-angle, degrees));
		z = dGunRackInfos[rackid][zRack];
		switch(dGunRackInfos[rackid][dGun][slot])
		{
		    case 3, 4, 5, 8, 9: ry = 0.0;
			default: ry = 270.0;
		}
		z += ((slot == 0 || slot == 3) ? 0.4841 : 0.687) - 1.0;
		dGunRackInfos[rackid][oGun][slot] = CreateDynamicObject(GetWeaponModel(dGunRackInfos[rackid][dGun][slot]), x, y, z, 0.0, ry, dGunRackInfos[rackid][aRack] + 270.0, -1, -1, -1, 10.0);
	}
}

DestroyGunRack(rackid)
{
	DestroyDynamicObject(dGunRackInfos[rackid][oRack]);
	dGunRackInfos[rackid][oRack] = INVALID_OBJECT_ID;
	for(new i = 0; i < 4; i ++)
	{
	    if(dGunRackInfos[rackid][dGun][i] != 0)
	    {
			dGunRackInfos[rackid][dGun][i] = 0;
			dGunRackInfos[rackid][dGunAmmo][i] = 0;
			UpdateGunRackSlot(rackid, i);
		}
	}
	dGunRackInfos[rackid][xRack] = 0.0;
	dGunRackInfos[rackid][yRack] = 0.0;
	dGunRackInfos[rackid][zRack] = 0.0;
	dGunRackInfos[rackid][aRack] = 0.0;
}

AddGunRackWeapon(rackid, slotid, gun, ammo)
{
	dGunRackInfos[rackid][dGun][slotid] = gun;
	dGunRackInfos[rackid][dGunAmmo][slotid] = ammo;
	UpdateGunRackSlot(rackid, slotid);
}

GetGunRackWeapon(rackid, slotid, &gun, &ammo)
{
	gun = dGunRackInfos[rackid][dGun][slotid];
	ammo = dGunRackInfos[rackid][dGunAmmo][slotid];
}

IsPlayerNearRack(playerid)
{
	new Float:x, Float:y, Float:z, Float:fTrash;
	GetPlayerPos(playerid, x, y, z);
	for(new i = 0; i < MAX_GUNRACKS; i ++)
	{
		if(dGunRackInfos[i][bRack] && IsPlayerInRangeOfPoint(playerid, 1.5, dGunRackInfos[i][xRack], dGunRackInfos[i][yRack], dGunRackInfos[i][zRack]))
		{
			if(CA_RayCastLine(x, y, z, dGunRackInfos[i][xRack], dGunRackInfos[i][yRack], dGunRackInfos[i][zRack], fTrash, fTrash, fTrash) != 0) continue;
			return i;
		}
	}
	return -1;
}

GetRackNextFreeSlot(rackid)
{
	if(rackid == -1) return -1;
	for(new i = 0; i < 4; i ++) if(dGunRackInfos[rackid][dGun][i] == 0) return i;
	return -1;
}

IsRackEmpty(rackid)
{
	if(rackid == -1) return true;
	new dSlots = 0;
	for(new i = 0; i < 4; i ++) if(dGunRackInfos[rackid][dGun][i] == 0) dSlots ++;
	return (dSlots == 4) ? true : false;
}

public LoadGunRacks_data(name[],value[])
{
	new string[50];
	for(new i = 0; i < MAX_GUNRACKS; i ++)
	{
	    format(string, sizeof(string), "Rack%d", i);
		INI_Bool(string, dGunRackInfos[i][bRack]);
	    format(string, sizeof(string), "xRack%d", i);
		INI_Float(string, dGunRackInfos[i][xRack]);
	    format(string, sizeof(string), "yRack%d", i);
		INI_Float(string, dGunRackInfos[i][yRack]);
	    format(string, sizeof(string), "zRack%d", i);
		INI_Float(string, dGunRackInfos[i][zRack]);
	    format(string, sizeof(string), "aRack%d", i);
		INI_Float(string, dGunRackInfos[i][aRack]);
		for(new j = 0; j < 4; j ++)
		{
	    	format(string, sizeof(string), "%dArme%d", j, i);
			INI_Int(string, dGunRackInfos[i][dGun][j]);
	    	format(string, sizeof(string), "%dArmeAmmo%d", j, i);
			INI_Int(string, dGunRackInfos[i][dGunAmmo][j]);
		}
	}
	return 1;
}

SaveGunRacks()
{
	new string[50];
	new INI:File = INI_Open(GRPATH);
	INI_SetTag(File, "data");
	for(new i = 0; i < MAX_GUNRACKS; i ++)
	{
	    format(string, sizeof(string), "Rack%d", i);
		INI_WriteBool(File,string, dGunRackInfos[i][bRack]);
	    format(string, sizeof(string), "xRack%d", i);
		INI_WriteFloat(File,string, dGunRackInfos[i][xRack]);
	    format(string, sizeof(string), "yRack%d", i);
		INI_WriteFloat(File,string, dGunRackInfos[i][yRack]);
	    format(string, sizeof(string), "zRack%d", i);
		INI_WriteFloat(File,string, dGunRackInfos[i][zRack]);
	    format(string, sizeof(string), "aRack%d", i);
		INI_WriteFloat(File,string, dGunRackInfos[i][aRack]);
		for(new j = 0; j < 4; j ++)
		{
	    	format(string, sizeof(string), "%dArme%d", j, i);
			INI_WriteInt(File,string, dGunRackInfos[i][dGun][j]);
	    	format(string, sizeof(string), "%dArmeAmmo%d", j, i);
			INI_WriteInt(File,string, dGunRackInfos[i][dGunAmmo][j]);
		}
	}
	INI_Close(File);
}

//---PANNEAUX---//
#if defined MYSQL_SYSTEM
new LIST_init<boardList>;
public OnBoardsLoaded()
{
	new string[128];
	for(new i = 0; i < cache_num_rows(); i++)
	{
		new Float:x, Float:y, Float:z, Float:angle, text[256], boardid;
		cache_get_value_name_float(i, "xboard", x);
		cache_get_value_name_float(i, "yboard", y);
		cache_get_value_name_float(i, "zboard", z);
		cache_get_value_name_float(i, "aboard", angle);
		cache_get_value_name_int(i, "idboard", boardid);
		cache_get_value_name(i, "text", text);
		CreateBoard(x, y, z, angle, boardid, text);
	}
	format(string, sizeof(string), "[INIT] %d panneaux charges", cache_num_rows());
	LogInfo(true, string);
	return 1;
}
stock CreateBoard(Float:x, Float:y, Float:z, Float:angle, id = -1, const text[] = "")
{
	new board[Board];
	board[bBoard] = true;
	board[xBoard] = x;
	board[yBoard] = y;
	board[zBoard] = z;
	board[aBoard] = angle;
	board[boardResistance] = 5;
	board[oBoard][0] = CreateDynamicObject(3927, x, y, z, 0.0, 0.0, angle, -1, -1, -1, 50.0, 45.0);
    angle -= 77.38;
	board[oBoard][1] = CreateDynamicObject(19805, x - (0.13 * floatsin(-angle, degrees)), y - (0.13 * floatcos(-angle, degrees)), z + 0.7601, 0.0, 0.0, angle + 77.39, -1, -1, -1, 25.0, 20.0);
    if(strlen(text))
	    SetDynamicObjectMaterialText(board[oBoard][1], 0, text, OBJECT_MATERIAL_SIZE_256x128, "Olde English", 30, 1, 0xFFCC0000, 0x00000000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
	//---
	board[boardID] = id;
	if(id == -1)
	{
		new string[512], Cache: result;
		mysql_format(mysqlPool, string, sizeof(string), "CALL `insertBoard`(%b, %f, %f, %f, %f, \"%e\")", board[bBoard], x, y, z, angle, text);
		result = mysql_query(mysqlPool, string);
		cache_set_active(result);
		cache_get_value_name_int(0, "nextID", board[boardID]);
		cache_delete(result);
	}
	LIST_push_back_arr(boardList, board);
    return LIST_count_nodes(boardList) - 1;
}
SetBoardText(boardid, const text[])
{
	new Pointer: pt = LIST_IT_data_ptr(GetNodeAt(boardList, boardid));
	new board[Board];
	MEM_get_arr(pt, _, board);
	if(!board[bBoard]) return false;
	if(strlen(text) < 1) return false;
	//---
    new string[135], query[300];

	strcpy(string, text);
	new nl, ok;
	do
	{
		nl ++;
		if(strlen(string) > nl*20) strins(string, "\n", nl*20);
		else ok = true;
	}
	while(!ok);
	while(string[strlen(string)] == ' ')
    {
        string[strlen(string)] = '\0';
    }
    //---

	format(board[sBoardText], 128, "%s", text);
    SetDynamicObjectMaterialText(board[oBoard][1], 0, string, OBJECT_MATERIAL_SIZE_256x128, "Olde English", 30, 1, 0xFFCC0000, 0x00000000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
	mysql_format(mysqlPool, query, sizeof(query), "UPDATE board SET text = \"%e\" WHERE idboard = %d", text, board[boardID]);
	mysql_tquery(mysqlPool, query);
	return true;
}

DestroyBoard(ListIt: node)
{
	new Pointer: pt = LIST_IT_data_ptr(node);
	new board[Board], query[256];
	MEM_get_arr(pt, _, board);
	DestroyDynamicObject(board[oBoard][0]);
	DestroyDynamicObject(board[oBoard][1]);
	mysql_format(mysqlPool, query, sizeof(query), "DELETE FROM `board` WHERE idboard = %d", board[boardID]);
	mysql_tquery(mysqlPool, query);
	LIST_erase(boardList, node);
}
#else
CreateBoard(Float:x, Float:y, Float:z, Float:angle, load = -1)
{
	static slotid;
	if(load == -1)
	{
		if(dBoard[slotid][bBoard])
		{
			for(new i = 0; i < MAX_BOARDS; i ++)
		 	{
				if(!dBoard[i][bBoard])
			    {
			    	slotid = i;
			        break;
			    }
			}
			if(dBoard[slotid][bBoard])
			{
				DestroyDynamicObject(dBoard[slotid][oBoard][0]);
				DestroyDynamicObject(dBoard[slotid][oBoard][1]);
			}
		}
	}
	//---
	dBoard[(load == -1) ? slotid : load][bBoard] = true;
	dBoard[(load == -1) ? slotid : load][xBoard] = x;
	dBoard[(load == -1) ? slotid : load][yBoard] = y;
	dBoard[(load == -1) ? slotid : load][zBoard] = z;
	dBoard[(load == -1) ? slotid : load][aBoard] = angle;
    /*-118.68917063
    -0.4128
    -0.2259*/
	dBoard[(load == -1) ? slotid : load][oBoard][0] = CreateDynamicObject(3927, x, y, z, 0.0, 0.0, angle, -1, -1, -1, 50.0, 45.0);
    angle -= 77.38;
	dBoard[(load == -1) ? slotid : load][oBoard][1] = CreateDynamicObject(19805, x - (0.13 * floatsin(-angle, degrees)), y - (0.13 * floatcos(-angle, degrees)), z + 0.7601, 0.0, 0.0, angle + 77.39, -1, -1, -1, 25.0, 20.0);
    SetDynamicObjectMaterialText(dBoard[(load == -1) ? slotid : load][oBoard][1], 0, " ", OBJECT_MATERIAL_SIZE_256x128, "Century Gothic", 48, 0, 0xCC0000FF, 0x00000000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
	//---
    slotid ++;
    if(slotid == MAX_BOARDS) slotid = 0;
    return (slotid == 0) ? MAX_BOARDS : slotid - 1;
}

SetBoardText(boardid, const text[])
{
	if(!(MAX_BOARDS > boardid >= 0)) return false;
	if(!dBoard[boardid][bBoard]) return false;
	if(strlen(text) < 1) return false;
	//---
    new string[135];
	strcpy(string, text);
	new nl, ok;
	do
	{
		nl ++;
		if(strlen(string) > nl*20) strins(string, "\n", nl*20);
		else ok = true;
	}
	while(!ok);
	while(string[strlen(string)] == ' ')
    {
        string[strlen(string)] = '\0';
    }
    //---
	format(dBoard[boardid][sBoardText], 128, "%s", text);
    SetDynamicObjectMaterialText(dBoard[boardid][oBoard][1], 0, string, OBJECT_MATERIAL_SIZE_256x128, "Olde English", 30, 1, 0xFFCC0000, 0x00000000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
	return true;
}

DestroyBoard(boardid)
{
	DestroyDynamicObject(dBoard[boardid][oBoard][0]);
	DestroyDynamicObject(dBoard[boardid][oBoard][1]);
	dBoard[boardid][oBoard][0] = INVALID_OBJECT_ID;
	dBoard[boardid][oBoard][1] = INVALID_OBJECT_ID;
	//---
	dBoard[boardid][xBoard] = 0.0;
	dBoard[boardid][yBoard] = 0.0;
	dBoard[boardid][zBoard] = 0.0;
	dBoard[boardid][aBoard] = 0.0;
}

public LoadBoards_data(name[],value[])
{
	new string[50];
	for(new i = 0; i < MAX_BOARDS; i ++)
	{
	    format(string, sizeof(string), "Panneau%d", i);
		INI_Bool(string, dBoard[i][bBoard]);
	    format(string, sizeof(string), "Texte%d", i);
		INI_String(string, dBoard[i][sBoardText], 128);
	    format(string, sizeof(string), "xSafe%d", i);
		INI_Float(string, dBoard[i][xBoard]);
	    format(string, sizeof(string), "ySafe%d", i);
		INI_Float(string, dBoard[i][yBoard]);
	    format(string, sizeof(string), "zSafe%d", i);
		INI_Float(string, dBoard[i][zBoard]);
	    format(string, sizeof(string), "aSafe%d", i);
		INI_Float(string, dBoard[i][aBoard]);
	}
	return 1;
}

SaveBoards()
{
	new string[50];
	new INI:File = INI_Open(BBPATH);
	INI_SetTag(File, "data");
	for(new i = 0; i < MAX_BOARDS; i ++)
	{
	    format(string, sizeof(string), "Panneau%d", i);
		INI_WriteBool(File,string, dBoard[i][bBoard]);
	    format(string, sizeof(string), "Texte%d", i);
		INI_WriteString(File,string, dBoard[i][sBoardText]);
	    format(string, sizeof(string), "xSafe%d", i);
		INI_WriteFloat(File,string, dBoard[i][xBoard]);
	    format(string, sizeof(string), "ySafe%d", i);
		INI_WriteFloat(File,string, dBoard[i][yBoard]);
	    format(string, sizeof(string), "zSafe%d", i);
		INI_WriteFloat(File,string, dBoard[i][zBoard]);
	    format(string, sizeof(string), "aSafe%d", i);
		INI_WriteFloat(File,string, dBoard[i][aBoard]);
	}
	INI_Close(File);
}
#endif
//---COFFRES FORTS---//
CreateSafe(Float:x, Float:y, Float:z, Float:angle, load = -1)
{
	static slotid;
	if(load == -1)
	{
		if(dSafeInfos[slotid][bSafe])
		{
			for(new i = 0; i < MAX_SAFES; i ++)
		 	{
				if(!dSafeInfos[i][bSafe])
			    {
			    	slotid = i;
			        break;
			    }
			}
			if(dSafeInfos[slotid][bSafe])
			{
				DestroyDynamicObject(dSafeInfos[slotid][oSafe][0]);
				DestroyDynamicObject(dSafeInfos[slotid][oSafe][1]);
			}
		}
	}
	//---
	dSafeInfos[(load == -1) ? slotid : load][bSafe] = true;
	dSafeInfos[(load == -1) ? slotid : load][bOpenSafe] = false;
	dSafeInfos[(load == -1) ? slotid : load][xSafe] = x;
	dSafeInfos[(load == -1) ? slotid : load][ySafe] = y;
	dSafeInfos[(load == -1) ? slotid : load][zSafe] = z;
	dSafeInfos[(load == -1) ? slotid : load][aSafe] = angle;
    /*-118.68917063
    -0.4128
    -0.2259*/
    angle += 119.01892652;
	dSafeInfos[(load == -1) ? slotid : load][oSafe][0] = CreateDynamicObject(19618, x, y, z - 0.539, 0.0, 0.0, angle - 119.01892652, -1, -1, -1, 25.0, 20.0);
	dSafeInfos[(load == -1) ? slotid : load][oSafe][1] = CreateDynamicObject(19619, x + (0.4128 * floatsin(-angle, degrees)), y + (0.4128 * floatcos(-angle, degrees)), z - 0.539, 0.0, 0.0, angle - 119.01892652, -1, -1, -1, 25.0, 20.0);
	//---
    slotid ++;
    if(slotid == MAX_SAFES) slotid = 0;
    return (slotid == 0) ? MAX_SAFES : slotid - 1;
}

DestroySafe(safeid)
{
	DestroyDynamicObject(dSafeInfos[safeid][oSafe][0]);
	DestroyDynamicObject(dSafeInfos[safeid][oSafe][1]);
	dSafeInfos[safeid][oSafe][0] = INVALID_OBJECT_ID;
	dSafeInfos[safeid][oSafe][1] = INVALID_OBJECT_ID;
	for(new i = 0; i < 12; i ++) dSafeInfos[safeid][dItem][i] = 0;
	dSafeInfos[safeid][xSafe] = 0.0;
	dSafeInfos[safeid][ySafe] = 0.0;
	dSafeInfos[safeid][zSafe] = 0.0;
	dSafeInfos[safeid][aSafe] = 0.0;
}

IsPlayerNearSafe(playerid)
{
	new Float:x, Float:y, Float:z, Float:fTrash;
	GetPlayerPos(playerid, x, y, z);
	for(new i = 0; i < MAX_SAFES; i ++)
	{
		if(dSafeInfos[i][bSafe] && IsPlayerInRangeOfPoint(playerid, 1.5, dSafeInfos[i][xSafe], dSafeInfos[i][ySafe], dSafeInfos[i][zSafe]))
		{
			if(CA_RayCastLine(x, y, z, dSafeInfos[i][xSafe], dSafeInfos[i][ySafe], dSafeInfos[i][zSafe], fTrash, fTrash, fTrash) != 0) continue;
			return i;
		}
	}
	return -1;
}

IsSafeEmpty(safeid)
{
	for(new i = 0; i < 12; i ++) if(dSafeInfos[safeid][dItem][i] != 0) return false;
	return true;
}

ChangeSafeDoorState(safeid, bool:open)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i ++) if(IsPlayerInRangeOfPoint(i, 20.0, dSafeInfos[safeid][xSafe], dSafeInfos[safeid][ySafe], dSafeInfos[safeid][zSafe])) PlayerPlaySound(i, 11200, dSafeInfos[safeid][xSafe], dSafeInfos[safeid][ySafe], dSafeInfos[safeid][zSafe]);
	MoveDynamicObject(dSafeInfos[safeid][oSafe][1], dSafeInfos[safeid][xSafe] + (0.4128 * floatsin(-(dSafeInfos[safeid][aSafe] + 119.01892652), degrees)), dSafeInfos[safeid][ySafe] + (0.4128 * floatcos(-(dSafeInfos[safeid][aSafe] + 119.01892652), degrees)), open ? dSafeInfos[safeid][zSafe] - 0.539 : dSafeInfos[safeid][zSafe] - 0.529, 0.005, 0.0, 0.0, open ? dSafeInfos[safeid][aSafe] - 90.0 : dSafeInfos[safeid][aSafe]);
	dSafeInfos[safeid][bOpenSafe] = open;
}

GivePlayerSafeObject(playerid, safeid, objectid, slotid)//Fonction pour foutre un objet dans un coffre fort
{
	if(safeid != -1)
	{
		if(objectid == -1 || objectid == 0)//Si l'objet est nul, on remet ses variables à 0
		{
		    if(playerid != INVALID_PLAYER_ID && dSafeInfos[safeid][dItem][slotid] != 0) UpdateSafe(playerid, safeid, slotid, 0);
			dSafeInfos[safeid][dItem][slotid] = 0;
		}
		else
		{
			if(playerid != INVALID_PLAYER_ID && dSafeInfos[safeid][dItem][slotid] != objectid) UpdateSafe(playerid, safeid, slotid, objectid);
			dSafeInfos[safeid][dItem][slotid] = objectid;
		}
	}
	return 1;
}

UpdateSafe(playerid, safeid, slotid, objectid)//Fonction pour update une case du coffre fort
{
	if(safeid != -1)
	{
		PlayerTextDrawSetPreviewModel(playerid, tSafe[playerid][slotid][0], aObjects[objectid][ObjectModelID]);
		PlayerTextDrawSetPreviewRot(playerid, tSafe[playerid][slotid][0], aObjects[objectid][ObjectRotX], aObjects[objectid][ObjectRotY], aObjects[objectid][ObjectRotZ], aObjects[objectid][ObjectZoom]);
		PlayerTextDrawSetSelectable(playerid, tSafe[playerid][slotid][0], true);
		PlayerTextDrawShow(playerid, tSafe[playerid][slotid][0]);
		//---
		if(pPlayerInfos[playerid][pLangue] == LANGUAGE_EN) PlayerTextDrawSetString(playerid, tSafe[playerid][slotid][1], aObjects[objectid][ObjectEnName]);
		else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_FR) PlayerTextDrawSetString(playerid, tSafe[playerid][slotid][1], aObjects[objectid][ObjectFrName]);
		else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_EN) PlayerTextDrawSetString(playerid, tSafe[playerid][slotid][1], aObjects[objectid][ObjectEsName]);
		else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_PG) PlayerTextDrawSetString(playerid, tSafe[playerid][slotid][1], aObjects[objectid][ObjectPgName]);
		else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_IT) PlayerTextDrawSetString(playerid, tSafe[playerid][slotid][1], aObjects[objectid][ObjectItName]);
		else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_DE) PlayerTextDrawSetString(playerid, tSafe[playerid][slotid][1], aObjects[objectid][ObjectDeName]);
		PlayerTextDrawShow(playerid, tSafe[playerid][slotid][1]);
	}
}

GetPlayerSlotObject(playerid, slot)
{
	switch(slot)
	{
	    case 0, 37: return pPlayerInfos[playerid][HandObject];
	    case 1 .. 36: return pPlayerInfos[playerid][BagObject][slot - 1];
		case 38 .. 43: return (pVehicleInventory[playerid] != -1) ? dVehicleInfos[pVehicleInventory[playerid]][TrunkObject][slot - 38] : 0;
	    case 44 .. 55: return ((pPlayerSafe[playerid] != -1) ? dSafeInfos[pPlayerSafe[playerid]][dItem][slot - 44] : 0);
	}
	return 0;
}

public LoadSafes_data(name[],value[])
{
	new string[50];
	for(new i = 0; i < MAX_SAFES; i ++)
	{
	    format(string, sizeof(string), "Coffre%d", i);
		INI_Bool(string, dSafeInfos[i][bSafe]);
	    format(string, sizeof(string), "Porte%d", i);
		INI_Bool(string, dSafeInfos[i][bOpenSafe]);
	    format(string, sizeof(string), "Code%d", i);
		INI_String(string, dSafeInfos[i][sSafeCode], 5);
	    format(string, sizeof(string), "xSafe%d", i);
		INI_Float(string, dSafeInfos[i][xSafe]);
	    format(string, sizeof(string), "ySafe%d", i);
		INI_Float(string, dSafeInfos[i][ySafe]);
	    format(string, sizeof(string), "zSafe%d", i);
		INI_Float(string, dSafeInfos[i][zSafe]);
	    format(string, sizeof(string), "aSafe%d", i);
		INI_Float(string, dSafeInfos[i][aSafe]);
		for(new j = 0; j < 12; j ++)
		{
	    	format(string, sizeof(string), "%dObjet%d", j, i);
			INI_Int(string, dSafeInfos[i][dItem][j]);
		}
	}
	return 1;
}

SaveSafes()
{
	new string[50];
	new INI:File = INI_Open(SPATH);
	INI_SetTag(File, "data");
	for(new i = 0; i < MAX_SAFES; i ++)
	{
	    format(string, sizeof(string), "Coffre%d", i);
		INI_WriteBool(File,string, dSafeInfos[i][bSafe]);
	    format(string, sizeof(string), "Porte%d", i);
		INI_WriteBool(File,string, dSafeInfos[i][bOpenSafe]);
	    format(string, sizeof(string), "Code%d", i);
		INI_WriteString(File,string, dSafeInfos[i][sSafeCode]);
	    format(string, sizeof(string), "xSafe%d", i);
		INI_WriteFloat(File,string, dSafeInfos[i][xSafe]);
	    format(string, sizeof(string), "ySafe%d", i);
		INI_WriteFloat(File,string, dSafeInfos[i][ySafe]);
	    format(string, sizeof(string), "zSafe%d", i);
		INI_WriteFloat(File,string, dSafeInfos[i][zSafe]);
	    format(string, sizeof(string), "aSafe%d", i);
		INI_WriteFloat(File,string, dSafeInfos[i][aSafe]);
		for(new j = 0; j < 12; j ++)
		{
	    	format(string, sizeof(string), "%dObjet%d", j, i);
			INI_WriteInt(File,string, dSafeInfos[i][dItem][j]);
		}
	}
	INI_Close(File);
}

//---MOBS
//JOHNS
public CreateJohn(id)
{
	new sJohn[15];
	format(sJohn, 15, JOHN_NAME, id + 1);
	dJohn[id][dJohnID] = FCNPC_Create(sJohn);
	pNPCType[dJohn[id][dJohnID]] = MOB_JOHN;
	SpawnJohn(dJohn[id][dJohnID]);
}

SpawnJohn(npcid)
{
	for(new john = 0; john < MAX_JOHNS; john ++)
	{
		if(npcid == dJohn[john][dJohnID])
	    {
			new dSkin = RandomEx(0, 311);
			FCNPC_Spawn(npcid, dSkin, 0.0, -250.0, 5.0);
			FCNPC_SetSkin(npcid, dSkin);
			FCNPC_SetHealth(npcid, 100.0);
    		SetPlayerColor(npcid, 0xCC000000);
			dJohn[john][dJohnMission] = NO_MISSION;
			//SetTimerEx("ReSpawnZombie", 2000, false, "i", dZombie[zombie][dZombieID]);
			break;
		}
	}
}

public IsNPCJohn(npcid)
{
	for(new i = 0; i < MAX_JOHNS; i ++) if(npcid == dJohn[i][dJohnID]) return i;
	return -1;
}

public KillJohn(johnid)
{
	if(johnid == -1) return 0;
	if(FCNPC_IsDead(dJohn[johnid][dJohnID])) return 0;
	FCNPC_Kill(dJohn[johnid][dJohnID]);
	return 1;
}

public IsJohnInZone(johnid, Float:range, Float:x, Float:y, Float:z, bool:checkmission, missionid)
{
	if(checkmission && missionid != dJohn[johnid][dJohnMission]) return false;
	if(IsPlayerInRangeOfPoint(dJohn[johnid][dJohnID], range, x, y, z)) return true;
	return false;
}

GetJohnVictim(johnid)
{
	new Float:dist = 9999.9;
	new playerid = INVALID_PLAYER_ID;
 	new Float:x, Float:y, Float:z, Float:px, Float:py, Float:pz;
	FCNPC_GetPosition(dJohn[johnid][dJohnID], x, y, z);
	new dTarget = 0;
	//---
	if(dJohn[johnid][dJohnType] == JOHN_FRIENDLY)
	{
		if(dJohn[johnid][dJohnTarget] != INVALID_PLAYER_ID && IsPlayerInRangeOfPoint(dJohn[johnid][dJohnTarget], JOHN_SIGHT, x, y, z))//((pNPCType[i] == MOB_ZOMBIE && !IsFCNPCDead(i)) || (pNPCType[i] == 0 && !IsPlayerDead(i))) &&
		{
			dist = GetDistanceToPoint(dJohn[johnid][dJohnTarget], x, y, z);
			GetPlayerPos(dJohn[johnid][dJohnTarget], px, py, pz);
			if(fDetectRange[dJohn[johnid][dJohnTarget]][1] < JOHN_SIGHT && dist < JOHN_SIGHT && !IsColBetweenTwoPos(x, y, z + 1.0, px, py, pz + 1.0)) fDetectRange[dJohn[johnid][dJohnTarget]][1] = JOHN_SIGHT;
			//---
			if(fDetectRange[dJohn[johnid][dJohnTarget]][1] > dist && GetPlayerInterior(dJohn[johnid][dJohnTarget]) == 0 && GetPlayerVirtualWorld(dJohn[johnid][dJohnTarget]) == 0) return dJohn[johnid][dJohnTarget];
			else dTarget = 0;
		}
		else if(dJohn[johnid][dJohnFriend] != INVALID_PLAYER_ID && IsPlayerInRangeOfPoint(dJohn[johnid][dJohnFriend], JOHN_SIGHT * 1.5, x, y, z))
		{
			dTarget = 1;
		}
	}
	else if(dJohn[johnid][dJohnType] == JOHN_HOSTILE)
	{
		if(dJohn[johnid][dJohnTarget] != INVALID_PLAYER_ID && IsPlayerInRangeOfPoint(dJohn[johnid][dJohnTarget], JOHN_SIGHT, x, y, z))//((pNPCType[i] == MOB_ZOMBIE && !IsFCNPCDead(i)) || (pNPCType[i] == 0 && !IsPlayerDead(i))) &&
		{
			dist = GetDistanceToPoint(dJohn[johnid][dJohnTarget], x, y, z);
			GetPlayerPos(dJohn[johnid][dJohnTarget], px, py, pz);
			if(fDetectRange[dJohn[johnid][dJohnTarget]][1] < JOHN_SIGHT && dist < JOHN_SIGHT && !IsColBetweenTwoPos(x, y, z + 1.0, px, py, pz + 1.0)) fDetectRange[dJohn[johnid][dJohnTarget]][1] = JOHN_SIGHT;
			//---
			if(fDetectRange[dJohn[johnid][dJohnTarget]][1] > dist && GetPlayerInterior(dJohn[johnid][dJohnTarget]) == 0 && GetPlayerVirtualWorld(dJohn[johnid][dJohnTarget]) == 0) return dJohn[johnid][dJohnTarget];
			else dTarget = 0;
		}
	}
	//---
	dist = 9999.9;
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i ++)
	{
		new Float:distance;
		distance = GetDistanceToPoint(i, x, y, z);
		//---
	    if(pNPCType[i] == MOB_ZOMBIE && !IsFCNPCDead(i) && FCNPC_IsStreamedInForAnyone(i))
	    {
			FCNPC_GetPosition(i, px, py, pz);
			if((!IsColBetweenTwoPos(x, y, z + 1.0, px, py, pz + 1.0) && distance < 50.0) || distance < 25.0) return i;
	    }
	    else if(dJohn[johnid][dJohnType] != JOHN_PACIFIC)
		{
			if(dTarget == 0 && pNPCType[i] == 0 && !IsPlayerDead(i) && IsPlayerConnected(i) && !CallRemoteFunction("IsPlayerOnCinematic", "i", i) && !IsPlayerOnSpectate(i))
		    {
				GetPlayerPos(i, px, py, pz);
				if(fDetectRange[i][1] < JOHN_SIGHT && distance < JOHN_SIGHT && !IsColBetweenTwoPos(x, y, z + 1.0, px, py, pz + 1.0)) fDetectRange[i][1] = JOHN_SIGHT;
				if(fDetectRange[i][1] > distance && dist > distance && GetPlayerInterior(i) == 0 && GetPlayerVirtualWorld(i) == 0)
				{
				    if(GetPlayerState(i) == PLAYER_STATE_ONFOOT || GetPlayerState(i) == PLAYER_STATE_DRIVER || GetPlayerState(i) == PLAYER_STATE_PASSENGER)
					{
						dist = distance;
						playerid = i;
					}
				}
		    }
	    }
	}
	return (dTarget == 1 ? dJohn[johnid][dJohnFriend] : playerid);
}

SetEnemyForPlayer(playerid, enemyid)
{
	static dLastCheck[MAX_PLAYERS];
	if(!IsPlayerConnected(playerid) || !IsPlayerConnected(enemyid)) return false;
	//---
	new Float:x, Float:y, Float:z;
	GetPlayerPos(enemyid, x, y, z);
	//FCNPC_GetPosition(dJohn[johnid][dJohnID], x, y, z);
	for(new i = 0; i < MAX_JOHNS; i ++)
	{
		if(TimePassedSince(dLastCheck[playerid]) > 10 || dJohn[i][dJohnTarget] == INVALID_PLAYER_ID)
	    {
			if(dJohn[i][dJohnType] == JOHN_FRIENDLY && dJohn[i][dJohnFriend] == playerid && IsPlayerInRangeOfPoint(dJohn[i][dJohnID], JOHN_SIGHT * 2, x, y, z)) dJohn[i][dJohnTarget] = enemyid;
		}
	}
	dLastCheck[playerid] = gettime();
	return true;
}

public ResetDetectRange(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(CallRemoteFunction("GetPlayerMission", "i", playerid) == MISSION_DEFAULT_FRIENDS_CINE7)
		{
		    fDetectRange[playerid][0] = 350.0;
		}
		//---
	    if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK)
		{
			fDetectRange[playerid][0] = (ZOMBIE_DETECT / 4);
			fDetectRange[playerid][1] = (JOHN_DETECT / 4);
			dResetTimer[playerid] = SetTimerEx("ResetDetectRange", 5000, false, "i", playerid);
			return 1;
		}
	    dResetTimer[playerid] = -1;
    	fDetectRange[playerid][1] = JOHN_DETECT;
    	fDetectRange[playerid][0] = ZOMBIE_DETECT;
    }
	return 1;
}

public MoveNPCs()
{
	static dCheckTimes = 0;
	//---JASON
	if(dJason[dJasonID] != INVALID_PLAYER_ID && dJason[dJasonState] == 2) JasonAttack();
	//---MORT
	if(GetBoss(4) && IsMultiple(dCheckTimes, 2)) UpdateDeathBoss();
	//---ZOMBIES
	for(new i = 0; i < MAX_ZOMBIES; i ++)
	{
		if(dZombie[i][dZombieID] != INVALID_PLAYER_ID && FCNPC_IsStreamedInForAnyone(dZombie[i][dZombieID]))
		{
		    if(IsMultiple(dCheckTimes, 2) && dZombie[i][bZombieWayPoint])
			{
				MoveZombie(i);
				continue;
			}
			else if((!dZombie[i][bZombieWayPoint] || (dZombie[i][bDistractable] && dZombie[i][bZombieWayPoint])))
			{
				if(!ZombieAttack(i))
				{
					if(IsMultiple(dCheckTimes, 2))
					{
						MoveZombie(i);
						continue;
					}
				}
			}
		}
	}
	//---JOHNS
	for(new i = 0; i < MAX_JOHNS; i ++)
	{
		if(dJohn[i][dJohnID] != INVALID_PLAYER_ID && FCNPC_IsStreamedInForAnyone(dJohn[i][dJohnID]))
		{
		    if(IsMultiple(dCheckTimes, 2) && dJohn[i][dJohnWayPoint] && !dJohn[i][bDistractable])
			{
				MoveJohn(i);
				continue;
			}
			else if((!dJohn[i][dJohnWayPoint] || (dJohn[i][bDistractable] && dJohn[i][dJohnWayPoint])))
			{
				if(!JohnAttack(i))
				{
					if(IsMultiple(dCheckTimes, 2))
					{
						MoveJohn(i);
						continue;
					}
				}
			}
		}
	}
	//---ZAPPER
	UpdateZapper();
	//---
	dCheckTimes ++;
}

CheckStreamingZones()
{
	dStreamMobs[dBambiStream][0] = 0;
	dStreamMobs[dBambiStream][1] = 0;
	dStreamMobs[dBambiStream][2] = 0;
	dStreamMobs[dBambiStream][3] = 0;
	dStreamMobs[dBloptStream] = 0;
	dStreamMobs[dUFOStream] = 0;
	dStreamMobs[dCactusStream] = 0;
	dStreamMobs[dTMNTStream] = 0;
	dStreamMobs[dZapperStream] = 0;
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i ++)
	{
		if(IsPlayerInDynamicArea(i, dStreamMobs[dBambiZone][0], 0)) dStreamMobs[dBambiStream][0] ++;
		if(IsPlayerInDynamicArea(i, dStreamMobs[dBambiZone][1], 0)) dStreamMobs[dBambiStream][1] ++;
		if(IsPlayerInDynamicArea(i, dStreamMobs[dBambiZone][2], 0)) dStreamMobs[dBambiStream][2] ++;
		if(IsPlayerInDynamicArea(i, dStreamMobs[dBambiZone][3], 0)) dStreamMobs[dBambiStream][3] ++;
		if(IsPlayerInDynamicArea(i, dStreamMobs[dBloptZone], 0)) dStreamMobs[dBloptStream] ++;
		if(IsPlayerInDynamicArea(i, dStreamMobs[dUFOZone], 0)) dStreamMobs[dUFOStream] ++;
		if(IsPlayerInDynamicArea(i, dStreamMobs[dCactusZone], 0)) dStreamMobs[dCactusStream] ++;
		if(IsPlayerInDynamicArea(i, dStreamMobs[dTMNTZone], 0)) dStreamMobs[dTMNTStream] ++;
		if(IsPlayerInDynamicArea(i, dStreamMobs[dZapperZone], 0)) dStreamMobs[dZapperStream] ++;
	}
}

GetVictimPos(playerid, &Float:x, &Float:y, &Float:z)
{
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
		GetPlayerPos(playerid, x, y, z);
    }
	else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
	{
	    new Float:x2, Float:y2, Float:z2, Float:angle;
	    new vehicleid = GetPlayerVehicleID(playerid);
	    GetVehiclePos(vehicleid, x, y, z);
	    GetVehicleZAngle(vehicleid, angle);
	    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, x2, y2, z2);
	    x += (floatdiv(x2, 2) + 0.2) * floatsin(-angle, degrees);
	    y += (floatdiv(x2, 2) + 0.2) * floatcos(-angle, degrees);
	    //z -= z2 / 2;
	}
}

Float:GetDistanceToShoot(weaponid)
{
	switch(weaponid)
	{
		case 0: return 1.3;//Main
		case 1: return 1.3;//Poing américain
		case 2: return 1.3;//Club de golf
		case 3: return 1.3;//Matraque
		case 4: return 1.3;//Couteau
		case 5: return 1.3;//Batte
		case 6: return 1.3;//Pelle
		case 7: return 1.3;//Queue de billard
		case 8: return 1.3;//Katana
		case 9: return 1.3;//Tronçonneuse
		case 10: return 1.3;//Gode violet
		case 11: return 1.3;//Gode blanc
		case 12: return 1.3;//Vibrator blanc
		case 13: return 1.3;//Gode argenté
		case 14: return 1.3;//Fleurs
		case 15: return 1.3;//Cane
		case 16: return 0.0;//Grenade
		case 17: return 0.0;//Lacrymo
		case 18: return 0.0;//Molotov
		case 22: return 20.0;//Pistolet
		case 23: return 20.0;//Silencieux
		case 24: return 20.0;//Desert Eagle
		case 25: return 20.0;//Shotgun
		case 26: return 15.0;//Sawn off
		case 27: return 20.0;//Spas 12
		case 28: return 20.0;//UZI
		case 29: return 40.0;//MP-5
		case 30: return 70.0;//AK-47
		case 31: return 70.0;//M4
		case 32: return 20.0;//TEC-9
		case 33: return 110.0;//Fusil de chasse
		case 34: return 200.0;//Sniper
		case 35: return 0.0;//RPG
		case 36: return 0.0;//Heat Seeker
		case 37: return 5.0;//Flamethrower
		case 38: return 90.0;//Minigun
		case 39: return 0.0;//Satchel
		case 40: return 0.0;//Détonateur
		case 41: return 0.0;//Bombe de peinture
		case 42: return 0.0;//Extincteur
		case 43: return 0.0;//Appareil photo
		case 44: return 0.0;//Vision nocturne
		case 45: return 0.0;//Vision thermique
		case 46: return 0.0;//Parachute
	}
	return 0.0;
}

IsWeaponFirearm(weaponid)
{
	switch(weaponid)
	{
		case 0 .. 21: return false;
		case 22 .. 34: return true;
		case 38: return true;
		default: return false;
	}
	return false;
}

public JohnAttack(johnid)
{
	if(!FCNPC_IsDead(dJohn[johnid][dJohnID]) && !IsPlayerKnockedOut(dJohn[johnid][dJohnID]))
	{
		static victim;
		static Float:dLastDistance = JOHN_SIGHT;
		new Float:x, Float:y, Float:z, Float:x2, Float:y2, Float:z2;
		FCNPC_GetPosition(dJohn[johnid][dJohnID], x, y, z);
		new Float:fShootDistance = GetDistanceToShoot(dJohn[johnid][dJohnWeapon]);
  		//static dResetAim[MAX_JOHNS];
  		//---
  		new oldvictim = victim;
  		victim = GetJohnVictim(johnid);
		if(victim != INVALID_PLAYER_ID)
		{
			GetVictimPos(victim, x2, y2, z2);
			new Float:dist = GetDistanceBetweenPoints(x, y, z, x2, y2, z2);
			//---
			if(dJohn[johnid][dJohnType] == JOHN_FRIENDLY && pNPCType[victim] == 0 && dJohn[johnid][dJohnTarget] != victim) fShootDistance = 1.3;
			//---
			if(IsPlayerInAnyVehicle(victim))
			{
				if(IsPlayerInRangeOfPoint(dJohn[johnid][dJohnID], fShootDistance, x2, y2, z2))
			    {
			    	if(dJohn[johnid][bVehicle] && FCNPC_GetVehicleID(dJohn[johnid][dJohnID]) == GetPlayerVehicleID(dJohn[johnid][dJohnFriend]))
			    	{
			    	    //Si le NPC est dans la bagnole de son "ami"
			    	}
			    	else
			    	{
					    if(dJohn[johnid][dJohnType] == JOHN_HOSTILE || pNPCType[victim] == MOB_ZOMBIE || dJohn[johnid][dJohnTarget] == victim)
					    {
							/*if(dJohn[johnid][dJohnAction] == JOHN_ATTACK)
							{
								FCNPC_StopAim(dJohn[johnid][dJohnID]);
								FCNPC_StopAttack(dJohn[johnid][dJohnID]);
								dJohn[johnid][dJohnAction] = JOHN_STAND;
							}*/
							if(IsWeaponFirearm(dJohn[johnid][dJohnWeapon]))
							{
								if(dJohn[johnid][dJohnAction] != JOHN_ATTACK || victim != oldvictim || !FCNPC_IsShooting(dJohn[johnid][dJohnID]))
								{
									FCNPC_SetWeapon(dJohn[johnid][dJohnID], dJohn[johnid][dJohnWeapon]);
									FCNPC_AimAtPlayer(dJohn[johnid][dJohnID], victim, true, -1, true, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, FCNPC_ENTITY_CHECK_ALL);
									dJohn[johnid][dJohnAction] = JOHN_ATTACK;
								}
							}
							else
							{
								new Float:vHealth;
								GetVehicleHealth(GetPlayerVehicleID(victim), vHealth);
								if(vHealth > 250.0) SetVehicleHealth(GetPlayerVehicleID(victim), vHealth - 50.0);
								FCNPC_AimAtPlayer(dJohn[johnid][dJohnID], victim, false, -1, true, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, FCNPC_ENTITY_CHECK_ALL);
								FCNPC_MeleeAttack(dJohn[johnid][dJohnID], -1, false);
								dJohn[johnid][dJohnAction] = JOHN_ATTACK;
							}
							//---
							dJohn[johnid][dNodes] = 0;
						}
					}
			    }
				else if(!IsPlayerInRangeOfPoint(dJohn[johnid][dJohnID], fShootDistance, x2, y2, z2) && (dJohn[johnid][dJohnType] != JOHN_PACIFIC || pNPCType[victim] == MOB_ZOMBIE || dJohn[johnid][dJohnTarget] == victim))
				{
					if(dJohn[johnid][dJohnAction] == JOHN_ATTACK)
					{
						FCNPC_StopAim(dJohn[johnid][dJohnID]);
						FCNPC_StopAttack(dJohn[johnid][dJohnID]);
						dJohn[johnid][dJohnAction] = JOHN_STAND;
						//dResetAim[johnid] = 0;
					}
					//---
					new Float:angle = GetZAngleBetweenPos(x, y, x2, y2) - 90.0;
				    if(GetDistanceBetweenPoints(x, y, z, x2, y2, z2) > 6.4)
				    {
						x2 = x + 3.4 * floatsin(-angle, degrees);
						y2 = y + 3.4 * floatcos(-angle, degrees);
					}
					else
					{
						if(dJohn[johnid][dJohnType] == JOHN_FRIENDLY && pNPCType[victim] == 0 && dJohn[johnid][dJohnTarget] != victim)
					    {
					        static dCheckTimes = 0;
							if(IsMultiple(dCheckTimes, 5)) FCNPC_EnterVehicle(dJohn[johnid][dJohnID], GetPlayerVehicleID(victim), 1, FCNPC_MOVE_TYPE_RUN);
							//FCNPC_PutInVehicle(dJohn[johnid][dJohnID], GetPlayerVehicleID(victim), 1);
	    					//dJohn[johnid][bVehicle] = true;
	    					//---
							dCheckTimes ++;
							return 1;
					    }
					    else
					    {
					    	x2 = x2 + floatdiv(RandomEx(-5, 5), 10);
							y2 = y2 + floatdiv(RandomEx(-5, 5), 10);
							z2 = z;
						}
					}
					FindZPathCoord(x, y, z, x2, y2, z2);
					z2 += 1.0;
					if(FCNPC_IsMoving(dJohn[johnid][dJohnID])) FCNPC_Stop(dJohn[johnid][dJohnID]);
					if(dist > 25.0) FCNPC_GoTo(dJohn[johnid][dJohnID], x2, y2, z2, FCNPC_MOVE_TYPE_SPRINT, FCNPC_MOVE_SPEED_SPRINT, FCNPC_MOVE_MODE_COLANDREAS, FCNPC_MOVE_PATHFINDING_RAYCAST, 0.0, true, 1.0, 250);
					else FCNPC_GoTo(dJohn[johnid][dJohnID], x2, y2, z2, FCNPC_MOVE_TYPE_RUN, FCNPC_MOVE_SPEED_RUN, FCNPC_MOVE_MODE_COLANDREAS, FCNPC_MOVE_PATHFINDING_RAYCAST, 0.0, true, 1.0, 250);
					dJohn[johnid][dNodes] = 0;
				}
			}
			else
			{
			    if(dJohn[johnid][dJohnType] == JOHN_FRIENDLY && pNPCType[victim] == 0 && dJohn[johnid][dJohnTarget] != victim) fShootDistance = 1.3;
			    //---
				if(IsPlayerInRangeOfPoint(dJohn[johnid][dJohnID], fShootDistance, x2, y2, z2) || (!IsWeaponFirearm(dJohn[johnid][dJohnWeapon]) && pNPCType[victim] == MOB_ZOMBIE && dist < 3.0))
				{
				    if(dJohn[johnid][dJohnType] == JOHN_HOSTILE || pNPCType[victim] == MOB_ZOMBIE || dJohn[johnid][dJohnTarget] == victim)
				    {
				        //---
				        /*static dRebuild[MAX_JOHNS], bool:bMove;
				    	static Float:x3, Float:y3, Float:z3;
				        dRebuild[johnid] ++;
				        if(dRebuild[johnid] == 5)
				        {
							if(IsColBetweenTwoPos(x, y, z, x2, y2, z2))
							{
							    x3 = floatdiv(x + x2, 2);
							    y3 = floatdiv(y + y2, 2);
							    z3 = z;
								FindZPathCoord(x, y, z, x2, y2, z2);
								new bool:bMove;
							}
							dRebuilding[johnid] = 0;
						}*/
						//---
						/*if(dJohn[johnid][dJohnAction] == JOHN_ATTACK)
						{
							FCNPC_StopAim(dJohn[johnid][dJohnID]);
							FCNPC_StopAttack(dJohn[johnid][dJohnID]);
							dJohn[johnid][dJohnAction] = JOHN_STAND;
						}*/
						//---
						if(IsWeaponFirearm(dJohn[johnid][dJohnWeapon]))
						{
							new bool:bAimAgain;
							new Float:fHeadshot = GetJohnHeadshotDistance(johnid);
							if((dLastDistance > fHeadshot && dist <= fHeadshot) || (dLastDistance <= fHeadshot && dist > fHeadshot)) bAimAgain = true;
							//---
							if(dJohn[johnid][dJohnAction] != JOHN_ATTACK || victim != oldvictim || bAimAgain || !FCNPC_IsShooting(dJohn[johnid][dJohnID]))
							{
							    if(dJohn[johnid][dJohnAction] == JOHN_AIMING)
							    {
								    if(dist < fHeadshot) dJohn[johnid][bHeadshot] = true;
								    else dJohn[johnid][bHeadshot] = false;
									FCNPC_SetWeapon(dJohn[johnid][dJohnID], dJohn[johnid][dJohnWeapon]);
									FCNPC_AimAtPlayer(dJohn[johnid][dJohnID], victim, true, -1, true, 0.0, 0.0, (dist > fHeadshot) ? 0.0 : 0.78, 0.0, 0.0, 0.0, FCNPC_ENTITY_CHECK_ALL);
									dJohn[johnid][dJohnAction] = JOHN_ATTACK;
								}
								else
								{
									if(dJohn[johnid][dJohnAction] == JOHN_ATTACK)
									{
										FCNPC_StopAim(dJohn[johnid][dJohnID]);
										FCNPC_StopAttack(dJohn[johnid][dJohnID]);
									}
									new Float:fSkill;
									switch(dJohn[johnid][dJohnSkill])
									{
									    case JOHN_SKILL_NOOB: fSkill = 0.35;
									    case JOHN_SKILL_MILD: fSkill = 0.6;
									    case JOHN_SKILL_PRO: fSkill = 0.8;
									    default: fSkill = 0.35;
									}
									//---
									if(dist < fHeadshot && pNPCType[victim] != 0) fSkill = floatdiv(fSkill, 2);
									FCNPC_SetWeaponInfo(dJohn[johnid][dJohnID], dJohn[johnid][dJohnWeapon], -1, -1, GetWeaponClipSize(dJohn[johnid][dJohnWeapon]), fSkill);
									//---
									FCNPC_SetWeapon(dJohn[johnid][dJohnID], dJohn[johnid][dJohnWeapon]);
									FCNPC_AimAtPlayer(dJohn[johnid][dJohnID], victim, false, -1, true, 0.0, 0.0, (dist > fHeadshot) ? 0.0 : 0.78, 0.0, 0.0, 0.0, FCNPC_ENTITY_CHECK_ALL);
									dJohn[johnid][dJohnAction] = JOHN_AIMING;
								}
							}
							//---
							if(pNPCType[victim] == MOB_ZOMBIE && dist < 5.0)
							{
								new Float:angle = GetZAngleBetweenPos(x, y, x2, y2) + 90.0;
								x2 = x + 2.5 * floatsin(-angle, degrees);
								y2 = y + 2.5 * floatcos(-angle, degrees);
								FindZPathCoord(x, y, z, x2, y2, z2);
								z2 += 1.0;
								//---
								if(!IsColBetweenTwoPos(x, y, z, x2, y2, z2))
								{
									FCNPC_GoTo(dJohn[johnid][dJohnID], x2, y2, z2, FCNPC_MOVE_TYPE_WALK, FCNPC_MOVE_SPEED_WALK, FCNPC_MOVE_MODE_COLANDREAS, FCNPC_MOVE_PATHFINDING_RAYCAST, 0.0, true, 1.0, 250);
								}
							}
						}
						else
						{
							if(pNPCType[victim] == MOB_ZOMBIE)
							{
							    FCNPC_GiveHealth(victim, -10.0);
							}
							FCNPC_AimAtPlayer(dJohn[johnid][dJohnID], victim, false, -1, true, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, FCNPC_ENTITY_CHECK_ALL);
							FCNPC_MeleeAttack(dJohn[johnid][dJohnID], -1, false);
							dJohn[johnid][dJohnAction] = JOHN_ATTACK;
						}
						//---
						dJohn[johnid][dNodes] = 0;
					}
				}
				else if(!IsPlayerInRangeOfPoint(dJohn[johnid][dJohnID], fShootDistance, x2, y2, z2) && (dJohn[johnid][dJohnType] != JOHN_PACIFIC || pNPCType[victim] == MOB_ZOMBIE || dJohn[johnid][dJohnTarget] == victim))
				{
					if(dJohn[johnid][dJohnAction] == JOHN_ATTACK)
					{
						FCNPC_StopAim(dJohn[johnid][dJohnID]);
						FCNPC_StopAttack(dJohn[johnid][dJohnID]);
						dJohn[johnid][dJohnAction] = JOHN_STAND;
						//dResetAim[johnid] = 0;
					}
					if(dJohn[johnid][bVehicle] && dJohn[johnid][dJohnFriend] == victim)
					{
						FCNPC_ExitVehicle(dJohn[johnid][dJohnID]);
						dJohn[johnid][bVehicle] = false;
					}
					//---
					new Float:angle = GetZAngleBetweenPos(x, y, x2, y2) - 90.0;
				    if(GetDistanceBetweenPoints(x, y, z, x2, y2, z2) > 6.4)
				    {
						x2 = x + 3.4 * floatsin(-angle, degrees);
						y2 = y + 3.4 * floatcos(-angle, degrees);
					}
					else
					{
					    x2 = x2 + floatdiv(RandomEx(-7, 7), 10);
					    y2 = y2 + floatdiv(RandomEx(-7, 7), 10);
						z2 = z;
					}
					FindZPathCoord(x, y, z, x2, y2, z2);
					z2 += 1.0;
					if(FCNPC_IsMoving(dJohn[johnid][dJohnID])) FCNPC_Stop(dJohn[johnid][dJohnID]);
					if(dist > 25.0) FCNPC_GoTo(dJohn[johnid][dJohnID], x2, y2, z2, FCNPC_MOVE_TYPE_SPRINT, FCNPC_MOVE_SPEED_SPRINT, FCNPC_MOVE_MODE_COLANDREAS, FCNPC_MOVE_PATHFINDING_RAYCAST, 0.0, true, 1.0, 250);
					else FCNPC_GoTo(dJohn[johnid][dJohnID], x2, y2, z2, FCNPC_MOVE_TYPE_RUN, FCNPC_MOVE_SPEED_RUN, FCNPC_MOVE_MODE_COLANDREAS, FCNPC_MOVE_PATHFINDING_RAYCAST, 0.0, true, 1.0, 250);
					dJohn[johnid][dNodes] = 0;
				}
			}
			dLastDistance = dist;
			return true;
		}
		else
		{
		    return false;
		}
	}
	return false;
}

public GetFreeJohn()
{
	for(new i = 0; i < MAX_JOHNS; i ++) if(dJohn[i][dJohnID] != INVALID_PLAYER_ID && !IsFCNPCDead(dJohn[i][dJohnID]) && (dJohn[i][dJohnMission] == NO_MISSION)) return i;
	return -1;
}

public AddJohnToMission(johnid, skin, type, weaponid, missionid, skill, friendid, Float:x, Float:y, Float:z)
{
	if(johnid != -1)
	{
		if(dJohn[johnid][dJohnAction] == JOHN_ATTACK)
		{
			FCNPC_StopAim(dJohn[johnid][dJohnID]);
			FCNPC_StopAttack(dJohn[johnid][dJohnID]);
			dJohn[johnid][dJohnAction] = JOHN_STAND;
		}
		//---
		for(new i = 1; i < MAX_JOHN_NODES; i ++)
		{
		    dJohn[johnid][fNodeX][i] = 0.0;
		    dJohn[johnid][fNodeY][i] = 0.0;
		    dJohn[johnid][fNodeZ][i] = 0.0;
		}
	    dJohn[johnid][fNodeX][0] = x;
	    dJohn[johnid][fNodeY][0] = y;
	    dJohn[johnid][fNodeZ][0] = z;
	    //---
		dJohn[johnid][fNodeX][5] = 0.0;
		dJohn[johnid][fNodeY][5] = 0.0;
		dJohn[johnid][fNodeZ][5] = 0.0;
	    //---
		FCNPC_RemoveFromVehicle(dJohn[johnid][dJohnID]);
		dJohn[johnid][bVehicle] = false;
	    //---
		dJohn[johnid][dNodes] = 0;
		//---
		dJohn[johnid][dJohnType] = type;
		dJohn[johnid][dJohnFriend] = friendid;
		FCNPC_SetSkin(dJohn[johnid][dJohnID], skin);
	    dJohn[johnid][dJohnWeapon] = weaponid;
		//FCNPC_SetWeaponAccuracy(dJohn[johnid][dJohnID], weaponid, 0.75);
		FCNPC_SetHealth(dJohn[johnid][dJohnID], 100.0);
		FCNPC_SetWeapon(dJohn[johnid][dJohnID], weaponid);
		FCNPC_SetAmmo(dJohn[johnid][dJohnID], 9999999);
		//---
		new Float:fSkill;
		switch(skill)
		{
		    case JOHN_SKILL_NOOB: fSkill = 0.35;
		    case JOHN_SKILL_MILD: fSkill = 0.6;
		    case JOHN_SKILL_PRO: fSkill = 0.8;
			default: fSkill = 0.35;
		}
		dJohn[johnid][dJohnSkill] = skill;
		//---
		SetJohnWeaponSkill(johnid, weaponid, skill);
		FCNPC_SetWeaponInfo(dJohn[johnid][dJohnID], weaponid, -1, -1, GetWeaponClipSize(weaponid), fSkill);
		//---
		//FCNPC_ToggleInfiniteAmmo(dJohn[johnid][dJohnID], true);
		//---
		FCNPC_SetPosition(dJohn[johnid][dJohnID], x, y, z);
		dJohn[johnid][dJohnMission] = missionid;
	}
}

SetJohnWeaponSkill(johnid, weaponid, skill)
{
	//---
	new level = 0;
	if(skill == JOHN_SKILL_NOOB) level = 0;
	else if(skill == JOHN_SKILL_MILD) level = 998;
	else if(skill == JOHN_SKILL_PRO) level = 999;
	//---
    switch(weaponid)
    {
        case 22: FCNPC_SetWeaponSkillLevel(dJohn[johnid][dJohnID], WEAPONSKILL_PISTOL, level);//Pistolets
        case 24: FCNPC_SetWeaponSkillLevel(dJohn[johnid][dJohnID], WEAPONSKILL_DESERT_EAGLE, level);//Desert Eagle
        case 25: FCNPC_SetWeaponSkillLevel(dJohn[johnid][dJohnID], WEAPONSKILL_SHOTGUN, level);//Fusil à pompe
        case 26: FCNPC_SetWeaponSkillLevel(dJohn[johnid][dJohnID], WEAPONSKILL_SAWNOFF_SHOTGUN, level);//Sawn off
        case 27: FCNPC_SetWeaponSkillLevel(dJohn[johnid][dJohnID], WEAPONSKILL_SPAS12_SHOTGUN, level);//Spas 12
        case 28: FCNPC_SetWeaponSkillLevel(dJohn[johnid][dJohnID], WEAPONSKILL_MICRO_UZI, level);//UZI
        case 29: FCNPC_SetWeaponSkillLevel(dJohn[johnid][dJohnID], WEAPONSKILL_MP5, level);//MP-5
        case 30: FCNPC_SetWeaponSkillLevel(dJohn[johnid][dJohnID], WEAPONSKILL_AK47, level);//AK-47
        case 31: FCNPC_SetWeaponSkillLevel(dJohn[johnid][dJohnID], WEAPONSKILL_M4, level);//M4
        case 32: FCNPC_SetWeaponSkillLevel(dJohn[johnid][dJohnID], WEAPONSKILL_MICRO_UZI, level);//Tec9
        case 34: FCNPC_SetWeaponSkillLevel(dJohn[johnid][dJohnID], WEAPONSKILL_SNIPERRIFLE, level);//Sniper
	}
	FCNPC_SetAmmoInClip(dJohn[johnid][dJohnID], (weaponid == 22 || weaponid == 26 || weaponid == 28 || weaponid == 32) ? GetWeaponClipSize(weaponid) / 2 : GetWeaponClipSize(weaponid));
}

public SetJohnType(johnid, type, friendid, targetid)
{
	dJohn[johnid][dJohnType] = type;
	dJohn[johnid][dJohnTarget] = targetid;
	dJohn[johnid][dJohnFriend] = friendid;
}

public Float:GetJohnHeadshotDistance(johnid)
{
	new Float:fDistance;
	switch(dJohn[johnid][dJohnWeapon])
	{
		case 0: fDistance = 1.3;//Main
		case 1: fDistance = 1.3;//Poing américain
		case 2: fDistance = 1.3;//Club de golf
		case 3: fDistance = 1.3;//Matraque
		case 4: fDistance = 1.3;//Couteau
		case 5: fDistance = 1.3;//Batte
		case 6: fDistance = 1.3;//Pelle
		case 7: fDistance = 1.3;//Queue de billard
		case 8: fDistance = 1.3;//Katana
		case 9: fDistance = 1.3;//Tronçonneuse
		case 10: fDistance = 1.3;//Gode violet
		case 11: fDistance = 1.3;//Gode blanc
		case 12: fDistance = 1.3;//Vibrator blanc
		case 13: fDistance = 1.3;//Gode argenté
		case 14: fDistance = 1.3;//Fleurs
		case 15: fDistance = 1.3;//Cane
		case 16: fDistance = 0.0;//Grenade
		case 17: fDistance = 0.0;//Lacrymo
		case 18: fDistance = 0.0;//Molotov
		case 22: fDistance = 10.0;//Pistolet
		case 23: fDistance = 10.0;//Silencieux
		case 24: fDistance = 10.0;//Desert Eagle
		case 25: fDistance = 8.0;//Shotgun
		case 26: fDistance = 5.0;//Sawn off
		case 27: fDistance = 10.0;//Spas 12
		case 28: fDistance = 10.0;//UZI
		case 29: fDistance = 15.0;//MP-5
		case 30: fDistance = 20.0;//AK-47
		case 31: fDistance = 22.0;//M4
		case 32: fDistance = 10.0;//TEC-9
		case 33: fDistance = 35.0;//Fusil de chasse
		case 34: fDistance = 40.0;//Sniper
		case 35: fDistance = 0.0;//RPG
		case 36: fDistance = 0.0;//Heat Seeker
		case 37: fDistance = 5.0;//Flamethrower
		case 38: fDistance = 25.0;//Minigun
		case 39: fDistance = 0.0;//Satchel
		case 40: fDistance = 0.0;//Détonateur
		case 41: fDistance = 0.0;//Bombe de peinture
		case 42: fDistance = 0.0;//Extincteur
		case 43: fDistance = 0.0;//Appareil photo
		case 44: fDistance = 0.0;//Vision nocturne
		case 45: fDistance = 0.0;//Vision thermique
		case 46: fDistance = 0.0;//Parachute
		default: fDistance = 10.0;
	}
	if(dJohn[johnid][dJohnSkill] == JOHN_SKILL_NOOB) fDistance /= 3;
	else if(dJohn[johnid][dJohnSkill] == JOHN_SKILL_MILD) fDistance /= 1.5;
	//else if(dJohn[johnid][dJohnSkill] == JOHN_SKILL_PRO)
	return fDistance;
}

public SetJohnPos(johnid, Float:range, Float:x, Float:y, Float:z)
{
	if(johnid == -1) return 0;
	if(FCNPC_IsDead(dJohn[johnid][dJohnID])) return 0;
	new Float:angle = floatrand(0, 359.9);
	FCNPC_SetPosition(dJohn[johnid][dJohnID], x + range * floatsin(-angle, degrees), y + range * floatcos(-angle, degrees), z);
	return 1;
}

public SetJohnWayPoint(johnid, waypoints, Float:x, Float:y, Float:z, bool:distractable, speed, Float:x2, Float:y2, Float:z2)
{
	//if(johnid == 0) LogInfo(true, "Test 1");
    dJohn[johnid][dJohnWayPoint] = waypoints;
    dJohn[johnid][dJohnWayPointSpeed] = speed;
	dJohn[johnid][bDistractable] = distractable;
    dJohn[johnid][fNodeX][4] = x;
    dJohn[johnid][fNodeY][4] = y;
    dJohn[johnid][fNodeZ][4] = z;
	if(waypoints == 2)
	{
	    dJohn[johnid][fNodeX][5] = x2;
	    dJohn[johnid][fNodeY][5] = y2;
	    dJohn[johnid][fNodeZ][5] = z2;
    }
    else
	{
	    dJohn[johnid][fNodeX][5] = 0.0;
	    dJohn[johnid][fNodeY][5] = 0.0;
	    dJohn[johnid][fNodeZ][5] = 0.0;
    }
	//if(johnid == 0) LogInfo(true, "Test 2: %f, %f, %f - %f, %f, %f", x, y, z, x2, y2, z2);
	return 1;
}

public MoveJohn(johnid)
{
	static dPathTries[MAX_JOHNS], dRemainWalk[MAX_JOHNS] = {5, ...}, dJohnScared[MAX_JOHNS];
	if(!FCNPC_IsStreamedInForAnyone(dJohn[johnid][dJohnID]) && dRemainWalk[johnid] == 0 && !dJohn[johnid][dJohnWayPoint]) return 0;
	else if(!FCNPC_IsStreamedInForAnyone(dJohn[johnid][dJohnID]) && dRemainWalk[johnid] > 0) dRemainWalk[johnid] --;
	//---
	if(!FCNPC_IsDead(dJohn[johnid][dJohnID]) && dJohn[johnid][dJohnID] != INVALID_PLAYER_ID)
	{
	    if(IsPlayerKnockedOut(dJohn[johnid][dJohnID]))
	    {
	        DecreaseKnockOut(dJohn[johnid][dJohnID]);
	        return 1;
	    }
	    new Float:x, Float:y, Float:z, Float:x2, Float:y2, Float:z2;
		new victim = GetJohnVictim(johnid);
		//---
		if(dJohn[johnid][dJohnAction] == JOHN_ATTACK)
		{
			FCNPC_StopAim(dJohn[johnid][dJohnID]);
			FCNPC_StopAttack(dJohn[johnid][dJohnID]);
			dJohn[johnid][dJohnAction] = JOHN_STAND;
		}
		else if(dJohn[johnid][dJohnAction] == JOHN_SCARED)
		{
			dJohnScared[johnid] --;
		    if(dJohnScared[johnid] <= -1)
			{
				dJohnScared[johnid] = 15;
		        return 1;
			}
		    else if(dJohnScared[johnid] == 0)
		    {
		        dJohn[johnid][dJohnAction] = JOHN_STAND;
				FCNPC_ClearAnimations(dJohn[johnid][dJohnID]);
		    }
		    else
		    {
		        return 1;
		    }
		}
		//---
		if(dJohn[johnid][dJohnWayPoint])
		{
			//if(johnid == 0) LogInfo(true, "Test 3");
			if(dRemainWalk[johnid] < 5) dRemainWalk[johnid] = 5;
			//---
			routeCalculus:
			FCNPC_GetPosition(dJohn[johnid][dJohnID], x, y, z);
			x2 = dJohn[johnid][fNodeX][4];
			y2 = dJohn[johnid][fNodeY][4];
			z2 = dJohn[johnid][fNodeZ][4];
			//---
			new Float:angle = GetZAngleBetweenPos(x, y, x2, y2) - 90.0;
		    if(GetDistanceBetweenPoints(x, y, z, x2, y2, z2) > 10.0)
		    {
				x2 = x + ((dJohn[johnid][dJohnWayPointSpeed] == 2) ? 12.0 : 6.8) * floatsin(-angle, degrees);
				y2 = y + ((dJohn[johnid][dJohnWayPointSpeed] == 2) ? 12.0 : 6.8) * floatcos(-angle, degrees);
			}
			else
			{
			    x2 = x2 + floatdiv(RandomEx(-7, 7), 10);
			    y2 = y2 + floatdiv(RandomEx(-7, 7), 10);
				z2 = z;
			}
			FindZPathCoord(x, y, z, x2, y2, z2);
			z2 += 1.0;
			//---
			switch(dJohn[johnid][dJohnWayPointSpeed])
			{
				case 0: FCNPC_GoTo(dJohn[johnid][dJohnID], x2, y2, z2, FCNPC_MOVE_TYPE_WALK, FCNPC_MOVE_SPEED_WALK, FCNPC_MOVE_MODE_COLANDREAS, FCNPC_MOVE_PATHFINDING_RAYCAST, 0.0, true, 0.0, 250);
				case 1: FCNPC_GoTo(dJohn[johnid][dJohnID], x2, y2, z2, FCNPC_MOVE_TYPE_RUN, FCNPC_MOVE_SPEED_RUN, FCNPC_MOVE_MODE_COLANDREAS, FCNPC_MOVE_PATHFINDING_RAYCAST, 0.0, true, 0.0, 250);
				case 2: FCNPC_GoTo(dJohn[johnid][dJohnID], x2, y2, z2, FCNPC_MOVE_TYPE_SPRINT, FCNPC_MOVE_SPEED_SPRINT, FCNPC_MOVE_MODE_COLANDREAS, FCNPC_MOVE_PATHFINDING_RAYCAST, 0.0, true, 0.0, 250);
			}
			//if(johnid == 0) LogInfo(true, "Test 4");
	    	dJohn[johnid][dNodes] = 0;
	    	if(IsPlayerInRangeOfPoint(dJohn[johnid][dJohnID], 3.0, dJohn[johnid][fNodeX][4], dJohn[johnid][fNodeY][4], dJohn[johnid][fNodeZ][4]))
			{
				//if(johnid == 0) LogInfo(true, "Test 5");
			    if(dJohn[johnid][dJohnWayPoint] == 2)
			    {
					if(johnid == 0) LogInfo(true, "Test 6");
					dJohn[johnid][fNodeX][4] = dJohn[johnid][fNodeX][5];
					dJohn[johnid][fNodeY][4] = dJohn[johnid][fNodeY][5];
					dJohn[johnid][fNodeZ][4] = dJohn[johnid][fNodeZ][5];
					dJohn[johnid][fNodeX][5] = 0.0;
					dJohn[johnid][fNodeY][5] = 0.0;
					dJohn[johnid][fNodeZ][5] = 0.0;
                    dJohn[johnid][dJohnWayPoint] = 1;
					CallRemoteFunction("OnJohnReachesWayPoint", "i", johnid);
					//if(johnid == 0) LogInfo(true, "Test 7");
					goto routeCalculus;
			    }
			    else
			    {
					//if(johnid == 0) LogInfo(true, "Test 8");
					dJohn[johnid][dJohnWayPoint] = 0;
					CallRemoteFunction("OnJohnReachesWayPoint", "i", johnid);
					//if(johnid == 0) LogInfo(true, "Test 9");
				}
			}
		}
		//---
		else if(victim == INVALID_PLAYER_ID && dJohn[johnid][dJohnAction] == JOHN_ROAM)
		{
			FCNPC_GetPosition(dJohn[johnid][dJohnID], x, y, z);
		    if(dJohn[johnid][dNodes] == 0)//Si le zombie n'a pas de mouvements enregistrés
		    {
				new dDirection = RandomEx(1, 9);
				new Float:angle;
				new Float:fDump;
				new dNode = 0;
				switch(dDirection)
				{
					case 1: angle = 0.0;//N
					case 2: angle = 45.0;//NO
					case 3: angle = 90.0;//O
					case 4: angle = 135.0;//SO
					case 5: angle = 180.0;//S
					case 6: angle = 225.0;//SE
					case 7: angle = 270.0;//E
					case 8: angle = 315.0;//NE
				}
		        for(new i = MAX_JOHN_NODES; i > 0; i --)
		        {
		            new Float:ang = angle + floatrand(-27.5, 27.5);
					x2 = x + 2.5 * floatsin(-ang, degrees);
					y2 = y + 2.5 * floatcos(-ang, degrees);
					z2 = z;
					FindZPathCoord(x, y, z, x2, y2, z2);
					z2 += 1.0;
					if(CA_RayCastLine(x, y, z, x2, y2, z2, fDump, fDump, fDump) == 0)
					{
					    dJohn[johnid][fNodeX][i - 1] = x2;
					    dJohn[johnid][fNodeY][i - 1] = y2;
					    dJohn[johnid][fNodeZ][i - 1] = z2;
					    x = x2, y = y2, z = z2;
					    dNode = i;
					}
					else
					{
					    dNode = i;
					    break;
					}
		        }
				if(dNode == MAX_JOHN_NODES)
				{
				    dPathTries[johnid] ++;
				    dJohn[johnid][dNodes] = 1;
					FCNPC_GetPosition(dJohn[johnid][dJohnID], dJohn[johnid][fNodeX][0], dJohn[johnid][fNodeY][0], dJohn[johnid][fNodeZ][0]);
				}
				if(dNode == 0)
				{
				    dJohn[johnid][dNodes] = MAX_JOHN_NODES - 1;
				}
				else
				{
					for(new i = dNode; i < MAX_JOHN_NODES; i ++)
					{
					    dJohn[johnid][fNodeX][MAX_JOHN_NODES - dNode - 1] = dJohn[johnid][fNodeX][i];
					    dJohn[johnid][fNodeY][MAX_JOHN_NODES - dNode - 1] = dJohn[johnid][fNodeY][i];
					    dJohn[johnid][fNodeZ][MAX_JOHN_NODES - dNode - 1] = dJohn[johnid][fNodeZ][i];
					}
					dJohn[johnid][dNodes] = MAX_JOHN_NODES - dNode + 1;
					dPathTries[johnid] = 0;
				}
		    }
			if(dPathTries[johnid] == 3)
			{
				FCNPC_Kill(dJohn[johnid][dJohnID]);
				dPathTries[johnid] = 0;
			}
			else
			{
			    if(dRemainWalk[johnid] < 5) dRemainWalk[johnid] = 5;
			    #if defined ZOMBIE_SPECIAL_WALK
				FCNPC_ApplyAnimation(dJohn[johnid][dJohnID], "PED", "WALK_DRUNK", 4.1, 0, 0, 0, 0, 1000);
				#endif
				FCNPC_GoTo(dJohn[johnid][dJohnID], dJohn[johnid][fNodeX][dJohn[johnid][dNodes] - 1], dJohn[johnid][fNodeY][dJohn[johnid][dNodes] - 1], dJohn[johnid][fNodeZ][dJohn[johnid][dNodes] - 1], FCNPC_MOVE_TYPE_WALK, FCNPC_MOVE_SPEED_WALK, FCNPC_MOVE_MODE_COLANDREAS, FCNPC_MOVE_PATHFINDING_RAYCAST, 0.0, true, 0.0, 250);
			}
	    	dJohn[johnid][dNodes] --;
		    if(dJohn[johnid][dNodes] == -1) dJohn[johnid][dNodes] = 0;
			//---
		}
	}
	return 1;
}

//ZOMBIES
public CreateZombie(id)
{
	new sZombie[15];
	format(sZombie, 15, ZOMBIE_NAME, id + 1);
	dZombie[id][dZombieID] = FCNPC_Create(sZombie);
	pNPCType[dZombie[id][dZombieID]] = MOB_ZOMBIE;
	SpawnZombie(dZombie[id][dZombieID]);
	if(id == MAX_ZOMBIES - 1)
	{
		SetTimer("MoveNPCs", 500, true);
		SendRconCommand("password 0");
	}
}

SpawnZombie(npcid)
{
	for(new zombie = 0; zombie < MAX_ZOMBIES; zombie ++)
	{
		if(npcid == dZombie[zombie][dZombieID])
	    {
			new zSkin = 0;
			new Float:fZombieSpawns[][3] =
			{
			    //---RED COUNTY
				{209.1414, -173.0814, 1.5781},//Blueberry
				{785.9221, -606.2787, 16.3359},//Dillimore
				{1271.5508, 295.0828, 20.6563},//Montgommery
				{-61.1210, 0.4518, 3.1172},//Blueberry Acres
				{2240.3445,-77.6846,26.5122},//Palomino Creek
				{734.7232,-468.6853,16.6168}, //Usine Armes Dillimore
				{906.0907,28.9306,87.2272}, //Fern Ridge
				{1557.7100, 31.4414, 24.1641},//Départ courses
				{1942.9865, 221.6578, 28.9491},//Ferme Palomino Creek
				//---FORÊT
				{-2123.8711,-2481.7368,30.6250},//Angel Pine
				{-548.1393,-478.7454,25.5178}, //Fallen Tree
				{-589.2219,-1051.5774,23.3272}, //Camping
				{-487.4872,-1347.4398,26.6994}, //Flint Range
				{-423.5382,-1803.8933,4.7250}, //Rivière Back O Beyond
				{-746.9127,-2073.0469,9.9573}, //Maison du Caribou
				{-1190.3136,-2349.6147,19.3157}, //Pont Back O Beyond - Shady Creeks
				{-1386.6246,-2441.3845,36.1338}, //Shady Creeks
				{-1649.4493,-2339.0818,48.8012}, //Shady Creeks près du lac
				{-1689.1039,-1777.0139,33.9188}, //Angel Pine Junkyard forêt
				{-1882.1804,-1642.3981,21.7500}, //Angel Pine Junkyard
				//---LV
				{2882.9099, 2420.7839, 10.8203}, // SpawnCamionneurs
				{2748.4265, 1835.5457, 9.0287}, // Chinois
				{2523.0190, 1255.0856, 10.9452}, // Basket
				{2424.4812, 712.3272, 10.8607}, // Rockshore
				{2069.6770, 1297.0120, 10.6719}, // Strip
				{2106.1440, 1692.4806, 10.8203}, // Caligula
				{2100.9214, 2063.8809, 10.8203}, // SexShop
				{2284.8169, 2414.7700, 10.8199}, // Commissariat
				{1907.7280, 2711.9905, 10.8589}, // PricklePine
				{1347.2323, 2442.4426, 6.7344}, // AutorouteNord
				{1618.0056, 2015.8011, 10.8659}, // Redsand
				{1797.1178, 1582.0658, 6.7031}, // AutorouteCentre
				{1428.5160, 1458.8920, 10.8203}, // Aeroport
				{1671.6862, 989.6957, 14.3643}, // LVAFreightDepot
				{1008.8698, 1368.4778, 10.7928}, // Blackfield
				//---DESERT
				{486.0252,1369.8289,4.4626}, // ZombiesOctaneSprings
				{660.3059,1810.2441,5.3595}, // ZombiesStripclub
				{504.2529,2248.0327,33.7982}, // ZombiesBoneCountyNord
				{204.1121,2507.4292,16.4893}, // ZombiesVerdantMeadows
				{-420.7636,2566.1782,41.5122}, // ZombiesLasPayasadas
				{-1495.9065,2655.9673,55.6930}, // ZombiesElQuebrados
				{-2463.5710,2329.3086,4.8359}, // ZombiesBayside
				{-1563.1779,1772.6541,17.0782}, // ZombiesTierraRobada
				{-844.0148,1495.4739,18.5611}, // ZombiesLasBarrancas
				{-715.2629,959.4414,12.2227}, // ZombiesRanch
				{-191.0160,1099.4109,19.5975}, // ZombiesFortCarson1
				{107.6545,1282.1610,20.5405}, // ZombiesFortCarson2
				{52.0657,2081.8423,17.1583}, // ZombiesArea
				{-316.2719,1732.8518,42.6875} // ZombiesRegularTom
			};
			switch(random(7))
			{
				case 0: zSkin = 162, dZombie[zombie][dZombieClass] = NONE, AttachZombieMeat(npcid, 0);
				case 1: zSkin = 78, dZombie[zombie][dZombieClass] = NONE, AttachZombieMeat(npcid, 1);
				case 2: zSkin = 137, dZombie[zombie][dZombieClass] = NONE, AttachZombieMeat(npcid, 2);
				case 3: zSkin = 230, dZombie[zombie][dZombieClass] = SPEED, AttachZombieMeat(npcid, 3);
				case 4: zSkin = 264, dZombie[zombie][dZombieClass] = BOOMER, AttachZombieMeat(npcid, 4);
				case 5: zSkin = 79, dZombie[zombie][dZombieClass] = SMOKER, AttachZombieMeat(npcid, 5);
				case 6: zSkin = 242, dZombie[zombie][dZombieClass] = TANKER, AttachZombieMeat(npcid, 6);
			}
			new dRandSpawn = random(sizeof(fZombieSpawns));
			FCNPC_Spawn(npcid, zSkin, fZombieSpawns[dRandSpawn][0] + float(RandomEx(0, 5)), fZombieSpawns[dRandSpawn][1] + float(RandomEx(0, 5)), fZombieSpawns[dRandSpawn][2]);
			FCNPC_SetSkin(npcid, zSkin);
			if(dZombie[zombie][dZombieClass] == TANKER) FCNPC_SetHealth(npcid, 750.0);
			else FCNPC_SetHealth(npcid, 100.0);
    		SetPlayerColor(npcid, 0xCC000000);
			dZombie[zombie][zMission] = NO_MISSION;
			//SetTimerEx("ReSpawnZombie", 2000, false, "i", dZombie[zombie][dZombieID]);
			break;
		}
	}
}

public IsNPCZombie(npcid)
{
	for(new i = 0; i < MAX_ZOMBIES; i ++) if(npcid == dZombie[i][dZombieID]) return i;
	return -1;
}

public KillZombie(zombieid)
{
	if(zombieid == -1) return 0;
	if(FCNPC_IsDead(dZombie[zombieid][dZombieID])) return 0;
	FCNPC_Kill(dZombie[zombieid][dZombieID]);
	return 1;
}

public IsZombieInZone(zombieid, Float:range, Float:x, Float:y, Float:z, bool:checkmission, missionid)
{
	if(checkmission && missionid != dZombie[zombieid][zMission]) return false;
	if(IsPlayerInRangeOfPoint(dZombie[zombieid][dZombieID], range, x, y, z)) return true;
	return false;
}

public ReSpawnZombie(zombieid)
{
    /*dZombie[zombieid][bZombieKick] = true;
	FCNPC_Destroy(dZombie[zombieid][dZombieID]);
	//---
	new sZombie[15];
	format(sZombie, 15, ZOMBIE_NAME, zombieid + 1);
	dZombie[zombieid][dZombieID] = FCNPC_Create(sZombie);
	SpawnZombie(dZombie[zombieid][dZombieID]);*/
    FCNPC_Respawn(dZombie[zombieid][dZombieID]);
	return 1;
}

public ReSpawnJohn(johnid)
{
    /*dZombie[zombieid][bZombieKick] = true;
	FCNPC_Destroy(dZombie[zombieid][dZombieID]);
	//---
	new sZombie[15];
	format(sZombie, 15, ZOMBIE_NAME, zombieid + 1);
	dZombie[zombieid][dZombieID] = FCNPC_Create(sZombie);
	SpawnZombie(dZombie[zombieid][dZombieID]);*/
    FCNPC_Respawn(dJohn[johnid][dJohnID]);
	return 1;
}

AttachZombieMeat(npcid, zombieskin)
{
	switch(zombieskin)
	{
	    case 0://162
	    {
	        for(new i = 0; i < 10; i ++) S_RemovePlayerAttachedObject(npcid, i);
	        S_SetPlayerAttachedObject(npcid, 0, 2908, 2, 0.0815, 0.0584, 0.0, 0.0, 180.0, 261.6187, 1.1, 1.1, 1.1);
	        S_SetPlayerAttachedObject(npcid, 1, 2804, 13, 0.0, -0.0463, 0.0, 332.213, 0.0, 291.4784, 0.7, 1.0, 1.0);
	        S_SetPlayerAttachedObject(npcid, 2, 2806, 1, 0.0446, 0.0424, 0.0, 281.2083, 185.6259, 291.3593, 0.8245, 0.5193, 1.1128);
	        S_SetPlayerAttachedObject(npcid, 3, 2804, 4, 0.24, -0.0394, 0.0, 190.7377, 354.3471, 100.718, 1.0, 1.0, 1.0);
	        S_SetPlayerAttachedObject(npcid, 4, 2804, 11, 0.2047, -0.0211, 0.0, 0.0, 0.0, 290.6079, 1.0, 1.0, 1.0);
	        S_SetPlayerAttachedObject(npcid, 5, 2804, 8, 0.4046, -0.0356, 0.0, 169.5196, 0.0, 90.0, 1.0, 1.0, 1.0);
	        S_SetPlayerAttachedObject(npcid, 6, 341, 1, -0.01473, -0.6251, 0.1759, 344.2541, 114.8595, 94.4643, 1.0, 1.0, 1.0);
	        S_SetPlayerAttachedObject(npcid, 7, 2804, 12, 0.3065, -0.0928, 0.0, 0.0, 358.9303, 284.6369, 1.0, 1.0, 1.0);
	        S_SetPlayerAttachedObject(npcid, 8, 2806, 7, 0.0522, 0.0291, 0.0756, 268.7624, 172.2399, 0.0, 0.7, 0.5289, 1.0);
	    }
	    case 1://78
	    {
	        for(new i = 0; i < 10; i ++) S_RemovePlayerAttachedObject(npcid, i);
	        S_SetPlayerAttachedObject(npcid, 0, 2908, 2, 0.0815, 0.0584, 0.0, 0.0, 180.0, 275.8802, 1.3, 1.3, 1.3);
	        S_SetPlayerAttachedObject(npcid, 1, 2803, 1, 0.0127, 0.2063, 0.0, 89.3711, 175.4105, 155.5535, 0.5, 0.5, 0.3);
	        S_SetPlayerAttachedObject(npcid, 2, 2804, 4, 0.2934, -0.0266, 0.0642, 100.5877, 2.1713, 87.5561, 1.2, 1.2, 1.2);
	        S_SetPlayerAttachedObject(npcid, 3, 2806, 1, -0.092, 0.0654, 0.0, 94.4287, 353.6995, 290.099, 1.0, 1.0, 1.3701);
	        S_SetPlayerAttachedObject(npcid, 4, 2804, 11, 0.0934, -0.0626, 0.0, 0.0, 0.0, 280.4098, 1.0, 1.0, 1.0);
	    }
	    case 2://137
	    {
	        for(new i = 0; i < 10; i ++) S_RemovePlayerAttachedObject(npcid, i);
	        S_SetPlayerAttachedObject(npcid, 0, 2806, 2, -0.0315, 0.0291, 0.009, 281.2002, 168.0945, 119.333, 0.3, 0.2, 0.3);
	        S_SetPlayerAttachedObject(npcid, 1, 2907, 1, -0.0152, 0.05, 0.0242, 270.0, 0.0, 90.0, 1.0, 0.8776, 1.2);
	        S_SetPlayerAttachedObject(npcid, 2, 2806, 11, 0.0, -0.0359, 0.0, 189.1581, 0.0, 273.444, 0.3447, 0.8, 0.7219);
	        S_SetPlayerAttachedObject(npcid, 3, 2806, 8, 0.3206, -0.05, 0.0, 0.0, 0.0, 90.0, 0.3, 0.8, 0.6152);
	        S_SetPlayerAttachedObject(npcid, 4, 2804, 13, 0.0864, -0.0478, -0.0309, 244.4234, 0.1609, 108.6022, 1.0, 1.0, 1.0);
	    }
	    case 3://230
	    {
	        for(new i = 0; i < 10; i ++) S_RemovePlayerAttachedObject(npcid, i);
	        S_SetPlayerAttachedObject(npcid, 0, 2804, 8, 0.3083, -0.32, 0.0, 180.0, 0.0, 111.2751, 1.0, 1.0, 1.0);
	        S_SetPlayerAttachedObject(npcid, 1, 3008, 16, 0.3477, 0.1049, 0.3763, 71.7228, 270.4132, 348.0623, 1.0, 1.0, 1.0);
	        S_SetPlayerAttachedObject(npcid, 2, 2908, 2, 0.0, 0.0514, 0.0, 180.0, 0.0, 102.5641, 1.0, 1.0, 1.0);
	        S_SetPlayerAttachedObject(npcid, 3, 2806, 1, 0.0, 0.0784, -0.0388, 90.0, 357.476, 101.474, 0.7, 0.7, 0.7);
	    }
	    case 4://264
	    {
	        for(new i = 0; i < 10; i ++) S_RemovePlayerAttachedObject(npcid, i);
	        S_SetPlayerAttachedObject(npcid, 0, 2806, 8, 0.4837, -0.0207, 0.0, 344.595, 0.0, 90.0, 0.5296, 1.0, 0.7186);
	        S_SetPlayerAttachedObject(npcid, 1, 335, 3, -0.0332, -0.0421, 0.2721, 0.0, 140.1435, 0.0, 1.0, 1.0, 1.0);
	        S_SetPlayerAttachedObject(npcid, 2, 1654, 1, 0.0, 0.2607, 0.0, 1.395, 90.0, 186.2677, 1.0, 1.0, 1.0);
	        S_SetPlayerAttachedObject(npcid, 3, 1654, 1, 0.0, 0.2376, -0.156, 31.4815, 71.0975, 129.6182, 1.0, 1.0, 1.0);
	        S_SetPlayerAttachedObject(npcid, 4, 1654, 1, 0.0, 0.24, 0.1592, 0.0, 106.9598, 180.0, 1.0, 1.0, 1.0);
	        S_SetPlayerAttachedObject(npcid, 5, 2804, 12, -0.01151, -0.048, 0.0, 180.0, 0.0, 80.7451, 1.0851, 1.4868, 1.0638);
	    }
	    case 5://79
	    {
	        for(new i = 0; i < 10; i ++) S_RemovePlayerAttachedObject(npcid, i);
	        S_SetPlayerAttachedObject(npcid, 0, 18716, 1, -1.9919, 0.0, 0.0, 90.0, 90.0, 0.0, 1.0, 1.0, 1.0);
	        S_SetPlayerAttachedObject(npcid, 1, 2906, 5, 0.0295, -0.0168, 0.0183, 50.3487, 355.7474, 277.6903, 1.0, 1.0, 1.0);
	        S_SetPlayerAttachedObject(npcid, 2, 2906, 6, 0.0, 0.0, 0.0, 0.0, 0.0, 270.0, 1.0, 1.0, 1.0);
	        S_SetPlayerAttachedObject(npcid, 3, 2228, 1, 0.0, 0.16, 0.0, 90.0, 358.3927, 171.1581, 1.0, 1.0, 1.0);
	        S_SetPlayerAttachedObject(npcid, 4, 19836, 1, 0.0, 0.2509, 0.0, 90.0, 333.3125, 0.0, 1.0, 1.0, 1.0);
	        S_SetPlayerAttachedObject(npcid, 5, 2804, 4, 0.2358, 0.0064, 0.0, 78.1259, 4.4259, 95.5661, 1.0, 1.0, 1.0);
	    }
	    case 6://242
	    {
	        for(new i = 0; i < 10; i ++) S_RemovePlayerAttachedObject(npcid, i);
	        S_SetPlayerAttachedObject(npcid, 0, 19515, 1, -0.0244, 0.0762, 0.0, 0.0, 0.0, 0.0, 1.5, 1.4, 1.2715);
	        S_SetPlayerAttachedObject(npcid, 1, 19142, 12, 0.2102, 0.0737, 0.0, 0.0, 180.0, 0.0, 0.7465, 0.8891, 0.6240);
	        S_SetPlayerAttachedObject(npcid, 2, 19142, 11, 0.1888, 0.0465, 0.0, 0.0, 180.0, 0.0, 0.8356, 0.9063, 0.5471);
	        S_SetPlayerAttachedObject(npcid, 3, 19142, 7, 0.2844, 0.0171, 0.0, 0.0, 180.0, 19.0, 1.0, 1.0, 0.6614);
	        S_SetPlayerAttachedObject(npcid, 4, 19142, 8, 0.2896, 0.0352, 0.0, 0.0, 180.0, 21.2883, 1.0, 1.0, 0.6386);
	        S_SetPlayerAttachedObject(npcid, 5, 2806, 2, -0.0014, 0.0756, 0.0, 88.7878, 0.0, 125.9866, 0.2, 0.2, 0.2);
	        S_SetPlayerAttachedObject(npcid, 6, 2806, 2, -0.0028, 0.0693, 0.0, 90.0, 0.0, 270.0, 0.2, 0.2, 0.2);
	        S_SetPlayerAttachedObject(npcid, 7, 2804, 4, 0.1274, -0.0082, 0.0724, 274.9448, 9.5869, 276.1796, 1.0, 1.0, 1.0);
	    }
	}
}

GetZombieVictim(zombieid)
{
	new Float:dist = 9999.9;
	new playerid = INVALID_PLAYER_ID;
 	new Float:x, Float:y, Float:z, Float:px, Float:py, Float:pz, Float:fDump;
	FCNPC_GetPosition(dZombie[zombieid][dZombieID], x, y, z);
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i ++)
	{
	    if(pNPCType[i] == MOB_JOHN || (pNPCType[i] == 0 && IsPlayerConnected(i) && !CallRemoteFunction("IsPlayerOnCinematic", "i", i) && !IsPlayerOnSpectate(i)))
	    {
			new Float:distance;
			distance = GetDistanceToPoint(i, x, y, z);
			GetPlayerPos(i, px, py, pz);
			if(fDetectRange[i][0] < ZOMBIE_SIGHT && distance < ZOMBIE_SIGHT && CA_RayCastLine(x, y, z + 1.0, px, py, pz + 1.0, fDump, fDump, fDump) == 0) fDetectRange[i][0] = ZOMBIE_SIGHT;
			if(fDetectRange[i][0] > distance && dist > distance && GetPlayerInterior(i) == 0 && GetPlayerVirtualWorld(i) == 0)
			{
			    if(GetPlayerState(i) == PLAYER_STATE_ONFOOT || GetPlayerState(i) == PLAYER_STATE_DRIVER || GetPlayerState(i) == PLAYER_STATE_PASSENGER)
				{
					dist = distance;
					playerid = i;
				}
			}
	    }
	}
	return playerid;
}

public ZombieAttack(zombieid)
{
	if(!FCNPC_IsDead(dZombie[zombieid][dZombieID]) && !IsPlayerKnockedOut(dZombie[zombieid][dZombieID]))
	{
		new victim = GetZombieVictim(zombieid), Float:x, Float:y, Float:z, Float:x2, Float:y2, Float:z2;
		FCNPC_GetPosition(dZombie[zombieid][dZombieID], x, y, z);
		if(victim != INVALID_PLAYER_ID)
		{
			GetVictimPos(victim, x2, y2, z2);
			if(IsPlayerInAnyVehicle(victim))
			{
				if(IsPlayerInRangeOfPoint(dZombie[zombieid][dZombieID], 2.0, x2, y2, z2))
			    {
					#if defined ZOMBIE_KAMIKAZE
			        if(dZombie[zombieid][dZombieClass] == BOOMER)
			        {
						CreateExplosionEx(dZombie[zombieid][dZombieID], x, y, z, EXPLOSION_LARGE, 5.0);
						FCNPC_Kill(dZombie[zombieid][dZombieID]);
						return 1;
			        }
			        #endif
					if(dZombie[zombieid][bZombieAttack])
					{
						FCNPC_StopAim(dZombie[zombieid][dZombieID]);
						FCNPC_StopAttack(dZombie[zombieid][dZombieID]);
						dZombie[zombieid][bZombieAttack] = false;
					}
					FCNPC_AimAtPlayer(dZombie[zombieid][dZombieID], victim, false, -1, true, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, FCNPC_ENTITY_CHECK_ALL);
					FCNPC_MeleeAttack(dZombie[zombieid][dZombieID], -1, false);
					dZombie[zombieid][bZombieAttack] = true;
					//---
					dZombie[zombieid][bZombieAttack] = true;
					//---
					ZombieGruntPlayer(zombieid, victim, RandomEx(0, 4), x, y, z);
					//---
					new Float:vHealth;
					GetVehicleHealth(GetPlayerVehicleID(victim), vHealth);
					if(vHealth > 250.0) SetVehicleHealth(GetPlayerVehicleID(victim), vHealth - 50.0);
					dZombie[zombieid][dNodes] = 0;
			    }
				else
				{
					if(dZombie[zombieid][bZombieAttack])
					{
						FCNPC_StopAim(dZombie[zombieid][dZombieID]);
						FCNPC_StopAttack(dZombie[zombieid][dZombieID]);
						dZombie[zombieid][bZombieAttack] = false;
					}
					ZombieGruntPlayer(zombieid, victim, RandomEx(0, 4), x, y, z);
					FCNPC_GoTo(dZombie[zombieid][dZombieID], x2, y2, z2, (dZombie[zombieid][dZombieClass] == SPEED) ? FCNPC_MOVE_TYPE_SPRINT : FCNPC_MOVE_TYPE_RUN, (dZombie[zombieid][dZombieClass] == SPEED) ? FCNPC_MOVE_SPEED_SPRINT : FCNPC_MOVE_SPEED_RUN, FCNPC_MOVE_MODE_COLANDREAS, FCNPC_MOVE_PATHFINDING_RAYCAST, 0.0, true, 1.0, 250);
					dZombie[zombieid][dNodes] = 0;
				}
			}
			else
			{
				if(IsPlayerInRangeOfPoint(dZombie[zombieid][dZombieID], 1.3, x2, y2, z2))
				{
					#if defined ZOMBIE_KAMIKAZE
			        if(dZombie[zombieid][dZombieClass] == BOOMER)
			        {
						CreateExplosionEx(dZombie[zombieid][dZombieID], x, y, z, EXPLOSION_LARGE, 5.0);
						FCNPC_Kill(dZombie[zombieid][dZombieID]);
			        }
			        #endif
					if(dZombie[zombieid][bZombieAttack])
					{
						FCNPC_StopAim(dZombie[zombieid][dZombieID]);
						FCNPC_StopAttack(dZombie[zombieid][dZombieID]);
						dZombie[zombieid][bZombieAttack] = false;
					}
					FCNPC_AimAtPlayer(dZombie[zombieid][dZombieID], victim, false, -1, true, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, FCNPC_ENTITY_CHECK_ALL);
					FCNPC_MeleeAttack(dZombie[zombieid][dZombieID], -1, false);
					dZombie[zombieid][bZombieAttack] = true;
					if(pNPCType[victim] == MOB_JOHN)
					{
					    FCNPC_GiveHealth(victim, -5.0);
					}
					else
					{
						ZombieGruntPlayer(zombieid, victim, RandomEx(0, 4), x, y, z);
						//---
						if(!IsPlayerInvincible(victim))
						{
						    #if defined ARMOUR_LOW
							GivePlayerHealth(victim, -ZOMBIE_DAMAGE, 0, dZombie[zombieid][dZombieID]);
							#else
							GivePlayerArmour(victim, -ZOMBIE_DAMAGE, 0, dZombie[zombieid][dZombieID]);
							#endif
						}
					}
					dZombie[zombieid][dNodes] = 0;
				}
				else
				{
					if(dZombie[zombieid][bZombieAttack])
					{
						FCNPC_StopAim(dZombie[zombieid][dZombieID]);
						FCNPC_StopAttack(dZombie[zombieid][dZombieID]);
						dZombie[zombieid][bZombieAttack] = false;
					}
					ZombieGruntPlayer(zombieid, victim, RandomEx(0, 4), x, y, z);
					//GetVictimPos(victim, x2, y2, z2);
					new Float:angle = GetZAngleBetweenPos(x, y, x2, y2) - 90.0;
				    if(GetDistanceBetweenPoints(x, y, z, x2, y2, z2) > 6.4)
				    {
						x2 = x + ((dZombie[zombieid][dZombieClass] == SPEED) ? 6.4 : 3.4) * floatsin(-angle, degrees);
						y2 = y + ((dZombie[zombieid][dZombieClass] == SPEED) ? 6.4 : 3.4) * floatcos(-angle, degrees);
					}
					else
					{
					    x2 = x2 + floatdiv(RandomEx(-5, 5), 10);
					    y2 = y2 + floatdiv(RandomEx(-5, 5), 10);
						z2 = z;
					}
					FindZPathCoord(x, y, z, x2, y2, z2);
					z2 += 1.0;
					if(FCNPC_IsMoving(dZombie[zombieid][dZombieID])) FCNPC_Stop(dZombie[zombieid][dZombieID]);
					FCNPC_GoTo(dZombie[zombieid][dZombieID], x2, y2, z2, (dZombie[zombieid][dZombieClass] == SPEED) ? FCNPC_MOVE_TYPE_SPRINT : FCNPC_MOVE_TYPE_RUN, (dZombie[zombieid][dZombieClass] == SPEED) ? FCNPC_MOVE_SPEED_SPRINT : FCNPC_MOVE_SPEED_RUN, FCNPC_MOVE_MODE_COLANDREAS, FCNPC_MOVE_PATHFINDING_RAYCAST, 0.0, true, 1.0, 250);
					//FCNPC_GoTo(dZombie[zombieid][dZombieID], dZombie[zombieid][fNodeX][dZombie[zombieid][dNodes] - 1], dZombie[zombieid][fNodeY][dZombie[zombieid][dNodes] - 1], dZombie[zombieid][fNodeZ][dZombie[zombieid][dNodes] - 1], FCNPC_MOVE_TYPE_WALK, FCNPC_MOVE_SPEED_WALK, FCNPC_MOVE_MODE_COLANDREAS, FCNPC_MOVE_PATHFINDING_RAYCAST, 0.0, true, 0.0, 250);
					//FCNPC_GoToPlayer(dZombie[zombieid][dZombieID], victim, (dZombie[zombieid][dZombieClass] == SPEED) ? FCNPC_MOVE_TYPE_SPRINT : FCNPC_MOVE_TYPE_RUN, (dZombie[zombieid][dZombieClass] == SPEED) ? FCNPC_MOVE_SPEED_SPRINT : FCNPC_MOVE_SPEED_RUN, FCNPC_MOVE_MODE_COLANDREAS, FCNPC_MOVE_PATHFINDING_RAYCAST, 0.0, true, 1.5, 1.5, 250);
					dZombie[zombieid][dNodes] = 0;
				}
			}
			return true;
		}
		else
		{
		    return false;
		}
	}
	return false;
}

ZombieGruntPlayer(zombieid, playerid, grunt, Float:x, Float:y, Float:z)
{
	//printf("Kou odin");
	static pLastGrunt[MAX_PLAYERS] = {-1, ...};
	static pZombieLastGrunt[MAX_PLAYERS][MAX_ZOMBIES];
	//printf("Kou dva");
	if(TimePassedSince(pZombieLastGrunt[playerid][zombieid]) > 2 && TimePassedSince(pLastGrunt[playerid]) > 2)
 	{
 	    #if defined SCREAMING_STREAMING
 	    switch(grunt)
 	    {
			case 0: PlayAudioStreamForPlayer(playerid, "http://www.c4nn4.com/musicsamp/zattack1.mp3", x, y, z, 50.0, 1);
			case 1: PlayAudioStreamForPlayer(playerid, "http://www.c4nn4.com/musicsamp/zattack2.mp3", x, y, z, 25.0, 1);
			case 2: PlayAudioStreamForPlayer(playerid, "http://www.c4nn4.com/musicsamp/zattack3.mp3", x, y, z, 50.0, 1);
			case 3: PlayAudioStreamForPlayer(playerid, "http://www.c4nn4.com/musicsamp/zattack4.mp3", x, y, z, 25.0, 1);
			case 4://FAR ROAM
			{
				if(RandomEx(0, 2) == 1) PlayAudioStreamForPlayer(playerid, "http://www.c4nn4.com/musicsamp/zfarroam1.mp3", x, y, z, 25.0, 1);
				else PlayAudioStreamForPlayer(playerid, "http://www.c4nn4.com/musicsamp/zfarroam2.mp3", x, y, z, 25.0, 1);
			}
 	    }
		#else
 	    switch(grunt)
 	    {
			case 0: PlayerPlaySound(playerid, 7871, x, y, z);
			case 1: PlayerPlaySound(playerid, 7868, x, y, z);
			case 2: PlayerPlaySound(playerid, 7048, x, y, z);
			case 3: PlayerPlaySound(playerid, 7879, x, y, z);
			case 4://FAR ROAM
			{
				if(RandomEx(0, 2) == 1) PlayAudioStreamForPlayer(playerid, "http://www.c4nn4.com/musicsamp/zfarroam1.mp3", x, y, z, 25.0, 1);
				else PlayAudioStreamForPlayer(playerid, "http://www.c4nn4.com/musicsamp/zfarroam2.mp3", x, y, z, 25.0, 1);
			}
 	    }
		#endif
 	    DrawPlayerMarker(playerid, dZombie[zombieid][dZombieID]);
 	    pZombieLastGrunt[playerid][zombieid] = gettime();
 	    pLastGrunt[playerid] = gettime();
    }
    else if(TimePassedSince(pZombieLastGrunt[playerid][zombieid]) > 2)
    {
 	    DrawPlayerMarker(playerid, dZombie[zombieid][dZombieID]);
 	    pZombieLastGrunt[playerid][zombieid] = gettime();
    }
	return 1;
}

public GetFreeZombie()
{
	for(new i = 0; i < MAX_ZOMBIES; i ++) if(dZombie[i][dZombieID] != INVALID_PLAYER_ID && !IsFCNPCDead(dZombie[i][dZombieID]) && (dZombie[i][zMission] == NO_MISSION/* || dZombie[i][dStreams] < 1*/)) return i;
	return -1;
}

public AddZombieToMission(zombieid, missionid, Float:x, Float:y, Float:z)
{
	if(zombieid != -1)
	{
		if(dZombie[zombieid][bZombieAttack])
		{
			FCNPC_StopAim(dZombie[zombieid][dZombieID]);
			FCNPC_StopAttack(dZombie[zombieid][dZombieID]);
			dZombie[zombieid][bZombieAttack] = false;
		}
		//---
		for(new i = 1; i < MAX_ZOMBIE_NODES; i ++)
		{
		    dZombie[zombieid][fNodeX][i] = 0.0;
		    dZombie[zombieid][fNodeY][i] = 0.0;
		    dZombie[zombieid][fNodeZ][i] = 0.0;
		}
	    dZombie[zombieid][fNodeX][0] = x;
	    dZombie[zombieid][fNodeY][0] = y;
	    dZombie[zombieid][fNodeZ][0] = z;
	    //---
		dZombie[zombieid][dNodes] = 0;
		//---
		/*new Float:x2, Float:y2, Float:z2;
		GetPlayerPos(dZombie[zombieid][dZombieID], x2, y2, z2);
		printf("Zombie: %f, %f, %f, %d to => %f, %f, %f", x2, y2, z2, GetPlayerVirtualWorld(dZombie[zombieid][dZombieID]), x, y, z);
		SetPlayerPos(dZombie[zombieid][dZombieID], x, y, z);
		GetPlayerPos(dZombie[zombieid][dZombieID], x2, y2, z2);
		printf("Zombie: %f, %f, %f, %d", x2, y2, z2, GetPlayerVirtualWorld(dZombie[zombieid][dZombieID]));*/
		//---
		FCNPC_SetPosition(dZombie[zombieid][dZombieID], x, y, z);
		//MoveRNPC(dZombie[zombieid][dZombieID], x, y, z, 500.0);
		dZombie[zombieid][zMission] = missionid;
	}
}

public SetZombiePos(zombieid, Float:range, Float:x, Float:y, Float:z)
{
	if(zombieid == -1) return 0;
	if(FCNPC_IsDead(dZombie[zombieid][dZombieID])) return 0;
	new Float:angle = floatrand(0, 359.9);
	FCNPC_SetPosition(dZombie[zombieid][dZombieID], x + range * floatsin(-angle, degrees), y + range * floatcos(-angle, degrees), z);
	return 1;
}

//public IsZombie
public SetZombieWayPoint(zombieid, Float:x, Float:y, Float:z, bool:distractable, speed)
{
    dZombie[zombieid][bZombieWayPoint] = true;
    dZombie[zombieid][dZombieWayPointSpeed] = speed;
	dZombie[zombieid][bDistractable] = distractable;
    dZombie[zombieid][fNodeX][4] = x;
    dZombie[zombieid][fNodeY][4] = y;
    dZombie[zombieid][fNodeZ][4] = z;
	return 1;
}

public MoveZombie(zombieid)
{
	static dPathTries[MAX_ZOMBIES], dRemainWalk[MAX_ZOMBIES] = {5, ...}, dWater[MAX_ZOMBIES] = {10, ...};
	if(!FCNPC_IsStreamedInForAnyone(dZombie[zombieid][dZombieID]) && dRemainWalk[zombieid] == 0 && !dZombie[zombieid][bZombieWayPoint])
	{
		dZombie[zombieid][zMission] = NO_MISSION;
		return 0;
	}
	else if(!FCNPC_IsStreamedInForAnyone(dZombie[zombieid][dZombieID]) && dRemainWalk[zombieid] > 0)
	{
		dRemainWalk[zombieid] --;
	}
	//---
	if(!FCNPC_IsDead(dZombie[zombieid][dZombieID]) && dZombie[zombieid][dZombieID] != INVALID_PLAYER_ID)
	{
	    if(IsPlayerKnockedOut(dZombie[zombieid][dZombieID]))
	    {
	        DecreaseKnockOut(dZombie[zombieid][dZombieID]);
	        return 1;
	    }
	    new Float:x, Float:y, Float:z, Float:x2, Float:y2, Float:z2;
		new victim = GetZombieVictim(zombieid);
		if(dZombie[zombieid][bZombieAttack])
		{
			FCNPC_StopAim(dZombie[zombieid][dZombieID]);
			FCNPC_StopAttack(dZombie[zombieid][dZombieID]);
			dZombie[zombieid][bZombieAttack] = false;
		}
		if(IsPlayerInWater(dZombie[zombieid][dZombieID]))
		{
		    if(-- dWater[zombieid] == 0) FCNPC_Kill(dZombie[zombieid][dZombieID]);
		}
		else
		{
		    if(dWater[zombieid] < 10) dWater[zombieid] ++;
		}
		//---
		if(dZombie[zombieid][bZombieWayPoint] && !IsPlayerKnockedOut(dZombie[zombieid][dZombieID]))
		{
			if(dRemainWalk[zombieid] < 5) dRemainWalk[zombieid] = 5;
			//---
			FCNPC_GetPosition(dZombie[zombieid][dZombieID], x, y, z);
			x2 = dZombie[zombieid][fNodeX][4];
			y2 = dZombie[zombieid][fNodeY][4];
			z2 = dZombie[zombieid][fNodeZ][4];
			//---
			new Float:angle = GetZAngleBetweenPos(x, y, x2, y2) - 90.0;
		    if(GetDistanceBetweenPoints(x, y, z, x2, y2, z2) > 10.0)
		    {
				x2 = x + ((dZombie[zombieid][dZombieWayPointSpeed] == 2) ? 12.0 : 6.8) * floatsin(-angle, degrees);
				y2 = y + ((dZombie[zombieid][dZombieWayPointSpeed] == 2) ? 12.0 : 6.8) * floatcos(-angle, degrees);
			}
			else
			{
			    x2 = x2 + floatdiv(RandomEx(-7, 7), 10);
			    y2 = y2 + floatdiv(RandomEx(-7, 7), 10);
				z2 = z;
			}
			FindZPathCoord(x, y, z, x2, y2, z2);
			z2 += 1.0;
			//---
			switch(dZombie[zombieid][dZombieWayPointSpeed])
			{
				case 0: FCNPC_GoTo(dZombie[zombieid][dZombieID], x2, y2, z2, FCNPC_MOVE_TYPE_WALK, FCNPC_MOVE_SPEED_WALK, FCNPC_MOVE_MODE_COLANDREAS, FCNPC_MOVE_PATHFINDING_RAYCAST, 0.0, true, 0.0, 250);
				case 1: FCNPC_GoTo(dZombie[zombieid][dZombieID], x2, y2, z2, FCNPC_MOVE_TYPE_RUN, FCNPC_MOVE_SPEED_RUN, FCNPC_MOVE_MODE_COLANDREAS, FCNPC_MOVE_PATHFINDING_RAYCAST, 0.0, true, 0.0, 250);
				case 2: FCNPC_GoTo(dZombie[zombieid][dZombieID], x2, y2, z2, FCNPC_MOVE_TYPE_SPRINT, FCNPC_MOVE_SPEED_SPRINT, FCNPC_MOVE_MODE_COLANDREAS, FCNPC_MOVE_PATHFINDING_RAYCAST, 0.0, true, 0.0, 250);
			}
	    	dZombie[zombieid][dNodes] = 0;
	    	if(IsPlayerInRangeOfPoint(dZombie[zombieid][dZombieID], 3.0, dZombie[zombieid][fNodeX][4], dZombie[zombieid][fNodeY][4], dZombie[zombieid][fNodeZ][4])) dZombie[zombieid][bZombieWayPoint] = false;
  		}
		//---
		else if(victim == INVALID_PLAYER_ID)
		{
			FCNPC_GetPosition(dZombie[zombieid][dZombieID], x, y, z);
		    if(dZombie[zombieid][dNodes] == 0)//Si le zombie n'a pas de mouvements enregistrés
		    {
				new dDirection = RandomEx(1, 9);
				new Float:angle;
				new Float:fDump;
				new dNode = 0;
				switch(dDirection)
				{
					case 1: angle = 0.0;//N
					case 2: angle = 45.0;//NO
					case 3: angle = 90.0;//O
					case 4: angle = 135.0;//SO
					case 5: angle = 180.0;//S
					case 6: angle = 225.0;//SE
					case 7: angle = 270.0;//E
					case 8: angle = 315.0;//NE
				}
		        for(new i = MAX_ZOMBIE_NODES; i > 0; i --)
		        {
		            new Float:ang = angle + floatrand(-27.5, 27.5);
					x2 = x + 2.5 * floatsin(-ang, degrees);
					y2 = y + 2.5 * floatcos(-ang, degrees);
					z2 = z;
					FindZPathCoord(x, y, z, x2, y2, z2);
					z2 += 1.0;
					if(CA_RayCastLine(x, y, z, x2, y2, z2, fDump, fDump, fDump) == 0)
					{
					    dZombie[zombieid][fNodeX][i - 1] = x2;
					    dZombie[zombieid][fNodeY][i - 1] = y2;
					    dZombie[zombieid][fNodeZ][i - 1] = z2;
					    x = x2, y = y2, z = z2;
					    dNode = i;
					}
					else
					{
					    dNode = i;
					    break;
					}
		        }
				if(dNode == MAX_ZOMBIE_NODES)
				{
				    dPathTries[zombieid] ++;
				    dZombie[zombieid][dNodes] = 1;
					FCNPC_GetPosition(dZombie[zombieid][dZombieID], dZombie[zombieid][fNodeX][0], dZombie[zombieid][fNodeY][0], dZombie[zombieid][fNodeZ][0]);
				}
				if(dNode == 0)
				{
				    dZombie[zombieid][dNodes] = MAX_ZOMBIE_NODES - 1;
				}
				else
				{
					for(new i = dNode; i < MAX_ZOMBIE_NODES; i ++)
					{
					    dZombie[zombieid][fNodeX][MAX_ZOMBIE_NODES - dNode - 1] = dZombie[zombieid][fNodeX][i];
					    dZombie[zombieid][fNodeY][MAX_ZOMBIE_NODES - dNode - 1] = dZombie[zombieid][fNodeY][i];
					    dZombie[zombieid][fNodeZ][MAX_ZOMBIE_NODES - dNode - 1] = dZombie[zombieid][fNodeZ][i];
					}
					dZombie[zombieid][dNodes] = MAX_ZOMBIE_NODES - dNode + 1;
					dPathTries[zombieid] = 0;
				}

		    }
			if(dPathTries[zombieid] == 3)
			{
				FCNPC_Kill(dZombie[zombieid][dZombieID]);
				dPathTries[zombieid] = 0;
			}
			else
			{
			    if(dRemainWalk[zombieid] < 5) dRemainWalk[zombieid] = 5;
			    #if defined ZOMBIE_SPECIAL_WALK
				FCNPC_ApplyAnimation(dZombie[zombieid][dZombieID], "PED", "WALK_DRUNK", 4.1, 0, 0, 0, 0, 1000);
				#endif
				FCNPC_GoTo(dZombie[zombieid][dZombieID], dZombie[zombieid][fNodeX][dZombie[zombieid][dNodes] - 1], dZombie[zombieid][fNodeY][dZombie[zombieid][dNodes] - 1], dZombie[zombieid][fNodeZ][dZombie[zombieid][dNodes] - 1], FCNPC_MOVE_TYPE_WALK, FCNPC_MOVE_SPEED_WALK, FCNPC_MOVE_MODE_COLANDREAS, FCNPC_MOVE_PATHFINDING_RAYCAST, 0.0, true, 0.0, 250);
			}
	    	dZombie[zombieid][dNodes] --;
		    if(dZombie[zombieid][dNodes] == -1) dZombie[zombieid][dNodes] = 0;
			//---
		}
	}
	return 1;
}

FindZPathCoord(Float:x, Float:y, Float:z, Float:x2, Float:y2, &Float:z2, bool:ressourcesave = true)//Fonction pour déterminer quelle position Z est la plus adéquate pour un trajet
{
	new Float:retx[MAX_Z_PATH_COLS], Float:rety[MAX_Z_PATH_COLS], Float:retz[MAX_Z_PATH_COLS], Float: retdist[MAX_Z_PATH_COLS], Float:fTrash, modelids[MAX_Z_PATH_COLS];
	new Float:fDistance[2] = {9999.9, 9999.9}, idx[2] = {-1, -1};
	CA_FindZ_For2DCoord(x2, y2, z2);//On prend la position Z la plus "au dessus"
	new collisions = CA_RayCastMultiLine(x2, y2, z2 + (ressourcesave ? 50.0 : 100.0), x2, y2, z2 - (ressourcesave ? 150.0 : 500.0), retx, rety, retz, retdist, modelids, MAX_Z_PATH_COLS);
	//---
	if(collisions)
	{
		for(new i = 0; i < collisions; i ++)
		{
		    new Float:fDist = floatsqroot(floatpower(floatsub(z, retz[i]), 2));
		    if(fDist < fDistance[0])
		    {
		        if(idx[0] != -1)
		        {
   					fDistance[1] = fDistance[0];
   					idx[1] = idx[0];
   				}
   				//---
		        fDistance[0] = fDist;
		        idx[0] = i;
		    }
		    else if(fDistance[0] < fDist < fDistance[1])
			{
		        fDistance[1] = fDist;
		        idx[1] = i;
			}
		}
		new dChosen;
		if(idx[1] == -1) dChosen = 0;
		else if(fDistance[1] > 4.5) dChosen = 0;
		else dChosen = (CA_RayCastLine(x, y, z, x2, y2, retz[idx[0]] + 0.05, fTrash, fTrash, fTrash) != 0) ? 1 : 0;
		//---
		z2 = (modelids[idx[dChosen]] == 20000) ? retz[idx[dChosen]] - 0.7 : retz[idx[dChosen]];
		return true;
	}
	z2 = 0.0;
	return false;
}

//---Zapper
new oZapper = INVALID_OBJECT_ID;
public UpdateZapper()
{
	static dCheckTimes = 0;
	//---
    new Float:x, Float:y, Float:z, Float:rz;
    new playerid = INVALID_PLAYER_ID;
    //---
    if((!IsValidDynamicObject(oZapper) || oZapper == INVALID_OBJECT_ID) && dStreamMobs[dUFOStream] < 1)
    {
		oZapper = CreateDynamicObject(3350, 213.5, 1865.5, 11.7, 0.0, 0.0, 0.0);
	}
    else if(!(dStreamMobs[dZapperStream] < 1) && IsValidDynamicObject(oZapper))
    {
		playerid = GetClosestPlayerToDynamicObject(oZapper);
		//if(IsPlayerInDynamicArea(playerid, dStreamMobs[dZapperZone]))
		GetPlayerPos(playerid, x, y, z);
		rz = GetZAngleBetweenPos(213.5, 1865.5, x, y) + 90.0;
		MoveDynamicObject(oZapper, 213.5, 1865.5, 11.7 + floatdiv(RandomEx(-100, 100), 10000), 0.5, 0.0, 0.0, rz);
		//---
		if(IsMultiple(dCheckTimes, 2))
		{
		    new objectid = CreateObject(19297, 213.5, 1865.5, 13.2, 0.0, 0.0, 0.0, 200.0);
			PlayerPlaySound(playerid, 17004, 213.5, 1865.5, 13.2);
			x += floatrand(-2.0, 2.0);
			y += floatrand(-2.0, 2.0);
		    z -= 1.7;
			CA_RayCastLine(213.5, 1865.5, 11.7, x, y, z, x, y, z);
		    MoveObject(objectid, x, y, z, 10.0, 0.0, 0.0, 0.0);
			SetTimerEx("OnLaserBlows", floatround(1000 * floatdiv(GetDistanceBetweenPoints(213.5, 1865.5, 11.7, x, y, z), 10.0), floatround_floor) - 1000, false, "ifffi", objectid, x, y, z, EXPLOSION_TINY);
		}
		dCheckTimes ++;
	}
    return 1;
}

//---UFOS---//
new oUFO[MAX_UFOS] = {INVALID_OBJECT_ID, ...};
public MoveMiniUFOs()
{
    new Float:x, Float:y, Float:z, Float:x2, Float:y2, Float:z2, Float:fDump;
    new playernear = INVALID_PLAYER_ID;
    static dUFO[MAX_UFOS];
    static dShoot[MAX_UFOS];
    if(dStreamMobs[dUFOStream] < 1) return 0;
    for(new i = 0; i < MAX_UFOS; i ++)
    {
        if(dShoot[i] != 8) dShoot[i] ++;
        if(!IsValidObject(oUFO[i]) || oUFO[i] == INVALID_OBJECT_ID)
        {
			dUFO[i] = 0;
		}
        else
        {
            if(dShoot[i] == 1 || dShoot[i] == 2)
			{
				dUFO[i] = 4;
			}
            else
            {
				playernear = GetClosestPlayerToObjectArea(oUFO[i]);
				if(playernear != INVALID_PLAYER_ID)
				{
					GetObjectPos(oUFO[i], x, y, z);
					GetPlayerPos(playernear, x2, y2, z2);
					if(CA_RayCastLine(x, y, z, x2, y2, z2 + 1.0, fDump, fDump, fDump) == 0)
					{
						if(IsObjectNearToPlayer(35.0, playernear, oUFO[i]))
						{
						    if(dShoot[i] == 8)
						    {
								dUFO[i] = 2;
								dShoot[i] = 0;
							}
							else
							{
							    dUFO[i] = 3;
							}
						}
						else if(IsObjectNearToPlayer(75.0, playernear, oUFO[i])) dUFO[i] = 3;
						else dUFO[i] = 1;
					}
					else
					{
						dUFO[i] = 1;
					}
				}
				else
			    {
					dUFO[i] = 1;
			    }
			}
		}
        switch(dUFO[i])
        {
            case 0:
            {
                x = floatrand(-71.0, 448.0);
                y = floatrand(1627.0, 2153.0);
                z = floatrand(36.0, 50.0);
				oUFO[i] = CreateObject(18846, x, y, z, 0.0, 0.0, 0.0, 1000.0);
				dUFO[i] = 1;
            }
			case 1:
			{
			    if(!IsObjectMoving(oUFO[i]))
			    {
	                x = floatrand(-71.0, 448.0);
	                y = floatrand(1627.0, 2153.0);
	                z = floatrand(36.0, 50.0);
					MoveObject(oUFO[i], x, y, z, 15.0, 0.0, 0.0, 0.0);
					dUFO[i] = 1;
				}
			}
			case 2:
			{
			    StopObject(oUFO[i]);
			    GetObjectPos(oUFO[i], x, y, z);
			    new objectid = CreateObject(19297, x, y, z, 0.0, 0.0, 0.0, 200.0);
			    GetPlayerPos(playernear, x2, y2, z2);
				PlayerPlaySound(playernear, 17004, x2, y2, z2);
				x2 += floatrand(-8.0, 8.0);
				y2 += floatrand(-8.0, 8.0);
			    z2 -= 1.0;
				CA_RayCastLine(x, y, z, x2, y2, z2, x2, y2, z2);
			    MoveObject(objectid, x2, y2, z2, 20.0, 0.0, 0.0, 0.0);
				SetTimerEx("OnLaserBlows", floatround(1000 * floatdiv(GetDistanceBetweenPoints(x, y, z, x2, y2, z2), 20.0), floatround_floor) - 1000, false, "ifffi", objectid, x2, y2, z2, EXPLOSION_SMALL);
			}
            case 3:
            {
			    GetPlayerPos(playernear, x, y, z);
                x += floatrand(-20.0, 20.0);
                y += floatrand(-20.0, 20.0);
				z = floatrand(36.0, 50.0);
				MoveObject(oUFO[i], x, y, z, 15.0, 0.0, 0.0, floatrand(0.0, 360.0));
				dUFO[i] = 1;
            }
			case 4:
			{
			    StopObject(oUFO[i]);
			}
		}
    }
    return 1;
}

GetClosestPlayerToObjectArea(objectid)
{
	if(IsValidObject(objectid))
	{
	    new Float:xo, Float:yo, Float:zo, Float:xp, Float:yp, Float:zp;
	    GetObjectPos(objectid, xo, yo, zo);
		new closestplayer = INVALID_PLAYER_ID;
		new Float:closestdist = 9999.9999;
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
		    if(FCNPC_IsValid(i)) continue;
		    if(!IsPlayerInvincible(i))
	        {
				GetPlayerPos(i, xp, yp, zp);
				if((147.0464 >= xp >= 133.9190 && 1816.0479 >= yp >= 1802.8507 && 22.546 >= zp >= 17.5453) || 17.5 > zp) continue;
				new Float:dist = GetDistanceBetweenPoints(xo, yo, zo, xp, yp, zp);
				if ((dist < closestdist))
				{
					closestdist = dist;
					closestplayer = i;
				}
			}
		}
		return closestplayer;
	}
	return INVALID_PLAYER_ID;
}
public OnQueryError(errorid, const error[], const callback[], const query[], MySQL:handle)
{
	switch(errorid)
	{
		case CR_SERVER_GONE_ERROR:
		{
			printf("[MYSQL] Connection to database was interrupted, trying to reconnect...");
		}
		case ER_SYNTAX_ERROR:
		{
			printf("[MYSQL] Syntax error in SQL Query : `%s` (in %s)",query, callback);
		}
		default:
		{
			printf("[MYSQL] An error has occurred with a query");
			printf("|--- Error : %s\n|--- Query : %s\n|-- Callback : %s ", error, query, callback);
		}
	}
	return 1;
}
public OnPlayerShootUFO(playerid, ufoid)
{
	#pragma unused ufoid
	GivePlayerExp(playerid, 4);
	OnPlayerGroupKillMob(playerid, MOB_UFO);
	//dShotUFOS ++;
	//if(dShotUFOS == 500 && dBossUFO[dBossState] == 0) SetBossUFOState(1), dShotUFOS = 0;
	return 1;
}

public OnLaserBlows(objectid, Float:x, Float:y, Float:z, type)
{
    DestroyObject(objectid);
	CreateExplosionEx(INVALID_PLAYER_ID, x, y, z, type, 7.0);
}

//---ANIMAUX & ÉLEVAGE
//---Zone bambi: 1853.5639, -885.447, 2662.5891, -188.2079
//						if(!(-993.6174 < bx < -401.1327 && -2756.0581 < by < -2096.8005))
public MoveBambi(bambi)
{
	static dPathTries[MAX_BAMBIS];
	if(!dBambi[bambi][bBambiDead] && dBambi[bambi][oBambi] != INVALID_OBJECT_ID && dStreamMobs[dBambiStream][dBambi[bambi][dBambiZone]] > 0)
	{
	    new Float:x, Float:y, Float:z, Float:x2, Float:y2, Float:z2;
		//---
		GetDynamicObjectPos(dBambi[bambi][oBambi], x, y, z);
		z += 0.6;
		new dPlayerid = GetClosestPlayerToDynamicObject(dBambi[bambi][oBambi]);
		if(dPlayerid != INVALID_PLAYER_ID && IsPlayerInRangeOfPoint(dPlayerid, 30.0, x, y, z))
		{
			GetPlayerPos(dPlayerid, x2, y2, z2);
			new Float:angle = GetZAngleBetweenPos(x, y, x2, y2) + 90.0;
			//---
   			x2 = x + 10.0 * floatsin(-angle, degrees);
			y2 = y + 10.0 * floatcos(-angle, degrees);
			z2 = z;
			//---
			FindZPathCoord(x, y, z, x2, y2, z2);
			z2 += 1.0;
			MoveDynamicObject(dBambi[bambi][oBambi], x2, y2, z2, 10.0, 0.0, 0.0, angle + 90.0);
			dBambi[bambi][dNodes] = 0;
		}
		else if(dPlayerid == INVALID_PLAYER_ID || !IsPlayerInRangeOfPoint(dPlayerid, 30.0, x, y, z))
		{
			if(CA_RayCastLine(x, y, z + 10.0, x, y, z - 10.0, x, y, z) == 20000)
			{
				DestroyDynamicObject(dBambi[bambi][oBambi]);
				dBambi[bambi][oBambi] = INVALID_OBJECT_ID;
				CreateBambi(bambi, (random(2) == 0 ? 0 : random(3) + 1));
				dPathTries[bambi] = 0;
				return 1;
			}
		    if(dBambi[bambi][dNodes] == 0)//Si le bambi n'a pas de mouvements enregistrés
		    {
				new Float:angle;
				new Float:fDump;
				new dNode = 0;
				//---
				if(!(3 >= dBambi[bambi][dBambiZone] >= 0)) dBambi[bambi][dBambiZone] = RandomEx(0, 4);
				switch(dBambi[bambi][dBambiZone])
				{
					case 0://Back O' Beyond
					{
						x2 = floatrand(-994.0, -401.0);
						y2 = floatrand(-2756.0, -2097.0);
					}
					case 1://Northstar Rock
					{
						x2 = floatrand(1854.0, 2662.0);
						y2 = floatrand(-885.0, -188.0);
					}
					case 2://The Panopticon
					{
						x2 = floatrand(-817.0, -350.0);
						y2 = floatrand(-245.0, 105.0);
						/*x2 = floatrand(-968.0, -255.0);
						y2 = floatrand(-352.0, -260.0);*/
					}
					case 3://Fern Ridge
					{
						x2 = floatrand(549.0, 1120.0);
						y2 = floatrand(-126.0, 255.0);
					}
				}
				z2 = 0.0;
				FindZPathCoord(x2, y2, z2, x2, y2, z2, false);
				//---
				if(CA_RayCastLine(x2, y2, z2 + 10.0, x2, y2, z2 - 10.0, x2, y2, z2) == 20000) return 0;
				//---
				angle = GetZAngleBetweenPos(x, y, x2, y2);//; - 90.0;
		        for(new i = MAX_BAMBI_NODES; i > 0; i --)
		        {
					x2 = x + 2.5 * floatsin(-angle, degrees);
					y2 = y + 2.5 * floatcos(-angle, degrees);
					z2 = z;
					FindZPathCoord(x, y, z, x2, y2, z2);
					z2 += 0.6;
					if(CA_RayCastLine(x, y, z, x2, y2, z2, fDump, fDump, fDump) == 0)
					{
					    dBambi[bambi][fNextX][i - 1] = x2;
					    dBambi[bambi][fNextY][i - 1] = y2;
					    dBambi[bambi][fNextZ][i - 1] = z2;
					    x = x2, y = y2, z = z2;
					    dNode = i;
					}
					else
					{
					    dNode = i;
					    break;
					}
		        }
				if(dNode == MAX_BAMBI_NODES)
				{
				    dPathTries[bambi] ++;
				    dBambi[bambi][dNodes] = 1;
					GetDynamicObjectPos(dBambi[bambi][oBambi], dBambi[bambi][fNextX][0], dBambi[bambi][fNextY][0], dBambi[bambi][fNextZ][0]);
				}
				if(dNode == 0)
				{
				    dBambi[bambi][dNodes] = MAX_BAMBI_NODES - 1;
				}
				else
				{
					for(new i = dNode; i < MAX_BAMBI_NODES; i ++)
					{
					    dBambi[bambi][fNextX][MAX_BAMBI_NODES - dNode - 1] = dBambi[bambi][fNextX][i];
					    dBambi[bambi][fNextY][MAX_BAMBI_NODES - dNode - 1] = dBambi[bambi][fNextY][i];
					    dBambi[bambi][fNextZ][MAX_BAMBI_NODES - dNode - 1] = dBambi[bambi][fNextZ][i];
					}
					dBambi[bambi][dNodes] = MAX_BAMBI_NODES - dNode + 1;
					dPathTries[bambi] = 0;
				}
				if(dPathTries[bambi] == 5)
				{
					DestroyDynamicObject(dBambi[bambi][oBambi]);
					dBambi[bambi][oBambi] = INVALID_OBJECT_ID;
					CreateBambi(bambi, (random(2) == 0 ? 0 : random(3) + 1));
					dPathTries[bambi] = 0;
				}
		    }
			else
			{
				new Float:angle;
				GetDynamicObjectPos(dBambi[bambi][oBambi], x, y, z);
				angle = GetZAngleBetweenPos(x, y, dBambi[bambi][fNextX][dBambi[bambi][dNodes] - 1], dBambi[bambi][fNextY][dBambi[bambi][dNodes] - 1]);
		    	MoveDynamicObject(dBambi[bambi][oBambi], dBambi[bambi][fNextX][dBambi[bambi][dNodes] - 1], dBambi[bambi][fNextY][dBambi[bambi][dNodes] - 1], dBambi[bambi][fNextZ][dBambi[bambi][dNodes] - 1], 2.5, 0.0, 0.0, angle);
			}
	    	dBambi[bambi][dNodes] --;
		    if(dBambi[bambi][dNodes] == -1) dBambi[bambi][dNodes] = 0;
		}
	}
	return 1;
}

public SetBambiPos(zone, Float:x, Float:y, Float:z)
{
	new bambi = random(MAX_BAMBIS);
	//---
	DestroyDynamicObject(dBambi[bambi][oBambi]);
	dBambi[bambi][oBambi] = INVALID_OBJECT_ID;
	CreateBambi(bambi, zone);
	SetDynamicObjectPos(dBambi[bambi][oBambi], x, y, z);
	dBambi[bambi][dNodes] = MAX_BAMBI_NODES;
	return true;
}

/*bool:IsBambiIsZone(bambi)
{
    new Float:x, Float:y, Float:z;
	GetDynamicObjectPos(dBambi[bambi][oBambi], x, y, z);
	/---
	switch(dBambi[bambi][dBambiZone])
	{
		case 0: if(-401.0 >= x >= -994.0 && -2097.0 >= y >= -2756.0) return true;//Back O' Beyond
		case 1: if(2662.0 >= x >= 1854.0 && -188.0 >= y >= -885.0) return true;//Northstar Rock
		case 2: if(-255.0 >= x >= -968.0 && -260.0 >= y >= -352.0) return true;//The Panopticon
		case 3: if(1120.0 >= x >= 549.0 && 255.0 >= y >= -126.0) return true;//Fern Ridge
	}
	return false;
}*/

public MoveBambis()
{
	static dCheckTimes = 0;
	/*new dHunted[MAX_BAMBIS];
	for(new i = 0; i < MAX_BAMBIS; i ++) if(!dBambi[i][bBambiDead] && dBambi[i][oBambi] != INVALID_OBJECT_ID) dHunted[i] = MoveHuntedBambi(i);*/
	for(new i = 0; i < MAX_BLOPTS; i ++)
	{
		if(dBlopt[i][bBloptLive] && dBlopt[i][oBlopt] != INVALID_OBJECT_ID)
		{
			MoveBlopt(i);
		}
	}
	for(new i = 0; i < MAX_TMNT; i ++)
	{
		if(dTMNT[i][bTMNTLive] && dTMNT[i][oTMNT] != INVALID_OBJECT_ID)
		{
			MoveTMNT(i);
		}
	}
	for(new i = 0; i < MAX_BAMBIS; i ++) if(!dBambi[i][bBambiDead] && dBambi[i][oBambi] != INVALID_OBJECT_ID)
	{
		MoveBambi(i);
	}
	//---
	dCheckTimes ++;
	return 1;
}

CreateBambi(bambi, zone)
{
	if(dBambi[bambi][oBambi] == INVALID_OBJECT_ID)
	{
	    new Float:x, Float:y, Float:z;
	    do
	    {
			switch(zone)
			{
				case 0://Back O' Beyond
				{
					x = float(RandomEx(-994, -401));
					y = float(RandomEx(-2756, -2097));
				}
				case 1://Northstar Rock
				{
					x = float(RandomEx(1854, 2662));
					y = float(RandomEx(-885, -188));
				}
				case 2://The Panopticon
				{
					x = floatrand(-817.0, -350.0);
					y = floatrand(-245.0, 105.0);
					/*x = float(RandomEx(-968, -255));
					y = float(RandomEx(-352, -260));*/
				}
				case 3://Fern Ridge
				{
					x = float(RandomEx(549, 1120));
					y = float(RandomEx(-126, 255));
				}
			}
	    	CA_FindZ_For2DCoord(x, y, z);
    	}
		while(CA_RayCastLine(x, y, z + 10.0, x, y, z - 10.0, x, y, z) == 20000);
		dBambi[bambi][oBambi] = CreateDynamicObject(19315, x, y, z + 0.6, 0.0, 0.0, 0.0, -1, -1, -1, 550.0);
		dBambi[bambi][dBambiZone] = zone;
		dBambi[bambi][dNodes] = MAX_BAMBI_NODES;
	}
}

//---Cakturn
CreateCakturn(cactusid)
{
	if(dCactus[cactusid][dCactusPlace] == -1)
	{
	    new Float:x, Float:y, Float:z;
		x = floatrand(-146.7301, 861.8479);
		y = floatrand(-141.8699, 1000.3712);
		CA_FindZ_For2DCoord(x, y, z);
	    //---
	    dCactus[cactusid][oCactus] = CreateObject(651, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		dCactus[cactusid][oCactusAttach][0] = CreateObject(626, x, y, z, 0.0, 0.0, 0.0); //object(xmasorb3) (1)
		dCactus[cactusid][oCactusAttach][1] = CreateObject(3003, x, y, z, 0.0, 0.0, 0.0); //object(baskt_ball_hi) (1)
		dCactus[cactusid][oCactusAttach][2] = CreateObject(3003, x, y, z, 0.0, 0.0, 0.0); //object(baskt_ball_hi) (2)
		//dBlopt[bloptid][oBloptAttach][0] = CreateDynamicObject(19590,2481.0039062,1047.8549805,56.9469986,340.0000000,0.0000000,159.9993896); //object(wooziessword1) (2)
		AttachObjectToObject(dCactus[cactusid][oCactusAttach][0], dCactus[cactusid][oCactus], 0.28, 0.031, 0.8701, 0.0, 0.0, 0.0, 1);
		AttachObjectToObject(dCactus[cactusid][oCactusAttach][1], dCactus[cactusid][oCactus], 0.2148, 0.0801, 1.144, 0.0, 0.0, 0.0, 1);
		AttachObjectToObject(dCactus[cactusid][oCactusAttach][2], dCactus[cactusid][oCactus], 0.1879, 0.219, 1.144, 0.0, 0.0, 0.0, 1);
        SpawnCakturn(cactusid);
        dCactus[cactusid][dCactusHealth] = 1800;
        //---
/*2496.333, 1050.6309, 56.5019
2496.613, 1050.6619, 57.372
2496.5478, 1050.711, 57.6459
2496.5209, 1050.8499, 57.6459*/
	}
}

SpawnCakturn(cactusid)
{
	static dUsedSlot[18] = {-1, ...};
	for(new i = 0; i < 18; i ++) if(dUsedSlot[i] != -1 && dCactus[dUsedSlot[i]][dCactusPlace] == -1) dUsedSlot[i] = -1;
	//---
	new dRandomPlace;
	do dRandomPlace = random(18);
	while(dUsedSlot[dRandomPlace] != -1);
	//---
	new Float:fSpawnPos[18][3] =
	{
		{23.1382, 954.3029, 19.0538},
		{-11.7533, 948.3218, 18.5991},
		{-12.5322, 977.3193, 18.8492},
		{-39.5293, 972.4194, 18.7491},
		{-54.3014, 926.0817, 20.7663},
		{-55.8212, 900.3830, 20.9933},
		{-91.3466, 911.3268, 20.1912},
		{-79.0024, 886.7401, 20.6739},
		{-108.6827, 917.0599, 19.2743},
		{-97.4778, 944.0028, 19.4523},
		{-93.7165, 975.7208, 18.8227},
		{-56.7992, 990.6510, 18.7571},
		{-7.0473, 1000.3712, 18.8196},
		{23.6051, 987.1642, 18.3437},
		{40.9649, 946.2031, 19.3340},
		{-146.7301, 926.8308, 18.6605},
		{-135.4846, 886.7606, 17.8176},
		{-121.4018, 861.8479, 17.0728}
	};
	SetObjectPos(dCactus[cactusid][oCactus], fSpawnPos[dRandomPlace][0], fSpawnPos[dRandomPlace][1], fSpawnPos[dRandomPlace][2]);
	dCactus[cactusid][dCactusPlace] = dRandomPlace;
	dUsedSlot[dRandomPlace] = cactusid;
    dCactus[cactusid][dCactusHealth] = 1800;
	return dRandomPlace;
}

OnPlayerKillsCakturn(playerid, cactusid)
{
	GivePlayerExp(playerid, 2);
	dCactus[cactusid][dCactusPlace] = -1;
	OnPlayerGroupKillMob(playerid, MOB_CACTUS);
	new Float:x, Float:y, Float:z;
	GetObjectPos(dCactus[cactusid][oCactus], x, y, z);
	PlayerPlaySound(playerid, 32402, x, y, z);
	SetTimerEx("DestroyObjectEx", 2000, false, "ib", CreateObject(18725, x, y, z + 2.5, 180.0, 0.0, 0.0), false);
	SpawnCakturn(cactusid);
}

UpdateCactus()
{
	static dShoot[MAX_CACTUS] = {3, ...};
	static dThorn[MAX_CACTUS] = {INVALID_OBJECT_ID, ...};
	if(dStreamMobs[dCactusStream] < 1) return 0;
	for(new i = 0; i < MAX_CACTUS; i ++)
	{
	    if(dCactus[i][dCactusPlace] == -1)
	    {
			CreateCakturn(i);
	    }
	    else
	    {
	        new playerid = GetClosestPlayerToObject(dCactus[i][oCactus]);
	        if(playerid != INVALID_PLAYER_ID)
	        {
				new Float:x, Float:y, Float:z, Float:ox, Float:oy, Float:oz, Float:vx, Float:vy, Float:vz, Float:rz;
				GetObjectPos(dCactus[i][oCactus], ox, oy, oz);
				GetPlayerPos(playerid, x, y, z);
				rz = GetZAngleBetweenPos(ox, oy, x, y) - 10.0;
				SetObjectRot(dCactus[i][oCactus], 0.0, 0.0, rz);
				//---
				if(IsObjectNearToPlayer(3.0, dCactus[i][oCactus], playerid))
				{
				    GivePlayerHealth(playerid, -350, REASON_BLOODLOSS);
				}
				//---
				if(IsValidObject(dThorn[i]))
				{
				    if(!IsObjectMoving(dThorn[i]))
				    {
					    DestroyObject(dThorn[i]);
					    dThorn[i] = INVALID_OBJECT_ID;
				    }
					else if(IsObjectNearToPlayer(3.0, dThorn[i], playerid))
					{
					    DestroyObject(dThorn[i]);
					    dThorn[i] = INVALID_OBJECT_ID;
					    GivePlayerHealth(playerid, -350, REASON_BLOODLOSS);
					}
				}
				else
				{
					if(dShoot[i] < 3)
					{
						dShoot[i] ++;
					}
					else if(dShoot[i] == 3 && !IsValidObject(dThorn[i]) && IsObjectNearToPlayer(30.0, dCactus[i][oCactus], playerid) && !IsColBetweenTwoPos(ox, oy, oz, x, y, z))
					{
						dThorn[i] = CreateObject(19092, ox, oy, oz, 0.0, 0.0, rz + 90.0, 50.0);
						GetVectorFromSegment(ox, oy, oz, x, y, z, vx, vy, vz);
					    x = ox + floatmul(vx, 35.0);
					    y = oy + floatmul(vy, 35.0);
					    z = oz + floatmul(vz, 35.0);
						MoveObject(dThorn[i], x, y, z, 5.0);
						dShoot[i] = 0;
					}
					else if(dShoot[i] > 3)
					{
						dShoot[i] = 3;
					}
				}
	        }
	    }
	}
	return 1;
}

//---TMNT
CreateTMNT(turtleid)
{
	if(!dTMNT[turtleid][bTMNTLive])
	{
	    new Float:x, Float:y, Float:z;
		x = floatrand(283.4311, 389.2719);
		y = floatrand(-530.8967, -430.2325);
		CA_FindZ_For2DCoord(x, y, z);
	    //---
	    dTMNT[turtleid][oTMNT] = CreateObject(1609, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		dTMNT[turtleid][oTMNTAttach] = CreateObject(18888, x, y, z, 0.0, 0.0, 0.0); //object(xmasorb3) (1)
		dTMNT[turtleid][oTMNTSword] = CreateObject(339, x, y, z, 0.0, 0.0, 0.0); //object(baskt_ball_hi) (1)
		//dBlopt[bloptid][oBloptAttach][0] = CreateDynamicObject(19590,2481.0039062,1047.8549805,56.9469986,340.0000000,0.0000000,159.9993896); //object(wooziessword1) (2)
		AttachObjectToObject(dTMNT[turtleid][oTMNTAttach], dTMNT[turtleid][oTMNT], 0.2061, -0.1861, -0.0031, 0.0, 90.0, 90.0, 1);
		AttachObjectToObject(dTMNT[turtleid][oTMNTSword], dTMNT[turtleid][oTMNT], 0.8931, 0.8149, -0.0281, 0.0, 45.0, 90.0, 1);
        //---
		dTMNT[turtleid][bTMNTLive] = true;
        SetObjectPos(dTMNT[turtleid][oTMNT], x, y, z + 0.4531);
	}
}

DestroyTMNT(turtleid)
{
    DestroyObject(dTMNT[turtleid][oTMNT]);
    dTMNT[turtleid][oTMNT] = INVALID_OBJECT_ID;
    //---
	DestroyObject(dTMNT[turtleid][oTMNTAttach]);
	dTMNT[turtleid][oTMNTAttach] = INVALID_OBJECT_ID;
	//---
    DestroyObject(dTMNT[turtleid][oTMNTSword]);
    dTMNT[turtleid][oTMNTSword] = INVALID_OBJECT_ID;
    //---
    dTMNT[turtleid][bTMNTLive] = false;
    dTMNT[turtleid][dNodes] = 0;
    //---
    for(new i = 0; i < MAX_TMNT_NODES; i ++)
	{
		dTMNT[turtleid][fMobNextX][i] = 0.0;
		dTMNT[turtleid][fMobNextX][i] = 0.0;
		dTMNT[turtleid][fMobNextX][i] = 0.0;
	}
}

OnPlayerKillsTMNT(playerid, turtleid)
{
	GivePlayerExp(playerid, 1);
	OnPlayerGroupKillMob(playerid, MOB_TMNT);
	new Float:x, Float:y, Float:z, Float:rz;
	GetObjectPos(dTMNT[turtleid][oTMNT], x, y, z);
	GetObjectRot(dTMNT[turtleid][oTMNT], rz, rz, rz);
	//---
	//---
	new objectid = CreateObject(1609, x, y, z, 0.0, 180.0, rz);
	MoveObject(objectid, x, y, z + 0.01, 0.0, 180.0, rz);
	SetTimerEx("DestroyObjectEx", 15000, false, "ib", objectid, false);
	PlayerPlaySound(playerid, 32402, x, y, z);
	//---
	if(RandomEx(0, 10) < 3)
	{
		x = x + float(RandomEx(-7, 7));
		y = y + float(RandomEx(-7, 7));
		FindZPathCoord(x, y, z, x, y, z);
    	CreateItem(67, x, y, z + 1.0, false, -1);
	}
	DestroyTMNT(turtleid);
	CreateTMNT(turtleid);
}

public MoveTMNT(turtleid)
{
	static dPathTries[MAX_TMNT];
	if(dTMNT[turtleid][bTMNTLive] && !dTMNT[turtleid][bTMNTAttack] && dStreamMobs[dTMNTStream] > 0)
	{
	    new Float:x, Float:y, Float:z, Float:x2, Float:y2, Float:z2, Float:fDump, dNode = 0;
		new victim = GetMobVictim(MOB_TMNT, turtleid, false);
		//---
		if(victim == INVALID_PLAYER_ID)
		{
			GetObjectPos(dTMNT[turtleid][oTMNT], x, y, z);
		    if(dTMNT[turtleid][dNodes] == 0)//Si le blopt n'a pas de mouvements enregistrés
		    {
				x = floatrand(283.4311, 389.2719);
				y = floatrand(-530.8967, -430.2325);
				new Float:angle = GetZAngleBetweenPos(x, y, x2, y2);//; - 90.0;
		        for(new i = MAX_TMNT_NODES; i > 0; i --)
		        {
		            z += 1.0;
					x2 = x + 2.5 * floatsin(-angle, degrees);
					y2 = y + 2.5 * floatcos(-angle, degrees);
					z2 = z;
					FindZPathCoord(x, y, z, x2, y2, z2);
					if(CA_RayCastLine(x, y, z + 1.0, x2, y2, z2, fDump, fDump, fDump) == 0)
					{
					    dTMNT[turtleid][fMobNextX][i - 1] = x2;
					    dTMNT[turtleid][fMobNextY][i - 1] = y2;
					    dTMNT[turtleid][fMobNextZ][i - 1] = z2 - 0.5469;
					    x = x2, y = y2, z = z2;
					    dNode = i;
					}
					else
					{
					    dNode = i;
					    break;
					}
		        }
				if(dNode == MAX_TMNT_NODES)
				{
				    dPathTries[turtleid] ++;
				    dBlopt[turtleid][dNodes] = 1;
					GetObjectPos(dTMNT[turtleid][oTMNT], dTMNT[turtleid][fMobNextX][0], dTMNT[turtleid][fMobNextY][0], dTMNT[turtleid][fMobNextZ][0]);
				}
				if(dNode == 0)
				{
				    dTMNT[turtleid][dNodes] = MAX_BLOPT_NODES - 1;
				}
				else
				{
					for(new i = dNode; i < MAX_BLOPT_NODES; i ++)
					{
					    dTMNT[turtleid][fMobNextX][MAX_BLOPT_NODES - dNode - 1] = dTMNT[turtleid][fMobNextX][i];
					    dTMNT[turtleid][fMobNextY][MAX_BLOPT_NODES - dNode - 1] = dTMNT[turtleid][fMobNextY][i];
					    dTMNT[turtleid][fMobNextZ][MAX_BLOPT_NODES - dNode - 1] = dTMNT[turtleid][fMobNextZ][i];
					}
					dTMNT[turtleid][dNodes] = MAX_BLOPT_NODES - dNode + 1;
					dPathTries[turtleid] = 0;
				}
		    }
			if(dPathTries[turtleid] == 3)
			{
				DestroyTMNT(turtleid);
			    CreateTMNT(turtleid);
			    dPathTries[turtleid] = 0;
			}
			else
			{
				GetObjectPos(dTMNT[turtleid][oTMNT], x, y, z);
				SetObjectRot(dTMNT[turtleid][oTMNT], 0.0, 0.0, GetZAngleBetweenPos(x, y, dTMNT[turtleid][fMobNextX][dTMNT[turtleid][dNodes] - 1], dTMNT[turtleid][fMobNextY][dTMNT[turtleid][dNodes] - 1]) - 75.0);
			    MoveObject(dTMNT[turtleid][oTMNT], dTMNT[turtleid][fMobNextX][dTMNT[turtleid][dNodes] - 1], dTMNT[turtleid][fMobNextY][dTMNT[turtleid][dNodes] - 1], dTMNT[turtleid][fMobNextZ][dTMNT[turtleid][dNodes] - 1], 2.0);
			}
	    	dTMNT[turtleid][dNodes] --;
		    if(dTMNT[turtleid][dNodes] == -1) dTMNT[turtleid][dNodes] = 0;
			//---
		}
		else
		{
			GetVictimPos(victim, x2, y2, z2);
			GetObjectPos(dTMNT[turtleid][oTMNT], x, y, z);
			if(IsPlayerInRangeOfPoint(victim, 2.8, x, y, z))
			{
				TMNTAttack(turtleid, 0);
			}
			else
			{
				new Float:angle = GetZAngleBetweenPos(x, y, x2, y2) - 90.0;
			    if(GetDistanceBetweenPoints(x, y, z, x2, y2, z2) > 6.4)
			    {
					x2 = x + 3.4 * floatsin(-angle, degrees);
					y2 = y + 3.4 * floatcos(-angle, degrees);
				}
				else
				{
				    x2 = x2 + floatdiv(RandomEx(-5, 5), 10);
				    y2 = y2 + floatdiv(RandomEx(-5, 5), 10);
				}
				FindZPathCoord(x, y, z + 1.0, x2, y2, z2);
				z2 += 0.4531;
			    MoveObject(dTMNT[turtleid][oTMNT], x2, y2, z2, 2.0);
				SetObjectRot(dTMNT[turtleid][oTMNT], 0.0, 0.0, angle);
				dTMNT[turtleid][dNodes] = 0;
			}
		}
	}
	return 1;
}

public TMNTAttack(turtleid, step)
{
	new Float:x, Float:y, Float:z, Float:angle;
	switch(step)
	{
	    case 0:
		{
		    dTMNT[turtleid][bTMNTAttack] = true;
		    StopObject(dTMNT[turtleid][oTMNT]);
			AttachObjectToObject(dTMNT[turtleid][oTMNTSword], dTMNT[turtleid][oTMNT], 0.8931, 0.8149, -0.0281, 0.0, 80.0, 90.0, 1);
			GetObjectPos(dTMNT[turtleid][oTMNT], x, y, z);
			GetObjectRot(dTMNT[turtleid][oTMNT], angle, angle, angle);
			MoveObject(dTMNT[turtleid][oTMNT], x + 0.25 * floatsin(-angle, degrees), y + 0.25 * floatcos(-angle, degrees), z + 1.0, 1.5, 0.0, 0.0, angle);
			SetTimerEx("TMNTAttack", 750, false, "ii", turtleid, 1);
			for(new i = 0, j = GetPlayerPoolSize(); i <= j; i ++)
			{
			    if(IsPlayerInRangeOfPoint(i, 2.8, x, y, z))
			    {
					GivePlayerHealth(i, -BLOPT_DAMAGE, REASON_BLOODLOSS, INVALID_PLAYER_ID);
			    }
			}
		}
		case 1:
		{
			GetObjectPos(dTMNT[turtleid][oTMNT], x, y, z);
			GetObjectRot(dTMNT[turtleid][oTMNT], angle, angle, angle);
			FindZPathCoord(x, y, z + 1.0, x, y, z);
			z -= 0.23;
			MoveObject(dTMNT[turtleid][oTMNT], x, y, z, 1.5, 0.0, 0.0, angle);
			SetTimerEx("TMNTAttack", 500, false, "ii", turtleid, 2);
			for(new i = 0, j = GetPlayerPoolSize(); i <= j; i ++)
			{
			    if(IsPlayerInRangeOfPoint(i, 2.8, x, y, z))
			    {
					GivePlayerHealth(i, -TMNT_DAMAGE, REASON_BLOODLOSS, INVALID_PLAYER_ID);
			    }
			}
		}
		case 2:
		{
		    dTMNT[turtleid][bTMNTAttack] = false;
			AttachObjectToObject(dTMNT[turtleid][oTMNTSword], dTMNT[turtleid][oTMNT], 0.8931, 0.8149, -0.0281, 0.0, 45.0, 90.0, 1);
		}
	}
}

//---BLOPT
CreateBlopt(bloptid)
{
	if(!dBlopt[bloptid][bBloptLive])
	{
	    new Float:x, Float:y, Float:z;
		x = floatrand(-46.6679, 78.227);
		y = floatrand(-141.8699, 97.5299);
		CA_FindZ_For2DCoord(x, y, z);
	    //---
	    dBlopt[bloptid][oBlopt] = CreateObject(2976, x, y, z + 0.29, 0.0, 0.0, 0.0);
		dBlopt[bloptid][oBloptAttach][0] = CreateObject(19061, x, y, z, 0.0,0.0,0.0); //object(xmasorb3) (1)
		dBlopt[bloptid][oBloptAttach][1] = CreateObject(1946, x, y, z, 0.0,0.0,0.0); //object(baskt_ball_hi) (1)
		dBlopt[bloptid][oBloptAttach][2] = CreateObject(1946, x, y, z, 0.0,0.0,0.0); //object(baskt_ball_hi) (2)
		dBlopt[bloptid][oBloptAttach][3] = CreateObject(3106, x, y, z, 0.0,0.0,0.0); //object(k_poolball8) (2)
		dBlopt[bloptid][oBloptAttach][4] = CreateObject(3106, x, y, z, 0.0,0.0,0.0); //object(k_poolball8) (3)
		dBlopt[bloptid][oBloptSword] = CreateObject(19590, x, y, z, 0.0,0.0,0.0); //object(wooziessword1) (1)
		//dBlopt[bloptid][oBloptAttach][0] = CreateDynamicObject(19590,2481.0039062,1047.8549805,56.9469986,340.0000000,0.0000000,159.9993896); //object(wooziessword1) (2)
		AttachObjectToObject(dBlopt[bloptid][oBloptAttach][0], dBlopt[bloptid][oBlopt], 0.021, -0.04, 0.29, 0.0, 180.0, 0.0, 1);
		AttachObjectToObject(dBlopt[bloptid][oBloptAttach][1], dBlopt[bloptid][oBlopt], 0.0859, 0.1909, 0.4051, 0.0, 0.0, 0.0, 1);
		AttachObjectToObject(dBlopt[bloptid][oBloptAttach][2], dBlopt[bloptid][oBlopt], 0.2089, 0.1129, 0.4051, 0.0, 0.0, 0.0, 1);
		AttachObjectToObject(dBlopt[bloptid][oBloptAttach][3], dBlopt[bloptid][oBlopt], 0.144, 0.3879, 0.4621, 0.0, 0.0, 0.0, 1);
		AttachObjectToObject(dBlopt[bloptid][oBloptAttach][4], dBlopt[bloptid][oBlopt], 0.348, 0.256, 0.4621, 0.0, 0.0, 0.0, 1);
		AttachObjectToObject(dBlopt[bloptid][oBloptSword], dBlopt[bloptid][oBlopt], 0.5249, -0.1121, 0.445, 0.0, 0.0, 160.0, 1);//rx = 340.0 si attaque ------ ry = 90.0 rz 180.0
		SetObjectMaterialText(dBlopt[bloptid][oBloptAttach][1], " ", 0, 80, "Arial", 1, 1, 0xFFFFFFFF, 0xFFFFFFFF, 1);
		SetObjectMaterialText(dBlopt[bloptid][oBloptAttach][2], " ", 0, 80, "Arial", 1, 1, 0xFFFFFFFF, 0xFFFFFFFF, 1);
        dBlopt[bloptid][bBloptLive] = true;
        //---
		dBlopt[bloptid][dNodes] = 1;
	    dBlopt[bloptid][fMobNextX][0] = x;
	    dBlopt[bloptid][fMobNextY][0] = y;
	    dBlopt[bloptid][fMobNextZ][0] = z;
	}
}

DestroyBlopt(bloptid)
{
    DestroyObject(dBlopt[bloptid][oBlopt]);
    dBlopt[bloptid][oBlopt] = INVALID_OBJECT_ID;
	for(new i = 0; i < 5; i ++)
	{
	    DestroyObject(dBlopt[bloptid][oBloptAttach][i]);
	    dBlopt[bloptid][oBloptAttach][i] = INVALID_OBJECT_ID;
	}
	//---
    DestroyObject(dBlopt[bloptid][oBloptSword]);
    dBlopt[bloptid][oBloptSword] = INVALID_OBJECT_ID;
    //---
    dBlopt[bloptid][bBloptLive] = false;
    dBlopt[bloptid][dNodes] = 0;
    //---
    for(new i = 0; i < MAX_BLOPT_NODES; i ++)
	{
		dBlopt[bloptid][fMobNextX][i] = 0.0;
		dBlopt[bloptid][fMobNextX][i] = 0.0;
		dBlopt[bloptid][fMobNextX][i] = 0.0;
	}
}

OnPlayerKillsBlopt(playerid, bloptid)
{
	GivePlayerExp(playerid, 1);
	OnPlayerGroupKillMob(playerid, MOB_BLOPT);
	new Float:x, Float:y, Float:z;
	GetObjectPos(dBlopt[bloptid][oBlopt], x, y, z);
	PlayerPlaySound(playerid, 32402, x, y, z);
	SetTimerEx("DestroyObjectEx", 2000, false, "ib", CreateObject(18722, x, y, z + 1.0, 180.0, 0.0, 0.0), false);
	DestroyBlopt(bloptid);
	CreateBlopt(bloptid);
}

public MoveBlopt(bloptid)
{
	static dPathTries[MAX_BLOPTS];
	if(dBlopt[bloptid][bBloptLive] && !dBlopt[bloptid][bBloptAttack] && dStreamMobs[dBloptStream] > 0)
	{
	    new Float:x, Float:y, Float:z, Float:x2, Float:y2, Float:z2, Float:fDump, dNode = 0;
		new victim = GetMobVictim(MOB_BLOPT, bloptid, false);
		//---
		if(victim == INVALID_PLAYER_ID)
		{
			GetObjectPos(dBlopt[bloptid][oBlopt], x, y, z);
		    if(dBlopt[bloptid][dNodes] == 0)//Si le blopt n'a pas de mouvements enregistrés
		    {
				x2 = floatrand(-46.6679, 78.227);
				y2 = floatrand(-141.8699, 97.5299);
				new Float:angle = GetZAngleBetweenPos(x, y, x2, y2);//; - 90.0;
		        for(new i = MAX_BLOPT_NODES; i > 0; i --)
		        {
		            z += 1.0;
					x2 = x + 2.5 * floatsin(-angle, degrees);
					y2 = y + 2.5 * floatcos(-angle, degrees);
					z2 = z;
					FindZPathCoord(x, y, z, x2, y2, z2);
					if(CA_RayCastLine(x, y, z + 1.0, x2, y2, z2, fDump, fDump, fDump) == 0)
					{
					    dBlopt[bloptid][fMobNextX][i - 1] = x2;
					    dBlopt[bloptid][fMobNextY][i - 1] = y2;
					    dBlopt[bloptid][fMobNextZ][i - 1] = z2 - 0.13;
					    x = x2, y = y2, z = z2;
					    dNode = i;
					}
					else
					{
					    dNode = i;
					    break;
					}
		        }
				if(dNode == MAX_BLOPT_NODES)
				{
				    dPathTries[bloptid] ++;
				    dBlopt[bloptid][dNodes] = 1;
					GetObjectPos(dBlopt[bloptid][oBlopt], dBlopt[bloptid][fMobNextX][0], dBlopt[bloptid][fMobNextY][0], dBlopt[bloptid][fMobNextZ][0]);
				}
				if(dNode == 0)
				{
				    dBlopt[bloptid][dNodes] = MAX_BLOPT_NODES - 1;
				}
				else
				{
					for(new i = dNode; i < MAX_BLOPT_NODES; i ++)
					{
					    dBlopt[bloptid][fMobNextX][MAX_BLOPT_NODES - dNode - 1] = dBlopt[bloptid][fMobNextX][i];
					    dBlopt[bloptid][fMobNextY][MAX_BLOPT_NODES - dNode - 1] = dBlopt[bloptid][fMobNextY][i];
					    dBlopt[bloptid][fMobNextZ][MAX_BLOPT_NODES - dNode - 1] = dBlopt[bloptid][fMobNextZ][i];
					}
					dBlopt[bloptid][dNodes] = MAX_BLOPT_NODES - dNode + 1;
					dPathTries[bloptid] = 0;
				}
		    }
			if(dPathTries[bloptid] == 3)
			{
				DestroyBlopt(bloptid);
			    CreateBlopt(bloptid);
			    dPathTries[bloptid] = 0;
			}
			else
			{
				GetObjectPos(dBlopt[bloptid][oBlopt], x, y, z);
				SetObjectRot(dBlopt[bloptid][oBlopt], 0.0, 0.0, GetZAngleBetweenPos(x, y, dBlopt[bloptid][fMobNextX][dBlopt[bloptid][dNodes] - 1], dBlopt[bloptid][fMobNextY][dBlopt[bloptid][dNodes] - 1]) - 75.0);
			    MoveObject(dBlopt[bloptid][oBlopt], dBlopt[bloptid][fMobNextX][dBlopt[bloptid][dNodes] - 1], dBlopt[bloptid][fMobNextY][dBlopt[bloptid][dNodes] - 1], dBlopt[bloptid][fMobNextZ][dBlopt[bloptid][dNodes] - 1], 2.0);
			}
	    	dBlopt[bloptid][dNodes] --;
		    if(dBlopt[bloptid][dNodes] == -1) dBlopt[bloptid][dNodes] = 0;
			//---
		}
		else
		{
			GetVictimPos(victim, x2, y2, z2);
			GetObjectPos(dBlopt[bloptid][oBlopt], x, y, z);
			if(IsPlayerInRangeOfPoint(victim, 1.8, x, y, z))
			{
				BloptAttack(bloptid, 0);
			}
			else
			{
				new Float:angle = GetZAngleBetweenPos(x, y, x2, y2) - 90.0;
			    if(GetDistanceBetweenPoints(x, y, z, x2, y2, z2) > 6.4)
			    {
					x2 = x + 3.4 * floatsin(-angle, degrees);
					y2 = y + 3.4 * floatcos(-angle, degrees);
				}
				else
				{
				    x2 = x2 + floatdiv(RandomEx(-5, 5), 10);
				    y2 = y2 + floatdiv(RandomEx(-5, 5), 10);
				}
				FindZPathCoord(x, y, z + 1.0, x2, y2, z2);
				z2 -= 0.23;
			    MoveObject(dBlopt[bloptid][oBlopt], x2, y2, z2, 2.0);
				SetObjectRot(dBlopt[bloptid][oBlopt], 0.0, 0.0, angle + 25.0);
				dBlopt[bloptid][dNodes] = 0;
			}
		}
	}
	return 1;
}

public BloptAttack(bloptid, step)
{
	new Float:x, Float:y, Float:z, Float:angle;
	switch(step)
	{
	    case 0:
		{
		    dBlopt[bloptid][bBloptAttack] = true;
		    StopObject(dBlopt[bloptid][oBlopt]);
			AttachObjectToObject(dBlopt[bloptid][oBloptSword], dBlopt[bloptid][oBlopt], 0.0, 0.8, 0.445, 0.0, 90.0, 180.0, 1);
			GetObjectPos(dBlopt[bloptid][oBlopt], x, y, z);
			GetObjectRot(dBlopt[bloptid][oBlopt], angle, angle, angle);
			MoveObject(dBlopt[bloptid][oBlopt], x + 0.25 * floatsin(-angle, degrees), y + 0.25 * floatcos(-angle, degrees), z + 1.0, 1.5, 0.0, 0.0, angle + 215.0);
			SetTimerEx("BloptAttack", 750, false, "ii", bloptid, 1);
			for(new i = 0, j = GetPlayerPoolSize(); i <= j; i ++)
			{
			    if(IsPlayerInRangeOfPoint(i, 1.8, x, y, z))
			    {
					GivePlayerHealth(i, -BLOPT_DAMAGE, REASON_BLOODLOSS, INVALID_PLAYER_ID);
			    }
			}
		}
		case 1:
		{
			GetObjectPos(dBlopt[bloptid][oBlopt], x, y, z);
			GetObjectRot(dBlopt[bloptid][oBlopt], angle, angle, angle);
			FindZPathCoord(x, y, z + 1.0, x, y, z);
			z -= 0.23;
			MoveObject(dBlopt[bloptid][oBlopt], x, y, z, 1.5, 0.0, 0.0, angle - 215.0);
			SetTimerEx("BloptAttack", 500, false, "ii", bloptid, 2);
			for(new i = 0, j = GetPlayerPoolSize(); i <= j; i ++)
			{
			    if(IsPlayerInRangeOfPoint(i, 1.8, x, y, z))
			    {
					GivePlayerHealth(i, -BLOPT_DAMAGE, REASON_BLOODLOSS, INVALID_PLAYER_ID);
			    }
			}
		}
		case 2:
		{
		    dBlopt[bloptid][bBloptAttack] = false;
			AttachObjectToObject(dBlopt[bloptid][oBloptSword], dBlopt[bloptid][oBlopt], 0.5249, -0.1121, 0.445, 0.0, 0.0, 160.0, 1);//rx = 340.0 si attaque ------ ry = 90.0 rz 180.0
		}
	}
}

GetMobVictim(mobtype, mobid, bool:driving)
{
	new Float:dist = 9999.9, Float:fSight;
	new playerid = INVALID_PLAYER_ID;
 	new Float:x, Float:y, Float:z, Float:px, Float:py, Float:pz, Float:fDump;
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i ++)
	{
	    if(!FCNPC_IsValid(i) && IsPlayerConnected(i) && !CallRemoteFunction("IsPlayerOnCinematic", "i", i) || IsPlayerOnSpectate(i))
	    {
	        if(!driving && IsPlayerInAnyVehicle(i)) continue;
			new missionid = CallRemoteFunction("GetPlayerMission", "i", i);
		 	switch(mobtype)
		 	{
				case MOB_BLOPT: GetObjectPos(dBlopt[mobid][oBlopt], x, y, z), fSight = (missionid == MISSION_HAZING_HARVEST || missionid == MISSION_HAZING_HARVEST_2) ? 180.0 : 25.0;
				case MOB_TMNT: GetObjectPos(dTMNT[mobid][oTMNT], x, y, z), fSight = (MISSION_CABOOSE_DRIVE >= missionid >= MISSION_CABOOSE_FIND) ? 0.0 : 45.0;
				case MOB_CACTUS: GetObjectPos(dCactus[mobid][oCactus], x, y, z), fSight = 30.0;
				case MOB_ZOMBIE: GetPlayerPos(dZombie[mobid][dZombieID], x, y, z), fSight = ZOMBIE_SIGHT;
			}
			new Float:distance;
			distance = GetDistanceToPoint(i, x, y, z);
			GetPlayerPos(i, px, py, pz);
			if(fDetectRange[i][0] < fSight && distance < fSight && CA_RayCastLine(x, y, z + 1.0, px, py, pz + 1.0, fDump, fDump, fDump) == 0) fDetectRange[i][0] = ZOMBIE_SIGHT;
			if(fDetectRange[i][0] > distance && dist > distance && GetPlayerInterior(i) == 0 && GetPlayerVirtualWorld(i) == 0)
			{
			    if(GetPlayerState(i) == PLAYER_STATE_ONFOOT || GetPlayerState(i) == PLAYER_STATE_DRIVER || GetPlayerState(i) == PLAYER_STATE_PASSENGER)
				{
					dist = distance;
					playerid = i;
				}
			}
	    }
	}
	return playerid;
}

/*stock DoMobMove(mobtype)
{
 	switch(mobtype)
 	{
		case MOB_BLOPT:
		case MOB_UFO:
		case MOB_BAMBI:
	}
}*/

//---BOSS
CheckTime(day, hour, min)
{
	switch(day)
	{
	    case MONDAY:
		{
		    if(hour == 2 && min == 0)
		    {
		        SetBoss(4, false);//Mort
		    }
		    else if(hour == 22 && min == 0)
		    {
				SetBoss(3, true);//UFO Boss
		    }
		}
	    case TUESDAY:
		{
			if(hour == 2 && min == 0)
		    {
				SetBoss(3, false);//UFO Boss
		    }
		}
	    case WEDNESDAY:
		{
		}
	    case THURSDAY:
		{
		    if(hour == 18 && min == 0)
		    {
				SetBoss(1, true);//Bambiking
		    }
		    else if(hour == 22 && min == 0)
		    {
				SetBoss(1, false);//Bambiking
		    }
		}
	    case FRIDAY:
		{
		    if(hour == 19 && min == 20)
			{
			    SetBoss(2, true);//Jason
			}
		    else if(hour == 20 && min == 0)
			{
				WakeJason();
			}
		}
	    case SATURDAY:
		{
		    if(hour == 0 && min == 0)
			{
			    SetBoss(2, false);//Jason
			}
		}
	    case SUNDAY:
		{
		    if(hour == 22 && min == 0)
		    {
		        SetBoss(4, true);//Mort
		    }
		}
	}
}

public CheckPlayersToBambiKing()
{
	if(IsValidDynamicObject(dBambiKing[oBambiKing]))
	{
		SetTimer("CheckPlayersToBambiKing", 500, false);
  		static dKingState;
		if(dKingState)
		{
			dKingState --;
			for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(IsDynamicObjectNearToPlayer(3.0, i, dBambiKing[oBambiKing])) GivePlayerArmour(i, -450, REASON_BLOODLOSS, INVALID_PLAYER_ID);
		}
		else
		{
			new Float:bx, Float:by, Float:bz,Float:x, Float:y, Float:z, Float:angle;
			GetDynamicObjectPos(dBambiKing[oBambiKing], bx, by, bz);
			new playerid = GetClosestPlayerToDynamicObject(dBambiKing[oBambiKing]);
			if(playerid != INVALID_PLAYER_ID) if(!IsPlayerInRangeOfPoint(playerid, 40.0, bx, by, bz)) playerid = INVALID_PLAYER_ID;
			//---
			if(playerid != INVALID_PLAYER_ID)
			{
				GetDynamicObjectRot(dBambiKing[oBambiKing], angle, angle, angle);
				GetPlayerPos(playerid, x, y, z);
			    z += 1.4975;
			    SetDynamicObjectPos(dBambiKing[oBambiKing], bx, by, bz - 1.0);
			    SetDynamicObjectRot(dBambiKing[oBambiKing], 0.0, 15.0, GetZAngleBetweenPos(bx, by, x, y));
				MoveDynamicObject(dBambiKing[oBambiKing], x, y, z - 1.0, 35.0);
				dKingState = 3;
			}
			else
			{
				if(!(-487.19400 < bx < -299.83099 && -2741.7958 < by < 2573.9641))
				{
					angle = GetZAngleBetweenPos(bx, by, -403.914, -2613.3469);
					SetDynamicObjectRot(dBambiKing[oBambiKing], 0.0, 0.0, angle);
					MoveDynamicObject(dBambiKing[oBambiKing], -403.914, -2613.3469, 147.6699, 9.0);
				}
				else
				{
					GetDynamicObjectRot(dBambiKing[oBambiKing], angle, angle, angle);
	    			angle += float(RandomEx(-15, 15));
 					new rand = RandomEx(0, 10);
					x = bx + (rand * floatsin(-angle, degrees));
					y = by + (rand * floatcos(-angle, degrees));
					FindZPathCoord(bx, by, bz, x, y, z);
  					z += 1.4975;
  					SetDynamicObjectRot(dBambiKing[oBambiKing], 0.0, 0.0, GetZAngleBetweenPos(bx, by, x, y));
					if(z < bz + 3.5 || z > bz - 3.5) MoveDynamicObject(dBambiKing[oBambiKing], x, y, z, 5.0);
					else if(bz < z) MoveDynamicObject(dBambiKing[oBambiKing], bx, by, z, 5.0);
					if(dBambiKing[dBambiKingHealth] < 38000) dBambiKing[dBambiKingHealth] += 350;
				}
			}
		}
	}
}

public SetBoss(boss, bool:appear)
{
	if(boss == 1)//Roi des bambis
	{
		if(appear)
		{
			if(!IsValidDynamicObject(dBambiKing[oBambiKing]))
			{
				dBambiKing[dBambiKingHealth] = 38000;
				dBambiKing[oBambiKing] = CreateDynamicObject(16442, -403.914, -2613.3469, 147.6699, 0.0, 0.0, 90.0, 0, 0, -1, 300.0, 300.0);
				for(new i = 0; i < 30; i ++) SetDynamicObjectMaterial(dBambiKing[oBambiKing], i, 11631, "mp_ranchcut", "mpCJ_Deer1", 0xFFFFFFFF);
				SetTimer("CheckPlayersToBambiKing", 500, false);
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
				{
					ShowPlayerTextInfo(i, 5000, "~g~The bambi king has appeared at Back O' Beyond!", "~g~Le roi des bambis est apparu à Back O' Beyond !", "~r~¡Espagnol!", "~r~Portugais!", "~r~Italien!", "~r~Allemand!");
				}
		  	}
	  	}
	  	else
	  	{
	    	if(IsValidDynamicObject(dBambiKing[oBambiKing]))
	    	{
				dBambiKing[dBambiKingHealth] = 0;
				DestroyDynamicObject(dBambiKing[oBambiKing]);
				dBambiKing[oBambiKing] = INVALID_OBJECT_ID;
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
				{
					ShowPlayerTextInfo(i, 5000, "~r~The bambi king is gone!", "~r~Le roi des bambis est parti !", "~r~¡Espagnol!", "~r~Portugais!", "~r~Italien!", "~r~Allemand!");
				}
			}
	  	}
  	}
	else if(boss == 2)//JASON
	{
	    if(appear)
	    {
	        if(dJason[dJasonID] == INVALID_PLAYER_ID)
	        {
				dJason[dJasonID] = FCNPC_Create("Jason");
				pNPCType[dJason[dJasonID]] = MOB_JASON;
				FCNPC_SetHealth(dJason[dJasonID], 99999.0);
				FCNPC_SetInvulnerable(dJason[dJasonID], true);
				SetPlayerColor(dJason[dJasonID], 0xCC000000);
				FCNPC_SetSkin(dJason[dJasonID], 168);
				dJason[dJasonState] = 1;
				FCNPC_Spawn(dJason[dJasonID], 168, -1632.6936, -2246.8542, 32.3810);
				FCNPC_ApplyAnimation(dJason[dJasonID], "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
				SetPlayerAttachedObject(dJason[dJasonID], 0, 19036, 2, 0.086, 0.043, -0.007, 86.100196, 91.500007, 0.0, 1.0, 1.0, 1.0);
				FCNPC_ApplyAnimation(dJason[dJasonID], "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
				//---
	            dJason[dJasonState] = 1;
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
				{
					ShowPlayerTextInfo(i, 5000, "~g~Jason Voorhees will soon get up in his cabin,~n~in Shady Creek.", "~g~Jason Voorhees se réveillera bientôt dans sa cabane,~n~à Shady Creek.", "~r~¡Espagnol!", "~r~Portugais!", "~r~Italien!", "~r~Allemand!");
				}
	        }
	    }
	    else
	    {
	        if(dJason[dJasonID] != INVALID_PLAYER_ID)
	        {
	            FCNPC_Destroy(dJason[dJasonID]);
	            dJason[dJasonID] = INVALID_PLAYER_ID;
	            dJason[dJasonState] = 0;
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
				{
					ShowPlayerTextInfo(i, 5000, "~r~Jason Voorhees is gone...~n~for now.", "~r~Jason Voorhees est parti...~n~pour l'instant.", "~r~¡Espagnol!", "~r~Portugais!", "~r~Italien!", "~r~Allemand!");
				}
	        }
	    }
	}
	else if(boss == 3)//COLONEL SANCHEZ
	{
	    static oVaisseaux[8] = {INVALID_OBJECT_ID, ...};
	    if(appear)
	    {
	        if(dBossUFO[dLife] == -1)
	        {
			    oVaisseaux[0] = CreateDynamicObject(10955,152.2440033,1925.5849609,95.0999985,0.0000000,179.9945068,0.0000000); //object(stadiumroof_sfs) (2)
				oVaisseaux[1] = CreateDynamicObject(18657,165.7510071,1928.0889893,83.5000000,255.0000000,0.0000000,270.0000000); //object(lightbeamred) (1)
				oVaisseaux[2] = CreateDynamicObject(10955,152.2429962,1925.5849609,87.7929993,0.0000000,0.0000000,0.0000000); //object(stadiumroof_sfs) (2)
				oVaisseaux[3] = CreateDynamicObject(18657,150.3388672,1927.2988281,77.5000000,270.0000000,0.0000000,0.0000000); //object(lightbeamred) (4)
				oVaisseaux[4] = CreateDynamicObject(18876,150.2709961,1928.0240479,69.9150009,0.0000000,0.0000000,0.0000000); //object(biggreengloop1) (1)
				oVaisseaux[5] = CreateDynamicObject(19295,150.1430054,1907.0970459,78.3919983,0.0000000,0.0000000,0.0000000); //object(pointlight15) (1)
				oVaisseaux[6] = CreateDynamicObject(19295,132.3569946,1939.3950195,77.9380035,0.0000000,0.0000000,0.0000000); //object(pointlight15) (2)
				oVaisseaux[7] = CreateDynamicObject(19295,172.5420074,1940.5219727,77.8870010,0.0000000,0.0000000,0.0000000); //object(pointlight15) (3)
				pEnterUFO =  CreateDynamicCP(150.3489990, 1928.1619873, 19.2759991, 3.0); //object(arrowtype5) (1)
				SetBossUFOState(1);
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
				{
					ShowPlayerTextInfo(i, 5000, "~g~The mothership has appeared!", "~g~Le vaisseau mère est apparu !", "~r~¡Espagnol!", "~r~Portugais!", "~r~Italien!", "~r~Allemand!");
				}
	        }
	    }
	    else
	    {
	        if(dBossUFO[dLife] != -1)
	        {
				for(new i = 0; i < 8; i ++)
				{
				    DestroyDynamicObject(oVaisseaux[i]);
				    oVaisseaux[i] = INVALID_OBJECT_ID;
				}
				DestroyDynamicCP(pEnterUFO);
				pEnterUFO = -1;
				dBossUFO[dLife] = -1;
				SetBossUFOState(0);
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
				{
					ShowPlayerTextInfo(i, 5000, "~r~The mothership has disapeared!", "~r~Le vaisseau mère a disparu !", "~r~¡Espagnol!", "~r~Portugais!", "~r~Italien!", "~r~Allemand!");
				}
				SetTimer("ClearOutMothership", 25000, false);
			}
	    }
	}
	else if(boss == 4)//FAUCHEUSE
	{
	    if(appear)
	    {
	        if(dDeathBoss[dDeathPos] == 0)
	        {
				dDeathBoss[dDeathID] = CallRemoteFunction("CreateActorEx", "iffff", 20100, -1806.9146, 515.8952, 242.0156, 0.0);
				dDeathBoss[dDeathHealth] = 100000;
				dDeathBoss[dDeathPos] = 3;
				dDeathBoss[dDeathState] = 1;
				SetActorHealth(dDeathBoss[dDeathID], 999999.9);
				SetActorInvulnerable(dDeathBoss[dDeathID], false);
				//---
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
				{
					ShowPlayerTextInfo(i, 5000, "~g~Death's here.", "~g~La mort est là.", "~r~¡Espagnol!", "~r~Portugais!", "~r~Italien!", "~r~Allemand!");
				}
	        }
	    }
	    else
	    {
	        if(IsValidActor(dDeathBoss[dDeathID]))
	        {
	            DestroyActor(dDeathBoss[dDeathID]);
	            dDeathBoss[dDeathID] = INVALID_PLAYER_ID;
	            dDeathBoss[dDeathPos] = 0;
				dDeathBoss[dDeathState] = 0;
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
				{
					ShowPlayerTextInfo(i, 5000, "~r~Death is gone...~n~for now.", "~r~La mort est partie...~n~pour l'instant.", "~r~¡Espagnol!", "~r~Portugais!", "~r~Italien!", "~r~Allemand!");
				}
	        }
	    }
	}
}

public GetBoss(boss)
{
	switch(boss)
	{
	    case 1: return (IsValidDynamicObject(dBambiKing[oBambiKing])) ? true : false;//Roi des bambis
	    case 2: return (dJason[dJasonID] != INVALID_PLAYER_ID) ? true : false;//Jason
	    case 3: return (dBossUFO[dLife] != -1) ? true : false;//Colonel Sanchez
	    case 4: return (dDeathBoss[dDeathPos] != 0) ? true : false;//La mort
	}
	return false;
}

UpdateDeathBoss()
{
	if(dDeathBoss[dDeathState] == 1)
	{
		ApplyActorAnimation(dDeathBoss[dDeathID], "PARK", "Tai_Chi_Loop", 4.1, 1, 1, 1, 0, 0);
		//---
		new Float:x, Float:y, Float:z, Float:px, Float:py, Float:pz;
		switch(dDeathBoss[dDeathPos])
		{
		    case 1:
		    {
		        x = -1843.8413;
				y = 580.3185;
				z = 242.0142;
		    }
		    case 2:
		    {
		        x = -1769.4579;
				y = 580.4846;
				z = 242.015;
		    }
		    case 3:
		    {
		        x = -1806.9146;
				y = 515.8952;
				z = 242.0156;
		    }
		}
		new playerid = INVALID_PLAYER_ID;
		new dClosestPlayer[2] = {INVALID_PLAYER_ID, INVALID_PLAYER_ID};
		new Float:fClosestDist[2] = {150.0, 150.0};
		//---
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(FCNPC_IsValid(i) || !IsPlayerConnected(i) && IsPlayerOnSpectate(i)) continue;
			GetPlayerPos(i, px, py, pz);
			new Float:dist = GetDistanceBetweenPoints(x, y, z, px, py, pz);
			if(dist < fClosestDist[0] && !IsColBetweenTwoPos(x, y, z, px, py, pz))
			{
				fClosestDist[0] = dist;
				dClosestPlayer[0] = i;
				if(dist < fClosestDist[1])
				{
					fClosestDist[1] = dist;
					dClosestPlayer[1] = i;
				}
			}
			else if(dist < fClosestDist[1] && IsColBetweenTwoPos(x, y, z, px, py, pz))
			{
				fClosestDist[1] = dist;
				dClosestPlayer[1] = i;
			}
		}
		if(dClosestPlayer[0] != INVALID_PLAYER_ID || dClosestPlayer[1] != INVALID_PLAYER_ID)
		{
		    if(dClosestPlayer[0] == dClosestPlayer[1]) playerid = dClosestPlayer[0];
		    else playerid = (fClosestDist[0] - fClosestDist[1] > 10.0) ? dClosestPlayer[1] : dClosestPlayer[0];
		}
		//---
		if(playerid != INVALID_PLAYER_ID)
		{
		    GetPlayerPos(playerid, px, py, pz);
		    if(IsColBetweenTwoPos(x, y, z, px, py, pz))//S'il y a un objet entre la mort et le joueur, on va TP la mort
		    {
		        new dSetPos = dDeathBoss[dDeathPos];
				switch(dDeathBoss[dDeathPos])
				{
				    case 1:
				    {
						if(!IsColBetweenTwoPos(-1769.457, 580.4846, 242.015, px, py, pz)) dSetPos = 2;
						else if(!IsColBetweenTwoPos(-1806.9146, 515.8952, 242.0156, px, py, pz)) dSetPos = 3;
				    }
				    case 2:
				    {
						if(!IsColBetweenTwoPos(-1806.9146, 515.8952, 242.0156, px, py, pz)) dSetPos = 3;
						else if(!IsColBetweenTwoPos(-1843.8413, 580.3185, z, px, py, pz)) dSetPos = 1;
				    }
				    case 3:
				    {
						if(!IsColBetweenTwoPos(-1843.8413, 242.0142, z, px, py, pz)) dSetPos = 1;
						else if(!IsColBetweenTwoPos(-1769.457, 580.4846, 242.015, px, py, pz)) dSetPos = 2;
				    }
				}
				//---
				if(dSetPos != dDeathBoss[dDeathID])
				{
					ApplyActorAnimation(dDeathBoss[dDeathID], "BSKTBALL","BBALL_idle", 4.1, 1, 0, 0, 0, 0);
					//---
					dDeathBoss[dDeathPos] = dSetPos;
					SetActorInvulnerable(dDeathBoss[dDeathID], true);
					dDeathBoss[dDeathState] = 2;
				}
		    }
		    else//Sinon, elle attaque !
		    {
			    new objectid;
				ApplyActorAnimation(dDeathBoss[dDeathID], "BSKTBALL", "BBALL_Jump_Shot", 4.1, 1, 0, 0, 0, 1000);
				PlayerPlaySound(playerid, 14400, px, py, pz);
				new Float:x2, Float:y2, Float:z2;
				SetTimerEx("DestroyObjectEx", 1500, false, "ib", CreateObject(18671, x, y, z + 2.5, 0.0, 0.0, 0.0, 50.0), false);
				//---
				for(new i = 0, j = RandomEx(2, 5); i < j; i ++)
				{
			    	objectid = CreateObject(19290, x, y, z + 2.5, 0.0, 0.0, 0.0, 200.0);
					x2 = px + floatrand(-10.0, 10.0);
					y2 = py + floatrand(-10.0, 10.0);
				    z2 = pz + 1.0;
					CA_RayCastLine(x, y, z, x2, y2, z2, x2, y2, z2);
				    MoveObject(objectid, x2, y2, z2, 17.5, 0.0, 0.0, 0.0);
					SetTimerEx("OnDeathRayBlows", floatround(1000 * floatdiv(GetDistanceBetweenPoints(x, y, z, x2, y2, z2), 17.5), floatround_floor) - 1000, false, "ifff", objectid, x2, y2, z2);
				}
		    }
		}
		else
		{
		    if(100000 > dDeathBoss[dDeathHealth]) dDeathBoss[dDeathHealth] += 1000;
		}
	}
	else if(dDeathBoss[dDeathState] == 2)//Si elle se téléporte.
	{
		new Float:x, Float:y, Float:z, Float:a;
		GetActorPos(dDeathBoss[dDeathID], x, y, z);
		SetTimerEx("DestroyObjectEx", 1500, false, "ib", CreateObject(18671, x, y, z - 2.5, 0.0, 0.0, 0.0, 50.0), false);
		SetTimerEx("DestroyObjectEx", 1500, false, "ib", CreateObject(18728, x, y, z - 1.5, 0.0, 0.0, 0.0, 50.0), false);
		//---
		switch(dDeathBoss[dDeathPos])
		{
		    case 1:
		    {
		        x = -1843.8413;
				y = 580.3185;
				z = 242.0142;
				a = 240.0;
		    }
		    case 2:
		    {
		        x = -1769.4579;
				y = 580.4846;
				z = 242.015;
				a = 120.0;
		    }
		    case 3:
		    {
		        x = -1806.9146;
				y = 515.8952;
				z = 242.0156;
				a = 0.0;
		    }
		}
		SetActorPos(dDeathBoss[dDeathID], x, y, z);
		SetActorFacingAngle(dDeathBoss[dDeathID], a);
		ApplyActorAnimation(dDeathBoss[dDeathID], "PARK", "Tai_Chi_Loop", 4.1, 1, 1, 1, 0, 0);
		dDeathBoss[dDeathState] = 1;
		SetActorInvulnerable(dDeathBoss[dDeathID], false);
	}
	return 1;
}

public OnDeathRayBlows(objectid, Float:x, Float:y, Float:z)
{
    DestroyObject(objectid);
	SetTimerEx("DestroyObjectEx", 1500, false, "ib", CreateObject(18710, x, y, z - 1.5, 0.0, 0.0, 0.0, 50.0), false);
	//---
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i ++)
	{
	    new Float:fDist = GetDistanceToPoint(i, x, y, z);
	    PlayerPlaySound(i, 4400, x, y, z);
	    new dDamage = (fDist < 2.5 ? -400 : (fDist < 4.0 ? -300 : (fDist < 7.5 ? -150 : (fDist < 10.0 ? -30 : 0))));
		//---
		if(fDist < 10.0 && dDamage != 0)
		{
			GivePlayerArmour(i, dDamage, 51, INVALID_PLAYER_ID);
			dDeathBoss[dDeathHealth] -= dDamage * 5;
			if(dDeathBoss[dDeathHealth] > 100000) dDeathBoss[dDeathHealth] = 100000;
		}
	}
}

//---

SetBossUFOState(stateufo)
{
    if(stateufo == dBossUFO[dBossState]) return 0;
	if(stateufo == 0)
	{
		dBossUFO[dBossState] = 0;
	    DestroyObject(dBossUFO[oVaisseau]);
	    dBossUFO[oVaisseau] = INVALID_OBJECT_ID;
	    DestroyObject(dBossUFO[oHead][0]);
	    DestroyObject(dBossUFO[oHead][1]);
	    dBossUFO[oHead][0] = INVALID_OBJECT_ID;
	    dBossUFO[oHead][1] = INVALID_OBJECT_ID;
	    for(new i = 0; i < 4; i ++) DestroyObject(dBossUFO[oBras1][i]), DestroyObject(dBossUFO[oBras2][i]);
	    for(new i = 0; i < 4; i ++) dBossUFO[oBras1][i] = INVALID_OBJECT_ID, dBossUFO[oBras2][i] = INVALID_OBJECT_ID;
		for(new i = 0; i < 4; i ++) dBossUFO[dLifeBras][i] = 0;
		dBossUFO[dLife] = 0;
	}
	else if(stateufo == 1)
	{
	    if(dBossUFO[dBossState] == 0)
	    {
		    dBossUFO[oVaisseau] = CreateObject(18846, 2576.7509766, 1342.5732422, 77.4759979, 0.0000000, 0.0000000, 0.0000000); //object(ufo) (2)
			dBossUFO[oHead][0] = CreateObject(3524,2576.7370605,1342.5429688,77.6669998,0.0000000,0.0000000,0.0000000); //object(skullpillar01_lvs) (1)
			dBossUFO[oHead][1] = CreateObject(702,2576.7529297,1342.6850586,80.5250015,0.0000000,0.0000000,0.0000000); //object(sm_tumbleweed) (2)
			dBossUFO[oBras1][0] = CreateObject(362, 2579.1721191, 1342.5400391, 78.4919968,0.0000000,26.0,4.0000000); //object(2)
			dBossUFO[oBras1][1] = CreateObject(362, 2576.7810059, 1345.0250244, 78.4919968,0.0000000,26.0,93.9990234); //object(4)
			dBossUFO[oBras1][2] = CreateObject(362, 2574.3029785, 1342.6140137, 78.4919968,0.0000000,26.0,183.9990234); //object(5)
			dBossUFO[oBras1][3] = CreateObject(362, 2576.7109375, 1340.0949707, 78.4919968,0.0000000,26.0,273.9990234); //object(6)
		}
		AttachObjectToObject(dBossUFO[oHead][0], dBossUFO[oVaisseau], -0.0138, -0.303, 0.191, 0.0, 0.0, 0.0, 1);
		AttachObjectToObject(dBossUFO[oHead][1], dBossUFO[oVaisseau], 0.002, 0.1118, 3.0491, 0.0, 0.0, 0.0, 1);
		AttachObjectToObject(dBossUFO[oBras1][0], dBossUFO[oVaisseau], 0.0301, 2.4518, 1.016, 0.0, 26.0, 93.999, 1);
		AttachObjectToObject(dBossUFO[oBras1][1], dBossUFO[oVaisseau], 2.4212, -0.0332, 1.016, 0.0, 26.0, 4.0, 1);
		AttachObjectToObject(dBossUFO[oBras1][2], dBossUFO[oVaisseau], -0.04, -2.4783, 1.016, 0.0, 26.0, 273.999, 1);
		AttachObjectToObject(dBossUFO[oBras1][3], dBossUFO[oVaisseau], -2.448, 0.0408, 1.016, 0.0, 26.0, 183.999, 1);
		dBossUFO[dBossState] = 1;
		dBossUFO[dLifeBras][0] = 15000;
		dBossUFO[dLifeBras][1] = 15000;
		dBossUFO[dLifeBras][2] = 15000;
		dBossUFO[dLifeBras][3] = 15000;
		SetBossUFOArmState(0, false);
		SetBossUFOArmState(1, false);
		SetBossUFOArmState(2, false);
		SetBossUFOArmState(3, false);
		dBossUFO[dLife] = 20000;
		SetObjectPos(dBossUFO[oVaisseau], 221.091, 1883.369, 3617.5759);
	}
	else if(stateufo == 2)
	{
	    if(dBossUFO[dBossState] == 0)
	    {
		    dBossUFO[oVaisseau] = CreateObject(18846, 2576.7509766, 1342.5732422, 77.4759979, 0.0000000, 0.0000000, 0.0000000); //object(ufo) (2)
			dBossUFO[oHead][0] = CreateObject(3524,2576.7370605,1342.5429688,77.6669998,0.0000000,0.0000000,0.0000000); //object(skullpillar01_lvs) (1)
			dBossUFO[oHead][1] = CreateObject(702,2576.7529297,1342.6850586,80.5250015,0.0000000,0.0000000,0.0000000); //object(sm_tumbleweed) (2)
			dBossUFO[oBras1][0] = CreateObject(362, 2579.1721191, 1342.5400391, 78.4919968,0.0000000,26.0,4.0000000); //object(2)
			dBossUFO[oBras1][1] = CreateObject(362, 2576.7810059, 1345.0250244, 78.4919968,0.0000000,26.0,93.9990234); //object(4)
			dBossUFO[oBras1][2] = CreateObject(362, 2574.3029785, 1342.6140137, 78.4919968,0.0000000,26.0,183.9990234); //object(5)
			dBossUFO[oBras1][3] = CreateObject(362, 2576.7109375, 1340.0949707, 78.4919968,0.0000000,26.0,273.9990234); //object(6)
		}
		SetObjectPos(dBossUFO[oVaisseau], 221.091, 1883.369, 3617.5759);
		dBossUFO[dBossState] = 2;
		dBossUFO[dLifeBras][0] = 15000;
		dBossUFO[dLifeBras][1] = 15000;
		dBossUFO[dLifeBras][2] = 15000;
		dBossUFO[dLifeBras][3] = 15000;
		SetBossUFOArmState(0, false);
		SetBossUFOArmState(1, false);
		SetBossUFOArmState(2, false);
		SetBossUFOArmState(3, false);
		dBossUFO[dLife] = 20000;
	}
	else if(stateufo == 3)
	{
	    if(dBossUFO[dBossState] == 0)
	    {
		    dBossUFO[oVaisseau] = CreateObject(18846, 2576.7509766, 1342.5732422, 77.4759979, 0.0000000, 0.0000000, 0.0000000); //object(ufo) (2)
			dBossUFO[oHead][0] = CreateObject(3524,2576.7370605,1342.5429688,77.6669998,0.0000000,0.0000000,0.0000000); //object(skullpillar01_lvs) (1)
			dBossUFO[oHead][1] = CreateObject(702,2576.7529297,1342.6850586,80.5250015,0.0000000,0.0000000,0.0000000); //object(sm_tumbleweed) (2)
			dBossUFO[oBras1][0] = CreateObject(362, 2579.1721191, 1342.5400391, 78.4919968,0.0000000,26.0,4.0000000); //object(2)
			dBossUFO[oBras1][1] = CreateObject(362, 2576.7810059, 1345.0250244, 78.4919968,0.0000000,26.0,93.9990234); //object(4)
			dBossUFO[oBras1][2] = CreateObject(362, 2574.3029785, 1342.6140137, 78.4919968,0.0000000,26.0,183.9990234); //object(5)
			dBossUFO[oBras1][3] = CreateObject(362, 2576.7109375, 1340.0949707, 78.4919968,0.0000000,26.0,273.9990234); //object(6)
		}
	    MoveObject(dBossUFO[oVaisseau], 221.091, 1883.369, 3625.5759, 15.0);
		dBossUFO[dLifeBras][0] = 1;
		SetBossUFOArmState(0, true);
		SetBossUFOArmState(1, true);
		SetBossUFOArmState(2, true);
		SetBossUFOArmState(3, true);
		dBossUFO[dBossState] = 3;
		dBossUFO[dLifeBras][0] = 0;
		dBossUFO[dLifeBras][1] = 0;
		dBossUFO[dLifeBras][2] = 0;
		dBossUFO[dLifeBras][3] = 0;
		dBossUFO[dLife] = 20000;
	}
	return 1;
}

UpdateUFOBoss()
{
    static dShoot = 0;
	static oLasers[4] = {INVALID_OBJECT_ID, ...};
    if(dBossUFO[dBossState] == 1)
    {
		if(IsPlayerCloseToObject(dBossUFO[oVaisseau], 75.0) != INVALID_PLAYER_ID)
	    {
	        SetBossUFOState(2);
	    }
    }
	else if(dBossUFO[dBossState] == 2)
	{
	    new playerid = GetClosestPlayerToObject(dBossUFO[oVaisseau]);
	    if(!IsObjectNearToPlayer(75.0, GetClosestPlayerToObject(dBossUFO[oVaisseau]), dBossUFO[oVaisseau]))
        {
            SetBossUFOState(1);
            return 1;
        }
		//---
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		new Float:fZ = GetZAngleBetweenPos(221.091, 1883.369, x, y) + 90.0;
		SetObjectRot(dBossUFO[oVaisseau], 0.0, 0.0, fZ);
		if(dShoot < 4)
		{
		    dShoot ++;
			for(new i = 0; i < 4; i ++)
		    {
		        if(IsValidObject(oLasers[i]))
		        {
		            if(IsPlayerCloseToObject(oLasers[i], 4.0) != INVALID_PLAYER_ID)
		            {
		                GetObjectPos(oLasers[i], x, y, z);
		                CreateExplosionEx(INVALID_PLAYER_ID, x, y, z, EXPLOSION_LARGE, 5.0);
						DestroyObject(oLasers[i]);
						oLasers[i] = INVALID_OBJECT_ID;
		            }
		        }
		    }
		}
		else if(dShoot == 4)
		{
			for(new i = 0; i < 4; i ++)
		    {
		        if(IsValidObject(oLasers[i]))
		        {
	         		GetObjectPos(oLasers[i], x, y, z);
		            CreateExplosionEx(INVALID_PLAYER_ID, x, y, z, EXPLOSION_LARGE, 5.0);
					DestroyObject(oLasers[i]);
					oLasers[i] = INVALID_OBJECT_ID;
		        }
		    }
		    dShoot = 0;
		    //---
		    new Float:fPos[4] = {90.0, 0.0, 270.0, 180.0};
			for(new i = 0; i < 4; i ++)
		    {
		        if(dBossUFO[dLifeBras][i] > 0)
		        {
					oLasers[i] = CreateObject(19297, 221.091, 1883.369, 3617.5759, 0.0, 0.0, fZ + fPos[i], 250.0);
					x = 221.091 + 18.0 * floatsin(fZ + fPos[i], degrees);
					y = 1883.369 + 18.0 * floatcos(fZ + fPos[i], degrees);
					MoveObject(oLasers[i], x, y, 3617.5759, 5.0);
		        }
		    }
		}
	}
	else if(dBossUFO[dBossState] == 3)
	{
	    if(IsPlayerCloseToObject(dBossUFO[oVaisseau], 75.0) == INVALID_PLAYER_ID)
        {
            SetBossUFOState(1);
            return 1;
        }
        //---
		new Float:fAngle = float(RandomEx(0, 360));
		new Float:x, Float:y, Float:z;
		for(new i = 0; i < 4; i ++)
	    {
	        if(IsValidObject(oLasers[i]))
	        {
         		GetObjectPos(oLasers[i], x, y, z);
	            CreateExplosionEx(INVALID_PLAYER_ID, x, y, z, EXPLOSION_LARGE, 5.0);
				DestroyObject(oLasers[i]);
				oLasers[i] = INVALID_OBJECT_ID;
	        }
	    }
	    //---
		x = 221.091 + 18.0 * floatsin(fAngle, degrees);
		y = 1883.369 + 18.0 * floatcos(fAngle, degrees);
		if(dShoot < 6)
		{
			dShoot ++;
	   	 	MoveObject(dBossUFO[oVaisseau], x, y, 3625.5759, 7.0);
		}
		else if(dShoot == 6)
		{
		    dShoot = 0;
		    //---
		    for(new i = 0, j = RandomEx(5, 15); i <= j; i ++)
	        {
				x = 221.091 + float(RandomEx(-15, 15));
				y = 1883.369 + float(RandomEx(-15, 15));
				new objectid = CreateObject(19123, x, y, 3617.0759, 0.0, 0.0, 0.0, 200.0);
				SetTimerEx("OnLaserBlows", RandomEx(2000, 5000), false, "ifff", objectid, x, y, 3617.0759);
		    }
		}
	}
	return 1;
}

public ClearOutMothership()
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerInRangeOfPoint(i, 75.0, 221.091, 1883.369, 3617.5759))
		{
		    SetPlayerPos(i, 150.3489990, 1928.1619873, 19.2759991);
		}
	}
}

SetBossUFOArmState(arm, bool:destroyed)
{
	if(IsValidObject(dBossUFO[oBras2][arm])) DestroyObject(dBossUFO[oBras2][arm]);
	dBossUFO[oBras2][arm] = CreateObject(destroyed ? 18725 : 18888, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 250.0);
	switch(arm)
	{
	    case 0:
	    {
	        if(destroyed) AttachObjectToObject(dBossUFO[oBras2][0], dBossUFO[oVaisseau], -0.011, 2.7378, 0.3681, 0.0, 0.0, 0.0, 1);
	        else AttachObjectToObject(dBossUFO[oBras2][0], dBossUFO[oVaisseau], -0.0171, 2.7767, 0.474, 0.0, 90.0, 90.0, 1);
	    }
	    case 1:
	    {
	        if(destroyed) AttachObjectToObject(dBossUFO[oBras2][1], dBossUFO[oVaisseau], 2.8741, -0.0603, 0.3681, 0.0, 0.0, 0.0, 1);
	        else AttachObjectToObject(dBossUFO[oBras2][1], dBossUFO[oVaisseau], 2.7591, 0.0078, 0.474, 0.0, 90.0, 0.0, 1);
	    }
		case 2:
	    {
	        if(destroyed) AttachObjectToObject(dBossUFO[oBras2][2], dBossUFO[oVaisseau], 0.2881, -2.7412, 0.3681, 0.0, 0.0, 0.0, 1);
	        else AttachObjectToObject(dBossUFO[oBras2][2], dBossUFO[oVaisseau], -0.0249, -2.7622, 0.474, 0.0, 90.0, 270.0, 1);
	    }
	    case 3:
	    {
	        if(destroyed) AttachObjectToObject(dBossUFO[oBras2][3], dBossUFO[oVaisseau], -2.7029, -0.0103, 0.3681, 0.0, 0.0, 0.0, 1);
	        else AttachObjectToObject(dBossUFO[oBras2][3], dBossUFO[oVaisseau], -2.6796, 0.0518, 0.474, 0.0, 90.0, 180.0, 1);
	    }
	}
	if(dBossUFO[dLifeBras][0] <= 0 && dBossUFO[dLifeBras][1] <= 0 && dBossUFO[dLifeBras][2] <= 0 && dBossUFO[dLifeBras][3] <= 0) SetBossUFOState(3);
}
	
//---
WakeJason()
{
	if(dJason[dJasonID] != INVALID_PLAYER_ID)
	{
		FCNPC_SetPosition(dJason[dJasonID], -1632.6936, -2246.8542, 32.3810);
		FCNPC_ApplyAnimation(dJason[dJasonID], "CHAINSAW", "null", 0.0, 0, 0, 0, 0);
		FCNPC_ApplyAnimation(dJason[dJasonID], "PED", "getup", 4.0, 0, 1, 1, 0, 0);
		FCNPC_SetHealth(dJason[dJasonID], 3500.0);
		FCNPC_SetInvulnerable(dJason[dJasonID], false);
	    SetPlayerColor(dJason[dJasonID], 0xCC000000);
		FCNPC_SetSkin(dJason[dJasonID], 168);
		dJason[dJasonState] = 2;
		SetPlayerAttachedObject(dJason[dJasonID], 0, 19036, 2, 0.086, 0.043, -0.007, 86.100196, 91.500007, 0.0, 1.0, 1.0, 1.0);
		FCNPC_SetWeapon(dJason[dJasonID], 9);
		//RNPC_SetWeaponID(9);
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			ShowPlayerTextInfo(i, 5000, "~g~Jason Voorhees is awake!", "~g~Jason Voorhees est réveillé !", "~r~¡Espagnol!", "~r~Portugais!", "~r~Italien!", "~r~Allemand!");
		}
	}
}

GetJasonVictim()
{
	new Float:dist = 9999.9;
	new playerid = INVALID_PLAYER_ID;
 	new Float:x, Float:y, Float:z, Float:px, Float:py, Float:pz;
	FCNPC_GetPosition(dJason[dJasonID], x, y, z);
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i ++)
	{
	    if(!FCNPC_IsValid(i) && !IsPlayerDead(i) && IsPlayerConnected(i) && !CallRemoteFunction("IsPlayerOnCinematic", "i", i) || IsPlayerOnSpectate(i))
	    {
			new Float:distance;
			distance = GetDistanceToPoint(i, x, y, z);
			GetPlayerPos(i, px, py, pz);
			if(IsPlayerInArea(i, -1637.7211, -2248.2649, -1628.6700, -2231.7224) && dist > distance)
			{
				dist = distance;
				playerid = i;
			}
	    }
	}
	return playerid;
}

JasonAttack()
{
	#if defined UNLAG_JASON
	if(!FCNPC_IsStreamedInForAnyone(dJason[dJasonID])) return 0;
	#endif 
	if(!FCNPC_IsDead(dJason[dJasonID]))
	{
	    static bool:bAttack;
		new victim = GetJasonVictim(), Float:x, Float:y, Float:z, Float:x2, Float:y2, Float:z2;
		FCNPC_GetPosition(dJason[dJasonID], x, y, z);
		if(victim != INVALID_PLAYER_ID)
		{
			GetPlayerPos(victim, x2, y2, z2);
		    if(IsPlayerInRangeOfPoint(dJason[dJasonID], 1.3, x2, y2, z2))
		    {
				if(bAttack)
				{
					FCNPC_StopAim(dJason[dJasonID]);
					FCNPC_StopAttack(dJason[dJasonID]);
					bAttack = false;
				}
				//---
				FCNPC_AimAtPlayer(dJason[dJasonID], victim, false, -1, true, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, FCNPC_ENTITY_CHECK_ALL);
				FCNPC_MeleeAttack(dJason[dJasonID], -1, false);
				bAttack = true;
				//---
                /*if(!IsPlayerInvincible(victim))
				{
				    #if defined ARMOUR_LOW
					GivePlayerHealth(victim, -330, 9, dJason[dJasonID]);
					#else
					GivePlayerArmour(victim, -330, 9, dJason[dJasonID]);
					#endif
					if(RandomEx(0, 10) > 8)
					{
					    pPlayerInfos[victim][bHemorragie] = true;
	    				UpdateInfo(victim, 9);
					}
				}*/
				//---
				//JasonSpeak();
		    }
			else
			{
				if(bAttack)
				{
					FCNPC_StopAim(dJason[dJasonID]);
					FCNPC_StopAttack(dJason[dJasonID]);
					bAttack = false;
				}
				/*GetVictimPos(victim, x2, y2, z2);
				new Float:angle = GetZAngleBetweenPos(x, y, x2, y2) - 90.0;
			    if(GetDistanceBetweenPoints(x, y, z, x2, y2, z2) > 6.4)
			    {
					x2 = x + 3.4 * floatsin(-angle, degrees);
					y2 = y + 3.4 * floatcos(-angle, degrees);
				}
				else
				{
				    x2 = x2 + floatrand(-0.3, 0.3);
				    y2 = y2 + floatrand(-0.3, 0.3);
				}
				//JasonSpeak();
				//FindZPathCoord(x, y, z, x2, y2, z2);
				//z2 += 1.0;
				z2 = 31.4766;*/
				FCNPC_GoToPlayer(dJason[dJasonID], victim, FCNPC_MOVE_TYPE_RUN,FCNPC_MOVE_SPEED_RUN, FCNPC_MOVE_MODE_COLANDREAS, FCNPC_MOVE_PATHFINDING_RAYCAST, 0.0, true, 0.0, 1.5, 250);
			 	//FCNPC_GoTo(dJason[dJasonID], x2, y2, z2, FCNPC_MOVE_TYPE_SPRINT, FCNPC_MOVE_SPEED_SPRINT, FCNPC_MOVE_MODE_NONE, FCNPC_MOVE_PATHFINDING_NONE, 0.0, true, 0.0, 250);
			}
		}
		else
		{
			if(bAttack)
			{
				FCNPC_StopAim(dJason[dJasonID]);
				FCNPC_StopAttack(dJason[dJasonID]);
				bAttack = false;
			}
			new Float:fJHealth = FCNPC_GetHealth(dJason[dJasonID]);
			if(fJHealth < 3500.0) FCNPC_GiveHealth(dJason[dJasonID], 100.0);
	 		FCNPC_GoTo(dJason[dJasonID], floatrand(-1637.7211, -1628.6700), floatrand(-2248.2649, -2231.7224), 31.4766, FCNPC_MOVE_TYPE_WALK, FCNPC_MOVE_SPEED_WALK, FCNPC_MOVE_MODE_NONE, FCNPC_MOVE_PATHFINDING_NONE, 0.0, true, 0.0, 250);
		}
	}
	return 1;
}



public UpdateHealthBar(playerid, health, maxhealth, const nameen[], const namefr[], const namees[], const namepg[], const nameit[], const namede[])
{
	static bool:bDisplayed[MAX_PLAYERS];
	static dBarTimer[MAX_PLAYERS] = {-1, ...};
	if(maxhealth == -1)
	{
		TextDrawHideForPlayer(playerid, tBossBar);
		PlayerTextDrawHide(playerid, tBossHealth[playerid][0]);
		PlayerTextDrawDestroy(playerid, tBossHealth[playerid][0]);
		PlayerTextDrawHide(playerid, tBossHealth[playerid][1]);
		PlayerTextDrawDestroy(playerid, tBossHealth[playerid][1]);
		tBossHealth[playerid][0] = PlayerText:INVALID_TEXT_DRAW;
		tBossHealth[playerid][1] = PlayerText:INVALID_TEXT_DRAW;
		bDisplayed[playerid] = false;
		if(dBarTimer[playerid] != -1)
		{
		    KillTimer(dBarTimer[playerid]);
		    dBarTimer[playerid] = -1;
		}
	}
	else
	{
		new sName[32];
		switch(GetPlayerLanguage(playerid))
		{
			case LANGUAGE_EN: strcpy(sName, nameen);
			case LANGUAGE_FR: strcpy(sName, namefr);
			case LANGUAGE_ES: strcpy(sName, namees);
			case LANGUAGE_PG: strcpy(sName, namepg);
			case LANGUAGE_IT: strcpy(sName, nameit);
			case LANGUAGE_DE: strcpy(sName, namede);
		}
		new dPercent = floatround(floatdiv(health, maxhealth) * 100, floatround_round);
		if(dPercent < 0) dPercent = 0;
		//---
		if(!bDisplayed[playerid])
	    {
			tBossHealth[playerid][0] = CreatePlayerTextDraw(playerid, 480.000000, 170.000000, "~n~");
			PlayerTextDrawBackgroundColor(playerid, tBossHealth[playerid][0], 255);
			PlayerTextDrawFont(playerid, tBossHealth[playerid][0], 1);
			PlayerTextDrawLetterSize(playerid, tBossHealth[playerid][0], 0.500000, 1.000000);
			PlayerTextDrawColor(playerid, tBossHealth[playerid][0], -1);
			PlayerTextDrawSetOutline(playerid, tBossHealth[playerid][0], 0);
			PlayerTextDrawSetProportional(playerid, tBossHealth[playerid][0], 1);
			PlayerTextDrawSetShadow(playerid, tBossHealth[playerid][0], 1);
			PlayerTextDrawUseBox(playerid, tBossHealth[playerid][0], 1);
			PlayerTextDrawBoxColor(playerid, tBossHealth[playerid][0], -872415181);
			PlayerTextDrawTextSize(playerid, tBossHealth[playerid][0], 630.000000, 10.000000);
			PlayerTextDrawSetSelectable(playerid, tBossHealth[playerid][0], false);
			//---
			tBossHealth[playerid][1] = CreatePlayerTextDraw(playerid, 555.000000, 160.000000, "Mob Name");
			PlayerTextDrawAlignment(playerid, tBossHealth[playerid][1], 2);
			PlayerTextDrawBackgroundColor(playerid, tBossHealth[playerid][1], -335544269);
			PlayerTextDrawFont(playerid, tBossHealth[playerid][1], 2);
			PlayerTextDrawLetterSize(playerid, tBossHealth[playerid][1], 0.200000, 1.000000);
			PlayerTextDrawColor(playerid, tBossHealth[playerid][1], 255);
			PlayerTextDrawSetOutline(playerid, tBossHealth[playerid][1], 1);
			PlayerTextDrawSetProportional(playerid, tBossHealth[playerid][1], 1);
			PlayerTextDrawSetSelectable(playerid, tBossHealth[playerid][1], false);
			//---
			if(!IsHUDHiddenForPlayer(playerid)) TextDrawShowForPlayer(playerid, tBossBar);
	    }
	    else
	    {
	        KillTimer(dBarTimer[playerid]);
	    }
		PlayerTextDrawTextSize(playerid, tBossHealth[playerid][0], CalculateBarSize(dPercent, 150.0) + 480.0, 0.000000);//On change la taille du rectangle (La barre) pour montrer combien il reste
		if(100 >= dPercent >= 50) PlayerTextDrawBoxColor(playerid, tBossHealth[playerid][0], 0x00800033);//Et on change aussi la couleur
		else if(15 < dPercent < 50) PlayerTextDrawBoxColor(playerid, tBossHealth[playerid][0], 0xFFFF0033);
		else if(15 > dPercent) PlayerTextDrawBoxColor(playerid, tBossHealth[playerid][0], 0xCC000033);
		dBarTimer[playerid] = SetTimerEx("UpdateHealthBar", 5000, false, "iiissssss", playerid, -1, -1,  "N/A",  "N/A",  "N/A",  "N/A",  "N/A",  "N/A");
		//---
		PlayerTextDrawSetString(playerid, tBossHealth[playerid][1], sName);
		//---
		if(!IsHUDHiddenForPlayer(playerid))
		{
			PlayerTextDrawShow(playerid, tBossHealth[playerid][0]);
			PlayerTextDrawShow(playerid, tBossHealth[playerid][1]);
		}
		bDisplayed[playerid] = true;
	}
}

//---BOMBES
public CreateBomb(type, time, vehicleid, Float:x, Float:y, Float:z, Float:angle, load, missionid)
{
	static slotid;
	if(load == -1)
	{
		if(dBomb[slotid][dBombType])
		{
		    for(new i = 0; i < MAX_BOMBS; i ++)
		    {
		        if(dBomb[slotid][dBombType] == 0)
		        {
		            slotid = i;
		            break;
		        }
		    }
		}
	}
	if(dBomb[(load == -1) ? slotid : load][dBombType] != 0) ExplodeBomb((load == -1) ? slotid : load);
	//---
	dBomb[(load == -1) ? slotid : load][xBomb] = x;
	dBomb[(load == -1) ? slotid : load][yBomb] = y;
	dBomb[(load == -1) ? slotid : load][zBomb] = z;
	dBomb[(load == -1) ? slotid : load][aBomb] = angle;
	dBomb[(load == -1) ? slotid : load][dBombTime] = time;
	dBomb[(load == -1) ? slotid : load][dBombType] = type;
	dBomb[(load == -1) ? slotid : load][dBombMission] = missionid;
	//---
	switch(type)
	{
	    case 1://MINE
	    {
			dBomb[(load == -1) ? slotid : load][oBomb] = CreateDynamicObject(19602, x, y, z - 0.8, 0.0, 0.0, angle);
			if(vehicleid == 0)
			{
			    dBomb[(load == -1) ? slotid : load][aBombArea] = CreateDynamicSphere(x, y, z, 5.0, 0, -1);
			    dBomb[(load == -1) ? slotid : load][vBombID] = 0;
			}
			else
			{
			    dBomb[(load == -1) ? slotid : load][vBombID] = vehicleid;
				AttachDynamicObjectToVehicle(dBomb[(load == -1) ? slotid : load][oBomb], vehicleid, 0, 0, 0, 0, 0, 0);
			}
		}
		case 2://BOMBE À TIMER
		{
			dBomb[(load == -1) ? slotid : load][oBomb] = CreateDynamicObject(1252, x, y, z - 0.9, 90.0, 0.0, angle);
			if(vehicleid == 0)
			{
			    dBomb[(load == -1) ? slotid : load][vBombID] = 0;
			}
			else
			{
			    dBomb[(load == -1) ? slotid : load][vBombID] = vehicleid;
				AttachDynamicObjectToVehicle(dBomb[(load == -1) ? slotid : load][oBomb], vehicleid, 0, 0, 0, 0, 0, 0);
			}
			if(0 >= time) ExplodeBomb((load == -1) ? slotid : load);
		}
		case 3://BOMBE À TIMER
		{
			dBomb[(load == -1) ? slotid : load][oBomb] = CreateDynamicObject(363, x, y, z - 0.75, 90.0, 0.0, angle);
			if(vehicleid == 0)
			{
			    dBomb[(load == -1) ? slotid : load][vBombID] = 0;
			}
			else
			{
			    dBomb[(load == -1) ? slotid : load][vBombID] = vehicleid;
				AttachDynamicObjectToVehicle(dBomb[(load == -1) ? slotid : load][oBomb], vehicleid, 0, 0, 0, 0, 0, 0);
			}
			if(0 >= time) ExplodeBomb((load == -1) ? slotid : load);
		}
	}
	//---
    slotid ++;
    if(slotid == MAX_BOMBS) slotid = 0;
    return (slotid == 0) ? MAX_BOMBS : slotid - 1;
}

public GetBombMission(bombid)
{
	return dBomb[bombid][dBombMission];
}

public ExplodeBomb(bombid)
{
	new Float:x, Float:y, Float:z;
 	if(dBomb[bombid][vBombID] == 0)
 	{
 	    GetDynamicObjectPos(dBomb[bombid][oBomb], x, y, z);
	}
 	else
 	{
 	    GetVehiclePos(dBomb[bombid][vBombID], x, y, z);
		SetVehicleHealth(dBomb[bombid][vBombID], 0.0);
	}
	//---
	switch(dBomb[bombid][dBombType])
 	{
	 	case 1: CreateExplosionEx(INVALID_PLAYER_ID, x, y, z, EXPLOSION_HUGE, 15.0);
		case 2: CreateExplosionEx(INVALID_PLAYER_ID, x, y, z, EXPLOSION_HUGE, 25.0);
	}
	//---
 	DestroyDynamicObject(dBomb[bombid][oBomb]);
 	dBomb[bombid][oBomb] = INVALID_OBJECT_ID;
 	//---
 	if(IsValidDynamicArea(dBomb[bombid][aBombArea])) DestroyDynamicArea(dBomb[bombid][aBombArea]);
 	dBomb[bombid][aBombArea] = -1;
	//---
	dBomb[bombid][xBomb] = 0.0;
	dBomb[bombid][yBomb] = 0.0;
	dBomb[bombid][zBomb] = 0.0;
	dBomb[bombid][aBomb] = 0.0;
	//---
	dBomb[bombid][dBombType] = 0;
	dBomb[bombid][dBombTime] = 0;
	dBomb[bombid][vBombID] = 0;
	dBomb[bombid][dBombMission] = 0;
}

//---TENTES - LITS - FEU - COLLECTEUR D'EAU
CreateTent(Float:x, Float:y, Float:z, Float:angle, load = -1)
{
	static slotid;
	if(load == -1)
	{
		if(dTent[slotid][bTent])
		{
		    for(new i = 0; i < MAX_TENTS; i ++)
		    {
		        if(!dTent[i][bTent])
		        {
		            slotid = i;
		            break;
		        }
		    }
		}
		if(dTent[slotid][bTent]) for(new i = 0; i < 6; i ++) CA_DestroyObject_DC(dTent[slotid][oTent][i]);
	}
	//---
	dTent[(load == -1) ? slotid : load][xTent] = x;
	dTent[(load == -1) ? slotid : load][yTent] = y;
	dTent[(load == -1) ? slotid : load][zTent] = z;
	dTent[(load == -1) ? slotid : load][aTent] = angle;
	dTent[(load == -1) ? slotid : load][bTent] = true;
	//---- 11.363850276 dérivation 1 - 10.8165809 dérivation 2
	dTent[(load == -1) ? slotid : load][oTent][0] = CA_CreateDynamicObject_DC(19325, x - 1.1031 * floatsin(-(angle - 82.121), degrees), y - 1.1031 * floatcos(-(angle - 82.121), degrees), z - 0.1919, 0.0, 32.0, angle, -1, -1, -1, 550.0, 550.0);
	dTent[(load == -1) ? slotid : load][oTent][1] = CA_CreateDynamicObject_DC(19325, x - 1.1031 * floatsin(-(angle + 81.8452), degrees), y - 1.1031 * floatcos(-(angle + 81.8452), degrees) , z - 0.1919, 0.0, 328.0, angle, -1, -1, -1, 550.0, 550.0);
	//---
	SetDynamicObjectMaterial(CA_GetObjectID(dTent[(load == -1) ? slotid : load][oTent][0]), 0, 3066, "ammotrx", "ammotrn92tarp128", -1); //object(lsmall_window01) (2)
	SetDynamicObjectMaterial(CA_GetObjectID(dTent[(load == -1) ? slotid : load][oTent][1]), 0, 3066, "ammotrx", "ammotrn92tarp128", -1); //object(lsmall_window01) (2)
	//---
	dTent[(load == -1) ? slotid : load][oTent][2] = CA_CreateDynamicObject_DC(2068, x + 2.563 * floatsin(-(angle + 163.0529), degrees), y + 2.563 * floatcos(-(angle + 163.0529), degrees), z - 4.0539, 42.0, 285.0, 260.0 + angle, -1, -1, -1, 550.0, 550.0);
	dTent[(load == -1) ? slotid : load][oTent][3] = CA_CreateDynamicObject_DC(2068, x + 3.771 * floatsin(-(angle - 168.883), degrees), y + 3.771 * floatcos(-(angle - 168.883), degrees), z - 4.0539, 42.0, 285.0, 80.0 + angle, -1, -1, -1, 550.0, 550.0);
	dTent[(load == -1) ? slotid : load][oTent][4] = CA_CreateDynamicObject_DC(2068, x + 2.563 * floatsin(-(angle - 14.3909), degrees), y + 2.563 * floatcos(-(angle - 14.3909), degrees), z - 4.0539, 42.0, 285.0, 80.0 + angle, -1, -1, -1, 550.0, 550.0);
	dTent[(load == -1) ? slotid : load][oTent][5] = CA_CreateDynamicObject_DC(2068, x + 3.771 * floatsin(-(angle + 10.7698), degrees), y + 3.771 * floatcos(-(angle + 10.7698), degrees), z - 4.0539, 42.0, 285.0, 260.0 + angle, -1, -1, -1, 550.0, 550.0);
	//---2.8879    4.1059
	/*
	Le mec
	2486.1689, 1037.478, 57.5019, 0.0

	Parois
	19325, 2485.0568, 1037.6319, 57.31, 0.0, 32.0, 0.0
	19325, 2487.2429, 1037.6319, 57.31, 0.0, 328.0, 0.0
	//---
    -1.1121, 0.1539     -1.4332828885831745
    1.074, 0.1539       1.4284691310527518

	Camouflage
	2068, 2485.3879, 1034.915, 53.448, 42.0, 285.0, 260.0
	2068, 2486.9099, 1033.707, 53.448, 42.0, 285.0, 80.0
	2068, 2486.9221, 1040.3659, 53.448, 42.0, 285.0, 80.0
	2068, 2485.3879, 1041.5839, 53.448, 42.0, 285.0, 260.0
	//---
	-0.781, -2.563      -2.8458102864047072
	0.741, -3.771       2.947565115297439
	0.741, 2.8879       0.25116930040828855
	-0.781, 4.1059      -0.18796856148048377
	*/
    slotid ++;
    if(slotid == MAX_TENTS) slotid = 0;
    return (slotid == 0) ? MAX_TENTS : slotid - 1;
}

DestroyTent(tentid)
{
	for(new i = 0; i < 6; i ++)
	{
		CA_DestroyObject_DC(dTent[tentid][oTent][i]);
		dTent[tentid][oTent][i] = INVALID_OBJECT_ID;
	}
	dTent[tentid][xTent] = 0.0;
	dTent[tentid][yTent] = 0.0;
	dTent[tentid][zTent] = 0.0;
	dTent[tentid][aTent] = 0.0;
    dTent[tentid][bTent] = false;
}

public LoadTents_data(name[],value[])
{
	new string[50];
	for(new i = 0; i < MAX_TENTS; i ++)
	{
	    format(string, sizeof(string), "Tente%d", i);
		INI_Bool(string, dTent[i][bTent]);
	    format(string, sizeof(string), "xTente%d", i);
		INI_Float(string, dTent[i][xTent]);
	    format(string, sizeof(string), "yTente%d", i);
		INI_Float(string, dTent[i][yTent]);
	    format(string, sizeof(string), "zTente%d", i);
		INI_Float(string, dTent[i][zTent]);
	    format(string, sizeof(string), "aTente%d", i);
		INI_Float(string, dTent[i][aTent]);
	}
	return 1;
}

SaveTents()
{
	new string[50];
	new INI:File = INI_Open(TPATH);
	INI_SetTag(File, "data");
	for(new i = 0; i < MAX_TENTS; i ++)
	{
	    format(string, sizeof(string), "Tente%d", i);
		INI_WriteBool(File,string, dTent[i][bTent]);
	    format(string, sizeof(string), "xTente%d", i);
		INI_WriteFloat(File,string, dTent[i][xTent]);
	    format(string, sizeof(string), "yTente%d", i);
		INI_WriteFloat(File,string, dTent[i][yTent]);
	    format(string, sizeof(string), "zTente%d", i);
		INI_WriteFloat(File,string, dTent[i][zTent]);
	    format(string, sizeof(string), "aTente%d", i);
		INI_WriteFloat(File,string, dTent[i][aTent]);
	}
	INI_Close(File);
}

//---CITERNES---//
CreateTank(Float:x, Float:y, Float:z, Float:angle, gas, load = -1)
{
	static slotid;
	if(load == -1)
	{
		if(dTanks[slotid][dTankGas] != -1)
		{
		    for(new i = 0; i < MAX_TANKS; i ++)
		    {
		        if(dTanks[slotid][dTankGas] == -1)
		        {
		            slotid = i;
		            break;
		        }
		    }
		}
		if(dTanks[slotid][dTankGas] != -1)
		{
			CA_DestroyObject_DC(dTanks[slotid][oTank][0]), dTanks[slotid][oTank][0] = INVALID_OBJECT_ID;
			DestroyDynamicObject(dTanks[slotid][oTank][1]), dTanks[slotid][oTank][1] = INVALID_OBJECT_ID;
			//CA_DestroyObject_DC(dTanks[slotid][oTank][2]), dTanks[slotid][oTank][2] = INVALID_OBJECT_ID;
		}
	}
	//---
	dTanks[(load == -1) ? slotid : load][xTank] = x;
	dTanks[(load == -1) ? slotid : load][yTank] = y;
	dTanks[(load == -1) ? slotid : load][zTank] = z;
	dTanks[(load == -1) ? slotid : load][aTank] = angle;
	if(load == -1) dTanks[slotid][dTankGas] = (load == -1) ? gas : 0;
	//---
	dTanks[(load == -1) ? slotid : load][tTankFuel] = CreateDynamic3DTextLabel("0.00l", KAKI, x, y, z, 15.0);
	UpdateTankInfo((load == -1) ? slotid : load);
	//---
	//---
	dTanks[(load == -1) ? slotid : load][oTank][0] = CA_CreateDynamicObject_DC(3287, x, y, z, 0.0, 0.0, angle, -1, -1, -1, 550.0, 550.0);
	new dObject = CA_GetObjectID(dTanks[(load == -1) ? slotid : load][oTank][0]);
	for(new i = 0; i < 30; i ++) SetDynamicObjectMaterial(dObject, i, 18633, "mattextures", "metalic128", 0xFFFFFFFF);
	//---
	dTanks[(load == -1) ? slotid : load][oTank][1] = CreateDynamicObject(2983, x + 5.23112 * floatsin(-(angle + 180.0/* - 89.6177*/), degrees), y + 5.23112 * floatcos(-(angle + 180.0/* - 89.6177*/), degrees), z - 0.794, 0.0, 0.0, angle, -1, -1, -1, 550.0, 550.0);
	//dTanks[(load == -1) ? slotid : load][oTank][2] = CA_CreateDynamicObject_DC(18633, x + 5.69694 * floatsin(-(angle/* - 89.0153*/), degrees), y + 5.69694 * floatsin(-(angle/* - 89.0153*/), degrees), z - 0.8451, 0.0, 0.0, angle, -1, -1, -1, 550.0, 550.0);
	//---
    slotid ++;
    if(slotid == MAX_TANKS) slotid = 0;
    return (slotid == 0) ? MAX_TANKS : slotid - 1;
}

DestroyTank(tankid)
{
	CA_DestroyObject_DC(dTanks[tankid][oTank][0]);
	dTanks[tankid][oTank][0] = INVALID_OBJECT_ID;
	DestroyDynamicObject(dTanks[tankid][oTank][1]);
	dTanks[tankid][oTank][1] = INVALID_OBJECT_ID;
	//CA_DestroyObject_DC(dTanks[tankid][oTank][2]);
	//dTanks[tankid][oTank][2] = INVALID_OBJECT_ID;
	//---
	DestroyDynamic3DTextLabel(dTanks[tankid][tTankFuel]);
	dTanks[tankid][tTankFuel] = Text3D:INVALID_3DTEXT_ID;
	//---
	dTanks[tankid][xTank] = 0.0;
	dTanks[tankid][yTank] = 0.0;
	dTanks[tankid][zTank] = 0.0;
	dTanks[tankid][aTank] = 0.0;
	dTanks[tankid][dTankGas] = -1;
}

public LoadTanks_data(name[],value[])
{
	new string[50];
	for(new i = 0; i < MAX_TANKS; i ++)
	{
	    format(string, sizeof(string), "Citerne%d", i);
		INI_Int(string, dTanks[i][dTankGas]);
	    format(string, sizeof(string), "xCiterne%d", i);
		INI_Float(string, dTanks[i][xTank]);
	    format(string, sizeof(string), "yCiterne%d", i);
		INI_Float(string, dTanks[i][yTank]);
	    format(string, sizeof(string), "zCiterne%d", i);
		INI_Float(string, dTanks[i][zTank]);
	    format(string, sizeof(string), "aCiterne%d", i);
		INI_Float(string, dTanks[i][aTank]);
	}
	return 1;
}

SaveTanks()
{
	new string[50];
	new INI:File = INI_Open(TKPATH);
	INI_SetTag(File, "data");
	for(new i = 0; i < MAX_TANKS; i ++)
	{
	    format(string, sizeof(string), "Citerne%d", i);
		INI_WriteInt(File, string, dTanks[i][dTankGas]);
	    format(string, sizeof(string), "xCiterne%d", i);
		INI_WriteFloat(File, string, dTanks[i][xTank]);
	    format(string, sizeof(string), "yCiterne%d", i);
		INI_WriteFloat(File, string, dTanks[i][yTank]);
	    format(string, sizeof(string), "zCiterne%d", i);
		INI_WriteFloat(File, string, dTanks[i][zTank]);
	    format(string, sizeof(string), "aCiterne%d", i);
		INI_WriteFloat(File, string, dTanks[i][aTank]);
	}
	INI_Close(File);
}

IsPlayerNearTank(playerid)
{
	for(new i = 0; i < MAX_TANKS; i ++) if(dTanks[i][dTankGas] != -1 && IsPlayerInRangeOfPoint(playerid, 10.0, dTanks[i][xTank], dTanks[i][yTank], dTanks[i][zTank])) return i;
	return -1;
}

GetTankFuel(tankid)
{
	return dTanks[tankid][dTankGas];
}

UpdateTankInfo(tankid)
{
	new string[10];
	format(string, sizeof(string), "%.2f l", floatdiv(dTanks[tankid][dTankGas], 100));
	UpdateDynamic3DTextLabelText(dTanks[tankid][tTankFuel], KAKI, string);
}

GiveTankFuel(tankid, fuel)//Pour donner de l'essence ou en enlever d'une citerne
{
	if(dTanks[tankid][dTankGas] + fuel > MAX_TANK_FUEL) dTanks[tankid][dTankGas] = MAX_TANK_FUEL;//Si ça devient supérieur à 100, on lui met à 100
	else if(dTanks[tankid][dTankGas] + fuel < 0) dTanks[tankid][dTankGas] = 0;//Si ça devient inférieur à 0, on lui met à 0
    else dTanks[tankid][dTankGas] += fuel;//Sinon, on respecte la consigne originale
	UpdateTankInfo(tankid);
	return dTanks[tankid][dTankGas];
}

//---GARAGES---//
CreateGarage(Float:x, Float:y, Float:z, Float:angle, load = -1)
{
	static slotid;
	if(load == -1)
	{
		if(dGarage[slotid][bGarage][0])
		{
		    for(new i = 0; i < MAX_GARAGES; i ++)
		    {
		        if(!dGarage[i][bGarage][0])
		        {
		            slotid = i;
		            break;
		        }
		    }
		}
		if(dGarage[slotid][bGarage][0])
		{
			CA_DestroyObject_DC(dGarage[slotid][oGarage][0]), dGarage[slotid][oGarage][0] = INVALID_OBJECT_ID;
			CA_DestroyObject_DC(dGarage[slotid][oGarage][1]), dGarage[slotid][oGarage][1] = INVALID_OBJECT_ID;
		}
	}
	//---
	dGarage[(load == -1) ? slotid : load][xGarage] = x;
	dGarage[(load == -1) ? slotid : load][yGarage] = y;
	dGarage[(load == -1) ? slotid : load][zGarage] = z;
	dGarage[(load == -1) ? slotid : load][aGarage] = angle;
	dGarage[(load == -1) ? slotid : load][bGarage][0] = true;
	dGarage[(load == -1) ? slotid : load][bGarage][1] = false;
	//---
	dGarage[(load == -1) ? slotid : load][oGarage][0] = CA_CreateDynamicObject_DC(3359, x, y, z, 0.0, 0.0, angle, -1, -1, -1, 550.0, 550.0);
	dGarage[(load == -1) ? slotid : load][oGarage][1] = CA_CreateDynamicObject_DC(11416, x, y, z, 0.0, 0.0, angle, -1, -1, -1, 550.0, 550.0);
	//---
    slotid ++;
    if(slotid == MAX_GARAGES) slotid = 0;
    return (slotid == 0) ? MAX_GARAGES : slotid - 1;
}

ChangeGarageDoorState(garageid, bool:open)
{
	new Float:aDiff = dGarage[garageid][aGarage] + 90.0 - (open ? 63.4608054 : 74.0490654);
	new Float:x, Float:y;
	x = dGarage[garageid][xGarage] - (open ? 2.8585 : 4.6468/*4.4677735 : 2.5570069*/) * floatsin(-aDiff, degrees);
	y = dGarage[garageid][yGarage] - (open ? 2.8585 : 4.6468/*4.4677735 : 2.5570069*/) * floatcos(-aDiff, degrees);
	MoveDynamicObject(CA_GetObjectID(dGarage[garageid][oGarage][1]), x, y, dGarage[garageid][zGarage] + (open ? 3.958 : 2.094), 3.5, 0.0, open ? 90.0 : 0.0, dGarage[garageid][aGarage] + 90.0);
	dGarage[garageid][bGarage][1] = open;
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i ++) if(IsPlayerConnected(i)) PlayerPlaySound(i, 1153, dGarage[garageid][xGarage], dGarage[garageid][yGarage], dGarage[garageid][zGarage]);
}

DestroyGarage(garageid)
{
	CA_DestroyObject_DC(dGarage[garageid][oGarage][0]);
	dGarage[garageid][oGarage][0] = INVALID_OBJECT_ID;
	CA_DestroyObject_DC(dGarage[garageid][oGarage][1]);
	dGarage[garageid][oGarage][1] = INVALID_OBJECT_ID;
	//---
	dGarage[garageid][xGarage] = 0.0;
	dGarage[garageid][yGarage] = 0.0;
	dGarage[garageid][zGarage] = 0.0;
	dGarage[garageid][aGarage] = 0.0;
	dGarage[garageid][bGarage][0] = false;
	dGarage[garageid][bGarage][1] = false;
}

public LoadGarages_data(name[],value[])
{
	new string[50];
	for(new i = 0; i < MAX_GARAGES; i ++)
	{
	    format(string, sizeof(string), "Garage%d", i);
		INI_Bool(string, dGarage[i][bGarage][0]);
	    format(string, sizeof(string), "DoorOpened%d", i);
		INI_Bool(string, dGarage[i][bGarage][1]);
	    format(string, sizeof(string), "DoorCode%d", i);
		INI_String(string, dGarage[i][sCodeGarage], 5);
	    format(string, sizeof(string), "xGarage%d", i);
		INI_Float(string, dGarage[i][xGarage]);
	    format(string, sizeof(string), "yGarage%d", i);
		INI_Float(string, dGarage[i][yGarage]);
	    format(string, sizeof(string), "zGarage%d", i);
		INI_Float(string, dGarage[i][zGarage]);
	    format(string, sizeof(string), "aGarage%d", i);
		INI_Float(string, dGarage[i][aGarage]);
	}
	return 1;
}

SaveGarages()
{
	new string[50];
	new INI:File = INI_Open(GARPATH);
	INI_SetTag(File, "data");
	for(new i = 0; i < MAX_GARAGES; i ++)
	{
	    format(string, sizeof(string), "Garage%d", i);
		INI_WriteBool(File,string, dGarage[i][bGarage][0]);
	    format(string, sizeof(string), "DoorOpened%d", i);
		INI_WriteBool(File,string, dGarage[i][bGarage][1]);
	    format(string, sizeof(string), "DoorCode%d", i);
		INI_WriteString(File,string, dGarage[i][sCodeGarage]);
	    format(string, sizeof(string), "xGarage%d", i);
		INI_WriteFloat(File,string, dGarage[i][xGarage]);
	    format(string, sizeof(string), "yGarage%d", i);
		INI_WriteFloat(File,string, dGarage[i][yGarage]);
	    format(string, sizeof(string), "zGarage%d", i);
		INI_WriteFloat(File,string, dGarage[i][zGarage]);
	    format(string, sizeof(string), "aGarage%d", i);
		INI_WriteFloat(File,string, dGarage[i][aGarage]);
	}
	INI_Close(File);
}

IsPlayerNearGarageDoor(playerid)
{
	for(new i = 0; i < MAX_GARAGES; i ++)
	{
	    if(dGarage[i][bGarage][0])
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 8.0, dGarage[i][xGarage], dGarage[i][yGarage], dGarage[i][zGarage]))
	        {
	            return i;
	        }
		}
	}
	return -1;
}


//---MAISONS---//
CreateHouse(type, bool:door, Float:x, Float:y, Float:z, Float:angle, load = -1)
{
	static slotid;
	if(load == -1)
	{
		if(dHouse[slotid][dHouseType] != 0)
		{
		    for(new i = 0; i < MAX_HOUSES; i ++)
		    {
		        if(dHouse[i][dHouseType] == 0)
		        {
		            slotid = i;
		            break;
		        }
		    }
		}
		CA_DestroyObject_DC(dHouse[slotid][oHouse][0]), dHouse[slotid][oHouse][0] = INVALID_OBJECT_ID;
		//---
		if(dHouse[slotid][dHouseType] == 1)
		{
			CA_DestroyObject_DC(dHouse[slotid][oHouse][1]);
			dHouse[slotid][oHouse][1] = INVALID_OBJECT_ID;
			CA_DestroyObject_DC(dHouse[slotid][oHouse][2]);
			dHouse[slotid][oHouse][2] = INVALID_OBJECT_ID;
		}
		if(dHouse[slotid][dHouseType] == 2)
		{
			CA_DestroyObject_DC(dHouse[slotid][oHouse][1]);
			dHouse[slotid][oHouse][1] = INVALID_OBJECT_ID;
		}
		//---
		if(door) CA_DestroyObject_DC(dHouse[slotid][oPorte]), dHouse[slotid][oPorte] = INVALID_OBJECT_ID;
	}
	//---TYPES
	/*
	HouseID = 3414
	Joueur: 2502.664, 2092.843, 31.3729
	Maison: 2502.664, 2092.843, 32.5719
	Porte: 2504.708, 2097.0109, 30.3729, 270.0
	Objet1: 5302, 2496.2619, 2100.3439, 29.472
	Objet2: 19429, 2499.663, 2098.0859, 29.899, 90.0
	//---
	HouseID = 3418
	Joueur: 2502.664, 2092.843, 31.3729
	Maison: 2502.664, 2100.1059, 32.5369
	Porte: 2506.1140, 2096.0891, 30.3729
	Objet1: 19429, 2499.363, 2096.165, 29.899, 90.0
	//---
	HouseID = 12991
	Porte: 1.965, 2.992, -2.161, 180.0
	//---
	HouseID = 18259
	Porte: -5.171, 0.2389, 0.86, 272.0
	19802
	*/
	new dObjectID;
	new Float:zDiff, Float:aDiff;
	switch(type)
	{
	    case 1:
		{
			dObjectID = 3414;
			zDiff = 1.199;
		}
	    case 2:
		{
			dObjectID = 3418;
			zDiff = 1.164;
		}
	    case 3:
		{
			dObjectID = 12991;
			zDiff = -1.0;
		}
	    case 4:
		{
			dObjectID = 18259;
			zDiff = 0.208;
		}
	    case 5://GARAGE
		{
			dObjectID = 3359;
			zDiff = 0.208;
		}
	}
	//---
	FixAngle(angle);
	dHouse[(load == -1) ? slotid : load][xHouse] = x;
	dHouse[(load == -1) ? slotid : load][yHouse] = y;
	dHouse[(load == -1) ? slotid : load][zHouse] = z;
	dHouse[(load == -1) ? slotid : load][aHouse] = angle;
	dHouse[(load == -1) ? slotid : load][dHouseType] = type;
	dHouse[(load == -1) ? slotid : load][bPorte][0] = door;
	dHouse[(load == -1) ? slotid : load][bPorte][1] = false;
	//---
	dHouse[(load == -1) ? slotid : load][oHouse][0] = CA_CreateDynamicObject_DC(dObjectID, x, y, z + zDiff, 0.0, 0.0, angle, -1, -1, -1, 550.0, 550.0);
    new dObject;
	switch(type)
	{
		case 1:
		{
			/*HouseID = 3414
			Joueur: 2502.664, 2092.843, 31.3729
			Maison: 2502.664, 2092.843, 32.5719
			Porte: 2504.708, 2097.0109, 30.3729, 270.0
			Objet1: 5302, 2496.2619, 2100.3439, 29.472
			Objet2: 19429, 2499.663, 2098.0859, 29.899, 90.0*/
			//---
			aDiff = angle + 178.0118 + 270.0;
			dHouse[(load == -1) ? slotid : load][oHouse][1] = CA_CreateDynamicObject_DC(5302, x + /*6.4021*/6.4 * floatsin(-aDiff, degrees), y + 6.4 * floatcos(-aDiff, degrees) , z + zDiff - 3.0999, 0.0, 0.0, angle, -1, -1, -1, 550.0, 550.0);
			aDiff = angle - 147.2722 + 270.0;
			dHouse[(load == -1) ? slotid : load][oHouse][2] = CA_CreateDynamicObject_DC(19429, x + /*3.001*/3.6 * floatsin(-aDiff, degrees), y + 3.6 * floatcos(-aDiff, degrees) , z + zDiff - 1.6729, 0.0, 0.0, angle + 90.0, -1, -1, -1, 550.0, 550.0);
			//---
			dObject = CA_GetObjectID(dHouse[(load == -1) ? slotid : load][oHouse][1]);
			for(new i = 0; i < 30; i ++) SetDynamicObjectMaterial(dObject, i, 3355, "cxref_savhus", "sw_barnwood5", 0xFFFFFFFF);
            dObject = CA_GetObjectID(dHouse[(load == -1) ? slotid : load][oHouse][2]);
			for(new i = 0; i < 30; i ++) SetDynamicObjectMaterial(dObject, i, 3355, "cxref_savhus", "sw_barnwood5", 0xFFFFFFFF);
			if(door)
			{
				aDiff = angle - 56.867 + 270.0;
				dHouse[(load == -1) ? slotid : load][oPorte] = CA_CreateDynamicObject_DC(19802, x + 3.75/*4.1679*/ * floatsin(-aDiff, degrees), y + 3.75 * floatcos(-aDiff, degrees) , z + zDiff - 2.199, 0.0, 0.0, angle + 270.0, -1, -1, -1, 550.0, 550.0);
                dObject = CA_GetObjectID(dHouse[(load == -1) ? slotid : load][oPorte]);
				for(new i = 0; i < 30; i ++) SetDynamicObjectMaterial(dObject, i, 3355, "cxref_savhus", "sw_barnwood5", 0xFFFFFFFF);
			}
		}
		case 2:
		{
			/*HouseID = 3418
			Joueur: 2502.664, 2092.843, 31.3729
			Maison: 2502.664, 2100.1059, 32.5369
			Porte: 2506.1140, 2096.0891, 30.3729
			Objet1: 19429, 2499.363, 2096.165, 29.899, 90.0*/
			//---
			//aDiff = angle - 60.2087;// - 90.0;
			aDiff = angle - 130.5697 + 270.0;
			dHouse[(load == -1) ? slotid : load][oHouse][1] = CA_CreateDynamicObject_DC(19429, x + 5.2 * floatsin(-aDiff, degrees), y + 5.2 * floatcos(-aDiff, degrees) , z + zDiff - 2.6379, 0.0, 0.0, angle + 90.0, -1, -1, -1, 550.0, 550.0);
            dObject = CA_GetObjectID(dHouse[(load == -1) ? slotid : load][oHouse][1]);
			for(new i = 0; i < 30; i ++) SetDynamicObjectMaterial(dObject, i, 3355, "cxref_savhus", "sw_barnwood5", 0xFFFFFFFF);
			if(door)
			{
				aDiff = angle - 49.715 + 270.0;
				dHouse[(load == -1) ? slotid : load][oPorte] = CA_CreateDynamicObject_DC(19802, x + 5.25/*4.0168*/ * floatsin(-aDiff, degrees), y + 5.25 * floatcos(-aDiff, degrees), z + zDiff - 2.199, 0.0, 0.0, angle + 90.0, -1, -1, -1, 550.0, 550.0);
                dObject = CA_GetObjectID(dHouse[(load == -1) ? slotid : load][oPorte]);
				for(new i = 0; i < 30; i ++) SetDynamicObjectMaterial(dObject, i, 3355, "cxref_savhus", "sw_barnwood5", 0xFFFFFFFF);
			}
		}
		/*HouseID = 12991
		Porte: 1.965, 2.992, -2.161, 180.0
		//---
		HouseID = 18259
		Porte: -5.171, 0.2389, 0.86, 272.0*/
		case 3:
		{
			/*HouseID = 12991
			Joueur: 2502.664, 2092.843, 31.3729
			Maison: 2502.664, 2101.4089, 30.3729, 180.0
			Porte: 2500.5449, 2098.4379, 30.207
			Porte2: 1446.0479, 1668.791, 9.8199, 0.0, 0.0, 0.0
			Maison2: 1445.505, 1665.831, 9.8199, 0.0, 0.0, 0.0*/
			//---
			if(door)
			{
				//aDiff = angle + 108.9805;
				aDiff = angle + 56.7050 + 270.0;
				dHouse[(load == -1) ? slotid : load][oPorte] = CA_CreateDynamicObject_DC(19802, x + 3.6/*6.1611 */* floatsin(-aDiff, degrees), y + 3.6 * floatcos(-aDiff, degrees), z + zDiff, 0.0, 0.0, angle + 180.0, -1, -1, -1, 550.0, 550.0);
                dObject = CA_GetObjectID(dHouse[(load == -1) ? slotid : load][oPorte]);
				for(new i = 0; i < 30; i ++) SetDynamicObjectMaterial(dObject, i, 3355, "cxref_savhus", "sw_barnwood5", 0xFFFFFFFF);
			}
		}
		case 4:
		{
			/*HouseID = 18259
			Joueur: 2502.664, 2092.843, 31.3729
			Maison: 2502.664, 2106.319, 31.5809, 90.0
			Porte: 2502.3701, 2101.1579, 31.6669
			Porte2: 1445.7709, 1658.0059, 12.416, 0.0, 0.0, 90.0
			Maison2: 1450.9150, 1659.29, 12.1689, 0.0, 0.0, 0.0*/
			//---
			if(door)
			{
				//aDiff = angle - 93.2592;
				aDiff = angle + 177.3548 + 90.0;
				dHouse[(load == -1) ? slotid : load][oPorte] = CA_CreateDynamicObject_DC(19802, x - 5.1099/*5.1611*/ * floatsin(-aDiff, degrees), y - 5.1099 * floatcos(-aDiff, degrees), z + 0.8 + zDiff, 0.0, 0.0, angle + 272.0, -1, -1, -1, 550.0, 550.0);
                dObject = CA_GetObjectID(dHouse[(load == -1) ? slotid : load][oPorte]);
				for(new i = 0; i < 30; i ++) SetDynamicObjectMaterial(dObject, i, 3355, "cxref_savhus", "sw_barnwood5", 0xFFFFFFFF);
			}
		}
	}
	//---
    slotid ++;
    if(slotid == MAX_HOUSES) slotid = 0;
    return (slotid == 0) ? MAX_HOUSES : slotid - 1;
}

IsHouseNearToPoint(Float:distance, Float:x, Float:y, Float:z)
{
	for(new i = 0; i < MAX_HOUSES; i ++) if(GetDistanceBetweenPoints(x, y, z, dHouse[i][xHouse], dHouse[i][yHouse], dHouse[i][zHouse]) < distance) return i;
	return -1;
}

ChangeHouseDoorState(houseid, bool:open, bool:face = true)
{
	new Float:aDiff, Float:fDiff, Float:zDiff;
	switch(dHouse[houseid][dHouseType])
	{
	    case 1:
		{
			fDiff = 270.0 + (open ? (face ? 90.0 : 270.0) : 0.0);
			zDiff = 1.199;
			aDiff = dHouse[houseid][aHouse] - 56.867 + 270.0;
			MoveDynamicObject(CA_GetObjectID(dHouse[houseid][oPorte]), dHouse[houseid][xHouse] + 3.75/*4.1679*/ * floatsin(-aDiff, degrees), dHouse[houseid][yHouse] + 3.75 * floatcos(-aDiff, degrees) , dHouse[houseid][zHouse] + zDiff - 2.199 + (open ? 0.01 : 0.005), 0.005, 0.0, 0.0, dHouse[houseid][aHouse] + fDiff);
		}
	    case 2:
		{
			fDiff = 0.0 + (open ? (face ? 90.0 : 270.0) : 0.0);
			zDiff = 1.164;
			aDiff = dHouse[houseid][aHouse] - 49.715 + 270.0;
			MoveDynamicObject(CA_GetObjectID(dHouse[houseid][oPorte]), dHouse[houseid][xHouse] + 5.25/*4.0168*/ * floatsin(-aDiff, degrees), dHouse[houseid][yHouse] + 5.25 * floatcos(-aDiff, degrees), dHouse[houseid][zHouse] + zDiff - 2.199 + (open ? 0.01 : 0.005), 0.005, 0.0, 0.0, dHouse[houseid][aHouse] + fDiff);
		}
	    case 3:
		{
			fDiff = 180.0 + (open ? (face ? 90.0 : 270.0) : 0.0);
			zDiff = -1.0;
			aDiff = dHouse[houseid][aHouse] + 56.7050 + 270.0;
			MoveDynamicObject(CA_GetObjectID(dHouse[houseid][oPorte]), dHouse[houseid][xHouse] + 3.6/*6.1611 */* floatsin(-aDiff, degrees), dHouse[houseid][yHouse] + 3.6 * floatcos(-aDiff, degrees), dHouse[houseid][zHouse] + zDiff + (open ? 0.01 : 0.005), 0.005, 0.0, 0.0, dHouse[houseid][aHouse] + fDiff);
		}
	    case 4:
		{
			fDiff = 272.0 + (open ? (face ? 90.0 : 270.0) : 0.0);
			zDiff = 0.208;
			aDiff = dHouse[houseid][aHouse] + 177.3548 + 90.0;
			MoveDynamicObject(CA_GetObjectID(dHouse[houseid][oPorte]), dHouse[houseid][xHouse] - 5.1099/*5.1611*/ * floatsin(-aDiff, degrees), dHouse[houseid][yHouse] - 5.1099 * floatcos(-aDiff, degrees), dHouse[houseid][zHouse] + zDiff + (open ? 0.01 : 0.005), 0.005, 0.0, 0.0, dHouse[houseid][aHouse] + fDiff);
		}
	}
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i ++) if(IsPlayerInRangeOfPoint(i, 20.0, dHouse[houseid][xHouse], dHouse[houseid][yHouse], dHouse[houseid][zHouse])) PlayerPlaySound(i, 12201, dHouse[houseid][xHouse], dHouse[houseid][yHouse], dHouse[houseid][zHouse]);
	dHouse[houseid][bPorte][1] = open;
}

bool:GetDoorFacingForPlayer(houseid, playerid)
{
	new Float:x, Float:y, Float:z, Float:angle, Float:dx, Float:dy, Float:dz;
	GetPlayerPos(playerid, x, y, z);
	GetDynamicObjectPos(CA_GetObjectID(dHouse[houseid][oPorte]), dx, dy, dz);
	//new bool:bReturn = ;
	switch(dHouse[houseid][dHouseType])
	{
	    case 1: angle = dHouse[houseid][aHouse];// + 270.0;
	    case 2: angle = dHouse[houseid][aHouse];// + 0.0;
	    case 3: angle = dHouse[houseid][aHouse];// + 180.0;
	    case 4: angle = dHouse[houseid][aHouse];// + 272.0;
	}
	new Float:fAngle[2];
	fAngle[0] = angle + 90.0;
	fAngle[1] = angle - 90.0;
	//FixAngle(fAngle[0]);
	//FixAngle(fAngle[1]);
	new bool:bReturn = (fAngle[0] >= GetZAngleBetweenPos(x, y, dx, dy) >= fAngle[1]) ? false : true;
	if(fAngle[0] < fAngle[1]) bReturn = !bReturn;
	return bReturn;
}

DestroyHouse(houseid)
{
	CA_DestroyObject_DC(dHouse[houseid][oHouse][0]);
	dHouse[houseid][oHouse][0] = INVALID_OBJECT_ID;
	//---
	if(dHouse[houseid][dHouseType] == 1)
	{
		CA_DestroyObject_DC(dHouse[houseid][oHouse][1]);
		dHouse[houseid][oHouse][1] = INVALID_OBJECT_ID;
		CA_DestroyObject_DC(dHouse[houseid][oHouse][2]);
		dHouse[houseid][oHouse][2] = INVALID_OBJECT_ID;
	}
	if(dHouse[houseid][dHouseType] == 2)
	{
		CA_DestroyObject_DC(dHouse[houseid][oHouse][1]);
		dHouse[houseid][oHouse][1] = INVALID_OBJECT_ID;
	}
	if(dHouse[houseid][bPorte][0])
	{
		CA_DestroyObject_DC(dHouse[houseid][oPorte]);
		dHouse[houseid][oPorte] = INVALID_OBJECT_ID;
	}
	//---
	dHouse[houseid][bPorte][0] = false;
	dHouse[houseid][xHouse] = 0.0;
	dHouse[houseid][yHouse] = 0.0;
	dHouse[houseid][zHouse] = 0.0;
	dHouse[houseid][aHouse] = 0.0;
    dHouse[houseid][dHouseType] = 0;
}

public LoadHouses_data(name[],value[])
{
	new string[50];
	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    format(string, sizeof(string), "HouseType%d", i);
		INI_Int(string, dHouse[i][dHouseType]);
	    format(string, sizeof(string), "Door%d", i);
		INI_Bool(string, dHouse[i][bPorte][0]);
	    format(string, sizeof(string), "DoorOpened%d", i);
		INI_Bool(string, dHouse[i][bPorte][1]);
	    format(string, sizeof(string), "DoorCode%d", i);
		INI_String(string, dHouse[i][sCodePorte], 5);
	    format(string, sizeof(string), "xHouse%d", i);
		INI_Float(string, dHouse[i][xHouse]);
	    format(string, sizeof(string), "yHouse%d", i);
		INI_Float(string, dHouse[i][yHouse]);
	    format(string, sizeof(string), "zHouse%d", i);
		INI_Float(string, dHouse[i][zHouse]);
	    format(string, sizeof(string), "aHouse%d", i);
		INI_Float(string, dHouse[i][aHouse]);
	}
	return 1;
}

SaveHouses()
{
	new string[50];
	new INI:File = INI_Open(HPATH);
	INI_SetTag(File, "data");
	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    format(string, sizeof(string), "HouseType%d", i);
		INI_WriteInt(File,string, dHouse[i][dHouseType]);
	    format(string, sizeof(string), "Door%d", i);
		INI_WriteBool(File,string, dHouse[i][bPorte][0]);
	    format(string, sizeof(string), "DoorOpened%d", i);
		INI_WriteBool(File,string, dHouse[i][bPorte][1]);
	    format(string, sizeof(string), "DoorCode%d", i);
		INI_WriteString(File,string, dHouse[i][sCodePorte]);
	    format(string, sizeof(string), "xHouse%d", i);
		INI_WriteFloat(File,string, dHouse[i][xHouse]);
	    format(string, sizeof(string), "yHouse%d", i);
		INI_WriteFloat(File,string, dHouse[i][yHouse]);
	    format(string, sizeof(string), "zHouse%d", i);
		INI_WriteFloat(File,string, dHouse[i][zHouse]);
	    format(string, sizeof(string), "aHouse%d", i);
		INI_WriteFloat(File,string, dHouse[i][aHouse]);
	}
	INI_Close(File);
}

IsPlayerNearHouseDoor(playerid)
{
	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(dHouse[i][dHouseType] != 0 && dHouse[i][bPorte][0])
	    {
	        if(IsDynamicObjectNearToPlayer(2.5, playerid, CA_GetObjectID(dHouse[i][oPorte])))
	        {
	            return i;
	        }
		}
	}
	return -1;
}

IsPlayerNearHouse(playerid)
{
	for(new i = 0; i < MAX_HOUSES; i ++) if(IsPlayerInRangeOfPoint(playerid, 15.0, dHouse[i][xHouse], dHouse[i][yHouse], dHouse[i][zHouse])) return true;
	return false;
}

//---
CanPlayerCreateBed(playerid)
{
	for(new i = 0; i < MAX_TENTS; i ++) if(IsPlayerInRangeOfPoint(playerid, 10.0, dTent[i][xTent], dTent[i][yTent], dTent[i][zTent])) return true;
	for(new i = 0; i < MAX_HOUSES; i ++) if(IsPlayerInRangeOfPoint(playerid, 10.0, dHouse[i][xHouse], dHouse[i][yHouse], dHouse[i][zHouse])) return true;
	return false;
}

CreateBed(type, Float:x, Float:y, Float:z, Float:angle, load = -1)
{
	//18122486.114, 1038.588, 56.5019, 0.0, 0.0, 0.0
	static slotid;
	if(type != 0)
	{
		if(load == -1)
		{
			if(dBed[slotid][dBedType] != 0)
			{
			    for(new i = 0; i < MAX_BEDS; i ++)
			    {
			        if(dBed[i][dBedType] == 0)
			        {
			            slotid = i;
			            break;
			        }
			    }
			}
			if(dBed[slotid][dBedType] != 0) DestroyDynamicObject(dBed[slotid][oBed]);
		}
		//---
		dBed[(load == -1) ? slotid : load][xBed] = x;
		dBed[(load == -1) ? slotid : load][yBed] = y;
		dBed[(load == -1) ? slotid : load][zBed] = z;
		dBed[(load == -1) ? slotid : load][aBed] = angle;
		//---
		dBed[(load == -1) ? slotid : load][dBedType] = type;
		switch(type)
		{
			case 1: z -= 1.0;
			case 2: z -= 1.0;
		}
		//---
		new dBeds[] = {1812, 1801};
		//---
		dBed[(load == -1) ? slotid : load][oBed] = CreateDynamicObject(dBeds[type - 1], x, y, z, 0.0, 0.0, angle);
	    slotid ++;
    }
    if(slotid == MAX_BEDS) slotid = 0;
    return (slotid == 0) ? MAX_BEDS : slotid - 1;
}

DestroyBed(bedid)
{
	DestroyDynamicObject(dBed[bedid][oBed]);
	dBed[bedid][oBed] = INVALID_OBJECT_ID;
	dBed[bedid][dBedType] = 0;
	dBed[bedid][xBed] = 0.0;
	dBed[bedid][yBed] = 0.0;
	dBed[bedid][zBed] = 0.0;
	dBed[bedid][aBed] = 0.0;
}

IsPlayerNearBed(playerid)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	if(IsPlayerInRangeOfPoint(playerid, 3.0, -55.3701, -230.7322, 5.9485) && pPlayerInfos[playerid][pIntro] >= 4)
	{
	    return BUD_BED;
	}
	for(new i = 0; i < MAX_BEDS; i ++)
	{
		if(dBed[i][dBedType] != 0 && IsPlayerInRangeOfPoint(playerid, 3.0, dBed[i][xBed], dBed[i][yBed], dBed[i][zBed]))
		{
		    if(IsColBetweenTwoPos(x, y, z, dBed[i][xBed], dBed[i][yBed], dBed[i][zBed])) continue;
			return i;
		}
	}
	return -1;
}

public LoadBeds_data(name[],value[])
{
	new string[50];
	for(new i = 0; i < MAX_BEDS; i ++)
	{
	    format(string, sizeof(string), "LitID%d", i);
		INI_Int(string, dBed[i][dBedType]);
	    format(string, sizeof(string), "xLit%d", i);
		INI_Float(string, dBed[i][xBed]);
	    format(string, sizeof(string), "yLit%d", i);
		INI_Float(string, dBed[i][yBed]);
	    format(string, sizeof(string), "zLit%d", i);
		INI_Float(string, dBed[i][zBed]);
	    format(string, sizeof(string), "aLit%d", i);
		INI_Float(string, dBed[i][aBed]);
	}
	return 1;
}

SaveBeds()
{
	new string[50];
	new INI:File = INI_Open(BPATH);
	INI_SetTag(File, "data");
	for(new i = 0; i < MAX_BEDS; i ++)
	{
	    format(string, sizeof(string), "LitID%d", i);
		INI_WriteInt(File,string, dBed[i][dBedType]);
	    format(string, sizeof(string), "xLit%d", i);
		INI_WriteFloat(File,string, dBed[i][xBed]);
	    format(string, sizeof(string), "yLit%d", i);
		INI_WriteFloat(File,string, dBed[i][yBed]);
	    format(string, sizeof(string), "zLit%d", i);
		INI_WriteFloat(File,string, dBed[i][zBed]);
	    format(string, sizeof(string), "aLit%d", i);
		INI_WriteFloat(File,string, dBed[i][aBed]);
	}
	INI_Close(File);
}

//---FAUTEUILS
#if defined MYSQL_SYSTEM
new LIST_init<seatList>;
public OnSeatsLoaded()
{
	if(cache_num_rows())
	{
		for(new i = 0; i < cache_num_rows(); i++)
		{
			new modelid, seatid;
			new Float:x, Float:y, Float:z, Float:a;
			cache_get_value_name_int(i, "model", modelid);
			cache_get_value_name_float(i, "xseat", x);
			cache_get_value_name_float(i, "yseat", y);
			cache_get_value_name_float(i, "zseat", z);
			cache_get_value_name_float(i, "aseat", a);
			cache_get_value_name_int(i, "idseat", seatid);
			CreateSeat(modelid, x, y, z, a, seatid);
		}
	}
	LogInfo(true, "[INIT] %d fauteuils charges", cache_num_rows());
	return 1;
}
stock CreateSeat(modelid, Float:x, Float:y, Float:z, Float:angle, id = -1, &objectCreated = INVALID_OBJECT_ID)
{
	if(modelid)
	{
		new seat[Seat];
		seat[xSeat] = x;
		seat[ySeat] = y;
		seat[zSeat] = z;
		seat[aSeat] = angle;
		seat[dSeatType] = modelid;
		seat[oSeat] = CreateDynamicObject(seat[dSeatType], x, y, z - 1.0, 0.0, 0.0, angle);
		objectCreated = seat[oSeat];
		seat[seatID] = id;
		if(id == -1)
		{
			new string[512], Cache: result;
			mysql_format(mysqlPool, string, sizeof(string), "CALL `insertSeat`(%f, %f, %f, %f, %d)", x, y, z, angle, modelid);
			result = mysql_query(mysqlPool, string);
			cache_set_active(result);
			cache_get_value_name_int(0, "nextID", seat[seatID]);
			cache_delete(result);
		}
		LIST_push_back_arr(seatList, seat);
		return LIST_count_nodes(seatList) - 1;
	}
	return INVALID_OBJECT_ID;
}
stock DestroySeat(ListIt: node)
{	
	new seat[Seat], query[256];
	MEM_get_arr(LIST_IT_data_ptr(node), _, seat);
	DestroyDynamicObject(seat[oSeat]);
	mysql_format(mysqlPool, query, sizeof(query), "DELETE FROM `seat` WHERE idseat = %d", seat[seatID]);
	mysql_tquery(mysqlPool, query);
	LIST_erase(seatList, node);
}
stock IsPlayerNearSeat(playerid)
{
	new i = 0;
	new Pointer: data_ptr;
	LIST_foreach<my_iterator>(seatList)
	{
		data_ptr = LIST_IT_data_ptr(my_iterator);
		new seat[Seat];
		MEM::get_arr(data_ptr, _, seat);
		if(IsPlayerInRangeOfPoint(playerid, 10.0, seat[xSeat], seat[ySeat], seat[zSeat]))
			return i;
		i++;
	}
	return -1;
}
stock SaveSeats()
{
	new string[1024];
	mysql_query(mysqlPool, "TRUNCATE TABLE seat");
	LIST_foreach<my_iterator>(seatList)
	{
		new Pointer:data_ptr = LIST_IT_data_ptr(my_iterator);
		new seat[Seat];
		MEM_get_arr(data_ptr, _, seat);
		mysql_format(mysqlPool, string, sizeof(string), "%s%s('', %d, %f, %f, %f, %f)", string, strlen(string) ? "," : " ", seat[dSeatType], seat[xSeat], seat[ySeat], seat[zSeat], seat[aSeat]);
	}
	mysql_format(mysqlPool, string, sizeof(string), "INSERT INTO seat VALUES%s", string);
	mysql_query(mysqlPool, string);
	LogInfo(true, "[SAVE] Fauteuils sauvegardes");

}
#else
CreateSeat(type, Float:x, Float:y, Float:z, Float:angle, load = -1)
{
	//18122486.114, 1038.588, 56.5019, 0.0, 0.0, 0.0
	static slotid;
	if(type != 0)
	{
		if(load == -1)
		{
			if(dSeat[slotid][dSeatType] != 0)
			{
			    for(new i = 0; i < MAX_SEATS; i ++)
			    {
			        if(dSeat[i][dSeatType] == 0)
			        {
			            slotid = i;
			            break;
			        }
			    }
			}
			if(dSeat[slotid][dSeatType] != 0) DestroyDynamicObject(dSeat[slotid][oSeat]);
		}
		//---
		dSeat[(load == -1) ? slotid : load][xSeat] = x;
		dSeat[(load == -1) ? slotid : load][ySeat] = y;
		dSeat[(load == -1) ? slotid : load][zSeat] = z;
		dSeat[(load == -1) ? slotid : load][aSeat] = angle;
		//---
		dSeat[(load == -1) ? slotid : load][dSeatType] = type;
		switch(type)
		{
			case 1: z -= 1.0;
		}
		//---
		new dSeats[] = {1729, 0};
		//---
		dSeat[(load == -1) ? slotid : load][oSeat] = CreateDynamicObject(dSeats[type - 1], x, y, z, 0.0, 0.0, angle);
	    slotid ++;
    }
    if(slotid == MAX_SEATS) slotid = 0;
    return (slotid == 0) ? MAX_SEATS : slotid - 1;
}

DestroySeat(seatid)
{
	DestroyDynamicObject(dSeat[seatid][oSeat]);
	dSeat[seatid][oSeat] = INVALID_OBJECT_ID;
	dSeat[seatid][dSeatType] = 0;
	dSeat[seatid][xSeat] = 0.0;
	dSeat[seatid][ySeat] = 0.0;
	dSeat[seatid][zSeat] = 0.0;
	dSeat[seatid][aSeat] = 0.0;
}

IsPlayerNearSeat(playerid)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	for(new i = 0; i < MAX_SEATS; i ++)
	{
		if(dSeat[i][dSeatType] != 0 && IsPlayerInRangeOfPoint(playerid, 3.0, dSeat[i][xSeat], dSeat[i][ySeat], dSeat[i][zSeat]))
		{
		    if(IsColBetweenTwoPos(x, y, z, dSeat[i][xSeat], dSeat[i][ySeat], dSeat[i][zSeat])) continue;
			return i;
		}
	}
	return -1;
}

public LoadSeats_data(name[],value[])
{
	new string[50];
	for(new i = 0; i < MAX_SEATS; i ++)
	{
	    format(string, sizeof(string), "SiegeID%d", i);
		INI_Int(string, dSeat[i][dSeatType]);
	    format(string, sizeof(string), "xSiege%d", i);
		INI_Float(string, dSeat[i][xSeat]);
	    format(string, sizeof(string), "ySiege%d", i);
		INI_Float(string, dSeat[i][ySeat]);
	    format(string, sizeof(string), "zSiege%d", i);
		INI_Float(string, dSeat[i][zSeat]);
	    format(string, sizeof(string), "aSiege%d", i);
		INI_Float(string, dSeat[i][aSeat]);
	}
	return 1;
}

SaveSeats()
{
	new string[50];
	new INI:File = INI_Open(SEPATH);
	INI_SetTag(File, "data");
	for(new i = 0; i < MAX_SEATS; i ++)
	{
	    format(string, sizeof(string), "SiegeID%d", i);
		INI_WriteInt(File,string, dSeat[i][dSeatType]);
	    format(string, sizeof(string), "xSiege%d", i);
		INI_WriteFloat(File,string, dSeat[i][xSeat]);
	    format(string, sizeof(string), "ySiege%d", i);
		INI_WriteFloat(File,string, dSeat[i][ySeat]);
	    format(string, sizeof(string), "zSiege%d", i);
		INI_WriteFloat(File,string, dSeat[i][zSeat]);
	    format(string, sizeof(string), "aSiege%d", i);
		INI_WriteFloat(File,string, dSeat[i][aSeat]);
	}
	INI_Close(File);
}
#endif
//---DÉCORATION
#if defined MYSQL_SYSTEM
new LIST_init<furnitureList>;

ListIt:CreateFurniture(objectid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, id = -1)
{
	new furniture[Furniture], ListIt: res;
	if(objectid != 0)
	{
		//---
		furniture[xFurn] = x;
		furniture[yFurn] = y;
		furniture[zFurn] = z;
		furniture[rxFurn] = rx;
		furniture[ryFurn] = ry;
		furniture[rzFurn] = rz;
		//---
		furniture[dFurnitureType] = objectid;
		//---
		furniture[oFurniture] = CreateDynamicObject(GetFurnitureObjectID(objectid, false), x, y, z, rx, ry, rz);
		furniture[dFurnitureID] = id;
		if(id == -1)
		{
			new string[512], Cache: result;
			mysql_format(mysqlPool, string, sizeof(string), "CALL `insertFurniture`(%d, %f, %f, %f, %f, %f, %f)", objectid, x, y, z, rx, ry, rz);
			result = mysql_query(mysqlPool, string);
			cache_set_active(result);
			cache_get_value_name_int(0, "nextID", furniture[dFurnitureID]);
			cache_delete(result);
		}
		res = LIST_push_back_arr(furnitureList, furniture);
    }
	return res;
}
public OnFurnituresLoaded()
{
	if(cache_num_rows())
	{
		for(new i = 0; i < cache_num_rows(); i++)
		{
			new modelid, furnitureid;
			new Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz;
			cache_get_value_name_int(i, "type", modelid);
			cache_get_value_name_float(i, "xfurniture", x);
			cache_get_value_name_float(i, "yfurniture", y);
			cache_get_value_name_float(i, "zfurniture", z);
			cache_get_value_name_float(i, "rxfurniture", rx);
			cache_get_value_name_float(i, "ryfurniture", ry);
			cache_get_value_name_float(i, "rzfurniture", rz);
			cache_get_value_name_int(i, "idfurniture", furnitureid);
			CreateFurniture(modelid, x, y, z, rx, ry, rz, furnitureid);
		}
	}
	LogInfo(true, "[INIT] %d meubles charges", cache_num_rows());
	return 1;	
}
PlayerSetFurniture(playerid, furnitureid)
{
	new Float:x, Float:y, Float:z, Float:angle, Pointer:pt, furn[Furniture];
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);
	pFurn[playerid] = CreateFurniture(furnitureid, x, y, z, 0.0, 0.0, angle);
	pt = LIST_IT_data_ptr(pFurn[playerid]);
	MEM_get_arr(pt, _, furn);
	EditDynamicObject(playerid, furn[oFurniture]);
}
DestroyFurniture(ListIt: node)
{
	new Pointer: pt = LIST_IT_data_ptr(node), query[256];
	new furn[Furniture];
	MEM_get_arr(pt, _, furn);
	DestroyDynamicObject(furn[oFurniture]);
	mysql_format(mysqlPool, query, sizeof(query), "DELETE FROM `furniture` WHERE idfurniture = %d", furn[dFurnitureID]);
	mysql_tquery(mysqlPool, query);
	LIST_erase(furnitureList, node);
}
#else
public LoadFurniture_data(name[],value[])
{
	new string[50];
	for(new i = 0; i < MAX_FURN; i ++)
	{
	    format(string, sizeof(string), "Deco%d", i);
		INI_Int(string, dFurn[i][dFurnitureID]);
	    format(string, sizeof(string), "xFurn%d", i);
		INI_Float(string, dFurn[i][xFurn]);
	    format(string, sizeof(string), "yFurn%d", i);
		INI_Float(string, dFurn[i][yFurn]);
	    format(string, sizeof(string), "zFurn%d", i);
		INI_Float(string, dFurn[i][zFurn]);
	    format(string, sizeof(string), "rxFurn%d", i);
		INI_Float(string, dFurn[i][rxFurn]);
	    format(string, sizeof(string), "ryFurn%d", i);
		INI_Float(string, dFurn[i][ryFurn]);
	    format(string, sizeof(string), "rzFurn%d", i);
		INI_Float(string, dFurn[i][rzFurn]);
	}
	return 1;
}

SaveFurniture()
{
	new string[50];
	new INI:File = INI_Open(FUPATH);
	INI_SetTag(File, "data");
	for(new i = 0; i < MAX_FURN; i ++)
	{
	    format(string, sizeof(string), "Deco%d", i);
		INI_WriteInt(File, string, dFurn[i][dFurnitureID]);
	    format(string, sizeof(string), "xFurn%d", i);
		INI_WriteFloat(File, string, dFurn[i][xFurn]);
	    format(string, sizeof(string), "yFurn%d", i);
		INI_WriteFloat(File, string, dFurn[i][yFurn]);
	    format(string, sizeof(string), "zFurn%d", i);
		INI_WriteFloat(File, string, dFurn[i][zFurn]);
	    format(string, sizeof(string), "rxFurn%d", i);
		INI_WriteFloat(File, string, dFurn[i][rxFurn]);
	    format(string, sizeof(string), "ryFurn%d", i);
		INI_WriteFloat(File, string, dFurn[i][ryFurn]);
	    format(string, sizeof(string), "rzFurn%d", i);
		INI_WriteFloat(File, string, dFurn[i][rzFurn]);
	}
	INI_Close(File);
}

CreateFurniture(objectid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, load = -1)
{
	static slotid;
	if(objectid != 0)
	{
		if(load == -1)
		{
			if(dFurn[slotid][dFurnitureID] != 0)
			{
			    for(new i = 0; i < MAX_FURN; i ++)
			    {
			        if(dFurn[i][dFurnitureID] == 0)
			        {
			            slotid = i;
			            break;
			        }
			    }
			}
			if(dFurn[slotid][dFurnitureID] != 0) DestroyDynamicObject(dFurn[slotid][oFurniture]);
		}
		//---
		dFurn[(load == -1) ? slotid : load][xFurn] = x;
		dFurn[(load == -1) ? slotid : load][yFurn] = y;
		dFurn[(load == -1) ? slotid : load][zFurn] = z;
		dFurn[(load == -1) ? slotid : load][rxFurn] = rx;
		dFurn[(load == -1) ? slotid : load][ryFurn] = ry;
		dFurn[(load == -1) ? slotid : load][rzFurn] = rz;
		//---
		dFurn[(load == -1) ? slotid : load][dFurnitureID] = objectid;
		//---
		dFurn[(load == -1) ? slotid : load][oFurniture] = CreateDynamicObject(GetFurnitureObjectID(objectid, false), x, y, z, rx, ry, rz);
	    slotid ++;
    }
    if(slotid == MAX_FURN) slotid = 0;
    return (slotid == 0) ? MAX_FURN : slotid - 1;
}

PlayerSetFurniture(playerid, furnitureid)
{
	new Float:x, Float:y, Float:z, Float:angle;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);
	pFurn[playerid] = CreateFurniture(furnitureid, x, y, z, 0.0, 0.0, angle, -1);
	EditDynamicObject(playerid, dFurn[pFurn[playerid]][oFurniture]);
}

DestroyFurniture(furnid)
{
	DestroyDynamicObject(dFurn[furnid][oFurniture]);
	dFurn[furnid][oFurniture] = INVALID_OBJECT_ID;
	dFurn[furnid][dFurnitureID] = 0;
	dFurn[furnid][xFurn] = 0.0;
	dFurn[furnid][yFurn] = 0.0;
	dFurn[furnid][zFurn] = 0.0;
	dFurn[furnid][rxFurn] = 0.0;
	dFurn[furnid][ryFurn] = 0.0;
	dFurn[furnid][rzFurn] = 0.0;
}
#endif

/*IsPlayerNearFurniture(playerid)
{
	new Float:x, Float:y, Float:z, Float:fTrash;
	GetPlayerPos(playerid, x, y, z);
	for(new i = 0; i < MAX_FURN; i ++)
	{
		if(dFurn[i][dObjectID] != 0 && IsPlayerInRangeOfPoint(playerid, 3.0, dFurn[i][xFurn], dFurn[i][yFurn], dFurn[i][zFurn]))
		{
		    if(CA_RayCastLine(x, y, z, dFurn[i][xFurn], dFurn[i][yFurn], dFurn[i][zFurn], fTrash, fTrash, fTrash) != 0) continue;
			return i;
		}
	}
	return -1;
}*/

GetFurnitureObjectID(furnid, bool:item)
{
	switch(furnid)
	{
		case 1: return item ? 137 : 19279;
		case 2: return item ? 143 : 1736;
		case 3: return item ? 144 : 1828;
	}
	return 0;
}
//---COLLECTEURS D'EAU
CreateCollector(Float:x, Float:y, Float:z, Float:angle, water, load = -1)
{
	static slotid;
	if(load == -1)
	{
		if(dCollector[slotid][dEau] != -1)
		{
		    for(new i = 0; i < MAX_COLLECTORS; i ++)
		    {
		        if(dCollector[i][dEau] == -1)
		        {
		            slotid = i;
		            break;
		        }
		    }
		}
	}
	if(load == -1 && dCollector[slotid][dEau] != -1) DestroyDynamicObject(dCollector[slotid][oCollector][0]), DestroyDynamicObject(dCollector[slotid][oCollector][1]), DestroyDynamic3DTextLabel(dCollector[slotid][CollectorText]);
	//---
	dCollector[(load == -1) ? slotid : load][oCollector][0] = CreateDynamicObject(3134, x, y, z - 0.4619, 90.0, 0.0, angle);
	dCollector[(load == -1) ? slotid : load][oCollector][1] = CreateDynamicObject(18633, x, y, z + 0.2581, 90.0, 180.0, angle);
	SetDynamicObjectMaterial(dCollector[(load == -1) ? slotid : load][oCollector][0], 0, 17067, "cw2_logcabins", "cw2_logwall", 0xFFFFFFFF);
	//---
	dCollector[(load == -1) ? slotid : load][CollectorText] = CreateDynamic3DTextLabel("0.0 l", JAUNE, x, y, z, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 5.0);
	GiveCollectorWater((load == -1) ? slotid : load, 0);
	//---
	dCollector[(load == -1) ? slotid : load][xEau] = x;
	dCollector[(load == -1) ? slotid : load][yEau] = y;
	dCollector[(load == -1) ? slotid : load][zEau] = z;
	dCollector[(load == -1) ? slotid : load][aEau] = angle;
	dCollector[(load == -1) ? slotid : load][dEau] = water;
	//---
    slotid ++;
    if(slotid == MAX_COLLECTORS) slotid = 0;
    return (slotid == 0) ? MAX_COLLECTORS : slotid - 1;
}

GiveCollectorWater(collectorid, water)
{
	new string[10];
    if(dCollector[collectorid][dEau] + water < 0) dCollector[collectorid][dEau] = 0;//Si la flotte est inférieure à 0, on la met à 0 l
	else if(dCollector[collectorid][dEau] + water > 100) dCollector[collectorid][dEau] = 100;//Si la flotte devient supérieure à 10 l, on la met à 10
    else dCollector[collectorid][dEau] += water;//Sinon, c'est bon
    format(string, sizeof(string), "%.1f l", floatdiv(dCollector[collectorid][dEau], 10));
    UpdateDynamic3DTextLabelText(dCollector[collectorid][CollectorText], BLEU, string);
	return dCollector[collectorid][dEau];
}

GetCollectorWater(collectorid)
{
	return dCollector[collectorid][dEau];
}

IsPlayerNearCollector(playerid)
{
	for(new i = 0; i < MAX_COLLECTORS; i ++) if(dCollector[i][dEau] != -1 && IsPlayerInRangeOfPoint(playerid, 2.0, dCollector[i][xEau], dCollector[i][yEau], dCollector[i][zEau])) return i;
	return -1;
}

DestroyCollector(collectid)
{
	DestroyDynamicObject(dCollector[collectid][oCollector][0]);
	DestroyDynamicObject(dCollector[collectid][oCollector][1]);
	DestroyDynamic3DTextLabel(dCollector[collectid][CollectorText]);
	dCollector[collectid][oCollector][0] = INVALID_OBJECT_ID;
	dCollector[collectid][oCollector][1] = INVALID_OBJECT_ID;
	dCollector[collectid][CollectorText] = Text3D:INVALID_3DTEXT_ID;
	dCollector[collectid][dEau] = 0;
	dCollector[collectid][xEau] = 0.0;
	dCollector[collectid][yEau] = 0.0;
	dCollector[collectid][zEau] = 0.0;
	dCollector[collectid][aEau] = 0.0;
}

public LoadCollectors_data(name[],value[])
{
	new string[50];
	for(new i = 0; i < MAX_COLLECTORS; i ++)
	{
	    format(string, sizeof(string), "EauCollector%d", i);
		INI_Int(string, dCollector[i][dEau]);
	    format(string, sizeof(string), "xCollector%d", i);
		INI_Float(string, dCollector[i][xEau]);
	    format(string, sizeof(string), "yCollector%d", i);
		INI_Float(string, dCollector[i][yEau]);
	    format(string, sizeof(string), "zCollector%d", i);
		INI_Float(string, dCollector[i][zEau]);
	    format(string, sizeof(string), "aCollector%d", i);
		INI_Float(string, dCollector[i][aEau]);
	}
	return 1;
}

SaveCollectors()
{
	new string[50];
	new INI:File = INI_Open(CPATH);
	INI_SetTag(File, "data");
	for(new i = 0; i < MAX_COLLECTORS; i ++)
	{
	    format(string, sizeof(string), "EauCollector%d", i);
		INI_WriteInt(File,string, dCollector[i][dEau]);
	    format(string, sizeof(string), "xCollector%d", i);
		INI_WriteFloat(File,string, dCollector[i][xEau]);
	    format(string, sizeof(string), "yCollector%d", i);
		INI_WriteFloat(File,string, dCollector[i][yEau]);
	    format(string, sizeof(string), "zCollector%d", i);
		INI_WriteFloat(File,string, dCollector[i][zEau]);
	    format(string, sizeof(string), "aCollector%d", i);
		INI_WriteFloat(File,string, dCollector[i][aEau]);
	}
	INI_Close(File);
}

//---BROYEUR
CreateShredder(Float:x, Float:y, Float:z, Float:angle, shredstate, load = -1)
{
	static slotid;
	if(load == -1)
	{
		if(dShredder[slotid][dBroyeur] != -1)
		{
		    for(new i = 0; i < MAX_SHREDDERS; i ++)
		    {
		        if(dShredder[i][dBroyeur] == -1)
		        {
		            slotid = i;
		            break;
		        }
		    }
		}
	}
	if(load == -1 && dShredder[slotid][dBroyeur] != -1) DestroyDynamicObject(dShredder[slotid][oBroyeur]);
	//---
	dShredder[(load == -1) ? slotid : load][oBroyeur] = CreateDynamicObject(920, x, y, z - 0.516, 0.0, 0.0, angle + 270.0);
	//---
	dShredder[(load == -1) ? slotid : load][xBroyeur] = x;
	dShredder[(load == -1) ? slotid : load][yBroyeur] = y;
	dShredder[(load == -1) ? slotid : load][zBroyeur] = z;
	dShredder[(load == -1) ? slotid : load][aBroyeur] = angle;
	dShredder[(load == -1) ? slotid : load][dBroyeur] = shredstate;
	//---
    slotid ++;
    if(slotid == MAX_SHREDDERS) slotid = 0;
    return (slotid == 0) ? MAX_SHREDDERS : slotid - 1;
}

IsPlayerNearShredder(playerid)
{
	for(new i = 0; i < MAX_SHREDDERS; i ++)
	{
	    if(dShredder[i][dBroyeur] == -1) continue;
		if(IsPlayerInRangeOfPoint(playerid, 2.0, dShredder[i][xBroyeur], dShredder[i][yBroyeur], dShredder[i][zBroyeur])) return i;
	}
	return -1;
}

DestroyShredder(shredderid)
{
	DestroyDynamicObject(dShredder[shredderid][oBroyeur]);
	dShredder[shredderid][oBroyeur] = INVALID_OBJECT_ID;
	dShredder[shredderid][dBroyeur] = -1;
	dShredder[shredderid][xBroyeur] = 0.0;
	dShredder[shredderid][xBroyeur] = 0.0;
	dShredder[shredderid][zBroyeur] = 0.0;
	dShredder[shredderid][aBroyeur] = 0.0;
}

public LoadShredders_data(name[],value[])
{
	new string[50];
	for(new i = 0; i < MAX_SHREDDERS; i ++)
	{
	    format(string, sizeof(string), "StateShredder%d", i);
		INI_Int(string, dShredder[i][dBroyeur]);
	    format(string, sizeof(string), "xShredder%d", i);
		INI_Float(string, dShredder[i][xBroyeur]);
	    format(string, sizeof(string), "yShredder%d", i);
		INI_Float(string, dShredder[i][yBroyeur]);
	    format(string, sizeof(string), "zShredder%d", i);
		INI_Float(string, dShredder[i][zBroyeur]);
	    format(string, sizeof(string), "aShredder%d", i);
		INI_Float(string, dShredder[i][aBroyeur]);
	}
	return 1;
}

SaveShredders()
{
	new string[50];
	new INI:File = INI_Open(SHPATH);
	INI_SetTag(File, "data");
	for(new i = 0; i < MAX_SHREDDERS; i ++)
	{
	    format(string, sizeof(string), "StateShredder%d", i);
		INI_WriteInt(File,string, dShredder[i][dBroyeur]);
	    format(string, sizeof(string), "xShredder%d", i);
		INI_WriteFloat(File,string, dShredder[i][xBroyeur]);
	    format(string, sizeof(string), "yShredder%d", i);
		INI_WriteFloat(File,string, dShredder[i][yBroyeur]);
	    format(string, sizeof(string), "zShredder%d", i);
		INI_WriteFloat(File,string, dShredder[i][zBroyeur]);
	    format(string, sizeof(string), "aShredder%d", i);
		INI_WriteFloat(File,string, dShredder[i][aBroyeur]);
	}
	INI_Close(File);
}

//---FUMÉE
CreateSmoke(Float:x, Float:y, Float:z, time)
{
	static slotid;
	if(dSmoke[slotid][dTempsSmoke] != 0) DestroyDynamicObject(dSmoke[slotid][oSmoke]);
	//---
	dSmoke[slotid][oSmoke] = CreateDynamicObject(18732, x, y, z - 1.0, 0.0, 0.0, 0.0);
	//---
	dSmoke[slotid][xSmoke] = x;
	dSmoke[slotid][ySmoke] = y;
	dSmoke[slotid][zSmoke] = z;
	dSmoke[slotid][dTempsSmoke] = time;
	//---
    slotid ++;
    if(slotid == MAX_FLAMES) slotid = 0;
    return (slotid == 0) ? MAX_FLAMES : slotid - 1;
}

DestroySmoke(smokeid)
{
	DestroyDynamicObject(dSmoke[smokeid][oSmoke]);
	dSmoke[smokeid][oSmoke] = INVALID_OBJECT_ID;
	dSmoke[smokeid][dTempsSmoke] = 0;
	dSmoke[smokeid][xSmoke] = 0.0;
	dSmoke[smokeid][ySmoke] = 0.0;
	dSmoke[smokeid][zSmoke] = 0.0;
}

IsPlayerSmokable(playerid)
{
    if(pPlayerInfos[playerid][pMasque] == 65 || (79 >= pPlayerInfos[playerid][pMasque] >= 75 && RandomEx(1, 3) == 1)) return false;
	new Float:x, Float:y, Float:z;
	static pLastKnock[MAX_PLAYERS] = -1;
	if(TimePassedSince(pLastKnock[playerid]) < 10) return false;
	for(new i = 0; i < MAX_FLAMES; i ++) if(IsPlayerInRangeOfPoint(playerid, 5.0, dSmoke[i][xSmoke], dSmoke[i][ySmoke], dSmoke[i][zSmoke]) && dSmoke[i][dTempsSmoke] != 0)
	{
	    pLastKnock[playerid] = gettime();
		return true;
	}
	for(new i = 0; i < MAX_ZOMBIES; i ++) if(FCNPC_IsStreamedIn(dZombie[i][dZombieID], playerid) && dZombie[i][dZombieClass] == SMOKER)
	{
	    FCNPC_GetPosition(dZombie[i][dZombieID], x, y, z);
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, x, y, z))
		{
			pLastKnock[playerid] = gettime();
			return true;
		}
	}
	return false;
}

//---FLAMMES
/*CreateFlame(Float:x, Float:y, Float:z, time, type)
{
	static slotid;
	if(load == -1 && dFlame[slotid][dTempsFlame] != 0) DestroyDynamicObject(dFlame[slotid][oFlame]);
	//---
	dFlame[(load == -1) ? slotid][oFlame] = CreateDynamicObject(19632, x, y, z - 1.023, 0.0, 0.0, angle);
	//---
	dFlame[slotid][xFlame] = x;
	dFlame[slotid][yFlame] = y;
	dFlame[slotid][zFlame] = z;
	dFlame[slotid][dTempsFlame] = time;
	//---
    slotid ++;
    if(slotid == MAX_FLAMES) slotid = 0;
    return (slotid == 0) ? MAX_FLAMES : slotid - 1;
}

DestroyFlame(fireid)
{
	DestroyDynamicObject(dFlame[fireid][oFlame]);
	dFlame[fireid][oFlame] = INVALID_OBJECT_ID;
	dFlame[fireid][dTempsFeu] = 0;
	dFlame[fireid][xFlame] = 0.0;
	dFlame[fireid][yFlame] = 0.0;
	dFlame[fireid][zFlame] = 0.0;
	dFlame[fireid][aFlame] = 0.0;
}*/

//---
CreateFire(Float:x, Float:y, Float:z, Float:angle, time, load = -1)
{
	static slotid;
	if(load == -1 && dFire[slotid][dTempsFeu] != 0) DestroyDynamicObject(dFire[slotid][oFeu]);
	//---
	dFire[(load == -1) ? slotid : load][oFeu] = CreateDynamicObject(19632, x, y, z - 1.023, 0.0, 0.0, angle);
	//---
	dFire[(load == -1) ? slotid : load][xFeu] = x;
	dFire[(load == -1) ? slotid : load][yFeu] = y;
	dFire[(load == -1) ? slotid : load][zFeu] = z;
	dFire[(load == -1) ? slotid : load][aFeu] = angle;
	dFire[(load == -1) ? slotid : load][dTempsFeu] = time;
	//---
    slotid ++;
    if(slotid == MAX_FIRES) slotid = 0;
    return (slotid == 0) ? MAX_FIRES : slotid - 1;
}

DestroyFire(fireid)
{
	DestroyDynamicObject(dFire[fireid][oFeu]);
	dFire[fireid][oFeu] = INVALID_OBJECT_ID;
	dFire[fireid][dTempsFeu] = 0;
	dFire[fireid][xFeu] = 0.0;
	dFire[fireid][yFeu] = 0.0;
	dFire[fireid][zFeu] = 0.0;
	dFire[fireid][aFeu] = 0.0;
}

IsPlayerNextToFire(playerid)
{
	for(new i = 0; i < MAX_FIRES; i ++) if(IsPlayerInRangeOfPoint(playerid, 3.5, dFire[i][xFeu], dFire[i][yFeu], dFire[i][zFeu]) && dFire[i][dTempsFeu] != 0) return true;
	for(new i = 0; i < MAX_BRASEROS; i ++) if(IsPlayerInRangeOfPoint(playerid, 3.5, dBraseroInfos[i][xBrasero], dBraseroInfos[i][yBrasero], dBraseroInfos[i][zBrasero]) && dBraseroInfos[i][dBrasero] == 2) return true;
	if(IsPlayerInRangeOfPoint(playerid, 3.5, -1952.3737, -2452.9717, 30.6250)) return true;//Camp Angel Pine
	else if(IsPlayerInRangeOfPoint(playerid, 3.5, 569.598, -203.8609, 26.694)) return true;//Camp clodos 1
	else if(IsPlayerInRangeOfPoint(playerid, 3.5, 1027.3179, -54.861, 25.8339)) return true;//Camp clodos 2
	else if(IsPlayerInRangeOfPoint(playerid, 3.5, -1995.0689, -1548.1629, 84.7959)) return true;//Camp Mont Chilliad
	else if(IsPlayerInRangeOfPoint(playerid, 3.5, -568.721, -1062.363, 23.7)) return true;//Camping Flint County
	else if(IsPlayerInRangeOfPoint(playerid, 3.5, -1301.0479, 2514.9189, 87.593)) return true;//Camp Aldea Malvada
	else if(IsPlayerInRangeOfPoint(playerid, 3.5, 1087.2144, 1273.0037, 10.8203)) return true;//Moto École
	else if(IsPlayerInRangeOfPoint(playerid, 3.5, 1043.5376, 1269.6462, 20.3791)) return true;//Moto École toit
	else if(IsPlayerInRangeOfPoint(playerid, 3.5, 960.3007, 2448.7773, 10.8203)) return true;//LV Nord
	else if(IsPlayerInRangeOfPoint(playerid, 3.5, 1086.9797, 1272.4633, 10.8203)) return true;//LV Nord
	else if(IsPlayerInRangeOfPoint(playerid, 3.5, -2669.231, -2411.172, 2.562)) return true;//Reggae
	else if(IsPlayerInRangeOfPoint(playerid, 3.5, -16.7251, -294.0468, 6.5064)) return true;//Blueberry
	return false;
}

public LoadFires_data(name[],value[])
{
	new string[50];
	for(new i = 0; i < MAX_FIRES; i ++)
	{
	    format(string, sizeof(string), "FireTime%d", i);
		INI_Int(string, dFire[i][dTempsFeu]);
	    format(string, sizeof(string), "xFeu%d", i);
		INI_Float(string, dFire[i][xFeu]);
	    format(string, sizeof(string), "yFeu%d", i);
		INI_Float(string, dFire[i][yFeu]);
	    format(string, sizeof(string), "zFeu%d", i);
		INI_Float(string, dFire[i][zFeu]);
	    format(string, sizeof(string), "aFeu%d", i);
		INI_Float(string, dFire[i][aFeu]);
	}
	return 1;
}

SaveFires()
{
	new string[50];
	new INI:File = INI_Open(FPATH);
	INI_SetTag(File, "data");
	for(new i = 0; i < MAX_FIRES; i ++)
	{
	    format(string, sizeof(string), "FireTime%d", i);
		INI_WriteInt(File,string, dFire[i][dTempsFeu]);
	    format(string, sizeof(string), "xFeu%d", i);
		INI_WriteFloat(File,string, dFire[i][xFeu]);
	    format(string, sizeof(string), "yFeu%d", i);
		INI_WriteFloat(File,string, dFire[i][yFeu]);
	    format(string, sizeof(string), "zFeu%d", i);
		INI_WriteFloat(File,string, dFire[i][zFeu]);
	    format(string, sizeof(string), "aFeu%d", i);
		INI_WriteFloat(File,string, dFire[i][aFeu]);
	}
	INI_Close(File);
}

//---BRASEROS
CreateBrasero(Float:x, Float:y, Float:z, Float:angle, braserostate, load = -1)
{
	static slotid;
	if(load == -1)
	{
		if(dBraseroInfos[slotid][dBrasero] != 0)
		{
		    for(new i = 0; i < MAX_BRASEROS; i ++)
		    {
		        if(dBraseroInfos[i][dBrasero] == 0)
		        {
		            slotid = i;
		            break;
		        }
		    }
		}
	}
	if(load == -1 && dBraseroInfos[slotid][dBrasero] != 0) DestroyDynamicObject(dBraseroInfos[slotid][oBrasero]);
	if(load == -1 && dBraseroInfos[slotid][dBrasero] == 2)
	{
		DestroyDynamicObject(dBraseroInfos[slotid][oFire]);
		dBraseroInfos[slotid][oFire] = INVALID_OBJECT_ID;
	}
	//---
	dBraseroInfos[(load == -1) ? slotid : load][oBrasero] = CreateDynamicObject(11725, x, y, z - 0.6119, 0.0, 0.0, angle);
	if(braserostate == 2) dBraseroInfos[(load == -1) ? slotid : load][oFire] = CreateDynamicObject(18693, x, y, z - 2.265, 0.0, 0.0, angle, -1, -1, -1, 25.0);
	//---
	dBraseroInfos[(load == -1) ? slotid : load][xBrasero] = x;
	dBraseroInfos[(load == -1) ? slotid : load][yBrasero] = y;
	dBraseroInfos[(load == -1) ? slotid : load][zBrasero] = z;
	dBraseroInfos[(load == -1) ? slotid : load][aBrasero] = angle;
	dBraseroInfos[(load == -1) ? slotid : load][dBrasero] = braserostate;
	//---
    slotid ++;
    if(slotid == MAX_BRASEROS) slotid = 0;
    return (slotid == 0) ? MAX_BRASEROS : slotid - 1;
}

DestroyBrasero(braseroid)
{
	if(dBraseroInfos[braseroid][dBrasero] != 0)
	{
		DestroyDynamicObject(dBraseroInfos[braseroid][oBrasero]);
		dBraseroInfos[braseroid][oBrasero] = INVALID_OBJECT_ID;
		if(dBraseroInfos[braseroid][dBrasero] == 2)
		{
			DestroyDynamicObject(dBraseroInfos[braseroid][oFire]);
			dBraseroInfos[braseroid][oFire] = INVALID_OBJECT_ID;
		}
		dBraseroInfos[braseroid][dBrasero] = 0;
		dBraseroInfos[braseroid][xBrasero] = 0.0;
		dBraseroInfos[braseroid][yBrasero] = 0.0;
		dBraseroInfos[braseroid][zBrasero] = 0.0;
		dBraseroInfos[braseroid][aBrasero] = 0.0;
	}
}

LightBrasero(braseroid, bool:bstate)
{
	if(bstate && dBraseroInfos[braseroid][dBrasero] == 1)
	{
	    dBraseroInfos[braseroid][dBrasero] = 2;
	    dBraseroInfos[braseroid][oFire] = CreateDynamicObject(18693, dBraseroInfos[braseroid][xBrasero], dBraseroInfos[braseroid][yBrasero], dBraseroInfos[braseroid][zBrasero] - 2.265, 0.0, 0.0, dBraseroInfos[braseroid][aBrasero], -1, -1, -1, 25.0);
	}
	else if(!bstate && dBraseroInfos[braseroid][dBrasero] == 2)
	{
	    dBraseroInfos[braseroid][dBrasero] = 1;
	    if(dBraseroInfos[braseroid][oFire] != INVALID_OBJECT_ID)
		{
			DestroyDynamicObject(dBraseroInfos[braseroid][oFire]);
			dBraseroInfos[braseroid][oFire] = INVALID_OBJECT_ID;
		}
	}
	return 1;
}

public LoadBraseros_data(name[],value[])
{
	new string[50];
	for(new i = 0; i < MAX_FIRES; i ++)
	{
	    format(string, sizeof(string), "Brasero%d", i);
		INI_Int(string, dBraseroInfos[i][dBrasero]);
	    format(string, sizeof(string), "xBrasero%d", i);
		INI_Float(string, dBraseroInfos[i][xBrasero]);
	    format(string, sizeof(string), "yBrasero%d", i);
		INI_Float(string, dBraseroInfos[i][yBrasero]);
	    format(string, sizeof(string), "zBrasero%d", i);
		INI_Float(string, dBraseroInfos[i][zBrasero]);
	    format(string, sizeof(string), "aBrasero%d", i);
		INI_Float(string, dBraseroInfos[i][aBrasero]);
	}
	return 1;
}

SaveBraseros()
{
	new string[50];
	new INI:File = INI_Open(BRPATH);
	INI_SetTag(File, "data");
	for(new i = 0; i < MAX_BRASEROS; i ++)
	{
	    format(string, sizeof(string), "Brasero%d", i);
		INI_WriteInt(File,string, dBraseroInfos[i][dBrasero]);
	    format(string, sizeof(string), "xBrasero%d", i);
		INI_WriteFloat(File,string, dBraseroInfos[i][xBrasero]);
	    format(string, sizeof(string), "yBrasero%d", i);
		INI_WriteFloat(File,string, dBraseroInfos[i][yBrasero]);
	    format(string, sizeof(string), "zBrasero%d", i);
		INI_WriteFloat(File,string, dBraseroInfos[i][zBrasero]);
	    format(string, sizeof(string), "aBrasero%d", i);
		INI_WriteFloat(File,string, dBraseroInfos[i][aBrasero]);
	}
	INI_Close(File);
}
//---ARMES SUR LE SOL
public LoadWeapons_data(name[],value[])
{
	new string[50];
	for(new i = 0; i < MAX_GROUND_WEAPONS; i ++)
	{
	    format(string, sizeof(string), "WeaponID%d", i);
		INI_Int(string, dGuns[i][WeaponID]);
	    format(string, sizeof(string), "Ammo%d", i);
		INI_Int(string, dGuns[i][WeaponAmmo]);
	    format(string, sizeof(string), "xWeapon%d", i);
		INI_Float(string, dGuns[i][xWeapon]);
	    format(string, sizeof(string), "yWeapon%d", i);
		INI_Float(string, dGuns[i][yWeapon]);
	    format(string, sizeof(string), "zWeapon%d", i);
		INI_Float(string, dGuns[i][zWeapon]);
	}
	return 1;
}

SaveWeapons()
{
	new string[50];
	new INI:File = INI_Open(WPATH);
	INI_SetTag(File, "data");
	for(new i = 0; i < MAX_GROUND_WEAPONS; i ++)
	{
	    format(string, sizeof(string), "WeaponID%d", i);
		INI_WriteInt(File,string, dGuns[i][WeaponID]);
	    format(string, sizeof(string), "Ammo%d", i);
		INI_WriteInt(File,string, dGuns[i][WeaponAmmo]);
	    format(string, sizeof(string), "xWeapon%d", i);
		INI_WriteFloat(File,string, dGuns[i][xWeapon]);
	    format(string, sizeof(string), "yWeapon%d", i);
		INI_WriteFloat(File,string, dGuns[i][yWeapon]);
	    format(string, sizeof(string), "zWeapon%d", i);
		INI_WriteFloat(File,string, dGuns[i][zWeapon]);
	}
	INI_Close(File);
}

PlayerDropWeapon(playerid, weaponid, ammo, Float:distance)//Fonction pour faire qu'un objet soit drop par un joueur
{
	if(!FCNPC_IsValid(playerid)) ApplyAnimation(playerid, "GRENADE", "WEAPON_throwu", 4.0, 0, 0, 0, 0, 0, 1);//La seule fois où un NPC peut drop, c'est quand il meurt, donc on ne met l'animation que si c'est un joueur vivant
	//---
	new Float:x, Float:y, Float:z, Float:a, Float:x2, Float:y2, Float:z2;
	GetPlayerPos(playerid, x, y, z);//On prend la position du joueur
	GetPlayerFacingAngle(playerid, a);//...et son angle
	a += float(RandomEx(-45, 45));//On ajoute un nombre random pour la direction
	x2 = x, y2 = y, z2 = z;//On donne la même valeur aux deux groupes de variables
	GetXYInFrontOfPoint(x2, y2, a, distance);//Et on prend la position dans la distance donnée
	//---
	new dFound = CA_RayCastLine(x, y, z, x2, y2, z2, x, y, z);//On regarde si le joueur ne va pas balancer le truc dans le mur
	//---
	if(dFound == 0)
	{
		swapfloat(x, x2);
		swapfloat(y, y2);
		swapfloat(z, z2);
	}
	//---
	CA_RayCastLine(x, y, z, x, y, z - 500.0, x2, y2, z2);//On regarde où est le sol à partir de la nouvelle position
	new dSlotID = CreateWeapon(weaponid, ammo, x2, y2, z2 + 1.0, -1);//On crée l'arme, là, au sol
	Streamer_Update(playerid);//On actualise le streamer pour que l'objet soit vu en train de tomber
	//---
	new dObjectID = GetObjectFromWeapon(weaponid);
	SetDynamicObjectPos(dGuns[dSlotID][ObjectID], x, y, z);//On remonte l'objet à hauteur du joueur
	MoveDynamicObject(dGuns[dSlotID][ObjectID], x2, y2, z2 + 1.0 + aObjects[dObjectID][GroundOffSetZ], 10.0);//Et on le fait tomber vers le sol
}

GetGunName(gunid, language = LANGUAGE_EN)
{
	new sWeapon[31];
	switch(language)
	{
	    case LANGUAGE_EN:
		{
		    if(gunid == 0) strcpy(sWeapon, "Nothing");
		    else strcpy(sWeapon, NoNewLineSign(aObjects[GetObjectFromWeapon(gunid)][ObjectEnName]));
		}
	    case LANGUAGE_FR:
		{
		    if(gunid == 0) strcpy(sWeapon, "Rien");
		    else strcpy(sWeapon, NoNewLineSign(aObjects[GetObjectFromWeapon(gunid)][ObjectFrName]));
		}
	    case LANGUAGE_ES:
		{
		    if(gunid == 0) strcpy(sWeapon, "Nada");
		    else strcpy(sWeapon, NoNewLineSign(aObjects[GetObjectFromWeapon(gunid)][ObjectEsName]));
		}
	    case LANGUAGE_PG:
		{
		    if(gunid == 0) strcpy(sWeapon, "Portugais");
		    else strcpy(sWeapon, NoNewLineSign(aObjects[GetObjectFromWeapon(gunid)][ObjectPgName]));
		}
	    case LANGUAGE_IT:
		{
		    if(gunid == 0) strcpy(sWeapon, "Niente");
		    else strcpy(sWeapon, NoNewLineSign(aObjects[GetObjectFromWeapon(gunid)][ObjectItName]));
		}
	    case LANGUAGE_DE:
		{
		    if(gunid == 0) strcpy(sWeapon, "Nichts");
		    else strcpy(sWeapon, NoNewLineSign(aObjects[GetObjectFromWeapon(gunid)][ObjectDeName]));
		}
	}
	return sWeapon;
}

GetGunInfo(playerid, slot)
{
	new string[64];
    switch(slot)
	{
		case 0: format(string, 64, "{CC0000}%s {FFFFFF}- {CC0000}%d", GetGunName(pPlayerInfos[playerid][pArme1][0], pPlayerInfos[playerid][pLangue]), pPlayerInfos[playerid][pArme1][1]);
		case 1: format(string, 64, "{CC0000}%s {FFFFFF}- {CC0000}%d", GetGunName(pPlayerInfos[playerid][pArme2][0], pPlayerInfos[playerid][pLangue]), pPlayerInfos[playerid][pArme2][1]);
		case 2: format(string, 64, "{CC0000}%s {FFFFFF}- {CC0000}%d", GetGunName(pPlayerInfos[playerid][pArme3][0], pPlayerInfos[playerid][pLangue]), pPlayerInfos[playerid][pArme3][1]);
		case 3: format(string, 64, "{CC0000}%s {FFFFFF}- {CC0000}%d", GetGunName(pPlayerInfos[playerid][pArme4][0], pPlayerInfos[playerid][pLangue]), pPlayerInfos[playerid][pArme4][1]);
	}
    return string;
}

CreateWeapon(weaponid, ammo, Float:x, Float:y, Float:z, load = -1)
{
	static slotid;
	if(weaponid != 0)
	{
		new string[30];
		if(load == -1)
		{
			if(dGuns[slotid][WeaponID] != 0)
			{
			    for(new i = 0; i < MAX_GROUND_WEAPONS; i ++)
			    {
			        if(dGuns[slotid][WeaponID] == 0)
			        {
			            slotid = i;
			            break;
			        }
			    }
			}
		}
		if(load == -1 && dGuns[slotid][WeaponID] != 0) DestroyDynamicObject(dGuns[slotid][ObjectID]), DestroyDynamic3DTextLabel(dGuns[slotid][WeaponText]);
		//---
		new dObjectID = GetObjectFromWeapon(weaponid);
		//---
		dGuns[(load == -1) ? slotid : load][WeaponID] = weaponid;
	 	dGuns[(load == -1) ? slotid : load][ObjectID] = CreateDynamicObject(aObjects[dObjectID][ObjectModelID], x, y, z + aObjects[dObjectID][GroundOffSetZ], aObjects[dObjectID][GroundRotX], aObjects[dObjectID][GroundRotY], aObjects[dObjectID][GroundRotZ], -1, -1, -1, 25.0, 20.0);
	    dGuns[(load == -1) ? slotid : load][WeaponAmmo] = ammo;
		dGuns[(load == -1) ? slotid : load][xWeapon] = x;
		dGuns[(load == -1) ? slotid : load][yWeapon] = y;
		dGuns[(load == -1) ? slotid : load][zWeapon] = z;
	    if(GetWeaponAmmoType(weaponid) == NO_AMMO)  format(string, sizeof(string), "%s", NoNewLineSign(aObjects[dObjectID][ObjectEnName]));
		else format(string, sizeof(string), "%s - %d ammo", NoNewLineSign(aObjects[dObjectID][ObjectEnName]), ammo);
	    dGuns[(load == -1) ? slotid : load][WeaponText] = CreateDynamic3DTextLabel(string, ROUGE, x, y, z + aObjects[dObjectID][GroundOffSetZ], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 3.5);
    }
    slotid ++;
    if(slotid == MAX_GROUND_WEAPONS) slotid = 0;
    return (slotid == 0) ? MAX_GROUND_WEAPONS : slotid - 1;
}

DestroyWeapon(weaponid)
{
	DestroyDynamicObject(dGuns[weaponid][ObjectID]);
	dGuns[weaponid][ObjectID] = INVALID_OBJECT_ID;
	dGuns[weaponid][WeaponID] = 0;
	dGuns[weaponid][WeaponAmmo] = 0;
	dGuns[weaponid][xWeapon] = 0.0;
	dGuns[weaponid][yWeapon] = 0.0;
	dGuns[weaponid][zWeapon] = 0.0;
	DestroyDynamic3DTextLabel(dGuns[weaponid][WeaponText]);
	dGuns[weaponid][WeaponText] = Text3D:INVALID_3DTEXT_ID;
}

IsItemAroundPlayer(itemid, playerid, Float:radius)
{
	if(IsPlayerInRangeOfPoint(playerid, radius, dItems[itemid][xItem], dItems[itemid][yItem], dItems[itemid][zItem])) return true;
	return false;
}

IsWeaponAroundPlayer(weaponid, playerid, Float:radius)
{
	if(IsPlayerInRangeOfPoint(playerid, radius, dGuns[weaponid][xWeapon], dGuns[weaponid][yWeapon], dGuns[weaponid][zWeapon])) return true;
	return false;
}

IsPlayerNearItem(playerid)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	new Float:fTrash;
	for(new i = 0; i < MAX_GROUND_ITEMS; i ++)
	{
	    if(dItems[i][ItemID] == 0) continue;
	    if(IsDynamicObjectMoving(dItems[i][ObjectID])) continue;
	    if(IsItemAroundPlayer(i, playerid, 2.0))
	    {
			if(CA_RayCastLine(x, y, z, dItems[i][xItem], dItems[i][yItem], dItems[i][zItem], fTrash, fTrash, fTrash) != 0) continue;
			return true;
		}
	}
	return false;
}

CheckItemsRoundPlayer(playerid)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	new Float:fTrash;
	//---OBJETS
	new dSlot = 0;
	for(new i = 0; i < 9; i ++) pAroundItems[playerid][i][0] = -1, pAroundItems[playerid][i][1] = -1;
	//---
	for(new i = 0; i < MAX_GROUND_ITEMS; i ++)
	{
	    if(dSlot == 9) break;
	    if(dItems[i][ItemID] == 0) continue;
	    if(!IsDynamicObjectMoving(dItems[i][ObjectID]) && IsItemAroundPlayer(i, playerid, 2.0))
	    {
			if(CA_RayCastLine(x, y, z, dItems[i][xItem], dItems[i][yItem], dItems[i][zItem], fTrash, fTrash, fTrash) != 0) continue;
	        pAroundItems[playerid][dSlot][0] = i;
	        pAroundItems[playerid][dSlot][1] = 0;
	        dSlot ++;
		}
	}
	//---ARMES
	for(new i = 0; i < MAX_GROUND_WEAPONS; i ++)
	{
	    if(dSlot == 9) break;
	    if(dGuns[i][WeaponID] == 0) continue;
	    if(IsWeaponAroundPlayer(i, playerid, 2.0))
	    {
			if(CA_RayCastLine(x, y, z, dGuns[i][xWeapon], dGuns[i][yWeapon], dGuns[i][zWeapon], fTrash, fTrash, fTrash) != 0) continue;
	        pAroundItems[playerid][dSlot][0] = i;
	        pAroundItems[playerid][dSlot][1] = 1;
	        dSlot ++;
	    }
	}
	//---LITS
	for(new i = 0; i < MAX_BEDS; i ++)
	{
	    if(dSlot == 9) break;
		if(dBed[i][dBedType] == 0) continue;
		if(IsPlayerInRangeOfPoint(playerid, 3.0, dBed[i][xBed], dBed[i][yBed], dBed[i][zBed]))
		{
			if(CA_RayCastLine(x, y, z, dBed[i][xBed], dBed[i][yBed], dBed[i][zBed], fTrash, fTrash, fTrash) != 0) continue;
		    pAroundItems[playerid][dSlot][0] = i;
		    pAroundItems[playerid][dSlot][1] = 2;
			dSlot ++;
		}
	}
	//---TENTES
	for(new i = 0; i < MAX_TENTS; i ++)
	{
	    if(dSlot == 9) break;
		if(!dTent[i][bTent]) continue;
		if(IsPlayerInRangeOfPoint(playerid, 3.0, dTent[i][xTent], dTent[i][yTent], dTent[i][zTent]))
		{
			if(CA_RayCastLine(x, y, z, dTent[i][xTent], dTent[i][yTent], dTent[i][zTent], fTrash, fTrash, fTrash) != 0) continue;
		    pAroundItems[playerid][dSlot][0] = i;
		    pAroundItems[playerid][dSlot][1] = 3;
			dSlot ++;
		}
	}
	//---COLLECTEURS D'EAU
	for(new i = 0; i < MAX_COLLECTORS; i ++)
	{
	    if(dSlot == 9) break;
		if(dCollector[i][dEau] == -1) continue;
		if(IsPlayerInRangeOfPoint(playerid, 3.0, dCollector[i][xEau], dCollector[i][yEau], dCollector[i][zEau]))
		{
			if(CA_RayCastLine(x, y, z, dCollector[i][xEau], dCollector[i][yEau], dCollector[i][zEau], fTrash, fTrash, fTrash) != 0) continue;
		    pAroundItems[playerid][dSlot][0] = i;
		    pAroundItems[playerid][dSlot][1] = 4;
			dSlot ++;
		}
	}
	//---COFFRES FORTS
	for(new i = 0; i < MAX_SAFES; i ++)
	{
	    if(dSlot == 9) break;
		if(!dSafeInfos[i][bSafe]) continue;
		if(IsPlayerInRangeOfPoint(playerid, 3.0, dSafeInfos[i][xSafe], dSafeInfos[i][ySafe], dSafeInfos[i][zSafe]))
		{
			if(CA_RayCastLine(x, y, z, dSafeInfos[i][xSafe], dSafeInfos[i][ySafe], dSafeInfos[i][zSafe], fTrash, fTrash, fTrash) != 0) continue;
		    pAroundItems[playerid][dSlot][0] = i;
		    pAroundItems[playerid][dSlot][1] = 5;
			dSlot ++;
		}
	}
	//---LINGOTS D'OR
	#if defined MYSQL_SYSTEM
	LIST_foreach<my_iterator>(goldList)
	{
		new gold[Or];
		new Pointer:data_ptr = LIST_IT_data_ptr(my_iterator);
		MEM_get_arr(data_ptr, _, gold);
		if(dSlot == 9) break;
		if(gold[dOrAmount] == 0) continue;
		if(IsPlayerInRangeOfPoint(playerid, 3.0, gold[xOr], gold[yOr], gold[zOr]))
		{
			if(CA_RayCastLine(x, y, z, gold[xOr], gold[yOr], gold[zOr], fTrash, fTrash, fTrash) != 0) continue;
		    //pAroundItems[playerid][dSlot][0] = idx;
		    pAroundItems[playerid][dSlot][1] = 6;
			dSlot ++;
			nodeFound[playerid] = my_iterator;
		}
	}
	#else
	for(new i = 0; i < MAX_GOLD_INGOTS; i ++)
	{
	    if(dSlot == 9) break;
		if(dOr[i][dOrAmount] == 0) continue;
		if(IsPlayerInRangeOfPoint(playerid, 3.0, dOr[i][xOr], dOr[i][yOr], dOr[i][zOr]))
		{
			if(CA_RayCastLine(x, y, z, dOr[i][xOr], dOr[i][yOr], dOr[i][zOr], fTrash, fTrash, fTrash) != 0) continue;
		    pAroundItems[playerid][dSlot][0] = i;
		    pAroundItems[playerid][dSlot][1] = 6;
			dSlot ++;
		}
	}
	#endif
	//---BROYEURS
	for(new i = 0; i < MAX_SHREDDERS; i ++)
	{
	    if(dSlot == 9) break;
		if(dShredder[i][dBroyeur] == -1) continue;
		if(IsPlayerInRangeOfPoint(playerid, 3.0, dShredder[i][xBroyeur], dShredder[i][yBroyeur], dShredder[i][zBroyeur]))
		{
			if(CA_RayCastLine(x, y, z, dShredder[i][xBroyeur], dShredder[i][yBroyeur], dShredder[i][zBroyeur], fTrash, fTrash, fTrash) != 0) continue;
		    pAroundItems[playerid][dSlot][0] = i;
		    pAroundItems[playerid][dSlot][1] = 7;
			dSlot ++;
		}
	}
	//---GUNRACKS
	for(new i = 0; i < MAX_GUNRACKS; i ++)
	{
	    if(dSlot == 9) break;
	    if(!dGunRackInfos[i][bRack]) continue;
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, dGunRackInfos[i][xRack], dGunRackInfos[i][yRack], dGunRackInfos[i][zRack]))
		{
			if(CA_RayCastLine(x, y, z, dGunRackInfos[i][xRack], dGunRackInfos[i][yRack], dGunRackInfos[i][zRack], fTrash, fTrash, fTrash) != 0) continue;
		    pAroundItems[playerid][dSlot][0] = i;
		    pAroundItems[playerid][dSlot][1] = 8;
			dSlot ++;
		}
	}
	//---BRASEROS
	#if defined CAN_PICKUP_BRAZIER
	for(new i = 0; i < MAX_BRASEROS; i ++)
	{
	    if(dSlot == 9) break;
	    if(dBraseroInfos[i][dBrasero] == 0) continue;
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, dBraseroInfos[i][xBrasero], dBraseroInfos[i][yBrasero], dBraseroInfos[i][zBrasero]))
		{
			if(CA_RayCastLine(x, y, z, dBraseroInfos[i][xBrasero], dBraseroInfos[i][yBrasero], dBraseroInfos[i][zBrasero], fTrash, fTrash, fTrash) != 0) continue;
		    pAroundItems[playerid][dSlot][0] = i;
		    pAroundItems[playerid][dSlot][1] = 9;
			dSlot ++;
		}
	}
	#endif
	//---DÉCORATION
	#if defined MYSQL_SYSTEM
	LIST_foreach<my_iterator>(furnitureList)
	{
		new furn[Furniture];
		new Pointer:data_ptr = LIST_IT_data_ptr(my_iterator);
		MEM_get_arr(data_ptr, _, furn);
		if(dSlot == 9) break;
	    if(furn[dFurnitureType] == 0) continue;
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, furn[xFurn], furn[yFurn], furn[zFurn]))
		{
			if(CA_RayCastLine(x, y, z, furn[xFurn], furn[yFurn], furn[zFurn], fTrash, fTrash, fTrash) != 0) continue;
		    //pAroundItems[playerid][dSlot][0] = idx;
		    pAroundItems[playerid][dSlot][1] = 10;
			nodeFound[playerid] = my_iterator;
			dSlot ++;
		}
	}
	#else
	for(new i = 0; i < MAX_FURN; i ++)
	{
	    if(dSlot == 9) break;
	    if(dFurn[i][dFurnitureID] == 0) continue;
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, dFurn[i][xFurn], dFurn[i][yFurn], dFurn[i][zFurn]))
		{
			if(CA_RayCastLine(x, y, z, dFurn[i][xFurn], dFurn[i][yFurn], dFurn[i][zFurn], fTrash, fTrash, fTrash) != 0) continue;
		    pAroundItems[playerid][dSlot][0] = i;
		    pAroundItems[playerid][dSlot][1] = 10;
			dSlot ++;
		}
	}
	#endif
	//---SIEGES
	#if defined MYSQL_SYSTEM
	LIST_foreach<my_iterator>(seatList)
	{
		new seat[Seat];
		new Pointer:data_ptr = LIST_IT_data_ptr(my_iterator);
		MEM_get_arr(data_ptr, _, seat);
		if(dSlot == 9) break;
		if(seat[dSeatType] == 0) continue;
		if(IsPlayerInRangeOfPoint(playerid, 3.0, seat[xSeat], seat[ySeat], seat[zSeat]))
		{
			if(CA_RayCastLine(x, y, z, seat[xSeat], seat[ySeat], seat[zSeat], fTrash, fTrash, fTrash) != 0) continue;
		    //pAroundItems[playerid][dSlot][0] = idx;
		    pAroundItems[playerid][dSlot][1] = 11;
			nodeFound[playerid] = my_iterator;
			dSlot ++;
		}
	}
	#else
	for(new i = 0; i < MAX_SEATS; i ++)
	{
	    if(dSlot == 9) break;
		if(dSeat[i][dSeatType] == 0) continue;
		if(IsPlayerInRangeOfPoint(playerid, 3.0, dSeat[i][xSeat], dSeat[i][ySeat], dSeat[i][zSeat]))
		{
			if(CA_RayCastLine(x, y, z, dSeat[i][xSeat], dSeat[i][ySeat], dSeat[i][zSeat], fTrash, fTrash, fTrash) != 0) continue;
		    pAroundItems[playerid][dSlot][0] = i;
		    pAroundItems[playerid][dSlot][1] = 11;
			dSlot ++;
		}
	}
	#endif
	//---FRIDGES
	for(new i = 0; i < MAX_FRIDGES; i ++)
	{
	    if(dSlot == 9) break;
	    if(!dFridgeInfos[i][bFridge]) continue;
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, dFridgeInfos[i][xFridge], dFridgeInfos[i][yFridge], dFridgeInfos[i][zFridge]))
		{
			if(CA_RayCastLine(x, y, z, dFridgeInfos[i][xFridge], dFridgeInfos[i][yFridge], dFridgeInfos[i][zFridge], fTrash, fTrash, fTrash) != 0) continue;
		    pAroundItems[playerid][dSlot][0] = i;
		    pAroundItems[playerid][dSlot][1] = 12;
			dSlot ++;
		}
	}
	//---
	if(dSlot == 0 && CallRemoteFunction("GetPlayerMission", "i", playerid) != MISSION_FLIGHT_INTRO)//S'il n'y a pas d'objet près du mec
	{
	    SendClientMessageEx(playerid, ROUGE, "There is no item near you!", "Il n'y a pas d'objet près de vous !", "¡No hay objetos cerca de usted!", "O senhor tem falhado sua reparação !", "Italien", "Da ist kein Objekt in Ihrer Nähe!");
	    return 1;
	}
	if(dSlot == 1)//S'il n'y a qu'un objet près du mec
	{
	    if(pAroundItems[playerid][0][1] == 0)//Si cet objet est un item
	    {
	        new dFreeSlot = GetPlayerNextFreeSlot(playerid);
	        if(dFreeSlot == -1)
	        {
			    SendClientMessageEx(playerid, ROUGE, "You cannot carry more items!", "Vous ne pouvez pas porter plus d'objets !", "¡No puede llevar más objetos!", "Não há objetos perto do senhor", "Italien", "Sie können nicht mehr Objekte tragen!");
			    return 1;
	        }
	        GivePlayerSlotObject(playerid, dItems[pAroundItems[playerid][0][0]][ItemID], dFreeSlot);
			LogInfo(true, "[JOUEUR]%s ramasse %s", GetName(playerid), NoNewLineSign(aObjects[dItems[pAroundItems[playerid][0][0]][ItemID]][ObjectFrName]));
			if(aObjects[dItems[pAroundItems[playerid][0][0]][ItemID]][bHeavy])
			{
				ApplyAnimation(playerid, "CARRY", "liftup", 3.0, 0, 0, 0, 0, 0);
	        	if(dFreeSlot != 0) SwapPlayerObjects(playerid, 0, dFreeSlot);
			}
	    	else
			{
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
			}
			CallRemoteFunction("OnPlayerPickupMisison", "ii", playerid, dItems[pAroundItems[playerid][0][0]][ItemID]);
			DestroyItem(pAroundItems[playerid][0][0]);
			if(!pPlayerInfos[playerid][bAide][0]) pPlayerInfos[playerid][bAide][0] = true;
	    }
	    else if(pAroundItems[playerid][0][1] == 1)//Si cet objet est une arme
	    {
	        new dFreeSlot = GetPlayerNextFreeWeaponSlot(playerid);
			new dWeaponSlot = HasPlayerWeapon(playerid, dGuns[pAroundItems[playerid][0][0]][WeaponID]);
			new dSameWeapon = HasPlayerSameTypeWeapon(playerid, dGuns[pAroundItems[playerid][0][0]][WeaponID]);
			if(dWeaponSlot != 0 && GetWeaponAmmoType(dGuns[pAroundItems[playerid][0][0]][WeaponID]) != NO_AMMO)
			{
			    ApplyReloadAnim(playerid, dGuns[pAroundItems[playerid][0][0]][WeaponID]);
			    GivePlayerWeaponEx(playerid, dGuns[pAroundItems[playerid][0][0]][WeaponID], dGuns[pAroundItems[playerid][0][0]][WeaponAmmo]);
			    if(GetPlayerWeaponSkill(playerid, dWeaponSlot) != WEAPON_AKIMBO)
			    {
			        if(dGuns[pAroundItems[playerid][0][0]][WeaponID] == 22 || dGuns[pAroundItems[playerid][0][0]][WeaponID] == 26 || dGuns[pAroundItems[playerid][0][0]][WeaponID] == 28 || dGuns[pAroundItems[playerid][0][0]][WeaponID] == 32)
			        {
			            SetPlayerWeaponSkill(playerid, dWeaponSlot, WEAPON_AKIMBO);
			        }
			        else
			        {
						PlayerDropObject(playerid, GetObjectFromWeapon(dGuns[pAroundItems[playerid][0][0]][WeaponID]), floatdiv(RandomEx(5, 20), 10));
			        }
		    	}
		    	else
		    	{
					PlayerDropObject(playerid, GetObjectFromWeapon(dGuns[pAroundItems[playerid][0][0]][WeaponID]), floatdiv(RandomEx(5, 20), 10));
		    	}
				DestroyWeapon(pAroundItems[playerid][0][0]);
			    return 1;
			}
			if(dSameWeapon == 1)//Retourne 0 si le mec n'a pas d'armes du même type, 1 si le mec a une arme du même type, 2 si le mec a l'arme en question
			{
				if(GetWeaponAmmoType(GetPlayerWeapon(playerid)) == GetWeaponAmmoType(dGuns[pAroundItems[playerid][0][0]][WeaponID]) && GetWeaponAmmoType(dGuns[pAroundItems[playerid][0][0]][WeaponID]) != NO_AMMO)
				{
					GivePlayerWeaponEx(playerid, GetPlayerWeapon(playerid), dGuns[pAroundItems[playerid][0][0]][WeaponAmmo]);
					PlayerDropObject(playerid, GetObjectFromWeapon(dGuns[pAroundItems[playerid][0][0]][WeaponID]), floatdiv(RandomEx(5, 20), 10));
					DestroyWeapon(pAroundItems[playerid][0][0]);
					return 1;
				}
			    SendClientMessageEx(playerid, ROUGE, "You already have this type of weapon!", "Vous avez déjà une arme de ce type !", "¡Ya tiene una arma de esto tipo!", "O senhor já tem uma arma de este tipo", "Già hai una arma di questo tipo !", "Sie haben schon so eine Waffe!");
			    return 1;
			}
			if(dFreeSlot == 0)
			{
			    SendClientMessageEx(playerid, ROUGE, "You cannot carry more weapons!", "Vous ne pouvez pas porter plus d'armes !", "¡No puede llevar más armas!", "O senhor não pode carregar mais armas !", "Italien", "Sie können nicht mehr Waffen tragen!");
			    return 1;
			}
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
			GivePlayerWeaponEx(playerid, dGuns[pAroundItems[playerid][0][0]][WeaponID], dGuns[pAroundItems[playerid][0][0]][WeaponAmmo]);
			SetPlayerWeaponSkill(playerid, dFreeSlot, WEAPON_SIMPLE);
			DestroyWeapon(pAroundItems[playerid][0][0]);
			if(!pPlayerInfos[playerid][bAide][0]) pPlayerInfos[playerid][bAide][0] = true;
	    }
	    else if(pAroundItems[playerid][0][1] == 2)//Si cet objet est un lit
	    {
	        new dFreeSlot = GetPlayerNextFreeSlot(playerid);
	        if(dFreeSlot == -1)
	        {
			    SendClientMessageEx(playerid, ROUGE, "You cannot carry more items!", "Vous ne pouvez pas porter plus d'objets !", "¡No puede llevar más objetos!", "O senhor não pode carregar mais objetos", "Italien", "Sie können nicht mehr Objekte tragen!");
			    return 1;
	        }
			ApplyAnimation(playerid, "CARRY", "liftup", 3.0, 0, 0, 0, 0, 0);
		    switch(dBed[pAroundItems[playerid][0][0]][dBedType])
		    {
		        case 1:
				{
					if(Success(33)) GivePlayerSlotObject(playerid, 80, dFreeSlot);
			    	else SendClientMessageEx(playerid, ROUGE, "This bed's broken!", "Le lit s'est cassé !", "Espagnol", "Portugais", "Italien", "Allemand");
				}
		        case 2:
				{
					GivePlayerSlotObject(playerid, 151, dFreeSlot);
				}
		    }
        	DestroyBed(pAroundItems[playerid][0][0]);
	    }
	    else if(pAroundItems[playerid][0][1] == 3)//Si cet objet est une tente
	    {
	        new dFreeSlot = GetPlayerNextFreeSlot(playerid);
	        if(dFreeSlot == -1)
	        {
			    SendClientMessageEx(playerid, ROUGE, "You cannot carry more items!", "Vous ne pouvez pas porter plus d'objets !", "¡No puede llevar más objetos!", "O senhor não pode carregar mais objetos", "Italien", "Sie können nicht mehr Objekte tragen!");
			    return 1;
	        }
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
		    GivePlayerSlotObject(playerid, 1, dFreeSlot);
        	DestroyTent(pAroundItems[playerid][0][0]);
	    }
	    else if(pAroundItems[playerid][0][1] == 4)//Si cet objet est un collecteur d'eau
	    {
	        new dFreeSlot = GetPlayerNextFreeSlot(playerid);
	        if(dFreeSlot == -1)
	        {
			    SendClientMessageEx(playerid, ROUGE, "You cannot carry more items!", "Vous ne pouvez pas porter plus d'objets !", "¡No puede llevar más objetos!", "O senhor não pode carregar mais objetos", "Italien", "Sie können nicht mehr Objekte tragen!");
			    return 1;
	        }
			#if defined WARNING_PICKUP
			switch(pPlayerInfos[playerid][pLangue])
			{
			 	case LANGUAGE_EN: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Collector", "If you pick up this collector, it'll waste its water.", "Pick up", "Cancel");
			 	case LANGUAGE_FR: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Collecteur", "Si vous ramassez ce collecteur, son eau sera perdue.", "Ramasser", "Annuler");
			 	case LANGUAGE_ES: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Espagnol", "Espagnol", "Ok", "");
			 	case LANGUAGE_PG: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Portugais", "Portugais", "Ok", "");
				case LANGUAGE_IT: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Italien", "Italien", "Ok", "");
				case LANGUAGE_DE: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Allemand", "Allemand" , "Ok", "");
			}
			#else
			ApplyAnimation(playerid, "CARRY", "liftup", 3.0, 0, 0, 0, 0, 0);
		    GivePlayerSlotObject(playerid, 95, dFreeSlot);
        	DestroyCollector(pAroundItems[playerid][0][0]);
			#endif
	    }
	    else if(pAroundItems[playerid][0][1] == 5)//Si cet objet est un coffre fort
	    {
	        new dFreeSlot = GetPlayerNextFreeSlot(playerid);
	        if(dFreeSlot == -1)
	        {
			    SendClientMessageEx(playerid, ROUGE, "You cannot carry more items!", "Vous ne pouvez pas porter plus d'objets !", "¡No puede llevar más objetos!", "O senhor não pode carregar mais objetos", "Italien", "Sie können nicht mehr Objekte tragen!");
			    return 1;
	        }
	        if(!dSafeInfos[pAroundItems[playerid][0][0]][bOpenSafe])
	        {
	            ShowPlayerTextInfo(playerid, 5000, "~r~Open the safe before you pick it up.", "~r~Ouvrez ce coffre avant de le ramasser.", "Espagnol", "O senhor tem que abrir essa caixa forte antes de apanha-lo !", "Italien", "Allemand");
	            return 1;
	        }
	        if(!IsSafeEmpty(pAroundItems[playerid][0][0]))
	        {
	            ShowPlayerTextInfo(playerid, 5000, "~r~Take all the items out before you pick the safe up.", "~r~Videz ce coffre avant de le ramasser.",  "Espagnol", "O senhor tem que esvaziar este cofre antes de apanha-lo.", "Italien", "Allemand");
	            return 1;
	        }
			ApplyAnimation(playerid, "CARRY", "liftup", 3.0, 0, 0, 0, 0, 0);
		    GivePlayerSlotObject(playerid, 97, dFreeSlot);
        	DestroySafe(pAroundItems[playerid][0][0]);
	    }
	    else if(pAroundItems[playerid][0][1] == 6)//Si cet objet est de l'or
	    {
			new gold[Or];
			MEM_get_arr(LIST_IT_data_ptr(nodeFound[playerid]), _, gold);
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
			LogInfo(true, "[JOUEUR]%s ramasse %.1fg d'or", GetName(playerid), floatdiv(gold[dOrAmount], 10));
		    GivePlayerGold(playerid, gold[dOrAmount]);
        	DestroyGold(nodeFound[playerid]);
	    }
	    else if(pAroundItems[playerid][0][1] == 7)//Si cet objet est un broyeur
	    {
	        new dFreeSlot = GetPlayerNextFreeSlot(playerid);
	        if(dFreeSlot == -1)
	        {
			    SendClientMessageEx(playerid, ROUGE, "You cannot carry more items!", "Vous ne pouvez pas porter plus d'objets !", "¡No puede llevar más objetos!", "O senhor não pode carregar mais objetos", "Italien", "Sie können nicht mehr Objekte tragen!");
			    return 1;
	        }
			#if defined WARNING_PICKUP
			switch(pPlayerInfos[playerid][pLangue])
			{
			 	case LANGUAGE_EN: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Shredder", "If you pick up this shredder, it'll waste its gas.", "Pick up", "Cancel");
			 	case LANGUAGE_FR: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Broyeur", "Si vous ramassez ce broyeur, le carburant sera perdu.", "Ramasser", "Annuler");
			 	case LANGUAGE_ES: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Espagnol", "Espagnol", "Ok", "");
			 	case LANGUAGE_PG: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Portugais", "Portugais", "Ok", "");
				case LANGUAGE_IT: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Italien", "Italien", "Ok", "");
				case LANGUAGE_DE: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Allemand", "Allemand" , "Ok", "");
			}
			#else
			ApplyAnimation(playerid, "CARRY", "liftup", 3.0, 0, 0, 0, 0, 0);
		    GivePlayerSlotObject(playerid, 117, dFreeSlot);
        	DestroyShredder(pAroundItems[playerid][0][0]);
        	#endif
	    }
	    else if(pAroundItems[playerid][0][1] == 8)//Si cet objet est une étagère à armes
	    {
	        new dFreeSlot = GetPlayerNextFreeSlot(playerid);
	        if(dFreeSlot == -1)
	        {
			    SendClientMessageEx(playerid, ROUGE, "You cannot carry more items!", "Vous ne pouvez pas porter plus d'objets !", "¡No puede llevar más objetos!", "O senhor não pode carregar mais objetos", "Italien", "Sie können nicht mehr Objekte tragen!");
			    return 1;
	        }
	        if(!IsRackEmpty(pAroundItems[playerid][0][0]))
	        {
	            ShowPlayerTextInfo(playerid, 5000, "~r~Unload the gunrack before you pick it up!", "~r~Videz l'étagère avant de la ramasser !", "Espagnol", "O senhor tem que abrir essa caixa forte antes de apanha-lo !", "Italien", "Allemand");
	            return 1;
	        }
			ApplyAnimation(playerid, "CARRY", "liftup", 3.0, 0, 0, 0, 0, 0);
		    GivePlayerSlotObject(playerid, 127, dFreeSlot);
        	DestroyGunRack(pAroundItems[playerid][0][0]);
	    }
	    else if(pAroundItems[playerid][0][1] == 9)//Si cet objet est un brasero
	    {
	        new dFreeSlot = GetPlayerNextFreeSlot(playerid);
	        if(dFreeSlot == -1)
	        {
			    SendClientMessageEx(playerid, ROUGE, "You cannot carry more items!", "Vous ne pouvez pas porter plus d'objets !", "¡No puede llevar más objetos!", "O senhor não pode carregar mais objetos", "Italien", "Sie können nicht mehr Objekte tragen!");
			    return 1;
	        }
			ApplyAnimation(playerid, "CARRY", "liftup", 3.0, 0, 0, 0, 0, 0);
		    GivePlayerSlotObject(playerid, 128, dFreeSlot);
        	DestroyBrasero(pAroundItems[playerid][0][0]);
	    }
	    else if(pAroundItems[playerid][0][1] == 10)//Si cet objet est une décoration
	    {
	        new dFreeSlot = GetPlayerNextFreeSlot(playerid);
	        if(dFreeSlot == -1)
	        {
			    SendClientMessageEx(playerid, ROUGE, "You cannot carry more items!", "Vous ne pouvez pas porter plus d'objets !", "¡No puede llevar más objetos!", "O senhor não pode carregar mais objetos", "Italien", "Sie können nicht mehr Objekte tragen!");
			    return 1;
	        }
			new Pointer:pt = LIST_IT_data_ptr(nodeFound[playerid]);
			new furn[Furniture];
			MEM_get_arr(pt, _, furn);
			ApplyAnimation(playerid, "CARRY", "liftup", 3.0, 0, 0, 0, 0, 0);
		    GivePlayerSlotObject(playerid, GetFurnitureObjectID(furn[dFurnitureType], true), dFreeSlot);
        	DestroyFurniture(nodeFound[playerid]);
	    }
	    else if(pAroundItems[playerid][0][1] == 11)//Si cet objet est un Fauteuil
	    {
	        new dFreeSlot = GetPlayerNextFreeSlot(playerid);
			new Pointer: pt = LIST_IT_data_ptr(nodeFound[playerid]);
			new seat[Seat];
			MEM_get_arr(pt, _, seat);
	        if(dFreeSlot == -1)
	        {
			    SendClientMessageEx(playerid, ROUGE, "You cannot carry more items!", "Vous ne pouvez pas porter plus d'objets !", "¡No puede llevar más objetos!", "O senhor não pode carregar mais objetos", "Italien", "Sie können nicht mehr Objekte tragen!");
			    return 1;
	        }
			ApplyAnimation(playerid, "CARRY", "liftup", 3.0, 0, 0, 0, 0, 0);
		    switch(seat[dSeatType])
		    {
		        case 1729:
				{
					GivePlayerSlotObject(playerid, 155, dFreeSlot);
				}
		    }
        	DestroySeat(nodeFound[playerid]);
	    }
	    else if(pAroundItems[playerid][0][1] == 12)//Si cet objet est un refrigerateur
	    {
	        new dFreeSlot = GetPlayerNextFreeSlot(playerid);
	        if(dFreeSlot == -1)
	        {
			    SendClientMessageEx(playerid, ROUGE, "You cannot carry more items!", "Vous ne pouvez pas porter plus d'objets !", "¡No puede llevar más objetos!", "O senhor não pode carregar mais objetos", "Italien", "Sie können nicht mehr Objekte tragen!");
			    return 1;
	        }
			#if defined WARNING_PICKUP
			switch(pPlayerInfos[playerid][pLangue])
			{
			 	case LANGUAGE_EN: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Fridge", "If you pick up this fridge, it'll waste all its content.", "Pick up", "Cancel");
			 	case LANGUAGE_FR: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Réfrigérateur", "Si vous ramassez ce réfrigérateur, toute la nourriture sera perdue.", "Ramasser", "Annuler");
			 	case LANGUAGE_ES: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Espagnol", "Espagnol", "Ok", "");
			 	case LANGUAGE_PG: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Portugais", "Portugais", "Ok", "");
				case LANGUAGE_IT: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Italien", "Italien", "Ok", "");
				case LANGUAGE_DE: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Allemand", "Allemand" , "Ok", "");
			}
			#else
			ApplyAnimation(playerid, "CARRY", "liftup", 3.0, 0, 0, 0, 0, 0);
		    GivePlayerSlotObject(playerid, 130, dFreeSlot);
	     	DestroyFridge(pAroundItems[playerid][0][0]);
			#endif
	    }
	}
	else
	{
	    new string[350];
		switch(pPlayerInfos[playerid][pLangue])
			{
		   		case LANGUAGE_EN:
   				{
   				    for(new i = 0; i < dSlot; i ++)
   				    {
   				        if(IsMultiple(i, 2)) strcat(string, "{CC0000}");
   				        else strcat(string, "{FFFFFF}");
   				        if(pAroundItems[playerid][i][1] == 0) strcat(string, NoNewLineSign(aObjects[dItems[pAroundItems[playerid][i][0]][ItemID]][ObjectEnName]));
   				        else if(pAroundItems[playerid][i][1] == 1) strcat(string, NoNewLineSign(aObjects[GetObjectFromWeapon(dGuns[pAroundItems[playerid][i][0]][WeaponID])][ObjectEnName]));
   				        else if(pAroundItems[playerid][i][1] == 2) strcat(string, "Bed");
   				        else if(pAroundItems[playerid][i][1] == 3) strcat(string, "Tent");
   				        else if(pAroundItems[playerid][i][1] == 4) strcat(string, "Water collector");
   				        else if(pAroundItems[playerid][i][1] == 5) strcat(string, "Safe");
   				        else if(pAroundItems[playerid][i][1] == 6) strcat(string, "Gold!");
   				        else if(pAroundItems[playerid][i][1] == 7) strcat(string, "Shredder");
   				        else if(pAroundItems[playerid][i][1] == 8) strcat(string, "Gunrack");
   				        else if(pAroundItems[playerid][i][1] == 9) strcat(string, "Brazier");
   				        else if(pAroundItems[playerid][i][1] == 10) strcat(string, NoNewLineSign(aObjects[GetFurnitureObjectID(dFurn[pAroundItems[playerid][i][0]][dFurnitureID], true)][ObjectEnName]));
   				        else if(pAroundItems[playerid][i][1] == 11) strcat(string, "Seat");
   				        else if(pAroundItems[playerid][i][1] == 12) strcat(string, "Fridge");
   				        if(i != dSlot - 1) strcat(string, "\n");
   				    }
   					ShowPlayerDialog(playerid, 6, DIALOG_STYLE_LIST, "Objects", string, "Pick-up", "Cancel");
				}
			    case LANGUAGE_FR:
   				{
   				    for(new i = 0; i < dSlot; i ++)
   				    {
   				        if(IsMultiple(i, 2)) strcat(string, "{CC0000}");
   				        else strcat(string, "{FFFFFF}");
   				        if(pAroundItems[playerid][i][1] == 0) strcat(string, NoNewLineSign(aObjects[dItems[pAroundItems[playerid][i][0]][ItemID]][ObjectFrName]));
   				        else if(pAroundItems[playerid][i][1] == 1) strcat(string, NoNewLineSign(aObjects[GetObjectFromWeapon(dGuns[pAroundItems[playerid][i][0]][WeaponID])][ObjectFrName]));
   				        else if(pAroundItems[playerid][i][1] == 2) strcat(string, "Lit");
   				        else if(pAroundItems[playerid][i][1] == 3) strcat(string, "Tente");
   				        else if(pAroundItems[playerid][i][1] == 4) strcat(string, "Récupérateur d'eau");
   				        else if(pAroundItems[playerid][i][1] == 5) strcat(string, "Coffre fort");
   				        else if(pAroundItems[playerid][i][1] == 6) strcat(string, "De l'or !");
   				        else if(pAroundItems[playerid][i][1] == 7) strcat(string, "Broyeur");
   				        else if(pAroundItems[playerid][i][1] == 8) strcat(string, "Étagère");
   				        else if(pAroundItems[playerid][i][1] == 9) strcat(string, "Brasero");
   				        else if(pAroundItems[playerid][i][1] == 10) strcat(string, NoNewLineSign(aObjects[GetFurnitureObjectID(dFurn[pAroundItems[playerid][i][0]][dFurnitureID], true)][ObjectFrName]));
   				        else if(pAroundItems[playerid][i][1] == 11) strcat(string, "Siège");
   				        else if(pAroundItems[playerid][i][1] == 12) strcat(string, "Refrigerateur");
   				        if(i != dSlot - 1) strcat(string, "\n");
   				    }
   					ShowPlayerDialog(playerid, 6, DIALOG_STYLE_LIST,"Objets", string, "Ramasser", "Annuler");
				}
			    case LANGUAGE_ES:
   				{
   				    for(new i = 0; i < dSlot; i ++)
   				    {
   				        if(IsMultiple(i, 2)) strcat(string, "{CC0000}");
   				        else strcat(string, "{FFFFFF}");
   				        if(pAroundItems[playerid][i][1] == 0) strcat(string, NoNewLineSign(aObjects[dItems[pAroundItems[playerid][i][0]][ItemID]][ObjectEsName]));
   				        else if(pAroundItems[playerid][i][1] == 1) strcat(string, NoNewLineSign(aObjects[GetObjectFromWeapon(dGuns[pAroundItems[playerid][i][0]][WeaponID])][ObjectEsName]));
   				        else if(pAroundItems[playerid][i][1] == 2) strcat(string, "Cama");
   				        else if(pAroundItems[playerid][i][1] == 3) strcat(string, "Tienda");
   				        else if(pAroundItems[playerid][i][1] == 4) strcat(string, "Espagnol");
   				        else if(pAroundItems[playerid][i][1] == 5) strcat(string, "Caja furte");
   				        else if(pAroundItems[playerid][i][1] == 6) strcat(string, "¡Oro!");
   				        else if(pAroundItems[playerid][i][1] == 7) strcat(string, "Espagnol");
   				        else if(pAroundItems[playerid][i][1] == 8) strcat(string, "Espagnol");
   				        else if(pAroundItems[playerid][i][1] == 9) strcat(string, "Brasero");
   				        else if(pAroundItems[playerid][i][1] == 10) strcat(string, NoNewLineSign(aObjects[GetFurnitureObjectID(dFurn[pAroundItems[playerid][i][0]][dFurnitureID], true)][ObjectEsName]));
   				        else if(pAroundItems[playerid][i][1] == 11) strcat(string, "Espagnol");
   				        else if(pAroundItems[playerid][i][1] == 12) strcat(string, "Espagnol");
   				        if(i != dSlot - 1) strcat(string, "\n");
   				    }
   					ShowPlayerDialog(playerid, 6, DIALOG_STYLE_LIST, "Objetos", string, "Recoger", "Cancelar");
				}
			    case LANGUAGE_PG:
   				{
   				    for(new i = 0; i < dSlot; i ++)
   				    {
   				        if(IsMultiple(i, 2)) strcat(string, "{CC0000}");
   				        else strcat(string, "{FFFFFF}");
   				        if(pAroundItems[playerid][i][1] == 0) strcat(string, NoNewLineSign(aObjects[dItems[pAroundItems[playerid][i][0]][ItemID]][ObjectPgName]));
   				        else if(pAroundItems[playerid][i][1] == 1) strcat(string, NoNewLineSign(aObjects[GetObjectFromWeapon(dGuns[pAroundItems[playerid][i][0]][WeaponID])][ObjectPgName]));
   				        else if(pAroundItems[playerid][i][1] == 2) strcat(string, "Cama");
   				        else if(pAroundItems[playerid][i][1] == 3) strcat(string, "Tenda");
   				        else if(pAroundItems[playerid][i][1] == 4) strcat(string, "Portugais");
   				        else if(pAroundItems[playerid][i][1] == 5) strcat(string, "Portugais");
   				        else if(pAroundItems[playerid][i][1] == 6) strcat(string, "Ouro !");
   				        else if(pAroundItems[playerid][i][1] == 7) strcat(string, "Portugais");
   				        else if(pAroundItems[playerid][i][1] == 8) strcat(string, "Portugais");
   				        else if(pAroundItems[playerid][i][1] == 9) strcat(string, "Portugais");
   				        else if(pAroundItems[playerid][i][1] == 10) strcat(string, NoNewLineSign(aObjects[GetFurnitureObjectID(dFurn[pAroundItems[playerid][i][0]][dFurnitureID], true)][ObjectPgName]));
   				        else if(pAroundItems[playerid][i][1] == 11) strcat(string, "Portugais");
   				        else if(pAroundItems[playerid][i][1] == 12) strcat(string, "Portugais");
   				        if(i != dSlot - 1) strcat(string, "\n");
   				    }
   					ShowPlayerDialog(playerid, 6, DIALOG_STYLE_LIST, "Portugais", string, "Portugais", "Portugais");
				}
			    case LANGUAGE_IT:
   				{
   				    for(new i = 0; i < dSlot; i ++)
   				    {
   				        if(IsMultiple(i, 2)) strcat(string, "{CC0000}");
   				        else strcat(string, "{FFFFFF}");
   				        if(pAroundItems[playerid][i][1] == 0) strcat(string, NoNewLineSign(aObjects[dItems[pAroundItems[playerid][i][0]][ItemID]][ObjectItName]));
   				        else if(pAroundItems[playerid][i][1] == 1) strcat(string, NoNewLineSign(aObjects[GetObjectFromWeapon(dGuns[pAroundItems[playerid][i][0]][WeaponID])][ObjectItName]));
   				        else if(pAroundItems[playerid][i][1] == 2) strcat(string, "Letto");
   				        else if(pAroundItems[playerid][i][1] == 3) strcat(string, "Tenda");
   				        else if(pAroundItems[playerid][i][1] == 4) strcat(string, "Italien");
   				        else if(pAroundItems[playerid][i][1] == 5) strcat(string, "Sicuro");
   				        else if(pAroundItems[playerid][i][1] == 6) strcat(string, "Oro !");
   				        else if(pAroundItems[playerid][i][1] == 7) strcat(string, "Italien");
   				        else if(pAroundItems[playerid][i][1] == 8) strcat(string, "Italien");
   				        else if(pAroundItems[playerid][i][1] == 9) strcat(string, "Italien");
   				        else if(pAroundItems[playerid][i][1] == 10) strcat(string, NoNewLineSign(aObjects[GetFurnitureObjectID(dFurn[pAroundItems[playerid][i][0]][dFurnitureID], true)][ObjectItName]));
   				        else if(pAroundItems[playerid][i][1] == 11) strcat(string, "Italien");
   				        else if(pAroundItems[playerid][i][1] == 12) strcat(string, "Italien");
   				        if(i != dSlot - 1) strcat(string, "\n");
   				    }
   					ShowPlayerDialog(playerid, 6, DIALOG_STYLE_LIST, "Oggeti", string, "Italien", "Italien");
				}
			    case LANGUAGE_DE:
   				{
   				    for(new i = 0; i < dSlot; i ++)
   				    {
   				        if(IsMultiple(i, 2)) strcat(string, "{CC0000}");
   				        else strcat(string, "{FFFFFF}");
   				        if(pAroundItems[playerid][i][1] == 0) strcat(string, NoNewLineSign(aObjects[dItems[pAroundItems[playerid][i][0]][ItemID]][ObjectDeName]));
   				        else if(pAroundItems[playerid][i][1] == 1) strcat(string, NoNewLineSign(aObjects[GetObjectFromWeapon(dGuns[pAroundItems[playerid][i][0]][WeaponID])][ObjectDeName]));
   				        else if(pAroundItems[playerid][i][1] == 2) strcat(string, "Bett");
   				        else if(pAroundItems[playerid][i][1] == 3) strcat(string, "Zelt");
   				        else if(pAroundItems[playerid][i][1] == 4) strcat(string, "Allemand");
   				        else if(pAroundItems[playerid][i][1] == 5) strcat(string, "Safe");
   				        else if(pAroundItems[playerid][i][1] == 6) strcat(string, "Gold!");
   				        else if(pAroundItems[playerid][i][1] == 7) strcat(string, "Allemand");
   				        else if(pAroundItems[playerid][i][1] == 8) strcat(string, "Regal");
   				        else if(pAroundItems[playerid][i][1] == 9) strcat(string, "Allemand");
   				        else if(pAroundItems[playerid][i][1] == 10) strcat(string, NoNewLineSign(aObjects[GetFurnitureObjectID(dFurn[pAroundItems[playerid][i][0]][dFurnitureID], true)][ObjectDeName]));
   				        else if(pAroundItems[playerid][i][1] == 11) strcat(string, "Allemand");
   				        else if(pAroundItems[playerid][i][1] == 12) strcat(string, "Allemand");
   				        if(i != dSlot - 1) strcat(string, "\n");
   				    }
   					ShowPlayerDialog(playerid, 6, DIALOG_STYLE_LIST, "Objekte", string, "Abholen", "Allemand");
				}
		   	}
	}
	return 1;
}

GetObjectFromWeapon(weaponid)
{
	new dWeapons[22][2] =
	{
  		{3, 3},
  		{4, 4},
  		{5, 5},
  		{8, 6},
  		{9, 7},
  		{16, 8},
  		{18, 9},
  		{22, 10},
  		{23, 11},
  		{24, 12},
  		{25, 13},
  		{26, 14},
  		{27, 15},
  		{28, 16},
  		{29, 17},
  		{30, 18},
  		{31, 19},
  		{32, 20},
  		{33, 21},
  		{34, 22},
  		{35, 23},
  		{38, 24}
	};
	for(new i = 0; i < 22; i ++) if(weaponid == dWeapons[i][0]) return dWeapons[i][1];
	return 1;
}

//---VÊTEMENTS
UpdatePlayerClothesTexts(playerid, slotid)
{
	switch(slotid)
	{
		case 0://SKIN
		{
		    PlayerTextDrawSetPreviewModel(playerid, tPlayerHUD[playerid][0], pPlayerInfos[playerid][pSkin]);
			PlayerTextDrawSetPreviewRot(playerid, tPlayerHUD[playerid][0], 0.0, 0.0, 0.0, 1.0);
			PlayerTextDrawShow(playerid, tPlayerHUD[playerid][0]);
		}
		case 1://CHAPEAU
		{
			PlayerTextDrawSetPreviewModel(playerid, tPlayerHUD[playerid][5], aObjects[pPlayerInfos[playerid][pChapeau]][ObjectModelID]);
			PlayerTextDrawSetPreviewRot(playerid, tPlayerHUD[playerid][5], aObjects[pPlayerInfos[playerid][pChapeau]][ObjectRotX], aObjects[pPlayerInfos[playerid][pChapeau]][ObjectRotY], aObjects[pPlayerInfos[playerid][pChapeau]][ObjectRotZ], aObjects[pPlayerInfos[playerid][pChapeau]][ObjectZoom]);
			//---
			if(pPlayerInfos[playerid][pChapeau] != 0) PlayerTextDrawSetSelectable(playerid, tPlayerHUD[playerid][5], true);
			else PlayerTextDrawSetSelectable(playerid, tPlayerHUD[playerid][5], false);
			//---
			PlayerTextDrawShow(playerid, tPlayerHUD[playerid][5]);
		}
		case 2://LUNETTES
		{
			PlayerTextDrawSetPreviewModel(playerid, tPlayerHUD[playerid][6], aObjects[pPlayerInfos[playerid][pLunettes]][ObjectModelID]);
			PlayerTextDrawSetPreviewRot(playerid, tPlayerHUD[playerid][6], aObjects[pPlayerInfos[playerid][pLunettes]][ObjectRotX], aObjects[pPlayerInfos[playerid][pLunettes]][ObjectRotY], aObjects[pPlayerInfos[playerid][pLunettes]][ObjectRotZ], aObjects[pPlayerInfos[playerid][pLunettes]][ObjectZoom]);
			//---
			if(pPlayerInfos[playerid][pLunettes] != 0) PlayerTextDrawSetSelectable(playerid, tPlayerHUD[playerid][6], true);
			else PlayerTextDrawSetSelectable(playerid, tPlayerHUD[playerid][6], false);
			//---
			PlayerTextDrawShow(playerid, tPlayerHUD[playerid][6]);
		}
		case 3://MASQUE
		{
			PlayerTextDrawSetPreviewModel(playerid, tPlayerHUD[playerid][7], aObjects[pPlayerInfos[playerid][pMasque]][ObjectModelID]);
			PlayerTextDrawSetPreviewRot(playerid, tPlayerHUD[playerid][7], aObjects[pPlayerInfos[playerid][pMasque]][ObjectRotX], aObjects[pPlayerInfos[playerid][pMasque]][ObjectRotY], aObjects[pPlayerInfos[playerid][pMasque]][ObjectRotZ], aObjects[pPlayerInfos[playerid][pMasque]][ObjectZoom]);
			//---
			if(pPlayerInfos[playerid][pMasque] != 0) PlayerTextDrawSetSelectable(playerid, tPlayerHUD[playerid][7], true);
			else PlayerTextDrawSetSelectable(playerid, tPlayerHUD[playerid][7], false);
			//---
			PlayerTextDrawShow(playerid, tPlayerHUD[playerid][7]);
		}
		case 4://TORSE
		{
			PlayerTextDrawSetPreviewModel(playerid, tPlayerHUD[playerid][8], aObjects[pPlayerInfos[playerid][pTorse]][ObjectModelID]);
			PlayerTextDrawSetPreviewRot(playerid, tPlayerHUD[playerid][8], aObjects[pPlayerInfos[playerid][pTorse]][ObjectRotX], aObjects[pPlayerInfos[playerid][pTorse]][ObjectRotY], aObjects[pPlayerInfos[playerid][pTorse]][ObjectRotZ], aObjects[pPlayerInfos[playerid][pTorse]][ObjectZoom]);
			//---
			if(pPlayerInfos[playerid][pTorse] != 0) PlayerTextDrawSetSelectable(playerid, tPlayerHUD[playerid][8], true);
			else PlayerTextDrawSetSelectable(playerid, tPlayerHUD[playerid][8], false);
			//---
			PlayerTextDrawShow(playerid, tPlayerHUD[playerid][8]);
		}
	}
}

GivePlayerClothe(playerid, slot, objectid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, Float:sx, Float:sy, Float:sz)
{
	switch(slot)
	{
		case 1://CHAPEAU
		{
			if(pPlayerInfos[playerid][pChapeau] != 0) PlayerDropObject(playerid, pPlayerInfos[playerid][pChapeau], floatdiv(RandomEx(5, 20), 10));
 			pPlayerInfos[playerid][fPosChapeau][0] = x;
			pPlayerInfos[playerid][fPosChapeau][1] = y;
			pPlayerInfos[playerid][fPosChapeau][2] = z;
			pPlayerInfos[playerid][fPosChapeau][3] = rx;
			pPlayerInfos[playerid][fPosChapeau][4] = ry;
			pPlayerInfos[playerid][fPosChapeau][5] = rz;
			pPlayerInfos[playerid][fPosChapeau][6] = sx;
			pPlayerInfos[playerid][fPosChapeau][7] = sy;
			pPlayerInfos[playerid][fPosChapeau][8] = sz;
			pPlayerInfos[playerid][pChapeau] = objectid;
		    S_SetPlayerAttachedObject(playerid, HAT_OBJECT_ID, aObjects[objectid][ObjectModelID], 2, x, y, z, rx, ry, rz, sx, sy, sz, -1, -1);
		    EditAttachedObject(playerid, HAT_OBJECT_ID);
		}
		case 2://LUNETTES
		{
			if(pPlayerInfos[playerid][pLunettes] != 0) PlayerDropObject(playerid, pPlayerInfos[playerid][pLunettes], floatdiv(RandomEx(5, 20), 10));
 			pPlayerInfos[playerid][fPosLunettes][0] = x;
			pPlayerInfos[playerid][fPosLunettes][1] = y;
			pPlayerInfos[playerid][fPosLunettes][2] = z;
			pPlayerInfos[playerid][fPosLunettes][3] = rx;
			pPlayerInfos[playerid][fPosLunettes][4] = ry;
			pPlayerInfos[playerid][fPosLunettes][5] = rz;
			pPlayerInfos[playerid][fPosLunettes][6] = sx;
			pPlayerInfos[playerid][fPosLunettes][7] = sy;
			pPlayerInfos[playerid][fPosLunettes][8] = sz;
			pPlayerInfos[playerid][pLunettes] = objectid;
		    S_SetPlayerAttachedObject(playerid, GLASSES_OBJECT_ID, aObjects[objectid][ObjectModelID], 2, x, y, z, rx, ry, rz, sx, sy, sz, -1, -1);
		    EditAttachedObject(playerid, GLASSES_OBJECT_ID);
		}
		case 3://MASQUE
		{
			if(pPlayerInfos[playerid][pMasque] != 0) PlayerDropObject(playerid, pPlayerInfos[playerid][pMasque], floatdiv(RandomEx(5, 20), 10));
 			pPlayerInfos[playerid][fPosMasque][0] = x;
			pPlayerInfos[playerid][fPosMasque][1] = y;
			pPlayerInfos[playerid][fPosMasque][2] = z;
			pPlayerInfos[playerid][fPosMasque][3] = rx;
			pPlayerInfos[playerid][fPosMasque][4] = ry;
			pPlayerInfos[playerid][fPosMasque][5] = rz;
			pPlayerInfos[playerid][fPosMasque][6] = sx;
			pPlayerInfos[playerid][fPosMasque][7] = sy;
			pPlayerInfos[playerid][fPosMasque][8] = sz;
			pPlayerInfos[playerid][pMasque] = objectid;
		    S_SetPlayerAttachedObject(playerid, MASK_OBJECT_ID, aObjects[objectid][ObjectModelID], 2, x, y, z, rx, ry, rz, sx, sy, sz, -1, -1);
		    EditAttachedObject(playerid, MASK_OBJECT_ID);
		}
		case 4://TORSE
		{
			if(pPlayerInfos[playerid][pTorse] != 0) PlayerDropObject(playerid, pPlayerInfos[playerid][pTorse], floatdiv(RandomEx(5, 20), 10));
 			pPlayerInfos[playerid][fPosTorse][0] = x;
			pPlayerInfos[playerid][fPosTorse][1] = y;
			pPlayerInfos[playerid][fPosTorse][2] = z;
			pPlayerInfos[playerid][fPosTorse][3] = rx;
			pPlayerInfos[playerid][fPosTorse][4] = ry;
			pPlayerInfos[playerid][fPosTorse][5] = rz;
			pPlayerInfos[playerid][fPosTorse][6] = sx;
			pPlayerInfos[playerid][fPosTorse][7] = sy;
			pPlayerInfos[playerid][fPosTorse][8] = sz;
			pPlayerInfos[playerid][pTorse] = objectid;
		    S_SetPlayerAttachedObject(playerid, TORSO_OBJECT_ID, aObjects[objectid][ObjectModelID], 1, x, y, z, rx, ry, rz, sx, sy, sz, -1, -1);
		    EditAttachedObject(playerid, TORSO_OBJECT_ID);
		}
	}
}

DressPlayer(playerid, part)
{
	switch(part)
	{
	    case 0://SKIN
	    {
	        SetPlayerSkin(playerid, pPlayerInfos[playerid][pSkin]);
	    }
	    case 1://CHAPEAU
	    {
	        S_RemovePlayerAttachedObject(playerid, HAT_OBJECT_ID);
	        if(pPlayerInfos[playerid][pChapeau] != 0) S_SetPlayerAttachedObject(playerid, HAT_OBJECT_ID, aObjects[pPlayerInfos[playerid][pChapeau]][ObjectModelID], 2, pPlayerInfos[playerid][fPosChapeau][0], pPlayerInfos[playerid][fPosChapeau][1], pPlayerInfos[playerid][fPosChapeau][2], pPlayerInfos[playerid][fPosChapeau][3], pPlayerInfos[playerid][fPosChapeau][4], pPlayerInfos[playerid][fPosChapeau][5], pPlayerInfos[playerid][fPosChapeau][6], pPlayerInfos[playerid][fPosChapeau][7], pPlayerInfos[playerid][fPosChapeau][8], -1, -1);
	    }
	    case 2://LUNETTES
	    {
	        S_RemovePlayerAttachedObject(playerid, GLASSES_OBJECT_ID);
	        if(pPlayerInfos[playerid][pLunettes] != 0) S_SetPlayerAttachedObject(playerid, GLASSES_OBJECT_ID, aObjects[pPlayerInfos[playerid][pLunettes]][ObjectModelID], 2, pPlayerInfos[playerid][fPosLunettes][0], pPlayerInfos[playerid][fPosLunettes][1], pPlayerInfos[playerid][fPosLunettes][2], pPlayerInfos[playerid][fPosLunettes][3], pPlayerInfos[playerid][fPosLunettes][4], pPlayerInfos[playerid][fPosLunettes][5], pPlayerInfos[playerid][fPosLunettes][6], pPlayerInfos[playerid][fPosLunettes][7], pPlayerInfos[playerid][fPosLunettes][8], -1, -1);
	    }
	    case 3://MASQUE
	    {
	        S_RemovePlayerAttachedObject(playerid, MASK_OBJECT_ID);
	        if(pPlayerInfos[playerid][pMasque] != 0) S_SetPlayerAttachedObject(playerid, MASK_OBJECT_ID, aObjects[pPlayerInfos[playerid][pMasque]][ObjectModelID], 2, pPlayerInfos[playerid][fPosMasque][0], pPlayerInfos[playerid][fPosMasque][1], pPlayerInfos[playerid][fPosMasque][2], pPlayerInfos[playerid][fPosMasque][3], pPlayerInfos[playerid][fPosMasque][4], pPlayerInfos[playerid][fPosMasque][5], pPlayerInfos[playerid][fPosMasque][6], pPlayerInfos[playerid][fPosMasque][7], pPlayerInfos[playerid][fPosMasque][8], -1, -1);
	    }
	    case 4://TORSE
	    {
	        S_RemovePlayerAttachedObject(playerid, TORSO_OBJECT_ID);
	        if(pPlayerInfos[playerid][pTorse] != 0) S_SetPlayerAttachedObject(playerid, TORSO_OBJECT_ID, aObjects[pPlayerInfos[playerid][pTorse]][ObjectModelID], 1, pPlayerInfos[playerid][fPosTorse][0], pPlayerInfos[playerid][fPosTorse][1], pPlayerInfos[playerid][fPosTorse][2], pPlayerInfos[playerid][fPosTorse][3], pPlayerInfos[playerid][fPosTorse][4], pPlayerInfos[playerid][fPosTorse][5], pPlayerInfos[playerid][fPosTorse][6], pPlayerInfos[playerid][fPosTorse][7], pPlayerInfos[playerid][fPosTorse][8], -1, -1);
	    }
	    case 5://ARME 1
	    {
			S_RemovePlayerAttachedObject(playerid, GUN1_OBJECT_ID);
			if(GetPlayerWeapon(playerid) != pPlayerInfos[playerid][pArme1][0] && pPlayerInfos[playerid][pArme1][0] != 0) AttachPlayerWeapon(playerid, pPlayerInfos[playerid][pArme1][0], GUN1_OBJECT_ID);
	    }
	    case 6://ARME 2
	    {
			S_RemovePlayerAttachedObject(playerid, GUN2_OBJECT_ID);
			if(GetPlayerWeapon(playerid) != pPlayerInfos[playerid][pArme2][0] && pPlayerInfos[playerid][pArme2][0] != 0) AttachPlayerWeapon(playerid, pPlayerInfos[playerid][pArme2][0], GUN2_OBJECT_ID);
	    }
	    case 7://ARME 3
	    {
			S_RemovePlayerAttachedObject(playerid, GUN3_OBJECT_ID);
			if(GetPlayerWeapon(playerid) != pPlayerInfos[playerid][pArme3][0] && pPlayerInfos[playerid][pArme3][0] != 0) AttachPlayerWeapon(playerid, pPlayerInfos[playerid][pArme3][0], GUN3_OBJECT_ID);
	    }
	    case 8://ARME 4
	    {
			S_RemovePlayerAttachedObject(playerid, GUN4_OBJECT_ID);
			if(GetPlayerWeapon(playerid) != pPlayerInfos[playerid][pArme4][0] && pPlayerInfos[playerid][pArme4][0] != 0) AttachPlayerWeapon(playerid, pPlayerInfos[playerid][pArme4][0], GUN4_OBJECT_ID);
	    }
	}
}

AttachPlayerWeapon(playerid, weaponid, slotid)
{
	enum WeaponPos
	{
	    dModelID,
		dBodyPart,
		Float:x,
		Float:y,
		Float:z,
		Float:rx,
		Float:ry,
		Float:rz
	}
	new aWeaponPos[][WeaponPos] =
	{
		{19300, 1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},//POING
		{331, 1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},//POING AMÉRICAIN
		{333, 7, -0.2848, 0.0382, -0.0914, 0.0, 90.0, 270.0},//CLUB DE GOLF
		{334, 7, 0.0903, 0.0899, -0.0914, 0.0, 90.0, 270.0},//MATRAQUE
		{335, 7, -0.0828, 0.0899, -0.0914, 0.0, 90.0, 270.0},//COUTEAU
		{336, 7, -0.0828, 0.0899, -0.0914, 0.0, 90.0, 270.0},//BATTE
		{337, 7, -0.0828, 0.0267, -0.1993, 0.0, 90.0, 180.0},//PELLE
		{338, 7, -0.0828, 0.0267, -0.1993, 0.0, 90.0, 180.0},//QUEUE
		{339, 7, -0.0854, 0.0371, -0.1505, 90.0, 60.0, 15.0},//KATANA
		{341, 7, -0.4333, 0.1525, -0.2142, 90.0, 0.0, 0.0},//TRONCONNEUSE
		{321, 7, -0.0690, 0.0347, -0.1654, 90.0, 90.0, 0.0},//GODE MAUVE
		{322, 7, 0.1035, -0.0542, -0.1654, 90.0, 90.0, 0.0},//PETIT GODE
		{323, 7, 0.1035, -0.0542, -0.1654, 90.0, 90.0, 0.0},//GODE BLANC
		{324, 7, 0.1035, -0.0542, -0.1654, 90.0, 90.0, 0.0},//GODE ARGENTÉ
		{325, 7, 0.1035, -0.0542, -0.1654, 90.0, 90.0, 0.0},//FLEURS
		{326, 7, 0.1035, -0.0542, -0.1654, 90.0, 90.0, 0.0},//CANNE
		{342, 1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},//GRENADE
		{343, 1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},//LACRYMO
		{344, 1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},//MOLOTOVS
		{19300, 1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},//...
		{19300, 1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},//...
		{19300, 1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},//...
		{346, 12, 0.2477, -0.0357, -0.0733, 270.0, 0.0, 0.0},//PISTOLET
		{347, 12, 0.1658, -0.0357, -0.0733, 270.0, 0.0, 0.0},//SILENCIEUX
		{348, 12, 0.1658, -0.0357, -0.0733, 270.0, 0.0, 0.0},//DEAGLE
		{349, 1, -0.1225, -0.1543, -0.1081, 0.0, 345.0, 0.0},//FUSIL À POMPE
		{350, 1, -0.1225, -0.1543, -0.0472, 0.0, 345.0, 0.0},//SAWN OFF
		{351, 1, -0.1225, -0.1543, -0.1081, 0.0, 345.0, 0.0},//SPAS 12
		{352, 8, 0.0820, -0.0033, 0.1159, 270.0, 0.0, 0.0},//UZI
		{353, 8, -0.0186, -0.1150, 0.1159, 270.0, 0.0, 0.0},//MP5
		{355, 1, -0.1225, -0.0901, 0.0359, 180.0, 345.0, 0.0},//AK-47
		{356, 1, -0.1225, -0.0901, 0.0359, 180.0, 345.0, 0.0},//M4
		{372, 8, 0.0820, -0.0033, 0.1159, 270.0, 0.0, 0.0},//TEC-9
		{357, 1, -0.1225, -0.1749, 0.0359, 270.0, 18.5918, 0.0},//FUSIL DE CHASSE
		{358, 1, -0.1225, -0.1749, 0.0359, 270.0, 18.5918, 0.0},//SNIPER
		{359, 1, 0.3667, -0.0225, 0.1114, 90.0, 0.0, 0.0},//RPG
		{360, 1, 0.3667, -0.0225, 0.1114, 90.0, 0.0, 0.0},//HEAT SEEKER
		{361, 1, -0.3851, -0.3565, 0.114, 90.0, 29.5, 0.0},//LANCE-FLAMMES
		{362, 1, -0.3851, -0.3565, 0.114, 90.0, 29.5, 0.0},//MINIGUN
		{363, 1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},//CHARGES EXPLOSIVES
		{19300, 1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},//...
		{365, 7, -0.0035, -0.0190, -0.1908, 0.0, 270.0, 0.0},//BOMBE DE PEINTURE
		{366, 7, -0.0035, -0.0190, -0.1908, 0.0, 270.0, 0.0}//EXTINCTEUR
	};
	S_SetPlayerAttachedObject(playerid, slotid, aWeaponPos[weaponid][dModelID], aWeaponPos[weaponid][dBodyPart], aWeaponPos[weaponid][x], aWeaponPos[weaponid][y], aWeaponPos[weaponid][z], aWeaponPos[weaponid][rx], aWeaponPos[weaponid][ry], aWeaponPos[weaponid][rz], 1.0, 1.0, 1.0, -1, -1);
}

//---SYSTÈME D'OBJETS---//
GetObjectParts(objectid, &part1, &part1amount, &part2, &part2amount, &part3, &part3amount)
{
	switch(objectid)
	{
		case 4://Couteau
		{
		    part1 = 103;
		    part1amount = 1;
		    part2 = 0;
		    part2amount = 0;
		    part3 = 0;
		    part3amount = 0;
		    return 1;
		}
		case 6://Katana
		{
		    part1 = 103;
		    part1amount = 2;
		    part2 = 0;
		    part2amount = 0;
		    part3 = 0;
		    part3amount = 0;
		    return 1;
		}
		case 10, 11, 12://Pistolets
		{
		    part1 = 103;
		    part1amount = 3;
		    part2 = 0;
		    part2amount = 0;
		    part3 = 0;
		    part3amount = 0;
		    return 1;
		}
		case 13, 14://Shotgun - Sawn off
		{
		    part1 = 103;
		    part1amount = 4;
		    part2 = 71;
		    part2amount = 1;
		    part3 = 0;
		    part3amount = 0;
		    return 1;
		}
		case 15://Spas 12
		{
		    part1 = 103;
		    part1amount = 5;
		    part2 = 0;
		    part2amount = 0;
		    part3 = 0;
		    part3amount = 0;
		    return 1;
		}
		case 16, 20://UZI - Tec9
		{
		    part1 = 103;
		    part1amount = 3;
		    part2 = 0;
		    part2amount = 0;
		    part3 = 0;
		    part3amount = 0;
		    return 1;
		}
		case 17://MP5
		{
		    part1 = 103;
		    part1amount = 4;
		    part2 = 0;
		    part2amount = 0;
		    part3 = 0;
		    part3amount = 0;
		    return 1;
		}
		case 18, 19://AK-47 - M4
		{
		    part1 = 103;
		    part1amount = 5;
		    part2 = 71;
		    part2amount = 2;
		    part3 = 0;
		    part3amount = 0;
		    return 1;
		}
		case 21, 22://Fusil de chasse - Sniper
		{
		    part1 = 103;
		    part1amount = 3;
		    part2 = 71;
		    part2amount = 2;
		    part3 = 0;
		    part3amount = 0;
		    return 1;
		}
		case 24://Minigun
		{
		    part1 = 103;
		    part1amount = 4;
		    part2 = 0;
		    part2amount = 0;
		    part3 = 0;
		    part3amount = 0;
		    return 1;
		}
		case 25, 26, 27, 28, 29://Munitions
		{
		    part1 = 107;
		    part1amount = 1;
		    part2 = 0;
		    part2amount = 0;
		    part3 = 0;
		    part3amount = 0;
		    return 1;
		}
		case 63://Roue
		{
		    part1 = 103;
		    part1amount = 1;
		    part2 = 0;
		    part2amount = 0;
		    part3 = 0;
		    part3amount = 0;
		    return 1;
		}
		case 64://Moteur
		{
		    part1 = 103;
		    part1amount = 4;
		    part2 = 0;
		    part2amount = 0;
		    part3 = 0;
		    part3amount = 0;
		    return 1;
		}
		case 80://Lit miteux
		{
		    part1 = 103;
		    part1amount = 2;
		    part2 = 0;
		    part2amount = 0;
		    part3 = 0;
		    part3amount = 0;
		    return 1;
		}
		case 90://Canne à pêche
		{
		    part1 = 71;
		    part1amount = 2;
		    part2 = 0;
		    part2amount = 0;
		    part3 = 0;
		    part3amount = 0;
		    return 1;
		}
		case 95://Collecteur d'eau
		{
		    part1 = 105;
		    part1amount = 2;
		    part2 = 103;
		    part2amount = 1;
		    part3 = 0;
		    part3amount = 0;
		    return 1;
		}
		case 96://Clé anglaise
		{
		    part1 = 103;
		    part1amount = 1;
		    part2 = 0;
		    part2amount = 0;
		    part3 = 0;
		    part3amount = 0;
		    return 1;
		}
		case 97://Coffre fort
		{
		    part1 = 104;
		    part1amount = 4;
		    part2 = 106;
		    part2amount = 1;
		    part3 = 0;
		    part3amount = 0;
		    return 1;
		}
		case 99, 100://Mine - Bombe
		{
		    part1 = 103;
		    part1amount = 1;
		    part2 = 107;
		    part2amount = 1;
		    part3 = 0;
		    part3amount = 0;
		    return 1;
		}
		case 102://Casserole
		{
		    part1 = 103;
		    part1amount = 2;
		    part2 = 0;
		    part2amount = 0;
		    part3 = 0;
		    part3amount = 0;
		    return 1;
		}
		case 104://Plaque de métal
		{
		    part1 = 103;
		    part1amount = 6;
		    part2 = 0;
		    part2amount = 0;
		    part3 = 0;
		    part3amount = 0;
		    return 1;
		}
		case 105://Planche
		{
		    part1 = 71;
		    part1amount = 6;
		    part2 = 0;
		    part2amount = 0;
		    part3 = 0;
		    part3amount = 0;
		    return 1;
		}
		case 107://Cadenas
		{
		    part1 = 103;
		    part1amount = 1;
		    part2 = 0;
		    part2amount = 0;
		    part3 = 0;
		    part3amount = 0;
		    return 1;
		}
		case 111://Mur
		{
		    part1 = 105;
		    part1amount = 6;
		    part2 = 0;
		    part2amount = 0;
		    part3 = 0;
		    part3amount = 0;
		    return 1;
		}
		case 112://Porte
		{
		    part1 = 71;
		    part1amount = 4;
		    part2 = 106;
		    part2amount = 1;
		    part3 = 0;
		    part3amount = 0;
		    return 1;
		}
		default:
		{
		    part1 = 0;
		    part1amount = 0;
		    part2 = 0;
		    part2amount = 0;
		    part3 = 0;
		    part3amount = 0;
		}
	}
	return 0;
}

UsePlayerItem(playerid, slot = 0)//Fonction à appeler lorsque le mec appuie sur la touche permettant d'use l'objet dans sa main
{
	new objectid = -1;
	if(slot == 0) objectid = pPlayerInfos[playerid][HandObject];
	else if(37 > slot > 0) objectid = pPlayerInfos[playerid][BagObject][slot - 1];
	dUsingItem[playerid] = slot;
	//---
	if(objectid != 0) LogInfo(true, "[JOUEUR]%s utilise %s...", GetName(playerid), NoNewLineSign(aObjects[objectid][ObjectFrName]));
	//---
 	pPlayerInfos[playerid][bAide][1] = true;//L'on affiche plus l'aide au joueur
	//---
	switch(objectid)
	{
	    case 0://RIEN
	    {
	        SendClientMessageEx(playerid, ROUGE, "You don't have anything in your hand!", "Vous n'avez rien dans la main !", "¡ No tiene nada en la mano !", "Não tem nada na mão !", "Non hai niente in mano !", "Sie haben nichts in der Hand!");
	    }
	    case 1://TENTE
	    {
			if(IsPlayerInAnyVehicle(playerid))
			{
			    SendClientMessageEx(playerid, ROUGE, "You cannot set a tent while you're in a vehicle!", "VVous ne pouvez pas monter une tente dans un véhicule !", "Espagnol", "Portugais", "Italien", "Allemand");
			    return 1;
			}
	        new Float:x, Float:y, Float:z, Float:a;
	        GetPlayerPos(playerid, x, y, z);
	        GetPlayerFacingAngle(playerid, a);
			ApplyAnimation(playerid, "GRENADE", "WEAPON_throwu", 4.0, 0, 0, 0, 0, 0, 1);
	        CreateTent(x, y, z, a);
			GivePlayerSlotObject(playerid, -1, slot);
	    }
	    case 2://MEDIKIT
	    {
	    	ApplyAnimation(playerid,"FAT","IDLE_tired", 4.0, 0, 0, 0, 0, 0);
	    	pPlayerInfos[playerid][bLeg] = true;
	    	pPlayerInfos[playerid][bHemorragie] = false;
	    	UpdateInfo(playerid, 8);
	    	UpdateInfo(playerid, 9);
			GivePlayerSlotObject(playerid, -1, slot);
			SetHealthForPlayer(playerid, 1250, REASON_HEAL);
		}
	    case 3://MATRAQUE
		{
			if(HasPlayerWeapon(playerid, 3) || HasPlayerWeapon(playerid, 4) || HasPlayerWeapon(playerid, 5) || HasPlayerWeapon(playerid, 8) || HasPlayerWeapon(playerid, 9))
			{
			    SendClientMessageEx(playerid, ROUGE, "You already have this type of weapon!", "Vous avez déjà une arme de ce type !", "¡Ya tiene una arma de esto tipo!", "Portugais", "Già hai una arma di questo tipo !", "Sie haben schon so eine Waffe!");
			    return 1;
			}
			if(GetPlayerNextFreeWeaponSlot(playerid) == 0)
			{
			    SendClientMessageEx(playerid, ROUGE, "You cannot carry more weapons!", "Vous ne pouvez pas porter plus d'armes !", "¡No puede llevar más armas!", "Portugais", "Italien", "Sie können nicht mehr Waffen tragen!");
			    return 1;
			}
			GivePlayerSlotObject(playerid, -1, slot);
			SetPlayerWeaponSkill(playerid, GivePlayerWeaponEx(playerid, 3, 1), WEAPON_SIMPLE);
		}
	    case 4://COUTEAU
		{
			if(HasPlayerWeapon(playerid, 3) || HasPlayerWeapon(playerid, 4) || HasPlayerWeapon(playerid, 5) || HasPlayerWeapon(playerid, 8) || HasPlayerWeapon(playerid, 9))
			{
			    SendClientMessageEx(playerid, ROUGE, "You already have this type of weapon!", "Vous avez déjà une arme de ce type !", "¡Ya tiene una arma de esto tipo!", "Portugais", "Già hai una arma di questo tipo !", "Sie haben schon so eine Waffe!");
			    return 1;
			}
			if(GetPlayerNextFreeWeaponSlot(playerid) == 0)
			{
			    SendClientMessageEx(playerid, ROUGE, "You cannot carry more weapons!", "Vous ne pouvez pas porter plus d'armes !", "¡No puede llevar más armas!", "Portugais", "Italien", "Sie können nicht mehr Waffen tragen!");
			    return 1;
			}
			GivePlayerSlotObject(playerid, -1, slot);
			new dWeaponSlot = GivePlayerWeaponEx(playerid, 4, 1);
			SetPlayerWeaponSkill(playerid, dWeaponSlot, WEAPON_SIMPLE);
		}
		case 5://BATTE
		{
			if(HasPlayerWeapon(playerid, 3) || HasPlayerWeapon(playerid, 4) || HasPlayerWeapon(playerid, 5) || HasPlayerWeapon(playerid, 8) || HasPlayerWeapon(playerid, 9))
			{
			    SendClientMessageEx(playerid, ROUGE, "You already have this type of weapon!", "Vous avez déjà une arme de ce type !", "¡Ya tiene una arma de esto tipo!", "Portugais", "Già hai una arma di questo tipo !", "Sie haben schon so eine Waffe!");
			    return 1;
			}
			if(GetPlayerNextFreeWeaponSlot(playerid) == 0)
			{
			    SendClientMessageEx(playerid, ROUGE, "You cannot carry more weapons!", "Vous ne pouvez pas porter plus d'armes !", "¡No puede llevar más armas!", "Portugais", "Italien", "Sie können nicht mehr Waffen tragen!");
			    return 1;
			}
			GivePlayerSlotObject(playerid, -1, slot);
			SetPlayerWeaponSkill(playerid, GivePlayerWeaponEx(playerid, 5, 1), WEAPON_SIMPLE);
		}
		case 6://KATANA
		{
			if(HasPlayerWeapon(playerid, 3) || HasPlayerWeapon(playerid, 4) || HasPlayerWeapon(playerid, 5) || HasPlayerWeapon(playerid, 8) || HasPlayerWeapon(playerid, 9))
			{
			    SendClientMessageEx(playerid, ROUGE, "You already have this type of weapon!", "Vous avez déjà une arme de ce type !", "¡Ya tiene una arma de esto tipo!", "Portugais", "Già hai una arma di questo tipo !", "Sie haben schon so eine Waffe!");
			    return 1;
			}
			if(GetPlayerNextFreeWeaponSlot(playerid) == 0)
			{
			    SendClientMessageEx(playerid, ROUGE, "You cannot carry more weapons!", "Vous ne pouvez pas porter plus d'armes !", "¡No puede llevar más armas!", "Portugais", "Italien", "Sie können nicht mehr Waffen tragen!");
			    return 1;
			}
			GivePlayerSlotObject(playerid, -1, slot);
			SetPlayerWeaponSkill(playerid, GivePlayerWeaponEx(playerid, 8, 1), WEAPON_SIMPLE);
		}
		case 7://TRONCONNEUSE
		{
			if(HasPlayerWeapon(playerid, 3) || HasPlayerWeapon(playerid, 4) || HasPlayerWeapon(playerid, 5) || HasPlayerWeapon(playerid, 8) || HasPlayerWeapon(playerid, 9))
			{
			    SendClientMessageEx(playerid, ROUGE, "You already have this type of weapon!", "Vous avez déjà une arme de ce type !", "¡Ya tiene una arma de esto tipo!", "Portugais", "Già hai una arma di questo tipo !", "Sie haben schon so eine Waffe!");
			    return 1;
			}
			if(GetPlayerNextFreeWeaponSlot(playerid) == 0)
			{
			    SendClientMessageEx(playerid, ROUGE, "You cannot carry more weapons!", "Vous ne pouvez pas porter plus d'armes !", "¡No puede llevar más armas!", "Portugais", "Italien", "Sie können nicht mehr Waffen tragen!");
			    return 1;
			}
			new dGasSlot = HasPlayerItem(playerid, 30);
			if(dGasSlot == -1)
			{
			    SendClientMessageEx(playerid, ROUGE, "You need gas for using a chainsaw!", "Vous avez besoin d'essence pour une tronçonneuse !", "¡Necessita tener gasolina!", "O senhor precisa gasolina para uma serra de motoserra !", "Italien", "Sie müssen Benzin haben!");
			    return 1;
			}
			GivePlayerSlotObject(playerid, -1, slot);
			GivePlayerSlotObject(playerid, -1, dGasSlot);
			SetPlayerWeaponSkill(playerid, GivePlayerWeaponEx(playerid, 9, 1), WEAPON_SIMPLE);
		}
		case 8://GRENADES
		{
		    if(IsPlayerInAnyVehicle(playerid))
		    {
		        SendClientMessageEx(playerid, ROUGE, "You can't throw anything while in a vehicle!", "Vous ne pouvez pas lancer de projectiles depuis un véhicule !", "Espagnol", "Portugais", "Italien", "Allemand");
		        return 1;
		    }
			GivePlayerSlotObject(playerid, -1, slot);
			//GivePlayerWeapon(playerid, 16, 1);
			PlayerThrowProjectile(playerid, THROW_GRENADE);
		}
		case 9://MOLOTOVS
		{
		    if(IsPlayerInAnyVehicle(playerid))
		    {
		        SendClientMessageEx(playerid, ROUGE, "You can't throw anything while in a vehicle!", "Vous ne pouvez pas lancer de projectiles depuis un véhicule !", "Espagnol", "Portugais", "Italien", "Allemand");
		        return 1;
		    }
			GivePlayerSlotObject(playerid, -1, slot);
			//GivePlayerWeapon(playerid, 18, 1);
			PlayerThrowProjectile(playerid, THROW_MOLOTOV);
		}
		case 10://PISTOLETS
		{
			if(HasPlayerWeapon(playerid, 23) || HasPlayerWeapon(playerid, 24))
			{
			    SendClientMessageEx(playerid, ROUGE, "You already have this type of weapon!", "Vous avez déjà une arme de ce type !", "¡Ya tiene una arma de esto tipo!", "Portugais", "Già hai una arma di questo tipo !", "Sie haben schon so eine Waffe!");
			    return 1;
			}
			//---
			new dWeaponSlot = HasPlayerWeapon(playerid, 22);
			if(dWeaponSlot != 0)
			{
			    if(GetPlayerWeaponSkill(playerid, dWeaponSlot) == WEAPON_AKIMBO)
			    {
			    	SendClientMessageEx(playerid, ROUGE, "You already have this type of weapon!", "Vous avez déjà une arme de ce type !", "¡Ya tiene una arma de esto tipo!", "Portugais", "Già hai una arma di questo tipo !", "Sie haben schon so eine Waffe!");
			    	return 1;
			    }
				ApplyReloadAnim(playerid, 22);
	    		SetPlayerWeaponSkill(playerid, dWeaponSlot, WEAPON_AKIMBO);
				GivePlayerSlotObject(playerid, -1, slot);
	    		return 1;
			}
			//---
			if(GetPlayerNextFreeWeaponSlot(playerid) == 0)
			{
			    SendClientMessageEx(playerid, ROUGE, "You cannot carry more weapons!", "Vous ne pouvez pas porter plus d'armes !", "¡No puede llevar más armas!", "Portugais", "Italien", "Sie können nicht mehr Waffen tragen!");
			    return 1;
			}
			new dAmmoSlot = HasPlayerItem(playerid, 26);
			if(dAmmoSlot == -1)
			{
			    SendClientMessageEx(playerid, ROUGE, "You need 9mm ammo for this gun!", "Vous avez besoin de munitions 9mm !", "¡Necessita tener 9mm munición!", "Portugais", "Italien", "Sie müssen 9mm Munition haben!");
			    return 1;
			}
			ApplyReloadAnim(playerid, 22);
			GivePlayerSlotObject(playerid, -1, slot);
			GivePlayerSlotObject(playerid, -1, dAmmoSlot);
			SetPlayerWeaponSkill(playerid, GivePlayerWeaponEx(playerid, 22, 25), WEAPON_SIMPLE);
		}
		case 11://SILENCIEUX
		{
			if(HasPlayerWeapon(playerid, 22) || HasPlayerWeapon(playerid, 23) || HasPlayerWeapon(playerid, 24))
			{
			    SendClientMessageEx(playerid, ROUGE, "You already have this type of weapon!", "Vous avez déjà une arme de ce type !", "¡Ya tiene una arma de esto tipo!", "Portugais", "Già hai una arma di questo tipo !", "Sie haben schon so eine Waffe!");
			    return 1;
			}
			if(GetPlayerNextFreeWeaponSlot(playerid) == 0)
			{
			    SendClientMessageEx(playerid, ROUGE, "You cannot carry more weapons!", "Vous ne pouvez pas porter plus d'armes !", "¡No puede llevar más armas!", "Portugais", "Italien", "Sie können nicht mehr Waffen tragen!");
			    return 1;
			}
			new dAmmoSlot = HasPlayerItem(playerid, 26);
			if(dAmmoSlot == -1)
			{
			    SendClientMessageEx(playerid, ROUGE, "You need 9mm ammo for this gun!", "Vous avez besoin de munitions 9mm !", "¡Necessita tener 9mm munición!", "Portugais", "Italien", "Sie müssen 9mm Munition haben!");
			    return 1;
			}
			ApplyReloadAnim(playerid, 23);
			GivePlayerSlotObject(playerid, -1, slot);
			GivePlayerSlotObject(playerid, -1, dAmmoSlot);
			SetPlayerWeaponSkill(playerid, GivePlayerWeaponEx(playerid, 23, 25), WEAPON_SIMPLE);
		}
		case 12://DESERT EAGLE
		{
			if(HasPlayerWeapon(playerid, 22) || HasPlayerWeapon(playerid, 23) || HasPlayerWeapon(playerid, 24))
			{
			    SendClientMessageEx(playerid, ROUGE, "You already have this type of weapon!", "Vous avez déjà une arme de ce type !", "¡Ya tiene una arma de esto tipo!", "Portugais", "Già hai una arma di questo tipo !", "Sie haben schon so eine Waffe!");
			    return 1;
			}
			if(GetPlayerNextFreeWeaponSlot(playerid) == 0)
			{
			    SendClientMessageEx(playerid, ROUGE, "You cannot carry more weapons!", "Vous ne pouvez pas porter plus d'armes !", "¡No puede llevar más armas!", "Portugais", "Italien", "Sie können nicht mehr Waffen tragen!");
			    return 1;
			}
			new dAmmoSlot = HasPlayerItem(playerid, 27);
			if(dAmmoSlot == -1)
			{
			    SendClientMessageEx(playerid, ROUGE, "You need .50AE ammo for this gun!", "Vous avez besoin de munitions .50AE !", "¡Necessita tener .50AE munición!", "Portugais", "Italien", "Sie müssen .50AE Munition haben!");
			    return 1;
			}
			ApplyReloadAnim(playerid, 24);
			GivePlayerSlotObject(playerid, -1, slot);
			GivePlayerSlotObject(playerid, -1, dAmmoSlot);
			SetPlayerWeaponSkill(playerid, GivePlayerWeaponEx(playerid, 24, 10), WEAPON_SIMPLE);
		}
		case 13://FUSIL À POMPE
		{
			if(HasPlayerWeapon(playerid, 25) || HasPlayerWeapon(playerid, 26) || HasPlayerWeapon(playerid, 27))
			{
			    SendClientMessageEx(playerid, ROUGE, "You already have this type of weapon!", "Vous avez déjà une arme de ce type !", "¡Ya tiene una arma de esto tipo!", "Portugais", "Già hai una arma di questo tipo !", "Sie haben schon so eine Waffe!");
			    return 1;
			}
			if(GetPlayerNextFreeWeaponSlot(playerid) == 0)
			{
			    SendClientMessageEx(playerid, ROUGE, "You cannot carry more weapons!", "Vous ne pouvez pas porter plus d'armes !", "¡No puede llevar más armas!", "Portugais", "Italien", "Sie können nicht mehr Waffen tragen!");
			    return 1;
			}
			new dAmmoSlot = HasPlayerItem(playerid, 28);
			if(dAmmoSlot == -1)
			{
			    SendClientMessageEx(playerid, ROUGE, "You need 12 Gauge ammo for this gun!", "Vous avez besoin de munitions 12 Gauge !", "¡Necessita tener 12 Gauge munición!", "Portugais", "Italien", "Sie müssen 12 Gauge Munition haben!");
			    return 1;
			}
			ApplyReloadAnim(playerid, 25);
			GivePlayerSlotObject(playerid, -1, slot);
			GivePlayerSlotObject(playerid, -1, dAmmoSlot);
			SetPlayerWeaponSkill(playerid, GivePlayerWeaponEx(playerid, 25, 10), WEAPON_SIMPLE);
		}
		case 14://FUSILS À CANONS SCIÉS
		{
			if(HasPlayerWeapon(playerid, 25) || HasPlayerWeapon(playerid, 27))
			{
			    SendClientMessageEx(playerid, ROUGE, "You already have this type of weapon!", "Vous avez déjà une arme de ce type !", "¡Ya tiene una arma de esto tipo!", "Portugais", "Già hai una arma di questo tipo !", "Sie haben schon so eine Waffe!");
			    return 1;
			}
			//---
			new dWeaponSlot = HasPlayerWeapon(playerid, 26);
			if(dWeaponSlot != 0)
			{
			    if(GetPlayerWeaponSkill(playerid, dWeaponSlot) == WEAPON_AKIMBO)
			    {
			    	SendClientMessageEx(playerid, ROUGE, "You already have this type of weapon!", "Vous avez déjà une arme de ce type !", "¡Ya tiene una arma de esto tipo!", "Portugais", "Già hai una arma di questo tipo !", "Sie haben schon so eine Waffe!");
			    	return 1;
			    }
				ApplyReloadAnim(playerid, 25);
	    		SetPlayerWeaponSkill(playerid, dWeaponSlot, WEAPON_AKIMBO);
				GivePlayerSlotObject(playerid, -1, slot);
	    		return 1;
			}
			//---
			if(GetPlayerNextFreeWeaponSlot(playerid) == 0)
			{
			    SendClientMessageEx(playerid, ROUGE, "You cannot carry more weapons!", "Vous ne pouvez pas porter plus d'armes !", "¡No puede llevar más armas!", "Portugais", "Italien", "Sie können nicht mehr Waffen tragen!");
			    return 1;
			}
			new dAmmoSlot = HasPlayerItem(playerid, 28);
			if(dAmmoSlot == -1)
			{
			    SendClientMessageEx(playerid, ROUGE, "You need 12 Gauge ammo for this gun!", "Vous avez besoin de munitions 12 Gauge !", "¡Necessita tener 12 Gauge munición!", "Portugais", "Italien", "Sie müssen 12 Gauge Munition haben!");
			    return 1;
			}
			ApplyReloadAnim(playerid, 26);
			GivePlayerSlotObject(playerid, -1, slot);
			GivePlayerSlotObject(playerid, -1, dAmmoSlot);
			SetPlayerWeaponSkill(playerid, GivePlayerWeaponEx(playerid, 26, 10), WEAPON_SIMPLE);
		}
		case 15://SPAS 12
		{
			if(HasPlayerWeapon(playerid, 25) || HasPlayerWeapon(playerid, 26) || HasPlayerWeapon(playerid, 27))
			{
			    SendClientMessageEx(playerid, ROUGE, "You already have this type of weapon!", "Vous avez déjà une arme de ce type !", "¡Ya tiene una arma de esto tipo!", "Portugais", "Già hai una arma di questo tipo !", "Sie haben schon so eine Waffe!");
			    return 1;
			}
			if(GetPlayerNextFreeWeaponSlot(playerid) == 0)
			{
			    SendClientMessageEx(playerid, ROUGE, "You cannot carry more weapons!", "Vous ne pouvez pas porter plus d'armes !", "¡No puede llevar más armas!", "Portugais", "Italien", "Sie können nicht mehr Waffen tragen!");
			    return 1;
			}
			new dAmmoSlot = HasPlayerItem(playerid, 28);
			if(dAmmoSlot == -1)
			{
			    SendClientMessageEx(playerid, ROUGE, "You need 12 Gauge ammo for this gun!", "Vous avez besoin de munitions 12 Gauge !", "¡Necessita tener 12 Gauge munición!", "Portugais", "Italien", "Sie müssen 12 Gauge Munition haben!");
			    return 1;
			}
			ApplyReloadAnim(playerid, 27);
			GivePlayerSlotObject(playerid, -1, slot);
			GivePlayerSlotObject(playerid, -1, dAmmoSlot);
			SetPlayerWeaponSkill(playerid, GivePlayerWeaponEx(playerid, 27, 10), WEAPON_SIMPLE);
		}
		case 16://UZI
		{
			if(HasPlayerWeapon(playerid, 29) || HasPlayerWeapon(playerid, 32))
			{
			    SendClientMessageEx(playerid, ROUGE, "You already have this type of weapon!", "Vous avez déjà une arme de ce type !", "¡Ya tiene una arma de esto tipo!", "Portugais", "Già hai una arma di questo tipo !", "Sie haben schon so eine Waffe!");
			    return 1;
			}
			//---
			new dWeaponSlot = HasPlayerWeapon(playerid, 28);
			if(dWeaponSlot != 0)
			{
			    if(GetPlayerWeaponSkill(playerid, dWeaponSlot) == WEAPON_AKIMBO)
			    {
			    	SendClientMessageEx(playerid, ROUGE, "You already have this type of weapon!", "Vous avez déjà une arme de ce type !", "¡Ya tiene una arma de esto tipo!", "Portugais", "Già hai una arma di questo tipo !", "Sie haben schon so eine Waffe!");
			    	return 1;
			    }
				ApplyReloadAnim(playerid, 28);
	    		SetPlayerWeaponSkill(playerid, dWeaponSlot, WEAPON_AKIMBO);
				GivePlayerSlotObject(playerid, -1, slot);
	    		return 1;
			}
			//---
			if(GetPlayerNextFreeWeaponSlot(playerid) == 0)
			{
			    SendClientMessageEx(playerid, ROUGE, "You cannot carry more weapons!", "Vous ne pouvez pas porter plus d'armes !", "¡No puede llevar más armas!", "Portugais", "Italien", "Sie können nicht mehr Waffen tragen!");
			    return 1;
			}
			new dAmmoSlot = HasPlayerItem(playerid, 26);
			if(dAmmoSlot == -1)
			{
			    SendClientMessageEx(playerid, ROUGE, "You need 9mm ammo for this gun!", "Vous avez besoin de munitions 9mm !", "¡Necessita tener 9mm munición!", "Portugais", "Italien", "Sie müssen 9mm Munition haben!");
			    return 1;
			}
			ApplyReloadAnim(playerid, 28);
			GivePlayerSlotObject(playerid, -1, slot);
			GivePlayerSlotObject(playerid, -1, dAmmoSlot);
			SetPlayerWeaponSkill(playerid, GivePlayerWeaponEx(playerid, 28, 25), WEAPON_SIMPLE);
		}
		case 17://MP-5
		{
			if(HasPlayerWeapon(playerid, 28) || HasPlayerWeapon(playerid, 29) || HasPlayerWeapon(playerid, 32))
			{
			    SendClientMessageEx(playerid, ROUGE, "You already have this type of weapon!", "Vous avez déjà une arme de ce type !", "¡Ya tiene una arma de esto tipo!", "Portugais", "Già hai una arma di questo tipo !", "Sie haben schon so eine Waffe!");
			    return 1;
			}
			if(GetPlayerNextFreeWeaponSlot(playerid) == 0)
			{
			    SendClientMessageEx(playerid, ROUGE, "You cannot carry more weapons!", "Vous ne pouvez pas porter plus d'armes !", "¡No puede llevar más armas!", "Portugais", "Italien", "Sie können nicht mehr Waffen tragen!");
			    return 1;
			}
			new dAmmoSlot = HasPlayerItem(playerid, 26);
			if(dAmmoSlot == -1)
			{
			    SendClientMessageEx(playerid, ROUGE, "You need 9mm ammo for this gun!", "Vous avez besoin de munitions 9mm !", "¡Necessita tener 9mm munición!", "Portugais", "Italien", "Sie müssen 9mm Munition haben!");
			    return 1;
			}
			ApplyReloadAnim(playerid, 29);
			GivePlayerSlotObject(playerid, -1, slot);
			GivePlayerSlotObject(playerid, -1, dAmmoSlot);
			SetPlayerWeaponSkill(playerid, GivePlayerWeaponEx(playerid, 29, 25), WEAPON_SIMPLE);
		}
		case 18://AK-47
		{
			if(HasPlayerWeapon(playerid, 30) || HasPlayerWeapon(playerid, 31))
			{
			    SendClientMessageEx(playerid, ROUGE, "You already have this type of weapon!", "Vous avez déjà une arme de ce type !", "¡Ya tiene una arma de esto tipo!", "Portugais", "Già hai una arma di questo tipo !", "Sie haben schon so eine Waffe!");
			    return 1;
			}
			if(GetPlayerNextFreeWeaponSlot(playerid) == 0)
			{
			    SendClientMessageEx(playerid, ROUGE, "You cannot carry more weapons!", "Vous ne pouvez pas porter plus d'armes !", "¡No puede llevar más armas!", "Portugais", "Italien", "Sie können nicht mehr Waffen tragen!");
			    return 1;
			}
			new dAmmoSlot = HasPlayerItem(playerid, 25);
			if(dAmmoSlot == -1)
			{
			    SendClientMessageEx(playerid, ROUGE, "You need 7.62 ammo for this gun!", "Vous avez besoin de munitions 7.62 !", "¡Necessita tener 7.62 munición!", "Portugais", "Italien", "Sie müssen 7.62 Munition haben!");
			    return 1;
			}
			ApplyReloadAnim(playerid, 30);
			GivePlayerSlotObject(playerid, -1, slot);
			GivePlayerSlotObject(playerid, -1, dAmmoSlot);
			SetPlayerWeaponSkill(playerid, GivePlayerWeaponEx(playerid, 30, 30), WEAPON_SIMPLE);
		}
		case 19://M4
		{
			if(HasPlayerWeapon(playerid, 30) || HasPlayerWeapon(playerid, 31))
			{
			    SendClientMessageEx(playerid, ROUGE, "You already have this type of weapon!", "Vous avez déjà une arme de ce type !", "¡Ya tiene una arma de esto tipo!", "Portugais", "Già hai una arma di questo tipo !", "Sie haben schon so eine Waffe!");
			    return 1;
			}
			if(GetPlayerNextFreeWeaponSlot(playerid) == 0)
			{
			    SendClientMessageEx(playerid, ROUGE, "You cannot carry more weapons!", "Vous ne pouvez pas porter plus d'armes !", "¡No puede llevar más armas!", "Portugais", "Italien", "Sie können nicht mehr Waffen tragen!");
			    return 1;
			}
			new dAmmoSlot = HasPlayerItem(playerid, 25);
			if(dAmmoSlot == -1)
			{
			    SendClientMessageEx(playerid, ROUGE, "You need 7.62 ammo for this gun!", "Vous avez besoin de munitions 7.62 !", "¡Necessita tener 7.62 munición!", "Portugais", "Italien", "Sie müssen 7.62 Munition haben!");
			    return 1;
			}
			ApplyReloadAnim(playerid, 31);
			GivePlayerSlotObject(playerid, -1, slot);
			GivePlayerSlotObject(playerid, -1, dAmmoSlot);
			SetPlayerWeaponSkill(playerid, GivePlayerWeaponEx(playerid, 31, 30), WEAPON_SIMPLE);
		}
		case 20://TEC-9
		{
			if(HasPlayerWeapon(playerid, 28) || HasPlayerWeapon(playerid, 29))
			{
			    SendClientMessageEx(playerid, ROUGE, "You already have this type of weapon!", "Vous avez déjà une arme de ce type !", "¡Ya tiene una arma de esto tipo!", "Portugais", "Già hai una arma di questo tipo !", "Sie haben schon so eine Waffe!");
			    return 1;
			}
			//---
			new dWeaponSlot = HasPlayerWeapon(playerid, 32);
			if(dWeaponSlot != 0)
			{
			    if(GetPlayerWeaponSkill(playerid, dWeaponSlot) == WEAPON_AKIMBO)
			    {
			    	SendClientMessageEx(playerid, ROUGE, "You already have this type of weapon!", "Vous avez déjà une arme de ce type !", "¡Ya tiene una arma de esto tipo!", "Portugais", "Già hai una arma di questo tipo !", "Sie haben schon so eine Waffe!");
			    	return 1;
			    }
	    		ApplyAnimation(playerid,"TEC","TEC_reload", 4.0, 0, 0, 0, 0, 0);
				GivePlayerSlotObject(playerid, -1, slot);
	    		SetPlayerWeaponSkill(playerid, dWeaponSlot, WEAPON_AKIMBO);
	    		return 1;
			}
			//---
			if(GetPlayerNextFreeWeaponSlot(playerid) == 0)
			{
			    SendClientMessageEx(playerid, ROUGE, "You cannot carry more weapons!", "Vous ne pouvez pas porter plus d'armes !", "¡No puede llevar más armas!", "Portugais", "Italien", "Sie können nicht mehr Waffen tragen!");
			    return 1;
			}
			new dAmmoSlot = HasPlayerItem(playerid, 26);
			if(dAmmoSlot == -1)
			{
			    SendClientMessageEx(playerid, ROUGE, "You need 9mm ammo for this gun!", "Vous avez besoin de munitions 9mm !", "¡Necessita tener 9mm munición!", "Portugais", "Italien", "Sie müssen 9mm Munition haben!");
			    return 1;
			}
			ApplyReloadAnim(playerid, 32);
			GivePlayerSlotObject(playerid, -1, slot);
			GivePlayerSlotObject(playerid, -1, dAmmoSlot);
			SetPlayerWeaponSkill(playerid, GivePlayerWeaponEx(playerid, 32, 25), WEAPON_SIMPLE);
		}
		case 21://FUSIL DE CHASSE
		{
			if(HasPlayerWeapon(playerid, 33) || HasPlayerWeapon(playerid, 34))
			{
			    SendClientMessageEx(playerid, ROUGE, "You already have this type of weapon!", "Vous avez déjà une arme de ce type !", "¡Ya tiene una arma de esto tipo!", "Portugais", "Già hai una arma di questo tipo !", "Sie haben schon so eine Waffe!");
			    return 1;
			}
			if(GetPlayerNextFreeWeaponSlot(playerid) == 0)
			{
			    SendClientMessageEx(playerid, ROUGE, "You cannot carry more weapons!", "Vous ne pouvez pas porter plus d'armes !", "¡No puede llevar más armas!", "Portugais", "Italien", "Sie können nicht mehr Waffen tragen!");
			    return 1;
			}
			new dAmmoSlot = HasPlayerItem(playerid, 29);
			if(dAmmoSlot == -1)
			{
			    SendClientMessageEx(playerid, ROUGE, "You need .222 ammo for this gun!", "Vous avez besoin de munitions .222 !", "¡Necessita tener .222 munición!", "Portugais", "Italien", "Sie müssen .222 Munition haben!");
			    return 1;
			}
			ApplyReloadAnim(playerid, 33);
			GivePlayerSlotObject(playerid, -1, slot);
			GivePlayerSlotObject(playerid, -1, dAmmoSlot);
			SetPlayerWeaponSkill(playerid, GivePlayerWeaponEx(playerid, 33, 10), WEAPON_SIMPLE);
		}
		case 22://SNIPER
		{
			if(HasPlayerWeapon(playerid, 33) || HasPlayerWeapon(playerid, 34))
			{
			    SendClientMessageEx(playerid, ROUGE, "You already have this type of weapon!", "Vous avez déjà une arme de ce type !", "¡Ya tiene una arma de esto tipo!", "Portugais", "Già hai una arma di questo tipo !", "Sie haben schon so eine Waffe!");
			    return 1;
			}
			if(GetPlayerNextFreeWeaponSlot(playerid) == 0)
			{
			    SendClientMessageEx(playerid, ROUGE, "You cannot carry more weapons!", "Vous ne pouvez pas porter plus d'armes !", "¡No puede llevar más armas!", "Portugais", "Italien", "Sie können nicht mehr Waffen tragen!");
			    return 1;
			}
			new dAmmoSlot = HasPlayerItem(playerid, 29);
			if(dAmmoSlot == -1)
			{
			    SendClientMessageEx(playerid, ROUGE, "You need .222 ammo for this gun!", "Vous avez besoin de munitions .222 !", "¡Necessita tener .222 munición!", "Portugais", "Italien", "Sie müssen .222 Munition haben!");
			    return 1;
			}
			ApplyReloadAnim(playerid, 34);
			GivePlayerSlotObject(playerid, -1, slot);
			GivePlayerSlotObject(playerid, -1, dAmmoSlot);
			SetPlayerWeaponSkill(playerid, GivePlayerWeaponEx(playerid, 34, 10), WEAPON_SIMPLE);
		}
		case 23://LANCE-ROQUETTES
		{
			if(HasPlayerWeapon(playerid, 38))
			{
			    SendClientMessageEx(playerid, ROUGE, "You already have this type of weapon!", "Vous avez déjà une arme de ce type !", "¡Ya tiene una arma de esto tipo!", "Portugais", "Già hai una arma di questo tipo !", "Sie haben schon so eine Waffe!");
			    return 1;
			}
			GivePlayerSlotObject(playerid, -1, slot);
			GivePlayerWeapon(playerid, 35, 1);
		}
		case 24://MINIGUN
		{
			if(HasPlayerWeapon(playerid, 38))
			{
			    SendClientMessageEx(playerid, ROUGE, "You already have this type of weapon!", "Vous avez déjà une arme de ce type !", "¡Ya tiene una arma de esto tipo!", "Portugais", "Già hai una arma di questo tipo !", "Sie haben schon so eine Waffe!");
			    return 1;
			}
			if(GetPlayerNextFreeWeaponSlot(playerid) == 0)
			{
			    SendClientMessageEx(playerid, ROUGE, "You cannot carry more weapons!", "Vous ne pouvez pas porter plus d'armes !", "¡No puede llevar más armas!", "Portugais", "Italien", "Sie können nicht mehr Waffen tragen!");
			    return 1;
			}
			new dAmmoSlot = HasPlayerItem(playerid, 25);
			if(dAmmoSlot == -1)
			{
			    SendClientMessageEx(playerid, ROUGE, "You need 7.62 ammo for this gun!", "Vous avez besoin de munitions 7.62 !", "¡Necessita tener 7.62 munición!", "Portugais", "Italien", "Sie müssen 7.62 Munition haben!");
			    return 1;
			}
			ApplyReloadAnim(playerid, 38);
			GivePlayerSlotObject(playerid, -1, slot);
			GivePlayerSlotObject(playerid, -1, dAmmoSlot);
			SetPlayerWeaponSkill(playerid, GivePlayerWeaponEx(playerid, 38, 30), WEAPON_SIMPLE);
		}
		case 25://7.62
		{
		    switch(GetPlayerWeapon(playerid))
		    {
		        case 30: GivePlayerWeaponEx(playerid, 30, 30), GivePlayerSlotObject(playerid, -1, slot), ApplyReloadAnim(playerid, 30);
		        case 31: GivePlayerWeaponEx(playerid, 31, 30), GivePlayerSlotObject(playerid, -1, slot), ApplyReloadAnim(playerid, 31);
		        case 38: GivePlayerWeaponEx(playerid, 38, 30), GivePlayerSlotObject(playerid, -1, slot), ApplyReloadAnim(playerid, 38);
		        default: SendClientMessageEx(playerid, ROUGE, "This ammo cannot be loaded on this type of weapon!", "Vous ne pouvez pas charger ces munitions dans cette arme !", "¡No puede recargar esta arma con esta munición!", "Portugais", "Italien", "Sie können nicht dieser Waffe mit dieser Munition laden!");
		    }
		}
		case 26://9MM
		{
		    switch(GetPlayerWeapon(playerid))
		    {
		        case 22: GivePlayerWeaponEx(playerid, 22, 25), GivePlayerSlotObject(playerid, -1, slot), ApplyReloadAnim(playerid, 22);
		        case 23: GivePlayerWeaponEx(playerid, 23, 25), GivePlayerSlotObject(playerid, -1, slot), ApplyReloadAnim(playerid, 23);
		        case 28: GivePlayerWeaponEx(playerid, 28, 25), GivePlayerSlotObject(playerid, -1, slot), ApplyReloadAnim(playerid, 28);
		        case 29: GivePlayerWeaponEx(playerid, 29, 25), GivePlayerSlotObject(playerid, -1, slot), ApplyReloadAnim(playerid, 29);
		        case 32: GivePlayerWeaponEx(playerid, 32, 25), GivePlayerSlotObject(playerid, -1, slot), ApplyReloadAnim(playerid, 32);
		        default: SendClientMessageEx(playerid, ROUGE, "This ammo cannot be loaded on this type of weapon!", "Vous ne pouvez pas charger ces munitions dans cette arme !", "¡No puede recargar esta arma con esta munición!", "Portugais", "Italien", "Sie können nicht dieser Waffe mit dieser Munition laden!");
		    }
		}
		case 27://.50AE
		{
		    switch(GetPlayerWeapon(playerid))
		    {
		        case 24: GivePlayerWeaponEx(playerid, 24, 10), GivePlayerSlotObject(playerid, -1, slot), ApplyReloadAnim(playerid, 24);
		        default: SendClientMessageEx(playerid, ROUGE, "This ammo cannot be loaded on this type of weapon!", "Vous ne pouvez pas charger ces munitions dans cette arme !", "¡No puede recargar esta arma con esta munición!", "Portugais", "Italien", "Sie können nicht dieser Waffe mit dieser Munition laden!");
		    }
		}
		case 28://12 GAUGE
		{
		    switch(GetPlayerWeapon(playerid))
		    {
		        case 25: GivePlayerWeaponEx(playerid, 25, 10), GivePlayerSlotObject(playerid, -1, slot), ApplyReloadAnim(playerid, 25);
		        case 26: GivePlayerWeaponEx(playerid, 26, 10), GivePlayerSlotObject(playerid, -1, slot), ApplyReloadAnim(playerid, 26);
		        case 27: GivePlayerWeaponEx(playerid, 27, 10), GivePlayerSlotObject(playerid, -1, slot), ApplyReloadAnim(playerid, 27);
		        default: SendClientMessageEx(playerid, ROUGE, "This ammo cannot be loaded on this type of weapon!", "Vous ne pouvez pas charger ces munitions dans cette arme !", "¡No puede recargar esta arma con esta munición!", "Portugais", "Italien", "Sie können nicht dieser Waffe mit dieser Munition laden!");
		    }
		}
		case 29://.222
		{
		    switch(GetPlayerWeapon(playerid))
		    {
		        case 33: GivePlayerWeaponEx(playerid, 33, 10), GivePlayerSlotObject(playerid, -1, slot), ApplyReloadAnim(playerid, 33);
		        case 34: GivePlayerWeaponEx(playerid, 34, 10), GivePlayerSlotObject(playerid, -1, slot), ApplyReloadAnim(playerid, 34);
		        default: SendClientMessageEx(playerid, ROUGE, "This ammo cannot be loaded on this type of weapon!", "Vous ne pouvez pas charger ces munitions dans cette arme !", "¡No puede recargar esta arma con esta munición!", "Portugais", "Italien", "Sie können nicht dieser Waffe mit dieser Munition laden!");
		    }
		}
		case 30://BIDON PLEIN D'ESSENCE
		{
			new dShredderID = IsPlayerNearShredder(playerid);
			if(dShredderID != -1 && dShredder[dShredderID][dBroyeur] != 1)
		    {
		        dShredder[dShredderID][dBroyeur] = 1;
				GivePlayerSlotObject(playerid, 31, slot);
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
				return 1;
			}
			//---
			new dTankID = IsPlayerNearTank(playerid);
			if(dTankID != -1 && dTanks[dTankID][dTankGas] != 1)
			{
			    if(GetTankFuel(dTankID) + 1500 > MAX_TANK_FUEL)
			    {
			        SendClientMessageEx(playerid, ROUGE, "This tank is full!", "Cette citerne est pleine !", "Espagnol", "Portugais", "Italien", "Allemand");
			        return 1;
			    }
			    GiveTankFuel(dTankID, 2000);
				GivePlayerSlotObject(playerid, 31, slot);
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
				return 1;
			}
		    //---
			if(IsPlayerInAnyVehicle(playerid))
			{
			    SendClientMessageEx(playerid, ROUGE, "You cannot refill the tank while in the vehicle!", "Vous ne pouvez pas faire le plein depuis un véhicule !", "¡No puede repostar gasolina si esta en un vehículo!", "Portugais", "Italien", "Allemand");
			    return 1;
			}
			new Float:x, Float:y, Float:z, vehicleid = INVALID_VEHICLE_ID, vehicle = -1;
			GetPlayerPos(playerid, x, y, z);
			GetVehicleWithinDistance(x, y, z, 7.0, vehicleid);
			vehicle = GetVehicleID(vehicleid);
			//---
			if(IsVehicleBicycle(vehicleid)) return 1;
			if(vehicle == -1)
			{
				SendClientMessageEx(playerid, ROUGE, "This vehicle cannot be refilled!", "Vous ne pouvez pas remplir ce véhicule !", "¡No puede repostar gasolina en este vehículo!", "Portugais", "Italien", "Allemand");
				return 1;
			}
			if(vehicleid == INVALID_VEHICLE_ID)
			{
			    SendClientMessageEx(playerid, ROUGE, "You are not near a vehicle!", "Vous n'êtes pas proche d'un véhicule !", "¡No esta cerca de un vehículo!", "Portugais", "Italien", "Sie sint in der Nähe eines Fahrzeug");
				return 1;
			}
			//---
			if(dVehicleInfos[vehicle][dFuel] > GetVehicleMaxFuel(vehicle) - 1500)
			{
			    SendClientMessageEx(playerid, ROUGE, "This vehicle doesn't need gas!", "Ce véhicule n'a pas besoin d'essence !", "¡Esto vehículo no necessita gasolina!", "Portugais", "Italien", "Allemand");
				return 1;
			}
			//---
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
			GiveVehicleFuel(vehicle, 2000);
			GivePlayerSlotObject(playerid, 31, slot);
		}
		case 31://BIDON VIDE D'ESSENCE
		{
			new dTankID = IsPlayerNearTank(playerid);
			if(dTankID != -1 && dTanks[dTankID][dTankGas] != 1)
			{
			    if(GetTankFuel(dTankID) < 2000)
			    {
			        SendClientMessageEx(playerid, ROUGE, "There is not enough gas left!", "Cette citerne ne contient pas assez d'essence !", "Espagnol", "Portugais", "Italien", "Allemand");
			        return 1;
			    }
			    GiveTankFuel(dTankID, -2000);
				GivePlayerSlotObject(playerid, 30, slot);
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
				return 1;
			}
			//---
		    new dStation = IsPlayerNearGasStation(playerid);
			if(dStation == -1)
			{
			    SendClientMessageEx(playerid, ROUGE, "You are not near a gas station!", "Vous n'êtes pas proche d'une station service !", "¡No esta cerca de una estacíon de gasolíno!", "Portugais", "Italien", "Sie sint in der Nähe eines Tankstelle!");
				return 1;
			}
			if(GetStationFuel(dStation) < 2000)
			{
			    SendClientMessageEx(playerid, ROUGE, "This gas station does not have enough gas left!", "Cette station service n'a pas assez d'essence !", "¡Esta estacíon de gasolíno no tiene suficiente de gasolíno!", "Portugais", "Italien", "Allemand");
				return 1;
			}
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
			GiveStationFuel(dStation, -2000);
			GivePlayerSlotObject(playerid, 30, slot);
		}
		case 32://CZECH VEST
		{
		    if(pPlayerInfos[playerid][pBag] >= CZECH_VEST)
		    {
		        SendClientMessageEx(playerid, ROUGE, "You already have a better backpack!", "Vous avez déjà un meilleur sac à dos !", "¡Ya tiene un mejor mochila!", "Portugais", "Italien", "Sie haben schon eine besseren Rucksack!");
				return 1;
			}
			GivePlayerSlotObject(playerid, -1, slot);
			pPlayerInfos[playerid][pBag] = CZECH_VEST;
			AttachPlayerBackPack(playerid);
		}
		case 33://ASSAULT PACK
		{
		    if(pPlayerInfos[playerid][pBag] >= ASSAULT_PACK)
		    {
		        SendClientMessageEx(playerid, ROUGE, "You already have a better backpack!", "Vous avez déjà un meilleur sac à dos !", "¡Ya tiene un mejor mochila!", "Portugais", "Italien", "Sie haben schon eine besseren Rucksack!");
				return 1;
			}
			switch(pPlayerInfos[playerid][pBag])
			{
				case CZECH_VEST: PlayerDropObject(playerid, 32, floatdiv(RandomEx(5, 20), 10));
			}
			GivePlayerSlotObject(playerid, -1, slot);
			pPlayerInfos[playerid][pBag] = ASSAULT_PACK;
			AttachPlayerBackPack(playerid);
		}
		case 34://ALICE PACK
		{
		    if(pPlayerInfos[playerid][pBag] >= ALICE_PACK)
		    {
		        SendClientMessageEx(playerid, ROUGE, "You already have a better backpack!", "Vous avez déjà un meilleur sac à dos !", "¡Ya tiene un mejor mochila!", "Portugais", "Italien", "Sie haben schon eine besseren Rucksack!");
				return 1;
			}
			switch(pPlayerInfos[playerid][pBag])
			{
				case CZECH_VEST: PlayerDropObject(playerid, 32, floatdiv(RandomEx(5, 20), 10));
				case ASSAULT_PACK: PlayerDropObject(playerid, 33, floatdiv(RandomEx(5, 20), 10));
			}
			GivePlayerSlotObject(playerid, -1, slot);
			pPlayerInfos[playerid][pBag] = ALICE_PACK;
			AttachPlayerBackPack(playerid);
		}
		case 35://COYOTE PACK
		{
		    if(pPlayerInfos[playerid][pBag] >= COYOTE_PACK)
		    {
		        SendClientMessageEx(playerid, ROUGE, "You already have a better backpack!", "Vous avez déjà un meilleur sac à dos !", "¡Ya tiene un mejor mochila!", "Portugais", "Italien", "Sie haben schon eine besseren Rucksack!");
				return 1;
			}
			switch(pPlayerInfos[playerid][pBag])
			{
				case CZECH_VEST: PlayerDropObject(playerid, 32, floatdiv(RandomEx(5, 20), 10));
				case ASSAULT_PACK: PlayerDropObject(playerid, 33, floatdiv(RandomEx(5, 20), 10));
				case ALICE_PACK: PlayerDropObject(playerid, 34, floatdiv(RandomEx(5, 20), 10));
			}
			GivePlayerSlotObject(playerid, -1, slot);
			pPlayerInfos[playerid][pBag] = COYOTE_PACK;
			AttachPlayerBackPack(playerid);
		}
		case 36://BANDAGES
		{
		    if(!pPlayerInfos[playerid][bHemorragie])
		    {
		        SendClientMessageEx(playerid, ROUGE, "You are not bleeding!", "Vous ne faites pas d'hémorragie !", "¡No esta sangrando!", "Portugais", "Italien", "Sie bluten nicht!");
				return 1;
		    }
			GivePlayerSlotObject(playerid, -1, slot);
	    	ApplyAnimation(playerid,"FAT","IDLE_tired", 4.0, 0, 0, 0, 0, 0);
	    	pPlayerInfos[playerid][bHemorragie] = false;
	    	UpdateInfo(playerid, 9);
		}
		case 37://ANTI-DOULEUR
		{
		    if(pPlayerInfos[playerid][bLeg])
		    {
		        SendClientMessageEx(playerid, ROUGE, "Your leg is not broken!", "Votre jambe n'est pas cassée !", "¡Su pierna no esta rotta!", "Portugais", "Italien", "Ihren Bein ist nicht gebrochen!");
				return 1;
		    }
			GivePlayerSlotObject(playerid, -1, slot);
	    	ApplyAnimation(playerid,"FAT","IDLE_tired", 4.0, 0, 0, 0, 0, 0);
	    	pPlayerInfos[playerid][bLeg] = true;
	    	UpdateInfo(playerid, 8);
		}
		case 38://POCHE DE SANG
		{
			GivePlayerSlotObject(playerid, -1, slot);
			SetHealthForPlayer(playerid, 1250, REASON_HEAL);
		}
		case 39://CAFÉINE
		{
		    if(pPlayerInfos[playerid][pSleep] > 90)
		    {
		        SendClientMessageEx(playerid, ROUGE, "You're not sleepy!", "Vous n'êtes pas fatigué !", "¡No esta cansado!", "Portugais", "Non sei stanco!", "Sie sint nicht müde!");
				return 1;
		    }
			GivePlayerSlotObject(playerid, -1, slot);
			ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		    GivePlayerSleep(playerid, 50);
		}
		case 40://BOUTEILLE VIDE
		{
			new dTankID = IsPlayerNearTank(playerid);
			if(dTankID != -1 && dTanks[dTankID][dTankGas] != 1)
			{
			    if(GetTankFuel(dTankID) < 500)
			    {
			        SendClientMessageEx(playerid, ROUGE, "There is not enough gas left!", "Cette citerne ne contient pas assez d'essence !", "Espagnol", "Portugais", "Italien", "Allemand");
			        return 1;
			    }
			    GiveTankFuel(dTankID, -500);
				GivePlayerSlotObject(playerid, 98, slot);
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
				return 1;
			}
			//---
		    new dCollectorID = IsPlayerNearCollector(playerid);
		    new dStation = IsPlayerNearGasStation(playerid);
			if(dCollectorID != -1)
		    {
		        if(GetCollectorWater(dCollectorID) >= 3)
		        {
			        GiveCollectorWater(dCollectorID, -3);
					GivePlayerSlotObject(playerid, 81, slot);
					return 1;
				}
		    }
			else if(dStation != -1)
			{
				if(GetStationFuel(dStation) < 500)
				{
				    SendClientMessageEx(playerid, ROUGE, "This gas station does not have enough gas left!", "Cette station service n'a pas assez d'essence !", "¡Esta estacíon de gasolíno no tiene suficiente de gasolíno!", "Portugais", "Italien", "Allemand");
					return 1;
				}
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
				GiveStationFuel(dStation, -500);
				GivePlayerSlotObject(playerid, 98, slot);
				return 1;
			}
			else if(IsPlayerInWater(playerid))
			{
				GivePlayerSlotObject(playerid, 126, slot);
				return 1;
			}
		}
		case 41://CHAPEAU LÉOPARD
		{
			GivePlayerClothe(playerid, 1, 41, 0.1262, 0.0324, -0.0042, 0.0, 89.4055, 91.9544, 1.1, 1.1, 1.1);
			GivePlayerSlotObject(playerid, -1, slot);
		}
		case 42://CHAPEAU LÉOPARD 2
		{
			GivePlayerClothe(playerid, 1, 42, 0.1262, 0.0324, -0.0042, 0.0, 89.4055, 91.9544, 1.1, 1.1, 1.1);
			GivePlayerSlotObject(playerid, -1, slot);
		}
		case 43://BOB
		{
			GivePlayerClothe(playerid, 1, 43, 0.1262, 0.0324, -0.0042, 0.0, 89.4055, 91.9544, 1.1, 1.1, 1.1);
			GivePlayerSlotObject(playerid, -1, slot);
		}
		case 44://CHAPEAU DISCO
		{
			GivePlayerClothe(playerid, 1, 44, 0.1262, 0.0324, -0.0042, 0.0, 89.4055, 91.9544, 1.1, 1.1, 1.1);
			GivePlayerSlotObject(playerid, -1, slot);
		}
		case 45://CHEPEAU DE SORCIERE
		{
			GivePlayerClothe(playerid, 1, 45, 0.1441, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1, 1.1, 1.1);
			GivePlayerSlotObject(playerid, -1, slot);
		}
		case 46://BÉRÊT
		{
			GivePlayerClothe(playerid, 1, 46, 0.1650, 0.0097, -0.0060, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);
			GivePlayerSlotObject(playerid, -1, slot);
		}
		case 47://CASQUE MILITAIRE
		{
			GivePlayerClothe(playerid, 1, 47, 0.1460, 0.0036, 0.0053, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);
			GivePlayerSlotObject(playerid, -1, slot);
		}
		case 48://CASQUE DE MARIN
		{
			GivePlayerClothe(playerid, 1, 48, 0.1460, 0.0036, 0.0053, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);
			GivePlayerSlotObject(playerid, -1, slot);
		}
		case 49://CASQUETTE BLEUE
		{
			GivePlayerClothe(playerid, 1, 49, 0.1460, 0.0036, 0.0053, 0.0, 0.0, 0.0, 1.1, 1.1, 1.1);
			GivePlayerSlotObject(playerid, -1, slot);
		}
		case 50://CASQUETTE ROUGE
		{
			GivePlayerClothe(playerid, 1, 50, 0.1460, 0.0036, 0.0053, 0.0, 0.0, 0.0, 1.1, 1.1, 1.1);
			GivePlayerSlotObject(playerid, -1, slot);
		}
		case 51://CHAPEAU MELON VERT
		{
			GivePlayerClothe(playerid, 1, 51, 0.1460, 0.0036, 0.0053, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);
			GivePlayerSlotObject(playerid, -1, slot);
		}
		case 52://PREDATORS ROUGES
		{
			GivePlayerClothe(playerid, 2, 52, 0.1004, 0.0491, 0.0, 90.0, 90.0, 0.0, 1.0, 1.0, 1.0);
			GivePlayerSlotObject(playerid, -1, slot);
		}
		case 53://PREDATORS JAUNES
		{
			GivePlayerClothe(playerid, 2, 53, 0.1004, 0.0491, 0.0, 90.0, 90.0, 0.0, 1.0, 1.0, 1.0);
			GivePlayerSlotObject(playerid, -1, slot);
		}
		case 54://PREDATORS VERTES
		{
			GivePlayerClothe(playerid, 2, 54, 0.1004, 0.0491, 0.0, 90.0, 90.0, 0.0, 1.0, 1.0, 1.0);
			GivePlayerSlotObject(playerid, -1, slot);
		}
		case 55://PREDATORS BLEUES
		{
			GivePlayerClothe(playerid, 2, 55, 0.1004, 0.0491, 0.0, 90.0, 90.0, 0.0, 1.0, 1.0, 1.0);
			GivePlayerSlotObject(playerid, -1, slot);
		}
		case 56://AVIATORS NOIRES
		{
			GivePlayerClothe(playerid, 2, 56, 0.1004, 0.0491, 0.0, 90.0, 90.0, 0.0, 1.0, 1.0, 1.0);
			GivePlayerSlotObject(playerid, -1, slot);
		}
		case 57://AVIATORS ROUGES
		{
			GivePlayerClothe(playerid, 2, 57, 0.1004, 0.0491, 0.0, 90.0, 90.0, 0.0, 1.0, 1.0, 1.0);
			GivePlayerSlotObject(playerid, -1, slot);
		}
		case 58://AVIATORS MAUVES
		{
			GivePlayerClothe(playerid, 2, 58, 0.1004, 0.0491, 0.0, 90.0, 90.0, 0.0, 1.0, 1.0, 1.0);
			GivePlayerSlotObject(playerid, -1, slot);
		}
		case 59://AVIATORS ROSES
		{
			GivePlayerClothe(playerid, 2, 59, 0.1004, 0.0491, 0.0, 90.0, 90.0, 0.0, 1.0, 1.0, 1.0);
			GivePlayerSlotObject(playerid, -1, slot);
		}
		case 60://AVIATORS NOIRES
		{
			GivePlayerClothe(playerid, 2, 60, 0.1004, 0.0491, 0.0, 90.0, 90.0, 0.0, 1.0, 1.0, 1.0);
			GivePlayerSlotObject(playerid, -1, slot);
		}
		case 61://AVIATORS ORANGES
		{
			GivePlayerClothe(playerid, 2, 61, 0.1004, 0.0491, 0.0, 90.0, 90.0, 0.0, 1.0, 1.0, 1.0);
			GivePlayerSlotObject(playerid, -1, slot);
		}
		case 62://WAYFARERS NOIRES
		{
			GivePlayerClothe(playerid, 2, 62, 0.1004, 0.0491, 0.0, 90.0, 90.0, 0.0, 1.0, 1.0, 1.0);
			GivePlayerSlotObject(playerid, -1, slot);
		}
		case 63://ROUE
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
			    SendClientMessageEx(playerid, ROUGE, "You cannot change a wheel while in the vehicle!", "Vous ne pouvez pas changer de roue depuis un véhicule !", "¡No puede cambiar una rueda si esta en un vehículo!", "Portugais", "Italien", "Allemand");
			    return 1;
			}
			new Float:x, Float:y, Float:z, vehicleid = INVALID_VEHICLE_ID, vehicle = -1;
			GetPlayerPos(playerid, x, y, z);
			GetVehicleWithinDistance(x, y, z, 7.0, vehicleid);
			vehicle = GetVehicleID(vehicleid);
			if(vehicleid == INVALID_VEHICLE_ID)
			{
			    SendClientMessageEx(playerid, ROUGE, "You are not near a vehicle!", "Vous n'êtes pas proche d'un véhicule !", "¡No esta cerca de un vehículo!", "Portugais", "Italien", "Allemand");
				return 1;
			}
			//---
			if(vehicle == -1)
			{
				SendClientMessageEx(playerid, ROUGE, "This vehicle's wheels cannot be changed!", "Vous ne pouvez pas changer les roues de ce véhicule !", "¡No puede repostar una rueda en este vehículo!", "Portugais", "Italien", "Allemand");
				return 1;
			}
			new dWheelID = -1;
			if(dVehicleInfos[vehicle][dWheels] != 0)
			{
			    for(new i = 0; i < dVehicleInfos[vehicle][dWheels]; i ++)
			    {
			        if(!dVehicleInfos[vehicle][bWheel][i])
			        {
			            dWheelID = i;
			        }
			    }
			}
			if(dWheelID == -1)
			{
			    SendClientMessageEx(playerid, ROUGE, "This vehicle doesn't need a new wheel!", "Ce véhicule n'a pas besoin d'une nouvelle roue !", "¡Esto vehículo no necessita una nueva rueda!", "Portugais", "Italien", "Allemand");
				return 1;
			}
			//---
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
			dVehicleInfos[vehicle][bWheel][dWheelID] = true;
			SetVehicleWheels(vehicle);
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			GivePlayerSlotObject(playerid, -1, slot);
		}
		case 64://MOTEUR
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
			    SendClientMessageEx(playerid, ROUGE, "You cannot change an engine while in the vehicle!", "Vous ne pouvez pas changer de moteur depuis un véhicule !", "¡No puede cambiar el motor si esta en un vehículo!", "Portugais", "Italien", "Allemand");
			    return 1;
			}
			new Float:x, Float:y, Float:z, vehicleid = INVALID_VEHICLE_ID, vehicle = -1;
			GetPlayerPos(playerid, x, y, z);
			GetVehicleWithinDistance(x, y, z, 7.0, vehicleid);
			vehicle = GetVehicleID(vehicleid);
			if(vehicleid == INVALID_VEHICLE_ID)
			{
			    SendClientMessageEx(playerid, ROUGE, "You are not near a vehicle!", "Vous n'êtes pas proche d'un véhicule !", "¡No esta cerca de un vehículo!", "Portugais", "Italien", "Allemand");
				return 1;
			}
			//---
			if(vehicle == -1)
			{
				SendClientMessageEx(playerid, ROUGE, "This vehicle's engine cannot be changed!", "Vous ne pouvez pas changer le moteur de ce véhicule !", "¡No puede repostar el motor de este vehículo!", "Portugais", "Italien", "Allemand");
				return 1;
			}
			if(dVehicleInfos[vehicle][bEngine])
			{
			    SendClientMessageEx(playerid, ROUGE, "This vehicle doesn't need a new engine!", "Ce véhicule n'a pas besoin d'un nouveau moteur !", "¡Esto vehículo no necessita un nuevo motor!", "Portugais", "Italien", "Allemand");
				return 1;
			}
			//---
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
			dVehicleInfos[vehicle][bEngine] = true;
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			GivePlayerSlotObject(playerid, -1, slot);
		}
		case 65://MASQUE À GAZ
		{
		    GivePlayerClothe(playerid, 3, 65, -0.0173, 0.094, 0.0, 330.0, 180.0, 15.0, 1.0, 1.0, 1.0);
		    GivePlayerSlotObject(playerid, -1, slot);
		}
		case 66://BURGER
		{
		    if(pPlayerInfos[playerid][pHunger] > 90)
		    {
		        SendClientMessageEx(playerid, ROUGE, "You're not hungry!", "Vous n'avez pas faim !", "¡No tiene hambre!", "Portugais", "Non hai fame!", "Sie sint nicht hungrig!");
				return 1;
		    }
			GivePlayerSlotObject(playerid, -1, slot);
			ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		    GivePlayerHunger(playerid, 15);
		    GivePlayerSleep(playerid, 3);
		}
		case 67://PIZZA
		{
		    if(pPlayerInfos[playerid][pHunger] > 90)
		    {
		        SendClientMessageEx(playerid, ROUGE, "You're not hungry!", "Vous n'avez pas faim !", "¡No tiene hambre!", "Portugais", "Non hai fame!", "Sie sint nicht hungrig!");
				return 1;
		    }
			GivePlayerSlotObject(playerid, -1, slot);
			ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		    GivePlayerHunger(playerid, 15);
		    GivePlayerSleep(playerid, 3);
		}
		case 68://STEAK CRU
		{
		    if(pPlayerInfos[playerid][pHunger] > 90)
		    {
		        SendClientMessageEx(playerid, ROUGE, "You're not hungry!", "Vous n'avez pas faim !", "¡No tiene hambre!", "Portugais", "Non hai fame!", "Sie sint nicht hungrig!");
				return 1;
		    }
			GivePlayerSlotObject(playerid, -1, slot);
			ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		    GivePlayerHunger(playerid, 3);
		}
		case 69://STEAK CUIT
		{
		    if(pPlayerInfos[playerid][pHunger] > 90)
		    {
		        SendClientMessageEx(playerid, ROUGE, "You're not hungry!", "Vous n'avez pas faim !", "¡No tiene hambre!", "Portugais", "Non hai fame!", "Sie sint nicht hungrig!");
				return 1;
		    }
			GivePlayerSlotObject(playerid, -1, slot);
			ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		    GivePlayerHunger(playerid, 10);
		    GivePlayerSleep(playerid, 3);
		}
		case 70://LAIT
		{
		    if(pPlayerInfos[playerid][pThirst] > 90)
		    {
		        SendClientMessageEx(playerid, ROUGE, "You're not thirsty!", "Vous n'avez pas soif !", "¡No tiene sed!", "Portugais", "Non hai sete!", "Sie sint nicht durstig!");
				return 1;
		    }
			GivePlayerSlotObject(playerid, 40, slot);
			ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		    GivePlayerThirst(playerid, 25);
		    PlayerPlaySound(playerid, 32200, 0.0, 0.0, 0.0);
		}
		case 71://BOIS
		{
		}
		case 72://ORANGE
		{
			switch(pPlayerInfos[playerid][pLangue])
	        {
	            case LANGUAGE_EN: ShowPlayerDialog(playerid, 65, DIALOG_STYLE_LIST, "Orange", "Eat\nTake the seeds", "Do", "Cancel");
	            case LANGUAGE_FR: ShowPlayerDialog(playerid, 65, DIALOG_STYLE_LIST, "Orange", "Manger\nPrendre graines", "Faire", "Annuler");
	            case LANGUAGE_ES: ShowPlayerDialog(playerid, 65, DIALOG_STYLE_LIST, "Espagnol", "Espagnol\nEspagnol", "Hacer", "Cancelar");
	            case LANGUAGE_PG: ShowPlayerDialog(playerid, 65, DIALOG_STYLE_LIST, "Portugais", "Portugais", "Portugais", "Portugais");
				case LANGUAGE_IT: ShowPlayerDialog(playerid, 65, DIALOG_STYLE_LIST, "Italien", "Italien", "Italien", "Italien");
				case LANGUAGE_DE: ShowPlayerDialog(playerid, 65, DIALOG_STYLE_LIST, "Apfelsine", "Essen\nKerne nehmen" , "Machen", "Schlissen");
	        }
		}
		case 73://POMME
		{
			switch(pPlayerInfos[playerid][pLangue])
	        {
	            case LANGUAGE_EN: ShowPlayerDialog(playerid, 65, DIALOG_STYLE_LIST, "Apple", "Eat\nTake the seeds", "Do", "Cancel");
	            case LANGUAGE_FR: ShowPlayerDialog(playerid, 65, DIALOG_STYLE_LIST, "Pomme", "Manger\nPrendre graines", "Faire", "Annuler");
	            case LANGUAGE_ES: ShowPlayerDialog(playerid, 65, DIALOG_STYLE_LIST, "Espagnol", "Espagnol\nEspagnol", "Hacer", "Cancelar");
	            case LANGUAGE_PG: ShowPlayerDialog(playerid, 65, DIALOG_STYLE_LIST, "Portugais", "Portugais", "Portugais", "Portugais");
				case LANGUAGE_IT: ShowPlayerDialog(playerid, 65, DIALOG_STYLE_LIST, "Italien", "Italien", "Italien", "Italien");
				case LANGUAGE_DE: ShowPlayerDialog(playerid, 65, DIALOG_STYLE_LIST, "Apfel", "Essen\nKerne nehmen" , "Machen", "Schlissen");
	        }
		}
		case 74://TOMATE
		{
			switch(pPlayerInfos[playerid][pLangue])
	        {
	            case LANGUAGE_EN: ShowPlayerDialog(playerid, 65, DIALOG_STYLE_LIST, "Apple", "Eat\nTake the seeds", "Do", "Cancel");
	            case LANGUAGE_FR: ShowPlayerDialog(playerid, 65, DIALOG_STYLE_LIST, "Pomme", "Manger\nPrendre graines", "Faire", "Annuler");
	            case LANGUAGE_ES: ShowPlayerDialog(playerid, 65, DIALOG_STYLE_LIST, "Tomato", "Espagnol\nEspagnol", "Hacer", "Cancelar");
	            case LANGUAGE_PG: ShowPlayerDialog(playerid, 65, DIALOG_STYLE_LIST, "Portugais", "Portugais", "Portugais", "Portugais");
				case LANGUAGE_IT: ShowPlayerDialog(playerid, 65, DIALOG_STYLE_LIST, "Italien", "Italien", "Italien", "Italien");
				case LANGUAGE_DE: ShowPlayerDialog(playerid, 65, DIALOG_STYLE_LIST, "Tomate", "Essen\nKerne nehmen" , "Machen", "Schlissen");
	        }
		}
		case 75://BANDANA CARREAUX
		{
		    GivePlayerClothe(playerid, 3, 75, 0.0855, 0.0368, 0.0, 90.0, 180.0, 90.0, 1.0, 1.0, 1.0);
		    GivePlayerSlotObject(playerid, -1, slot);
		}
		case 76://BANDANA CRÂNES
		{
		    GivePlayerClothe(playerid, 3, 76, 0.0855, 0.0368, 0.0, 90.0, 180.0, 90.0, 1.0, 1.0, 1.0);
		    GivePlayerSlotObject(playerid, -1, slot);
		}
		case 77://BANDANA ARMÉE
		{
		    GivePlayerClothe(playerid, 3, 77, 0.0855, 0.0368, 0.0, 90.0, 180.0, 90.0, 1.0, 1.0, 1.0);
		    GivePlayerSlotObject(playerid, -1, slot);
		}
		case 78://BANDANA VERT
		{
		    GivePlayerClothe(playerid, 3, 78, 0.0855, 0.0368, 0.0, 90.0, 180.0, 90.0, 1.0, 1.0, 1.0);
		    GivePlayerSlotObject(playerid, -1, slot);
		}
		case 79://BANDANA NOIR
		{
		    GivePlayerClothe(playerid, 3, 79, 0.0855, 0.0368, 0.0, 90.0, 180.0, 90.0, 1.0, 1.0, 1.0);
		    GivePlayerSlotObject(playerid, -1, slot);
		}
		case 80://Lit miteux
		{
		    if(!CanPlayerCreateBed(playerid))
		    {
				SendClientMessageEx(playerid, ROUGE, "You must be in a house or near a tent!", "Vous devez être dans une maison ou près d'une tente !", "¡Necessita estar en una casa o cerca de una tienda!", "Portugais", "Italien", "Allemand");
		        return 1;
			}
		    new Float:x, Float:y, Float:z, Float:a, Float:fTrash;
		    GetPlayerPos(playerid, x, y, z);
		    GetPlayerFacingAngle(playerid, a);
			//---
			if(CA_RayCastLine(x, y, z, x + 1.1 * floatsin(-a, degrees), y + 1.1 * floatcos(-a, degrees), z, fTrash, fTrash, fTrash) != 0)
			{
		    	SendClientMessageEx(playerid, ROUGE, "There is not enough room here!", "Il n'y a pas assez de place ici !", "Espagnol", "Portugais", "Italien", "Allemand");
				return 1;
			}
			//---
			GetXYInFrontOfPoint(x, y, a, 1.0);
			pBed[playerid] = CreateBed(1, x, y, z, a);
			EditDynamicObject(playerid, dBed[pBed[playerid]][oBed]);
		    GivePlayerSlotObject(playerid, -1, slot);
		}
		case 81://BOUTEILLE D'EAU
		{
			for(new i = 0; i < MAX_PLANTS; i++)
			{
				if(dPlant[i][dPlantID] != 0)
				{
				    if(IsPlayerInRangeOfPoint(playerid, 2.0, dPlant[i][xPlant], dPlant[i][yPlant], dPlant[i][zPlant]))
				    {
					    if((IsNight() && dPlant[i][dGrowTime] > 1) || (!IsNight() && dPlant[i][dGrowTime] > 0))
					    {
							dPlant[i][dGrowTime] -= 2;
							if(dPlant[i][dGrowTime] < 0) dPlant[i][dGrowTime] = 0;
							if(dPlant[i][dGrowTime] == 0) GrowPlant(i);
							GivePlayerSlotObject(playerid, 40, slot);
							ApplyAnimation(playerid, "GRENADE", "WEAPON_throwu", 4.0, 0, 0, 0, 0, 0, 1);
							return 1;
					    }
				    	break;
					}
				}
		    }
		    if(pPlayerInfos[playerid][pThirst] > 90)
		    {
		        SendClientMessageEx(playerid, ROUGE, "You're not thirsty!", "Vous n'avez pas soif !", "¡No tiene sed!", "Portugais", "Non hai sete!", "Sie sint nicht durstig!");
				return 1;
		    }
			GivePlayerSlotObject(playerid, 40, slot);
			ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		    GivePlayerThirst(playerid, 20);
		    PlayerPlaySound(playerid, 32200, 0.0, 0.0, 0.0);
		}
		case 82://BOOMBOX
		{
		}
		case 83://GILET PARE-BALLE SWAT
		{
		    GivePlayerClothe(playerid, 4, 83, 0.0675, 0.0458, 0.0, 0.0, 0.0, 0.0, 1.2, 1.2, 1.2);
		    SetArmourForPlayer(playerid, 1250);
		    GivePlayerSlotObject(playerid, -1, slot);
		}
		case 84://GILET PARE-BALLE SWAT UTILISÉ
		{
		    GivePlayerClothe(playerid, 4, 84, 0.0675, 0.0458, 0.0, 0.0, 0.0, 0.0, 1.2, 1.2, 1.2);
		    GivePlayerSlotObject(playerid, -1, slot);
		}
		case 85://CAMOUFLAGE
		{
		    GivePlayerClothe(playerid, 4, 85, -0.2753, -0.0488, -0.3086, 90.0, 0.0, 0.0, 0.4, 0.4, 0.4);
		    GivePlayerSlotObject(playerid, -1, slot);
		}
		case 86://POISSON CRU
		{
		    if(pPlayerInfos[playerid][pHunger] > 90)
		    {
		        SendClientMessageEx(playerid, ROUGE, "You're not hungry!", "Vous n'avez pas faim !", "¡No tiene hambre!", "Portugais", "Non hai fame!", "Sie sint nicht hungrig!");
				return 1;
		    }
			GivePlayerSlotObject(playerid, -1, slot);
			ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		    GivePlayerHunger(playerid, 2);
		}
		case 87://POISSON CUIT
		{
		    if(pPlayerInfos[playerid][pHunger] > 90)
		    {
		        SendClientMessageEx(playerid, ROUGE, "You're not hungry!", "Vous n'avez pas faim !", "¡No tiene hambre!", "Portugais", "Non hai fame!", "Sie sint nicht hungrig!");
				return 1;
		    }
			GivePlayerSlotObject(playerid, -1, slot);
			ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		    GivePlayerHunger(playerid, 12);
		    GivePlayerSleep(playerid, 3);
		}
		case 88://BRÊME
		{
			/*if(IsPlayerNextToFire(playerid))
			{
				GivePlayerSlotObject(playerid, 89, slot);
				ApplyAnimation(playerid, "GRENADE", "WEAPON_throwu", 4.0, 0, 0, 0, 0, 0, 1);
				return 1;
			}*/
			//---
		    if(pPlayerInfos[playerid][pHunger] > 90)
		    {
		        SendClientMessageEx(playerid, ROUGE, "You're not hungry!", "Vous n'avez pas faim !", "¡No tiene hambre!", "Portugais", "Non hai fame!", "Sie sint nicht hungrig!");
				return 1;
		    }
			GivePlayerSlotObject(playerid, -1, slot);
			ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		    GivePlayerHunger(playerid, 2);
		}
		case 89://BRÊME CUITE
		{
		    if(pPlayerInfos[playerid][pHunger] > 90)
		    {
		        SendClientMessageEx(playerid, ROUGE, "You're not hungry!", "Vous n'avez pas faim !", "¡No tiene hambre!", "Portugais", "Non hai fame!", "Sie sint nicht hungrig!");
				return 1;
		    }
			GivePlayerSlotObject(playerid, -1, slot);
			ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		    GivePlayerHunger(playerid, 20);
		    GivePlayerSleep(playerid, 5);
		}
		case 90://CANNE À PÊCHE
		{
		    if(pFishInfo[playerid][State] != 2)
		    {
			    if(slot != 0)
			    {
					SwapPlayerObjects(playerid, slot, 0);
			    }
			    new Float:fFishingSpots[][4] =
			    {
				    {-63.373, -585.546, 2.5339, 170.0023},
				    {-63.6049, -584.056, 2.5009, 170.0023},
				    {434.414, -282.1809, 1.6469, 30.0027},
				    {-1350.68, -2012.776, 1.919, 10.0027},
				    {324.07, 182.5469, 1.9989, 32.0027},
				    {-441.0289, -1882.5729, 1.773, 8.0027},
				    {2274.7971, 427.436, 1.8459, 10.0027},
				    {-1510.368, -2327.3649, 1.4079, 10.0027},
				    {-1520.56, -2332.227, 0.0, 10.0027},
				    {2115.382, 151.1519, 1.8639, 260.0027},
				    {-317.532, -386.6929, 1.9129, 290.00274},
				    {632.4819, -233.544, 2.523, 350.0027},
				    {1397.6669, -275.4859, 2.4219, 350.0027},
				    {-1384.8759, 2126.551, 42.5439, 260.0027},
				    {-1003.041, 2733.082, 42.8089, 124.0027},
				    {-662.293, 1408.8199, 1.8439, 254.005},
				    {-442.1749, 860.828, 1.1019, 102.0013},
				    {-636.853, 1299.025, 1.189, 294.0027},
					{528.2299, 614.2659, 1.3389, 206.0027},
				    {2483.1411, 563.057, 2.9279, 172.0018},
				    {1257.723, 643.9669, 3.48, 164.0026},
				    {163.3119, 636.01, 1.284, 204.0026},
				    {794.015, 615.835, 2.539, 184.0045},
				    {-636.374, 903.812, 1.483, 244.0018},
				    {-31.7399, 512.591, 1.4529, 194.0022},
				    {-1350.3459, 1682.0429, 2.17, 162.0041},
				    {-1881.812, 2146.8559, 2.444, 144.0027},
				    {-2610.5339, 2226.1311, 1.4709, 144.0027},
				    {-2334.405, 2503.621, 1.661, 234.0041},
				    {-2029.685, 2336.1979, 1.889, 104.0009},
				    {273.5199, 2936.4279, 1.9479, 332.0036},
				    {566.241, 2908.663, 2.8039, 334.0032},
				    {2922.2939, -1992.055, 1.955, 274.0004},
				    {2778.122, -2257.2141, 3.7239, 174.0014},
				    {1773.784, -2777.0148, 2.071, 174.0026},
				    {695.3629, -1925.3299, 2.492, 174.0026},
				    {721.351, -1511.353, 2.6909,  264.0027},
				    {-2955.27, -666.664, 2.171, 84.0},
				    {-2925.789, 1217.644, 1.73, 24.0027},
				    {-2247.541, 1376.1989, 3.6989, 0.0027},
				    {-776.82, 224.496, 2.069, 46.0032},
				    {-1490.159, 1370.4909, 2.476, 256.0045},
				    {17.8659, -1104.587, 2.8989, 282.0041},
				    {129.9409, -1787.3509, 4.1129, 116.0036},
				    {70.2659, -1496.7459, 3.1219, 86.005},
				    {1.8639, -1559.682, 3.519, 254.005}
			    };
		    	//---
				if(pFishInfo[playerid][State] == 1)
				{
					pFishInfo[playerid][Fish] = 0;
					pFishInfo[playerid][TimeCatch] = 0;
					pFishInfo[playerid][Time] = 0;
					pFishInfo[playerid][State] = 0;
					KillTimer(pFishInfo[playerid][FishingTimer]);
					pFishInfo[playerid][FishingTimer] = -1;
					SetCameraBehindPlayer(playerid);
		 			TogglePlayerControllable(playerid, true);
					ApplyAnimation(playerid, "GRENADE", "WEAPON_throwu", 4.0, 0, 0, 0, 0, 0, 1);
					return 1;
				}
			    for(new i = 0; i < sizeof(fFishingSpots); i ++)
			    {
			    	if(IsPlayerInRangeOfPoint(playerid, 3.0, fFishingSpots[i][0], fFishingSpots[i][1], fFishingSpots[i][2]))
			        {
			        	ApplyAnimation(playerid,"PED","ARRESTgun", 4.0, 0, 1, 1, 1, 3, 1);
	           			SetPlayerPos(playerid, fFishingSpots[i][0], fFishingSpots[i][1], fFishingSpots[i][2]);
	           			SetPlayerFacingAngle(playerid, fFishingSpots[i][3]);
						SetPlayerCameraPos(playerid, fFishingSpots[i][0] + (5 * floatsin(fFishingSpots[i][3] + 90, degrees)), fFishingSpots[i][1] + (5 * floatcos(fFishingSpots[i][3] + 90, degrees)), fFishingSpots[i][2] + 3.0);
						SetPlayerCameraLookAt(playerid, fFishingSpots[i][0], fFishingSpots[i][1], fFishingSpots[i][2], 1);
				       	TogglePlayerControllable(playerid, false);
						SetPlayerArmedWeapon(playerid, 0);
						SetPlayerArmedWeapon(playerid, 1);
						pFishInfo[playerid][Fish] = 0;
						pFishInfo[playerid][TimeCatch] = 0;
						pFishInfo[playerid][Time] = 0;
						pFishInfo[playerid][State] = 1;
						pFishInfo[playerid][FishingTimer] = SetTimerEx("OnFishingUpdate", 300, true, "i", playerid);
						ApplyAnimation(playerid,"PED","ARRESTgun", 4.0, 0, 1, 1, 1, 3, 1);
		    			return 1;
			        }
	        	}
	        	SendClientMessageEx(playerid, ROUGE, "You cannot fish here!", "Vous ne pouvez pas pêcher ici !", "Espagnol", "Portugais", "Italien", "Allemand");
			}
			return 1;
		}
		case 91://BRIQUET
		{
		    if(IsPlayerInWater(playerid))
		    {
		        SendClientMessageEx(playerid, ROUGE, "You cannot use this item while in water!", "Vous ne pouvez utiliser de briquet dans l'eau", "¡No puede usted utilizar esto objetto en agua!", "Portugais", "Italien", "Sie können nicht deiser Objekte in Wasser nutzen!");
				return 1;
		    }
		    //---BRASERO
			new dBrazier = -1;
			for(new i = 0; i < MAX_BRASEROS; i ++)
			{
			    if(dBraseroInfos[i][dBrasero] != 1) continue;
				if(IsPlayerInRangeOfPoint(playerid, 2.0, dBraseroInfos[i][xBrasero], dBraseroInfos[i][yBrasero], dBraseroInfos[i][zBrasero]))
				{
					dBrazier = i;
					break;
				}
			}
			if(dBrazier != -1)
			{
			    PlayerPlaySound(playerid, 14200, 0.0, 0.0, 0.0);
			    LightBrasero(dBrazier, true);
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
			    return 1;
			}
			/*new dShredderID = IsPlayerNearShredder(playerid);
			if(dShredderID != -1 && dShredder[dShredderID][dBroyeur] != 1)
		    {
		        dShredder[dShredderID][dBroyeur] = 1;
				GivePlayerSlotObject(playerid, 31, slot);
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
				return 1;
			}*/
		    //---
			new dLogSlot = HasPlayerItem(playerid, 71);
			if(dLogSlot == -1)
			{
		        SendClientMessageEx(playerid, ROUGE, "You need a log to make a fire!", "Vous avez besoin de bois pour faire du feu !", "¡Necessita madera para hacer fuego!", "Portugais", "Italien", "Sie haben kein holtz zum feuer machen!");
				return 1;
			}
		    new Float:x, Float:y, Float:z, Float:angle;
		    GetPlayerPos(playerid, x, y, z);
		    GetPlayerFacingAngle(playerid, angle);
		    CreateFire(x, y, z, angle, 10);
			PlayerPlaySound(playerid, 14200, 0.0, 0.0, 0.0);
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
			GivePlayerSlotObject(playerid, -1, dLogSlot);
		}
		case 92://GRAINES D'ORANGE
		{
		    if(!CanPlayerPlantHere(playerid))
		    {
		        SendClientMessageEx(playerid, ROUGE, "You can't plant anything here!", "Vous ne pouvez pas planter ici !", "¡No puede plantar aquí!", "Portugais", "Italien", "Sie können nicht hier plantzen!");
				return 1;
		    }
		    new Float:x, Float:y, Float:z, Float:angle;
		    GetPlayerPos(playerid, x, y, z);
		    GetPlayerFacingAngle(playerid, angle);
		    CreatePlant(2, 5, 20 - pPlayerInfos[playerid][dJardinier] * 3, x, y, z, angle);
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
			GivePlayerSlotObject(playerid, -1, slot);
		}
		case 93://GRAINES DE POMME
		{
		    if(!CanPlayerPlantHere(playerid))
		    {
		        SendClientMessageEx(playerid, ROUGE, "You can't plant anything here!", "Vous ne pouvez pas planter ici !", "¡No puede plantar aquí!", "Portugais", "Italien", "Sie können nicht hier plantzen!");
				return 1;
		    }
		    new Float:x, Float:y, Float:z, Float:angle;
		    GetPlayerPos(playerid, x, y, z);
		    GetPlayerFacingAngle(playerid, angle);
		    CreatePlant(3, 5, 30 - pPlayerInfos[playerid][dJardinier] * 3, x, y, z, angle);
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
			GivePlayerSlotObject(playerid, -1, slot);
		}
		case 94://GRAINES DE TOMATES
		{
		    if(!CanPlayerPlantHere(playerid))
		    {
		        SendClientMessageEx(playerid, ROUGE, "You can't plant anything here!", "Vous ne pouvez pas planter ici !", "¡No puede plantar aquí!", "Portugais", "Italien", "Sie können nicht hier plantzen!");
				return 1;
		    }
		    new Float:x, Float:y, Float:z, Float:angle;
		    GetPlayerPos(playerid, x, y, z);
		    GetPlayerFacingAngle(playerid, angle);
		    CreatePlant(4, 5, 10 - pPlayerInfos[playerid][dJardinier] * 3, x, y, z, angle);
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
			GivePlayerSlotObject(playerid, -1, slot);
		}
		case 95://RÉCUPÉRATEUR D'EAU
		{
		    new Float:x, Float:y, Float:z, Float:angle, Float:fTrash;
		    GetPlayerPos(playerid, x, y, z);
			if(IsPositionUnderSomething(x, y, z))
			{
			    SendClientMessageEx(playerid, ROUGE, "Put this outdoor or it won't catch water!", "Mettez cela à l'extérieur, sinon il ne pourra pas collecter d'eau !", "¡Ponga eso fuera, de otra manera, no colectará agua!", "Portugais", "Italien", "Allemand");
			    return 1;
			}
		    //---
		    GetPlayerFacingAngle(playerid, angle);
			if(CA_RayCastLine(x, y, z, x + 0.66 * floatsin(-angle, degrees), y + 0.66 * floatcos(-angle, degrees), z, fTrash, fTrash, fTrash) != 0)
			{
		    	SendClientMessageEx(playerid, ROUGE, "There is not enough room here!", "Il n'y a pas assez de place ici !", "Espagnol", "Portugais", "Italien", "Allemand");
				return 1;
			}
			GetXYInFrontOfPoint(x, y, angle, 0.56);
			CreateCollector(x, y, z, angle, 0);
			GivePlayerSlotObject(playerid, -1, slot);
		}
		case 96://CLÉ ANGLAISE
		{
		    if(dRepair[playerid][0] == 0)
		    {
				if(IsPlayerInAnyVehicle(playerid))
				{
				    SendClientMessageEx(playerid, ROUGE, "You cannot fix the engine while in the vehicle!", "Vous ne pouvez pas réparer le moteur depuis un véhicule !", "¡No puede arreglar el motor si esta en un vehículo!", "Portugais", "Italien", "Allemand");
				    return 1;
				}
				new Float:x, Float:y, Float:z, Float:a, vehicleid = INVALID_VEHICLE_ID;
				GetPlayerPos(playerid, x, y, z);
				GetVehicleWithinDistance(x, y, z, 7.0, vehicleid);
				if(vehicleid == INVALID_VEHICLE_ID)
				{
				    SendClientMessageEx(playerid, ROUGE, "You are not near a vehicle!", "Vous n'êtes pas proche d'un véhicule !", "¡No esta cerca de un vehículo!", "Portugais", "Italien", "Allemand");
					return 1;
				}
				//---
				new Float:vHealth;
				GetVehicleHealth(vehicleid, vHealth);
				if(vHealth > 900.0)
				{
				    SendClientMessageEx(playerid, ROUGE, "This vehicle doesn't need to be repaired!", "Ce véhicule n'a pas besoin de réparations !", "¡Esto vehículo no se necessita arreglos!", "Portugais", "Italien", "Allemand");
					return 1;
				}
				//---
				if(slot != 0) SwapPlayerObjects(playerid, 0, slot);
				//---
				new Float:sx, Float:sy, Float:sz, Float:fLenght;
				GetVehiclePos(vehicleid, x, y, z);
				GetVehicleZAngle(vehicleid, a);
	            GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, sx, fLenght, sz);
				sx = x, sy = y, sz = z;
				GetXYInFrontOfPoint(sx, sy, a, floatdiv(fLenght, 2));
				if(IsColBetweenTwoPos(x, y, z, sx, sy, sz))
				{
				    SendClientMessageEx(playerid, ROUGE, "There is not enough room here for you to be able to repair your vehicle.", "Il n'y a pas assez de place ici pour réparer votre véhicule.", "Espagnol", "Portugais", "Italien", "Allemand");
					return 1;
				}
				//---
				SetPlayerPos(playerid, sx, sy, sz);
				GetVehiclePos(vehicleid, x, y, z);
				SetPlayerFacingToPos(playerid, x, y);
				SetCameraBehindPlayer(playerid);
 				SetVehicleEngineState(vehicleid, false);
				SetVehicleBonnetState(vehicleid, true);
				//---
				TogglePlayerControllable(playerid, false);
				dRepair[playerid][0] = 20;
				dRepair[playerid][1] = -1;
				dRepair[playerid][2] = 0;
				dRepair[playerid][3] = vehicleid;
			}
		}
		case 97://COFFRE FORT
		{
		    new Float:x, Float:y, Float:z, Float:angle, Float:fTrash;
		    GetPlayerPos(playerid, x, y, z);
		    GetPlayerFacingAngle(playerid, angle);
			//---
			if(CA_RayCastLine(x, y, z, x + 0.6 * floatsin(-angle, degrees), y + 0.6 * floatcos(-angle, degrees), z, fTrash, fTrash, fTrash) != 0)
			{
		    	SendClientMessageEx(playerid, ROUGE, "There is not enough room here!", "Il n'y a pas assez de place ici !", "Espagnol", "Portugais", "Italien", "Allemand");
				return 1;
			}
			//---
			GetXYInFrontOfPoint(x, y, angle, 0.4);
			pCreateSafe[playerid] = CreateSafe(x, y, z, angle);
			GivePlayerSlotObject(playerid, -1, slot);
			//---
			EditDynamicObject(playerid, dSafeInfos[pCreateSafe[playerid]][oSafe][0]);
		}
		case 98://BOUTEILLE D'ESSENCE
		{
			new dTankID = IsPlayerNearTank(playerid);
			if(dTankID != -1 && dTanks[dTankID][dTankGas] != 1)
			{
			    if(GetTankFuel(dTankID) + 400 > MAX_TANK_FUEL)
			    {
			        SendClientMessageEx(playerid, ROUGE, "This tank is full!", "Cette citerne est pleine !", "Espagnol", "Portugais", "Italien", "Allemand");
			        return 1;
			    }
			    GiveTankFuel(dTankID, 500);
				GivePlayerSlotObject(playerid, 40, slot);
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
				return 1;
			}
		    //---
			if(IsPlayerInAnyVehicle(playerid))
			{
			    SendClientMessageEx(playerid, ROUGE, "You cannot refill the tank while in the vehicle!", "Vous ne pouvez pas faire le plein depuis un véhicule !", "¡No puede repostar gasolina si esta en un vehículo!", "Portugais", "Italien", "Allemand");
			    return 1;
			}
			new Float:x, Float:y, Float:z, vehicleid = INVALID_VEHICLE_ID, vehicle = -1;
			GetPlayerPos(playerid, x, y, z);
			GetVehicleWithinDistance(x, y, z, 7.0, vehicleid);
			vehicle = GetVehicleID(vehicleid);
			if(IsVehicleBicycle(dVehicleInfos[vehicle][dVehicleID])) return 1;
			if(vehicle == -1)
			{
				SendClientMessageEx(playerid, ROUGE, "This vehicle cannot be refilled!", "Vous ne pouvez pas remplir ce véhicule !", "¡No puede repostar gasolina en este vehículo!", "Portugais", "Italien", "Allemand");
				return 1;
			}
			if(vehicleid == INVALID_VEHICLE_ID)
			{
			    SendClientMessageEx(playerid, ROUGE, "You are not near a vehicle!", "Vous n'êtes pas proche d'un véhicule !", "¡No esta cerca de un vehículo!", "Portugais", "Italien", "Sie sint in der Nähe eines Fahrzeug");
				return 1;
			}
			//---
			if(dVehicleInfos[vehicle][dFuel] > GetVehicleMaxFuel(vehicle) - 200)
			{
			    SendClientMessageEx(playerid, ROUGE, "This vehicle doesn't need gas!", "Ce véhicule n'a pas besoin d'essence !", "¡Esto vehículo no necessita gasolina!", "Portugais", "Italien", "Allemand");
				return 1;
			}
			//---
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
			GiveVehicleFuel(vehicle, 500);
			GivePlayerSlotObject(playerid, 40, slot);
		}
		case 99://MINE
		{
			new Float:x, Float:y, Float:z, Float:angle;
			GetPlayerPos(playerid, x, y, z);
			GetPlayerFacingAngle(playerid, angle);
		   	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 1, 1, 0, 0, 1);
			if(GetPlayerSurfingVehicleID(playerid) != INVALID_VEHICLE_ID && !IsPlayerInAnyVehicle(playerid)) CreateBomb(1, -5, GetPlayerSurfingVehicleID(playerid), x, y, z, angle, -1, 0);
		   	else if(IsPlayerInAnyVehicle(playerid)) CreateBomb(1, -5, GetPlayerVehicleID(playerid), x, y, z, angle, -1, 0);
		   	else if(GetPlayerSurfingVehicleID(playerid) == INVALID_VEHICLE_ID) CreateBomb(1, -5, 0, x, y, z, angle, -1, 0);
			ShowPlayerTextInfo(playerid, 5000, "~r~If somebody approches the mine it will blow.", "~r~Si quelqu'un s'approche de cette mine, elle explosera.", "~r~Si alguien viene cerca de la bomba, explotará.", "~r~Portugais", "~r~Italien", "~r~Allemand");
		    GivePlayerSlotObject(playerid, -1, slot);
		}
		case 100://BOMBE À TIMER
		{
		    if(CallRemoteFunction("GetPlayerMission", "i", playerid) == MISSION_SHORTCUT_BRIDGE)
		    {
			    SendClientMessageEx(playerid, ROUGE, "You can't use this item right now!", "Vous ne pouvez pas utiliser cet objet maintenant !", "¡No puedes utilizar esto objecto ahora!", "Portugais", "Italien", "Allemand");
				return 1;
		    }
			new Float:x, Float:y, Float:z, Float:angle;
			GetPlayerPos(playerid, x, y, z);
			GetPlayerFacingAngle(playerid, angle);
		   	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 1, 1, 0, 0, 1);
			if(GetPlayerSurfingVehicleID(playerid) != INVALID_VEHICLE_ID && !IsPlayerInAnyVehicle(playerid)) CreateBomb(2, 15, GetPlayerSurfingVehicleID(playerid), x, y, z, angle, -1, 0);
		   	else if(IsPlayerInAnyVehicle(playerid)) CreateBomb(2, 15, GetPlayerVehicleID(playerid), x, y, z, angle, -1, 0);
		   	else if(GetPlayerSurfingVehicleID(playerid) == INVALID_VEHICLE_ID) CreateBomb(2, 15, 0, x, y, z, angle, -1, 0);
			ShowPlayerTextInfo(playerid, 5000, "~r~You have 15 seconds to run.", "~r~Vous avez 15 secondes pour partir.", "~r~Tiene 15 segundos para escapar.", "~r~Portugais", "~r~Italien", "~r~Sie haben 15 Sekunden zum Fluchten.");
		    GivePlayerSlotObject(playerid, -1, slot);
		}
		case 101://CAGOULE
		{
		    GivePlayerClothe(playerid, 3, 101, 0.0805, -0.0216, 0.0, 180.0, 90.0, 0.0, 1.1, 1.1, 1.1);
		    GivePlayerSlotObject(playerid, -1, slot);
		}
		case 102://CASSEROLE
		{
		    if(!IsPlayerNextToFire(playerid))
		    {
		        SendClientMessageEx(playerid, ROUGE, "There is no fire nearby!", "Vous n'êtes pas proche du feu !", "¡No esta cerca del fuego!", "Portugais", "Italien", "Sie sint nicht in di Nähe von ein feuer!");
				return 1;
		    }
			ShowPlayerKitchen(playerid);
		}
		case 103://MÉTAL
		{
			if(pPlayerInfos[playerid][pTorse] == 84 || HasPlayerItem(playerid, 84) != -1)
		    {
				switch(pPlayerInfos[playerid][pLangue])
				{
				 	case LANGUAGE_EN: ShowPlayerDialog(playerid, 43, DIALOG_STYLE_MSGBOX, "Armour", "You can fix your bulletproof armour using a piece of junk.\nDo you want to fix it?", "Fix", "Cancel");
				 	case LANGUAGE_FR: ShowPlayerDialog(playerid, 43, DIALOG_STYLE_MSGBOX, "Gilet pare-balles", "Vous pouvez réparer un gilet pare-balles avec du métal.\nVoulez-vous le réparer ?", "Réparer", "Annuler");
				 	case LANGUAGE_ES: ShowPlayerDialog(playerid, 43, DIALOG_STYLE_MSGBOX, "Espagnol", "Espagnol", "Ok", "");
				 	case LANGUAGE_PG: ShowPlayerDialog(playerid, 43, DIALOG_STYLE_MSGBOX, "Portugais", "Portugais", "Ok", "");
					case LANGUAGE_IT: ShowPlayerDialog(playerid, 43, DIALOG_STYLE_MSGBOX, "Italien", "Italien", "Ok", "");
					case LANGUAGE_DE: ShowPlayerDialog(playerid, 43, DIALOG_STYLE_MSGBOX, "Allemand", "Allemand" , "Ok", "");
				}
		    }
		}
		case 106://SERRURE
		{
		    new Float:x, Float:y, Float:z;
		    GetPlayerPos(playerid, x, y, z);
			dDoor[playerid] = IsPlayerNearHouseDoor(playerid);
			//---
			if(dDoor[playerid] == -1)
			{
			    SendClientMessageEx(playerid, ROUGE, "You are not near a house!", "Vous n'êtes pas près d'une maison !", "¡No está cerca de una casa!", "Portugais", "Italien", "Allemand");
			    return 1;
			}
			if(!dHouse[dDoor[playerid]][bPorte][0])
			{
			    SendClientMessageEx(playerid, ROUGE, "This house has no door!", "Cette maison n'a pas porte !", "¡Esta casa no tiene una puerta!", "Portugais", "Questa casa non ha una porta !", "Allemand");
			    return 1;
			}
			if(!dHouse[dDoor[playerid]][bPorte][1])
			{
			    SendClientMessageEx(playerid, ROUGE, "Open the door to change the code.", "Ouvrez la porte pour changer le code.", "Espagnol", "Portugais", "Italien", "Allemand");
			    return 1;
			}
			switch(pPlayerInfos[playerid][pLangue])
			{
			 	case LANGUAGE_EN: ShowPlayerDialog(playerid, 57, DIALOG_STYLE_INPUT, "Door", "Enter a four numbered code:", "Ok", "");
			 	case LANGUAGE_FR: ShowPlayerDialog(playerid, 57, DIALOG_STYLE_INPUT, "Porte", "Écrivez un nombre à quatre chiffres comme code:", "Ok", "");
			 	case LANGUAGE_ES: ShowPlayerDialog(playerid, 57, DIALOG_STYLE_INPUT, "Puerta", "Espagnol", "Ok", "");
			 	case LANGUAGE_PG: ShowPlayerDialog(playerid, 57, DIALOG_STYLE_INPUT, "Porta", "Portugais", "Ok", "");
				case LANGUAGE_IT: ShowPlayerDialog(playerid, 57, DIALOG_STYLE_INPUT, "Porta", "Italien", "Ok", "");
				case LANGUAGE_DE: ShowPlayerDialog(playerid, 57, DIALOG_STYLE_INPUT, "Tür", "Allemand" , "Ok", "");
			}
		}
		case 109://PIZZA
		{
		    if(pPlayerInfos[playerid][pHunger] > 90)
		    {
		        SendClientMessageEx(playerid, ROUGE, "You're not hungry!", "Vous n'avez pas faim !", "¡No tiene hambre!", "Portugais", "Non hai fame!", "Sie sint nicht hungrig!");
				return 1;
		    }
		    GivePlayerSlotObject(playerid, -1, slot);
			ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		    GivePlayerHunger(playerid, 50);
		    GivePlayerSleep(playerid, 5);
		}
		case 110://PAIN
		{
		    if(pPlayerInfos[playerid][pHunger] > 90)
		    {
		        SendClientMessageEx(playerid, ROUGE, "You're not hungry!", "Vous n'avez pas faim !", "¡No tiene hambre!", "Portugais", "Non hai fame!", "Sie sint nicht hungrig!");
				return 1;
		    }
		    GivePlayerSlotObject(playerid, -1, slot);
			ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		    GivePlayerHunger(playerid, 20);
		    GivePlayerSleep(playerid, 5);
		}
		case 112://PORTE
		{
		    new Float:x, Float:y, Float:z;
		    GetPlayerPos(playerid, x, y, z);
			dHouseID[playerid] = IsHouseNearToPoint(15.0, x, y, z);
			//---
			if(dHouseID[playerid] == -1)
			{
			    SendClientMessageEx(playerid, ROUGE, "You are not near a house!", "Vous n'êtes pas près d'une maison !", "¡No está cerca de una casa!", "Portugais", "Italien", "Allemand");
			    return 1;
			}
			if(dHouse[dHouseID[playerid]][bPorte][0])
			{
			    SendClientMessageEx(playerid, ROUGE, "This house already has a door!", "Cette maison a déjà une porte !", "¡Esta casa ya tiene una puerta!", "Portugais", "Questa casa già ha una porta !", "Allemand");
			    return 1;
			}
			switch(pPlayerInfos[playerid][pLangue])
			{
			 	case LANGUAGE_EN: ShowPlayerDialog(playerid, 10, DIALOG_STYLE_INPUT, "Door", "Enter a four numbered code:", "Ok", "");
			 	case LANGUAGE_FR: ShowPlayerDialog(playerid, 10, DIALOG_STYLE_INPUT, "Porte", "Écrivez un nombre à quatre chiffres comme code:", "Ok", "");
			 	case LANGUAGE_ES: ShowPlayerDialog(playerid, 10, DIALOG_STYLE_INPUT, "Puerta", "Espagnol", "Ok", "");
			 	case LANGUAGE_PG: ShowPlayerDialog(playerid, 10, DIALOG_STYLE_INPUT, "Porta", "Portugais", "Ok", "");
				case LANGUAGE_IT: ShowPlayerDialog(playerid, 10, DIALOG_STYLE_INPUT, "Porta", "Italien", "Ok", "");
				case LANGUAGE_DE: ShowPlayerDialog(playerid, 10, DIALOG_STYLE_INPUT, "Tür", "Allemand" , "Ok", "");
			}
		    dHouseBuild[playerid] = 3;
		}
		case 113://PLANS DE MAISON
		{
		    if(dHouseBuild[playerid] != 0)
		    {
		        SendClientMessageEx(playerid, ROUGE, "You're already building a house!", "Vous construisez déjà une maison !", "¡Espagnol!", "Portugais !", "Italien!", "Allemand!");
				return 1;
			}
			ShowPlayerHousePlans(playerid);
		}
		case 114://BURETTE
		{
		    if(CallRemoteFunction("GetPlayerMission", "i", playerid) == MISSION_LIGHT_UP_SEEK)
		    {
				new dTankID = IsPlayerNearTank(playerid);
				if(dTankID != -1 && dTanks[dTankID][dTankGas] != 1)
				{
				    if(GetTankFuel(dTankID) < 1000)
				    {
				        SendClientMessageEx(playerid, ROUGE, "There is not enough gas left!", "Cette citerne ne contient pas assez d'essence !", "Espagnol", "Portugais", "Italien", "Allemand");
				        return 1;
				    }
				    GiveTankFuel(dTankID, -1000);
					ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
					CallRemoteFunction("OnCinematicGoesOn", "iiii", playerid, 1, 10, 0);
					return 1;
				}
				//---
			    new dStation = IsPlayerNearGasStation(playerid);
				if(dStation == -1)
				{
				    SendClientMessageEx(playerid, ROUGE, "You are not near a gas station!", "Vous n'êtes pas proche d'une station service !", "¡No esta cerca de una estacíon de gasolíno!", "Portugais", "Italien", "Sie sint in der Nähe eines Tankstelle!");
					return 1;
				}
				if(GetStationFuel(dStation) < 1000)
				{
				    SendClientMessageEx(playerid, ROUGE, "This gas station does not have enough gas left!", "Cette station service n'a pas assez d'essence !", "¡Esta estacíon de gasolíno no tiene suficiente de gasolíno!", "Portugais", "Italien", "Allemand");
					return 1;
				}
				GiveStationFuel(dStation, -1000);
				CallRemoteFunction("OnCinematicGoesOn", "iiii", playerid, 1, 10, 0);
		    }
		}
		case 115://GRAINES DE BLÉ
		{
		    if(!CanPlayerPlantHere(playerid))
		    {
		        SendClientMessageEx(playerid, ROUGE, "You can't plant anything here!", "Vous ne pouvez pas planter ici !", "¡No puede plantar aquí!", "Portugais", "Italien", "Sie können nicht hier plantzen!");
				return 1;
		    }
		    new Float:x, Float:y, Float:z, Float:angle;
		    GetPlayerFacingAngle(playerid, angle);
		    for(new i = 0, j = RandomEx(1, 4); i < j; i ++)
		    {
		    	GetPlayerPos(playerid, x, y, z);
		        GetXYInFrontOfPoint(x, y, angle + float(RandomEx(-35, 35)), floatdiv(RandomEx(5, 25), 10));
		    	CreatePlant(1, 0, 5 - pPlayerInfos[playerid][dJardinier], x, y, z, angle);
		    }
			ApplyAnimation(playerid, "GRENADE", "WEAPON_throwu", 4.0, 0, 0, 0, 0, 0, 1);
			GivePlayerSlotObject(playerid, -1, slot);
		}
		case 116://BLÉ
		{
			new dShredderID = IsPlayerNearShredder(playerid);
			if(dShredderID != -1)
		    {
		        if(dShredder[dShredderID][dBroyeur] != 1)
		        {
		            SendClientMessageEx(playerid, ROUGE, "Fill the shredder with gas or it won't work!", "Mettez de l'essence, sinon le broyeur ne marchera pas !", "Espagnol", "Portugais", "Italien", "Allemand");
		            return 1;
		        }
		        new Float:x, Float:y, Float:z, Float:angle;
		        x = dShredder[dShredderID][xBroyeur];
		        y = dShredder[dShredderID][yBroyeur];
		        z = dShredder[dShredderID][zBroyeur];
		        angle = dShredder[dShredderID][aBroyeur];
		        //---
		        angle += 180.0 + float(RandomEx(-20, 20));
		        GetXYInFrontOfPoint(x, y, angle, floatdiv(RandomEx(55, 70), 100));
		        CreateItem(108, x, y, z, false, -1);
				GivePlayerSlotObject(playerid, -1, slot);
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		    }
		}
		case 117://BROYEUR
		{
		    new Float:x, Float:y, Float:z, Float:angle, Float:fTrash;
		    GetPlayerPos(playerid, x, y, z);
		    GetPlayerFacingAngle(playerid, angle);
			if(CA_RayCastLine(x, y, z, x + 0.7 * floatsin(-angle, degrees), y + 0.7 * floatcos(-angle, degrees), z, fTrash, fTrash, fTrash) != 0)
			{
		    	SendClientMessageEx(playerid, ROUGE, "There is not enough room here!", "Il n'y a pas assez de place ici !", "Espagnol", "Portugais", "Italien", "Allemand");
				return 1;
			}
			GetXYInFrontOfPoint(x, y, angle, 0.6);
			pShredder[playerid] = CreateShredder(x, y, z, angle, 0);
			EditDynamicObject(playerid, dShredder[pShredder[playerid]][oBroyeur]);
			GivePlayerSlotObject(playerid, -1, slot);
		}
		case 118://JUS D'ORANGES
		{
		    if(pPlayerInfos[playerid][pThirst] > 90)
		    {
		        SendClientMessageEx(playerid, ROUGE, "You're not thirsty!", "Vous n'avez pas soif !", "¡No tiene sed!", "Portugais", "Non hai sete!", "Sie sint nicht durstig!");
				return 1;
		    }
			GivePlayerSlotObject(playerid, -1, slot);
			ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		    GivePlayerThirst(playerid, 50);
		    PlayerPlaySound(playerid, 32200, 0.0, 0.0, 0.0);
		}
		case 119://JUS DE POMME
		{
		    if(pPlayerInfos[playerid][pThirst] > 90)
		    {
		        SendClientMessageEx(playerid, ROUGE, "You're not thirsty!", "Vous n'avez pas soif !", "¡No tiene sed!", "Portugais", "Non hai sete!", "Sie sint nicht durstig!");
				return 1;
		    }
			GivePlayerSlotObject(playerid, -1, slot);
			ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		    GivePlayerThirst(playerid, 35);
		    PlayerPlaySound(playerid, 32200, 0.0, 0.0, 0.0);
		}
		case 120://SOUPE AU POISSON
		{
		    if(pPlayerInfos[playerid][pHunger] > 90)
		    {
		        SendClientMessageEx(playerid, ROUGE, "You're not hungry!", "Vous n'avez pas faim !", "¡No tiene hambre!", "Portugais", "Non hai fame!", "Sie sint nicht hungrig!");
				return 1;
		    }
			GivePlayerSlotObject(playerid, -1, slot);
			ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		    GivePlayerHunger(playerid, 30);
		    GivePlayerThirst(playerid, 20);
		    GivePlayerSleep(playerid, 5);
		}
		case 121://SANDWICH À LA VIANDE
		{
		    if(pPlayerInfos[playerid][pHunger] > 90)
		    {
		        SendClientMessageEx(playerid, ROUGE, "You're not hungry!", "Vous n'avez pas faim !", "¡No tiene hambre!", "Portugais", "Non hai fame!", "Sie sint nicht hungrig!");
				return 1;
		    }
			GivePlayerSlotObject(playerid, -1, slot);
			ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		    GivePlayerHunger(playerid, 30);
		    GivePlayerSleep(playerid, 5);
		}
		case 123://FOUGÈRE
		{
		    if(CallRemoteFunction("GetPlayerMission", "i", playerid) == MISSION_REGGAE_3_VOODOO)
		    {
			    if(IsPlayerInRangeOfPoint(playerid, 5.0, -2012.5629, -2771.6755, 7.6943))
			    {
					CallRemoteFunction("OnCinematicGoesOn", "iiii", playerid, 6, 16, 0);
			    }
			    else
			    {
			    	ShowPlayerTextInfo(playerid, -1, "Use the plant inside of the ~r~Jellywitch's~n~~r~shack.", "Utilisez la fougère dans la ~r~cabane~n~~r~de la Jellywitch", "Espagnol", "Portugais", "Italien", "Allemand");
			    }
		    }
		}
		case 126://EAU NON-POTABLE
		{
			for(new i = 0; i < MAX_PLANTS; i++)
			{
				if(dPlant[i][dPlantID] != 0)
				{
				    if(IsPlayerInRangeOfPoint(playerid, 2.0, dPlant[i][xPlant], dPlant[i][yPlant], dPlant[i][zPlant]))
				    {
					    if((IsNight() && dPlant[i][dGrowTime] > 1) || (!IsNight() && dPlant[i][dGrowTime] > 0))
					    {
							dPlant[i][dGrowTime] -= 2;
							if(dPlant[i][dGrowTime] < 0) dPlant[i][dGrowTime] = 0;
							if(dPlant[i][dGrowTime] == 0) GrowPlant(i);
							GivePlayerSlotObject(playerid, 40, slot);
							ApplyAnimation(playerid, "GRENADE", "WEAPON_throwu", 4.0, 0, 0, 0, 0, 0, 1);
							return 1;
					    }
				    	break;
					}
				}
		    }
		    SendClientMessageEx(playerid, ROUGE, "Put this water in a pan, bringing it to boil will make it drinkable!", "Cuisez cette eau, la faire bouillir la rendra potable !", "Espagnol", "Portugais", "Italien", "Allemand");
			return 1;
		}
		case 127://ÉTAGÈRE
		{
		    new Float:x, Float:y, Float:z, Float:angle, Float:fTrash;
		    GetPlayerPos(playerid, x, y, z);
		    GetPlayerFacingAngle(playerid, angle);
			//---
			if(CA_RayCastLine(x, y, z, x + 1.0 * floatsin(-angle, degrees), y + 1.0 * floatcos(-angle, degrees), z, fTrash, fTrash, fTrash) != 0)
			{
		    	SendClientMessageEx(playerid, ROUGE, "There is not enough room here!", "Il n'y a pas assez de place ici !", "Espagnol", "Portugais", "Italien", "Allemand");
				return 1;
			}
			//---
			GetXYInFrontOfPoint(x, y, angle, 0.9);
			pRack[playerid] = CreateGunRack(x, y, z, angle);
			EditDynamicObject(playerid, dGunRackInfos[pRack[playerid]][oRack]);
			GivePlayerSlotObject(playerid, -1, slot);
		}
		case 128://BRASERO
		{
		    new Float:x, Float:y, Float:z, Float:angle, Float:fTrash;
		    GetPlayerPos(playerid, x, y, z);
		    GetPlayerFacingAngle(playerid, angle);
			//---
			if(CA_RayCastLine(x, y, z, x + 0.5 * floatsin(-angle, degrees), y + 0.5 * floatcos(-angle, degrees), z, fTrash, fTrash, fTrash) != 0)
			{
		    	SendClientMessageEx(playerid, ROUGE, "There is not enough room here!", "Il n'y a pas assez de place ici !", "Espagnol", "Portugais", "Italien", "Allemand");
				return 1;
			}
			//---
			GetXYInFrontOfPoint(x, y, angle, 0.4);
			pBrasero[playerid] = CreateBrasero(x, y, z, angle, 1);
			EditDynamicObject(playerid, dBraseroInfos[pBrasero[playerid]][oBrasero]);
			GivePlayerSlotObject(playerid, -1, slot);
		}
		case 130://FRIGO
		{
		    new Float:x, Float:y, Float:z, Float:angle, Float:fTrash;
		    GetPlayerPos(playerid, x, y, z);
		    GetPlayerFacingAngle(playerid, angle);
			//---
			if(CA_RayCastLine(x, y, z, x + 1.0 * floatsin(-angle, degrees), y + 1.0 * floatcos(-angle, degrees), z, fTrash, fTrash, fTrash) != 0)
			{
		    	SendClientMessageEx(playerid, ROUGE, "There is not enough room here!", "Il n'y a pas assez de place ici !", "Espagnol", "Portugais", "Italien", "Allemand");
				return 1;
			}
			//---
			GetXYInFrontOfPoint(x, y, angle, 0.9);
			pFridge[playerid] = CreateFridge(x, y, z, angle);
			EditDynamicObject(playerid, dFridgeInfos[pFridge[playerid]][oFridge]);
			GivePlayerSlotObject(playerid, -1, slot);
		}
		case 132://EXP
		{
		    GivePlayerExp(playerid, 125);
			GivePlayerSlotObject(playerid, -1, slot);
		}
		case 135://GILET THERMIQUE
		{
		    GivePlayerClothe(playerid, 4, 135, 0.0955, 0.0528, -0.009, 172.8, 90.7, 0.0, 1.2, 1.2, 1.2);
		    GivePlayerSlotObject(playerid, -1, slot);
		}
		case 137://LAMPE
		{
		    if(!IsPlayerNearHouse(playerid))
		    {
		        SendClientMessageEx(playerid, ROUGE, "You must be at a house to set up furniture!", "Vous devez être dans une maison pour poser des meubles !", "Espagnol", "Portugais", "Italien", "Allemand");
		        return 1;
		    }
			GivePlayerSlotObject(playerid, -1, slot);
			PlayerSetFurniture(playerid, 1);
		}
		case 138://LACRYMOGÈNE
		{
		    if(IsPlayerInAnyVehicle(playerid))
		    {
		        SendClientMessageEx(playerid, ROUGE, "You can't throw anything while in a vehicle!", "Vous ne pouvez pas lancer de projectiles depuis un véhicule !", "Espagnol", "Portugais", "Italien", "Allemand");
		        return 1;
		    }
			GivePlayerSlotObject(playerid, -1, slot);
			//GivePlayerWeapon(playerid, 18, 1);
			PlayerThrowProjectile(playerid, THROW_GAS);
		}
		case 143://TÊTE DU ROI DES BAMBIS
		{
		    if(!IsPlayerNearHouse(playerid))
		    {
		        SendClientMessageEx(playerid, ROUGE, "You must be at a house to set up furniture!", "Vous devez être dans une maison pour poser des meubles !", "Espagnol", "Portugais", "Italien", "Allemand");
		        return 1;
		    }
			GivePlayerSlotObject(playerid, -1, slot);
			PlayerSetFurniture(playerid, 2);
		}
		case 144://TAPIS
		{
		    if(!IsPlayerNearHouse(playerid))
		    {
		        SendClientMessageEx(playerid, ROUGE, "You must be at a house to set up furniture!", "Vous devez être dans une maison pour poser des meubles !", "Espagnol", "Portugais", "Italien", "Allemand");
		        return 1;
		    }
			GivePlayerSlotObject(playerid, -1, slot);
			PlayerSetFurniture(playerid, 3);
		}
		case 146://BOITE
		{
		    new dBoxItems[] =
		    {
		        90, 96, 97, 104, 111, 113, 129, 134, 147, 148
		    };
			GivePlayerSlotObject(playerid, dBoxItems[random(sizeof(dBoxItems))], slot);
		}
		case 148://POUSSE DE SAPIN
		{
		    if(!CanPlayerPlantHere(playerid))
		    {
		        SendClientMessageEx(playerid, ROUGE, "You can't plant anything here!", "Vous ne pouvez pas planter ici !", "¡No puede plantar aquí!", "Portugais", "Italien", "Sie können nicht hier plantzen!");
				return 1;
		    }
		    new Float:x, Float:y, Float:z, Float:angle;
		    GetPlayerPos(playerid, x, y, z);
		    GetPlayerFacingAngle(playerid, angle);
		    CreatePlant(5, 0, 45 - pPlayerInfos[playerid][dJardinier] * 5, x, y, z, angle);
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
			GivePlayerSlotObject(playerid, -1, slot);
		}
		case 149://BOITE
		{
		    new dBoxItems[] =
		    {
		        2, 10, 26, 30, 71, 91, 99, 126
		    };
			GivePlayerSlotObject(playerid, dBoxItems[random(sizeof(dBoxItems))], slot);
		}
		case 151://LIT
		{
		    if(!CanPlayerCreateBed(playerid))
		    {
				SendClientMessageEx(playerid, ROUGE, "You must be in a house or near a tent!", "Vous devez être dans une maison ou près d'une tente !", "¡Necessita estar en una casa o cerca de una tienda!", "Portugais", "Italien", "Allemand");
		        return 1;
			}
		    new Float:x, Float:y, Float:z, Float:a, Float:fTrash;
		    GetPlayerPos(playerid, x, y, z);
		    GetPlayerFacingAngle(playerid, a);
			//---
			if(CA_RayCastLine(x, y, z, x + 1.0 * floatsin(-a, degrees), y + 1.0 * floatcos(-a, degrees), z, fTrash, fTrash, fTrash) != 0)
			{
		    	SendClientMessageEx(playerid, ROUGE, "There is not enough room here!", "Il n'y a pas assez de place ici !", "Espagnol", "Portugais", "Italien", "Allemand");
				return 1;
			}
			//---
			GetXYInFrontOfPoint(x, y, a, 0.7119);
			pBed[playerid] = CreateBed(2, x, y, z, a);
			EditDynamicObject(playerid, dBed[pBed[playerid]][oBed]);
		    GivePlayerSlotObject(playerid, -1, slot);
		}
		case 153://Hotdog
		{
		    if(pPlayerInfos[playerid][pHunger] > 90)
		    {
		        SendClientMessageEx(playerid, ROUGE, "You're not hungry!", "Vous n'avez pas faim !", "¡No tiene hambre!", "Portugais", "Non hai fame!", "Sie sint nicht hungrig!");
				return 1;
		    }
			GivePlayerSlotObject(playerid, -1, slot);
			ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		    GivePlayerHunger(playerid, 15);
		    GivePlayerSleep(playerid, 5);
		}
		case 155://Fauteuil
		{
		    new Float:x, Float:y, Float:z, Float:a, Float:fTrash;
		    GetPlayerPos(playerid, x, y, z);
		    GetPlayerFacingAngle(playerid, a);
			//---
			if(CA_RayCastLine(x, y, z, x + 1.1 * floatsin(-a, degrees), y + 1.1 * floatcos(-a, degrees), z, fTrash, fTrash, fTrash) != 0)
			{
		    	SendClientMessageEx(playerid, ROUGE, "There is not enough room here!", "Il n'y a pas assez de place ici !", "Espagnol", "Portugais", "Italien", "Allemand");
				return 1;
			}
			//---
			new newObject;
			GetXYInFrontOfPoint(x, y, a, 1.0);
			pSeat[playerid] = CreateSeat(1729, x, y, z, a, _, newObject);
			EditDynamicObject(playerid, newObject);
		    GivePlayerSlotObject(playerid, -1, slot);
		}
		case 156://PANNEAU
		{
		    new Float:x, Float:y, Float:z, Float:angle, Float:fTrash;
		    GetPlayerPos(playerid, x, y, z);
		    GetPlayerFacingAngle(playerid, angle);
			//---
			if(CA_RayCastLine(x, y, z, x + 0.6 * floatsin(-angle, degrees), y + 0.6 * floatcos(-angle, degrees), z, fTrash, fTrash, fTrash) != 0)
			{
		    	SendClientMessageEx(playerid, ROUGE, "There is not enough room here!", "Il n'y a pas assez de place ici !", "Espagnol", "Portugais", "Italien", "Allemand");
				return 1;
			}
			//---
			GetXYInFrontOfPoint(x, y, angle, 0.4);
			pBoard[playerid] = CreateBoard(x, y, z, angle);
			new board[Board];
			GivePlayerSlotObject(playerid, -1, slot);
			new Pointer: pt = LIST_IT_data_ptr(GetNodeAt(boardList, pBoard[playerid]));
			MEM_get_arr(pt, _, board);
			//---
			EditDynamicObject(playerid, board[oBoard][0]);
		}
		case 158://RETOUR À L'ENVOYEUR
		{
			new bItemFound;
			for(new i = 0; i < 50; i ++)
			{
			    if(pPlayerOfflineInfos[playerid][dReturnedItem][i] != 0)
			    {
					PlayerDropObject(playerid, pPlayerOfflineInfos[playerid][dReturnedItem][i], floatdiv(RandomEx(5, 20), 10));
					pPlayerOfflineInfos[playerid][dReturnedItem][i] = 0;
					if(!bItemFound) bItemFound = true;
			    }
			}
			if(bItemFound)
			{
		    	SendClientMessageEx(playerid, BRUN, "Note: Thanks for choosing DumpYaTrash (C)!", "Note: Merci d'avoir choisi Vid'TesPoches (C) !", "Espagnol", "Portugais", "Italien", "Allemand");
			}
			else
			{
		    	SendClientMessageEx(playerid, ROUGE, "There is nothing to retrieve!", "Il n'y a rien à récupérer !", "Espagnol", "Portugais", "Italien", "Allemand");
			}
			GivePlayerSlotObject(playerid, -1, slot);
		}
		//HasPlayerItem(playerid, objectid)
	}
	return 1;
}

//---OBJETS SUR LE SOL
public LoadItems_data(name[],value[])
{
	new string[50];
	for(new i = 0; i < MAX_GROUND_ITEMS; i ++)
	{
	    format(string, sizeof(string), "ItemID%d", i);
		INI_Int(string, dItems[i][ItemID]);
	    format(string, sizeof(string), "AutoSpawn%d", i);
		INI_Bool(string, dItems[i][bAutoSpawn]);
	    format(string, sizeof(string), "xItem%d", i);
		INI_Float(string, dItems[i][xItem]);
	    format(string, sizeof(string), "yItem%d", i);
		INI_Float(string, dItems[i][yItem]);
	    format(string, sizeof(string), "zItem%d", i);
		INI_Float(string, dItems[i][zItem]);
	}
	return 1;
}

SaveItems()
{
	new string[50];
	new INI:File = INI_Open(IPATH);
	INI_SetTag(File, "data");
	for(new i = 0; i < MAX_GROUND_ITEMS; i ++)
	{
	    format(string, sizeof(string), "ItemID%d", i);
		INI_WriteInt(File,string, dItems[i][ItemID]);
	    format(string, sizeof(string), "AutoSpawn%d", i);
		INI_WriteBool(File,string, dItems[i][bAutoSpawn]);
	    format(string, sizeof(string), "xItem%d", i);
		INI_WriteFloat(File,string, dItems[i][xItem]);
	    format(string, sizeof(string), "yItem%d", i);
		INI_WriteFloat(File,string, dItems[i][yItem]);
	    format(string, sizeof(string), "zItem%d", i);
		INI_WriteFloat(File,string, dItems[i][zItem]);
	}
	INI_Close(File);
}

public PlayerDropObject(playerid, objectid, Float:distance)//Fonction pour faire qu'un objet soit drop par un joueur
{
	if(!FCNPC_IsValid(playerid))//La seule fois où un NPC peut drop, c'est quand il meurt, donc on ne met l'animation que si c'est un joueur vivant
	{
		if(aObjects[objectid][bHeavy]) ApplyAnimation(playerid, "CARRY", "putdwn", 3.0, 0, 0, 0, 0, 0);
		else ApplyAnimation(playerid, "GRENADE", "WEAPON_throwu", 4.0, 0, 0, 0, 0, 0, 1);
	}
	//---
	if(objectid == 114) return 1;
	new Float:x, Float:y, Float:z, Float:a, Float:x2, Float:y2, Float:z2;
	GetPlayerPos(playerid, x, y, z);//On prend la position du joueur
	GetPlayerFacingAngle(playerid, a);//...et son angle
	a += float(RandomEx(-45, 45));//On ajoute un nombre random pour la direction
	x2 = x, y2 = y, z2 = z;//On donne la même valeur aux deux groupes de variables
	GetXYInFrontOfPoint(x2, y2, a, distance);//Et on prend la position dans la distance donnée
	//---
	new dFound = CA_RayCastLine(x, y, z, x2, y2, z2, x, y, z);//On regarde si le joueur ne va pas balancer le truc dans le mur
	//---
	if(dFound == 0)
	{
		swapfloat(x, x2);
		swapfloat(y, y2);
		swapfloat(z, z2);
	}
	CA_RayCastLine(x, y, z, x, y, z - 500.0, x2, y2, z2);//On regarde où est le sol à partir de la nouvelle position
	if(z2 < -85.0)
	{
    	CA_FindZ_For2DCoord(x2, y2, z2);
	}
	new dSlotID = CreateItem(objectid, x2, y2, z2 + 1.0, false, -1);//On crée l'objet, là, au sol
	SetDynamicObjectPos(dItems[dSlotID][ObjectID], x, y, z);//On remonte l'objet à hauteur du joueur
	Streamer_Update(playerid);//On actualise le streamer pour que l'objet soit vu en train de tomber
	//---
	MoveDynamicObject(dItems[dSlotID][ObjectID], x2, y2, z2 + 1.0 + aObjects[objectid][GroundOffSetZ], 10.0);//Et on le fait tomber vers le sol
	return 1;
}

public CreateItem(objectid, Float:x, Float:y, Float:z, bool:spawned, load)
{
	if(!(MAX_ITEMS > objectid >= 0)) return -1;
	static slotid;
	if(objectid != 0)
	{
		if(load == -1 && dItems[slotid][ItemID] != 0)
		{
		    for(new i = 0; i < MAX_GROUND_ITEMS; i ++)
		    {
		        if(dItems[i][ItemID] == 0)
		        {
		            slotid = i;
		            break;
		        }
		    }
		}
		//if(GetTickCount() > 2500) printf("CreateItem(%d, %.4f, %.4f, %.4f, %d) slotid = %d", objectid, x, y, z, spawned, slotid);
		if(load == -1 && dItems[slotid][ItemID] != 0)
		{
			if(dItems[slotid][bAutoSpawn]) dSpawnedItems --;
			DestroyDynamicObject(dItems[slotid][ObjectID]);
			DestroyDynamic3DTextLabel(dItems[slotid][ObjectText]);
		}
	 	dItems[(load == -1) ? slotid : load][ObjectID] = CreateDynamicObject(aObjects[objectid][ObjectModelID], x, y, z + aObjects[objectid][GroundOffSetZ], aObjects[objectid][GroundRotX], aObjects[objectid][GroundRotY], aObjects[objectid][GroundRotZ], -1, -1, -1, 25.0, 20.0);
	    dItems[(load == -1) ? slotid : load][ItemID] = objectid;
		dItems[(load == -1) ? slotid : load][xItem] = x;
		dItems[(load == -1) ? slotid : load][yItem] = y;
		dItems[(load == -1) ? slotid : load][zItem] = z;
		if(spawned) dItems[(load == -1) ? slotid : load][bAutoSpawn] = true, dSpawnedItems ++;
	    dItems[(load == -1) ? slotid : load][ObjectText] = CreateDynamic3DTextLabel(NoNewLineSign(aObjects[objectid][ObjectEnName]), JAUNE, x, y, z - 1.0, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 3.5);
    }
	slotid ++;
	if(slotid == MAX_GROUND_ITEMS) slotid = 0;
    return (slotid == 0) ? MAX_GROUND_ITEMS : slotid - 1;
}

public DestroyItem(itemid)
{
	DestroyDynamicObject(dItems[itemid][ObjectID]);
	dItems[itemid][ObjectID] = INVALID_OBJECT_ID;
	dItems[itemid][ItemID] = 0;
	dItems[itemid][xItem] = 0.0;
	dItems[itemid][yItem] = 0.0;
	dItems[itemid][zItem] = 0.0;
	if(dItems[itemid][bAutoSpawn]) dItems[itemid][bAutoSpawn] = false, dSpawnedItems --;
	DestroyDynamic3DTextLabel(dItems[itemid][ObjectText]);
	dItems[itemid][ObjectText] = Text3D:INVALID_3DTEXT_ID;
}

public GetSpawnedObjects()
{
	return dSpawnedItems;
}

public GetObjectID(slotid)
{
	return dItems[slotid][ItemID];
}

public GetItemWithinDistance(Float:x1, Float:y1, Float:z1, Float:dist)//Fonction pour récupérer un item proche d'une position
{
	for(new i = 0; i < MAX_GROUND_ITEMS; i++)
	{
		if(dItems[i][ItemID] != 0)
		{
			new Float:d = GetDistanceBetweenPoints(dItems[i][xItem], dItems[i][yItem], dItems[i][zItem], x1, y1, z1);
			if(d < dist)
			{
				dist = d;
				return i;
			}
		}
	}
	return -1;
}

UpdatePlayerHand(playerid, objectid)//Fonction pour update l'objet que le mec a en main
{
	PlayerTextDrawSetPreviewModel(playerid, tInventObjet[playerid][0], aObjects[objectid][ObjectModelID]);
	PlayerTextDrawSetPreviewRot(playerid, tInventObjet[playerid][0], aObjects[objectid][ObjectRotX], aObjects[objectid][ObjectRotY], aObjects[objectid][ObjectRotZ], aObjects[objectid][ObjectZoom]);
	if(!IsHUDHiddenForPlayer(playerid)) PlayerTextDrawShow(playerid, tInventObjet[playerid][0]);
	//---
	if(pPlayerInfos[playerid][pLangue] == LANGUAGE_EN) PlayerTextDrawSetString(playerid, tInventObjet[playerid][1], aObjects[objectid][ObjectEnName]);
	else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_FR) PlayerTextDrawSetString(playerid, tInventObjet[playerid][1], aObjects[objectid][ObjectFrName]);
	else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_EN) PlayerTextDrawSetString(playerid, tInventObjet[playerid][1], aObjects[objectid][ObjectEsName]);
	else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_PG) PlayerTextDrawSetString(playerid, tInventObjet[playerid][1], aObjects[objectid][ObjectPgName]);
	else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_IT) PlayerTextDrawSetString(playerid, tInventObjet[playerid][1], aObjects[objectid][ObjectItName]);
	else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_DE) PlayerTextDrawSetString(playerid, tInventObjet[playerid][1], aObjects[objectid][ObjectDeName]);
	if(!IsHUDHiddenForPlayer(playerid)) PlayerTextDrawShow(playerid, tInventObjet[playerid][1]);
	//---
	if(aObjects[objectid][bHeavy]) SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);
	else SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	//---
	if(objectid == 122) SetPlayerAttachedObject(playerid, HAND_OBJECT_ID, 19317, 1, -0.0447, 0.2862, 0.1587, 180.0, 150.0, 326.85, 1.0, 1.0, 1.0);//Basse
	else S_SetPlayerAttachedObject(playerid, HAND_OBJECT_ID, aObjects[objectid][ObjectModelID], 5, aObjects[objectid][HandOffSetX], aObjects[objectid][HandOffSetY], aObjects[objectid][HandOffSetZ], aObjects[objectid][HandRotX], aObjects[objectid][HandRotY], aObjects[objectid][HandRotZ], aObjects[objectid][HandZoom], aObjects[objectid][HandZoom], aObjects[objectid][HandZoom], -1, -1);
}

UpdatePlayerInventory(playerid, slotid, objectid)//Fonction pour update une case de l'inventaire
{
	if(pUseInventory[playerid] != -1)
	{
		if(slotid >= GetPlayerBagSize(playerid, .objects = true))
		{
			PlayerTextDrawSetPreviewModel(playerid, tInventory[playerid][slotid][0], 19300);
			PlayerTextDrawSetPreviewRot(playerid, tInventory[playerid][slotid][0], 0.0, 0.0, 0.0, 1.0);
			PlayerTextDrawSetSelectable(playerid,tInventory[playerid][slotid][0], false);
			PlayerTextDrawHide(playerid, tInventory[playerid][slotid][0]);
			//---
			if(pPlayerInfos[playerid][pLangue] == LANGUAGE_EN) PlayerTextDrawSetString(playerid, tInventory[playerid][slotid][1], aObjects[objectid][ObjectEnName]);
			else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_FR) PlayerTextDrawSetString(playerid, tInventory[playerid][slotid][1], aObjects[objectid][ObjectFrName]);
			else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_EN) PlayerTextDrawSetString(playerid, tInventory[playerid][slotid][1], aObjects[objectid][ObjectEsName]);
			else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_PG) PlayerTextDrawSetString(playerid, tInventory[playerid][slotid][1], aObjects[objectid][ObjectPgName]);
			else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_IT) PlayerTextDrawSetString(playerid, tInventory[playerid][slotid][1], aObjects[objectid][ObjectItName]);
			else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_DE) PlayerTextDrawSetString(playerid, tInventory[playerid][slotid][1], aObjects[objectid][ObjectDeName]);
			PlayerTextDrawHide(playerid, tInventory[playerid][slotid][1]);
		}
		else
		{
			PlayerTextDrawSetPreviewModel(playerid, tInventory[playerid][slotid][0], aObjects[objectid][ObjectModelID]);
			PlayerTextDrawSetPreviewRot(playerid, tInventory[playerid][slotid][0], aObjects[objectid][ObjectRotX], aObjects[objectid][ObjectRotY], aObjects[objectid][ObjectRotZ], aObjects[objectid][ObjectZoom]);
			PlayerTextDrawSetSelectable(playerid,tInventory[playerid][slotid][0], true);
			PlayerTextDrawShow(playerid, tInventory[playerid][slotid][0]);
			//---
			if(pPlayerInfos[playerid][pLangue] == LANGUAGE_EN) PlayerTextDrawSetString(playerid, tInventory[playerid][slotid][1], aObjects[objectid][ObjectEnName]);
			else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_FR) PlayerTextDrawSetString(playerid, tInventory[playerid][slotid][1], aObjects[objectid][ObjectFrName]);
			else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_EN) PlayerTextDrawSetString(playerid, tInventory[playerid][slotid][1], aObjects[objectid][ObjectEsName]);
			else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_PG) PlayerTextDrawSetString(playerid, tInventory[playerid][slotid][1], aObjects[objectid][ObjectPgName]);
			else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_IT) PlayerTextDrawSetString(playerid, tInventory[playerid][slotid][1], aObjects[objectid][ObjectItName]);
			else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_DE) PlayerTextDrawSetString(playerid, tInventory[playerid][slotid][1], aObjects[objectid][ObjectDeName]);
			PlayerTextDrawShow(playerid, tInventory[playerid][slotid][1]);
		}
	}
}

UpdateVehicleInventory(playerid, vehicleid, slotid, objectid)//Fonction pour update une case du coffre d'une bagnole
{
	if(objectid == -1) objectid = 0;
  	if(vehicleid != INVALID_VEHICLE_ID)
	{
		if(slotid >= dVehicleInfos[vehicleid][dItem])
		{
			PlayerTextDrawSetPreviewModel(playerid, tVehicleTrunk[playerid][slotid][0], 19300);
			PlayerTextDrawSetPreviewRot(playerid, tVehicleTrunk[playerid][slotid][0], 0.0, 0.0, 0.0, 1.0);
			PlayerTextDrawSetSelectable(playerid,tVehicleTrunk[playerid][slotid][0], false);
			PlayerTextDrawHide(playerid, tVehicleTrunk[playerid][slotid][0]);
			//---
			if(pPlayerInfos[playerid][pLangue] == LANGUAGE_EN) PlayerTextDrawSetString(playerid, tVehicleTrunk[playerid][slotid][1], aObjects[objectid][ObjectEnName]);
			else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_FR) PlayerTextDrawSetString(playerid, tVehicleTrunk[playerid][slotid][1], aObjects[objectid][ObjectFrName]);
			else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_EN) PlayerTextDrawSetString(playerid, tVehicleTrunk[playerid][slotid][1], aObjects[objectid][ObjectEsName]);
			else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_PG) PlayerTextDrawSetString(playerid, tVehicleTrunk[playerid][slotid][1], aObjects[objectid][ObjectPgName]);
			else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_IT) PlayerTextDrawSetString(playerid, tVehicleTrunk[playerid][slotid][1], aObjects[objectid][ObjectItName]);
			else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_DE) PlayerTextDrawSetString(playerid, tVehicleTrunk[playerid][slotid][1], aObjects[objectid][ObjectDeName]);
			PlayerTextDrawHide(playerid, tVehicleTrunk[playerid][slotid][1]);
		}
		else
		{
			PlayerTextDrawSetPreviewModel(playerid, tVehicleTrunk[playerid][slotid][0], aObjects[objectid][ObjectModelID]);
			PlayerTextDrawSetPreviewRot(playerid, tVehicleTrunk[playerid][slotid][0], aObjects[objectid][ObjectRotX], aObjects[objectid][ObjectRotY], aObjects[objectid][ObjectRotZ], aObjects[objectid][ObjectZoom]);
			PlayerTextDrawSetSelectable(playerid,tVehicleTrunk[playerid][slotid][0], true);
			PlayerTextDrawShow(playerid, tVehicleTrunk[playerid][slotid][0]);
			//---
			if(pPlayerInfos[playerid][pLangue] == LANGUAGE_EN) PlayerTextDrawSetString(playerid, tVehicleTrunk[playerid][slotid][1], aObjects[objectid][ObjectEnName]);
			else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_FR) PlayerTextDrawSetString(playerid, tVehicleTrunk[playerid][slotid][1], aObjects[objectid][ObjectFrName]);
			else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_EN) PlayerTextDrawSetString(playerid, tVehicleTrunk[playerid][slotid][1], aObjects[objectid][ObjectEsName]);
			else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_PG) PlayerTextDrawSetString(playerid, tVehicleTrunk[playerid][slotid][1], aObjects[objectid][ObjectPgName]);
			else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_IT) PlayerTextDrawSetString(playerid, tVehicleTrunk[playerid][slotid][1], aObjects[objectid][ObjectItName]);
			else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_DE) PlayerTextDrawSetString(playerid, tVehicleTrunk[playerid][slotid][1], aObjects[objectid][ObjectDeName]);
			PlayerTextDrawShow(playerid, tVehicleTrunk[playerid][slotid][1]);
		}
	}
}

//---ARTISANS & CUISINE--//
GetPlayerNearEngineer(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 3.5, 1056.2341, -301.9423, 73.9922)) return 0; // Artisan Hilltop Farm
	else if(IsPlayerInRangeOfPoint(playerid, 3.5, -2005.0713, -1583.3796, 86.4044)) return 1; // Artisan Mt. Chilliad
	else if(IsPlayerInRangeOfPoint(playerid, 3.5, -1316.7149, 2510.4919, 87.0419)) return 2; // Artisan Aldea Malvada
	else if(IsPlayerInRangeOfPoint(playerid, 3.5, 1094.15, 1279.2559, 10.8199)) return 3; // Artisan Moto École
	else if(IsPlayerInRangeOfPoint(playerid, 3.5, -2081.4938, 848.2789, 69.563)) return 4; // Artisan SF Residential
	return -1;
}

ShowPlayerEngineer(playerid)
{
	TextDrawShowForPlayer(playerid, tFondAtelier[0]);
	TextDrawShowForPlayer(playerid, tFondAtelier[1]);
	TextDrawShowForPlayer(playerid, tFondAtelier[2]);
	//---
	TextDrawShowForPlayer(playerid, tBoutonsAtelier[0]);
	TextDrawShowForPlayer(playerid, tBoutonsAtelier[1]);
	TextDrawShowForPlayer(playerid, tBoutonsAtelier[2]);
	TextDrawShowForPlayer(playerid, tBoutonsAtelier[3]);
	//---
	TextDrawShowForPlayer(playerid, tBoutonFabriquer[pPlayerInfos[playerid][pLangue]]);
	//---
	CreateEngineerChoice(playerid);
	CreateEngineerRecipe(playerid);
	//---
	tAtelierTitre[playerid] = CreatePlayerTextDraw(playerid, 320.000000, 82.000000, " ");
	PlayerTextDrawAlignment(playerid, tAtelierTitre[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, tAtelierTitre[playerid], 255);
	PlayerTextDrawFont(playerid, tAtelierTitre[playerid], 0);
	PlayerTextDrawLetterSize(playerid, tAtelierTitre[playerid], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, tAtelierTitre[playerid], -1);
	PlayerTextDrawSetOutline(playerid, tAtelierTitre[playerid], 1);
	PlayerTextDrawSetProportional(playerid, tAtelierTitre[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, tAtelierTitre[playerid], 0);
	//---
	SetEngineerCategory(playerid, 0);
	//---
	SelectTextDraw(playerid, VERT);
}

ShowPlayerKitchen(playerid)
{
	bCooking[playerid] = true;
	TextDrawShowForPlayer(playerid, tFondAtelier[0]);
	TextDrawShowForPlayer(playerid, tFondAtelier[2]);
	//---
	TextDrawShowForPlayer(playerid, tBoutonCuisiner[pPlayerInfos[playerid][pLangue]]);
	//---
	CreateEngineerChoice(playerid);
	CreateEngineerRecipe(playerid);
	//---
	SetEngineerCategory(playerid, 5);
	//---
	SelectTextDraw(playerid, VERT);
}

ShowPlayerHousePlans(playerid)
{
	dHouseBuild[playerid] = 1;
	TextDrawShowForPlayer(playerid, tFondAtelier[0]);
	TextDrawShowForPlayer(playerid, tFondAtelier[2]);
	//---
	TextDrawShowForPlayer(playerid, tBoutonBatir[pPlayerInfos[playerid][pLangue]]);
	//---
	CreateEngineerChoice(playerid);
	CreateEngineerRecipe(playerid);
	//---
	SetEngineerCategory(playerid, 6);
	//---
	SelectTextDraw(playerid, VERT);
}

ClosePlayerEngineer(playerid)
{
	TextDrawHideForPlayer(playerid, tFondAtelier[0]);
	TextDrawHideForPlayer(playerid, tFondAtelier[1]);
	TextDrawHideForPlayer(playerid, tFondAtelier[2]);
	//---
	TextDrawHideForPlayer(playerid, tBoutonsAtelier[0]);
	TextDrawHideForPlayer(playerid, tBoutonsAtelier[1]);
	TextDrawHideForPlayer(playerid, tBoutonsAtelier[2]);
	TextDrawHideForPlayer(playerid, tBoutonsAtelier[3]);
	//---
	TextDrawHideForPlayer(playerid, tBoutonFabriquer[pPlayerInfos[playerid][pLangue]]);
	//---
	for(new i = 0; i < 18; i ++)
	{
		PlayerTextDrawDestroy(playerid, tAtelierChoice[playerid][i]);
		tAtelierChoice[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
	}
	for(new i = 0; i < 10; i ++)
	{
		PlayerTextDrawDestroy(playerid, tAtelierItem[playerid][i]);
		tAtelierItem[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
	}
	//---
	PlayerTextDrawDestroy(playerid, tAtelierTitre[playerid]);
	tAtelierTitre[playerid] = PlayerText:INVALID_TEXT_DRAW;
	//---
	dEngineer[playerid] = -1;
	dFormula[playerid] = -1;
	//---
	CancelSelectTextDraw(playerid);
}

ClosePlayerKitchen(playerid)
{
	bCooking[playerid] = false;
	TextDrawHideForPlayer(playerid, tFondAtelier[0]);
	TextDrawHideForPlayer(playerid, tFondAtelier[2]);
	//---
	TextDrawHideForPlayer(playerid, tBoutonCuisiner[pPlayerInfos[playerid][pLangue]]);
	//---
	for(new i = 0; i < 18; i ++)
	{
		PlayerTextDrawDestroy(playerid, tAtelierChoice[playerid][i]);
		tAtelierChoice[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
	}
	for(new i = 0; i < 10; i ++)
	{
		PlayerTextDrawDestroy(playerid, tAtelierItem[playerid][i]);
		tAtelierItem[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
	}
	//---
	dEngineer[playerid] = -1;
	dFormula[playerid] = -1;
	//---
	CancelSelectTextDraw(playerid);
}

ClosePlayerHousePlans(playerid)
{
	dHouseBuild[playerid] = 0;
	TextDrawHideForPlayer(playerid, tFondAtelier[0]);
	TextDrawHideForPlayer(playerid, tFondAtelier[2]);
	//---
	TextDrawHideForPlayer(playerid, tBoutonBatir[pPlayerInfos[playerid][pLangue]]);
	//---
	for(new i = 0; i < 18; i ++)
	{
		PlayerTextDrawDestroy(playerid, tAtelierChoice[playerid][i]);
		tAtelierChoice[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
	}
	for(new i = 0; i < 10; i ++)
	{
		PlayerTextDrawDestroy(playerid, tAtelierItem[playerid][i]);
		tAtelierItem[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
	}
	//---
	dEngineer[playerid] = -1;
	dFormula[playerid] = -1;
	//---
	CancelSelectTextDraw(playerid);
}

SetEngineerCategory(playerid, category)
{
	dEngineer[playerid] = category;
	//---
	new dObjectID;
	new dOther;
	if(category == 6)//Maisons
	{
		PlayerTextDrawSetPreviewModel(playerid, tAtelierChoice[playerid][0], 3414);
		PlayerTextDrawSetPreviewRot(playerid, tAtelierChoice[playerid][0], 0.0, 0.0, 180.0, 1.0);
		PlayerTextDrawSetSelectable(playerid, tAtelierChoice[playerid][0], true);
		PlayerTextDrawBoxColor(playerid, tAtelierChoice[playerid][0], 0x00000000);
		PlayerTextDrawShow(playerid, tAtelierChoice[playerid][0]);
		//---
		PlayerTextDrawSetPreviewModel(playerid, tAtelierChoice[playerid][1], 3418);
		PlayerTextDrawSetPreviewRot(playerid, tAtelierChoice[playerid][1], 0.0, 0.0, 180.0, 1.0);
		PlayerTextDrawSetSelectable(playerid, tAtelierChoice[playerid][1], true);
		PlayerTextDrawBoxColor(playerid, tAtelierChoice[playerid][1], 0x00000000);
		PlayerTextDrawShow(playerid, tAtelierChoice[playerid][1]);
		//---
		PlayerTextDrawSetPreviewModel(playerid, tAtelierChoice[playerid][2], 12991);
		PlayerTextDrawSetPreviewRot(playerid, tAtelierChoice[playerid][2], 0.0, 0.0, 0.0, 1.0);
		PlayerTextDrawSetSelectable(playerid, tAtelierChoice[playerid][2], true);
		PlayerTextDrawBoxColor(playerid, tAtelierChoice[playerid][2], 0x00000000);
		PlayerTextDrawShow(playerid, tAtelierChoice[playerid][2]);
		//---
		PlayerTextDrawSetPreviewModel(playerid, tAtelierChoice[playerid][3], 18259);
		PlayerTextDrawSetPreviewRot(playerid, tAtelierChoice[playerid][3], 0.0, 0.0, 270.0, 1.0);
		PlayerTextDrawSetSelectable(playerid, tAtelierChoice[playerid][3], true);
		PlayerTextDrawBoxColor(playerid, tAtelierChoice[playerid][3], 0x00000000);
		PlayerTextDrawShow(playerid, tAtelierChoice[playerid][3]);
		//---
		PlayerTextDrawSetPreviewModel(playerid, tAtelierChoice[playerid][4], 3359);
		PlayerTextDrawSetPreviewRot(playerid, tAtelierChoice[playerid][4], 0.0, 0.0, 180.0, 1.0);
		PlayerTextDrawSetSelectable(playerid, tAtelierChoice[playerid][4], true);
		PlayerTextDrawBoxColor(playerid, tAtelierChoice[playerid][4], 0x00000000);
		PlayerTextDrawShow(playerid, tAtelierChoice[playerid][4]);
		//---
		PlayerTextDrawSetPreviewModel(playerid, tAtelierChoice[playerid][5], 3287);
		PlayerTextDrawSetPreviewRot(playerid, tAtelierChoice[playerid][5], 0.0, 0.0, 180.0, 1.0);
		PlayerTextDrawSetSelectable(playerid, tAtelierChoice[playerid][5], true);
		PlayerTextDrawBoxColor(playerid, tAtelierChoice[playerid][5], 0x00000000);
		PlayerTextDrawShow(playerid, tAtelierChoice[playerid][5]);
	}
	else
	{
		for(new i = 0; i < 18; i ++)
		{
			GetEngineerFormula(category, i, dObjectID, dOther, dOther, dOther, dOther, dOther, dOther, dOther, dOther);
			if(dObjectID != 0)
			{
				PlayerTextDrawSetPreviewModel(playerid, tAtelierChoice[playerid][i], aObjects[dObjectID][ObjectModelID]);
				PlayerTextDrawSetPreviewRot(playerid, tAtelierChoice[playerid][i], aObjects[dObjectID][ObjectRotX], aObjects[dObjectID][ObjectRotY], aObjects[dObjectID][ObjectRotZ], aObjects[dObjectID][ObjectZoom]);
				PlayerTextDrawSetSelectable(playerid, tAtelierChoice[playerid][i], true);
				PlayerTextDrawBoxColor(playerid, tAtelierChoice[playerid][i], 0x00000055);
				PlayerTextDrawShow(playerid, tAtelierChoice[playerid][i]);
			}
			else
			{
				PlayerTextDrawSetPreviewModel(playerid, tAtelierChoice[playerid][i], 19300);
				PlayerTextDrawSetPreviewRot(playerid, tAtelierChoice[playerid][i], 0.0, 0.0, 0.0, 1.0);
				PlayerTextDrawSetSelectable(playerid, tAtelierChoice[playerid][i], false);
				PlayerTextDrawBoxColor(playerid, tAtelierChoice[playerid][i], 0x00000000);
				PlayerTextDrawHide(playerid, tAtelierChoice[playerid][i]);
			}
		}
	}
	SetEngineerFormula(playerid, category, 0);
}

SetEngineerFormula(playerid, category, formula)
{
	dFormula[playerid] = formula;
	//---
	new string[50];
	new dObjectID[7], dPrice, dChances;
	GetEngineerFormula(category, formula, dObjectID[6], dObjectID[0], dObjectID[1], dObjectID[2], dObjectID[3], dObjectID[4], dObjectID[5], dPrice, dChances);
	//---
	for(new i = 0; i < 6; i ++)
	{
		PlayerTextDrawSetPreviewModel(playerid, tAtelierItem[playerid][i], aObjects[dObjectID[i]][ObjectModelID]);
		PlayerTextDrawSetPreviewRot(playerid, tAtelierItem[playerid][i], aObjects[dObjectID[i]][ObjectRotX], aObjects[dObjectID[i]][ObjectRotY], aObjects[dObjectID[i]][ObjectRotZ], aObjects[dObjectID[i]][ObjectZoom]);
		if(dObjectID[i] != 0)
		{
			PlayerTextDrawShow(playerid, tAtelierItem[playerid][i]);
			PlayerTextDrawSetSelectable(playerid, tAtelierItem[playerid][i], true);
		}
		else
		{
			PlayerTextDrawHide(playerid, tAtelierItem[playerid][i]);
			PlayerTextDrawSetSelectable(playerid, tAtelierItem[playerid][i], false);
		}
	}
	if(category == 0 && formula == 15 && CallRemoteFunction("GetPlayerMission", "i", playerid) == MISSION_SHORTCUT_CRAFT)//Mission où on doit craft une bombe
	{
	 	dChances = 100;
	 	dPrice = 0;
	}
	//---
	if(!bCooking[playerid] && dHouseBuild[playerid] != 1)
	{
		if(pPlayerInfos[playerid][pLangue] == LANGUAGE_EN) format(string, sizeof(string), "Price:~n~%.1fg", floatdiv(dPrice, 10));
		else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_FR) format(string, sizeof(string), "Prix:~n~%.1fg", floatdiv(dPrice, 10));
		else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_ES) format(string, sizeof(string), "Precio:~n~%.1fg", floatdiv(dPrice, 10));
		else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_PG) format(string, sizeof(string), "Preçio:~n~%.1fg", floatdiv(dPrice, 10));
		else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_IT) format(string, sizeof(string), "Prezzo:~n~%.1fg", floatdiv(dPrice, 10));
		else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_DE) format(string, sizeof(string), "Preis:~n~%.1fg", floatdiv(dPrice, 10));
  		PlayerTextDrawSetString(playerid, tAtelierItem[playerid][6], string);
		PlayerTextDrawShow(playerid, tAtelierItem[playerid][6]);
	}
	//---
	if(category == 6)
	{
	    switch(formula)
	    {
	        case 0:
	        {
				PlayerTextDrawSetPreviewModel(playerid, tAtelierItem[playerid][7], 3414);
				PlayerTextDrawSetPreviewRot(playerid, tAtelierItem[playerid][7], 0.0, 0.0, 180.0, 1.0);
	        }
	        case 1:
	        {
				PlayerTextDrawSetPreviewModel(playerid, tAtelierItem[playerid][7], 3418);
				PlayerTextDrawSetPreviewRot(playerid, tAtelierItem[playerid][7], 0.0, 0.0, 180.0, 1.0);
	        }
	        case 2:
	        {
				PlayerTextDrawSetPreviewModel(playerid, tAtelierItem[playerid][7], 12991);
				PlayerTextDrawSetPreviewRot(playerid, tAtelierItem[playerid][7], 0.0, 0.0, 0.0, 1.0);
	        }
	        case 3:
	        {
				PlayerTextDrawSetPreviewModel(playerid, tAtelierItem[playerid][7], 18259);
				PlayerTextDrawSetPreviewRot(playerid, tAtelierItem[playerid][7], 0.0, 0.0, 270.0, 1.0);
	        }
	        case 4:
	        {
				PlayerTextDrawSetPreviewModel(playerid, tAtelierItem[playerid][7], 3359);
				PlayerTextDrawSetPreviewRot(playerid, tAtelierItem[playerid][7], 0.0, 0.0, 180.0, 1.0);
	        }
	        case 5:
	        {
				PlayerTextDrawSetPreviewModel(playerid, tAtelierItem[playerid][7], 3287);
				PlayerTextDrawSetPreviewRot(playerid, tAtelierItem[playerid][7], 0.0, 0.0, 180.0, 1.0);
	        }
	    }
	}
	else
	{
		PlayerTextDrawSetPreviewModel(playerid, tAtelierItem[playerid][7], aObjects[dObjectID[6]][ObjectModelID]);
		PlayerTextDrawSetPreviewRot(playerid, tAtelierItem[playerid][7], aObjects[dObjectID[6]][ObjectRotX], aObjects[dObjectID[6]][ObjectRotY], aObjects[dObjectID[6]][ObjectRotZ], aObjects[dObjectID[6]][ObjectZoom]);
	}
	PlayerTextDrawShow(playerid, tAtelierItem[playerid][7]);
	PlayerTextDrawSetSelectable(playerid, tAtelierItem[playerid][7], true);
	//---
	if(dHouseBuild[playerid] != 1)
	{
		switch(pPlayerInfos[playerid][pLangue])
		{
			case LANGUAGE_EN: PlayerTextDrawSetString(playerid, tAtelierItem[playerid][8], aObjects[dObjectID[6]][ObjectEnName]);
			case LANGUAGE_FR: PlayerTextDrawSetString(playerid, tAtelierItem[playerid][8], aObjects[dObjectID[6]][ObjectFrName]);
			case LANGUAGE_ES: PlayerTextDrawSetString(playerid, tAtelierItem[playerid][8], aObjects[dObjectID[6]][ObjectEsName]);
			case LANGUAGE_PG: PlayerTextDrawSetString(playerid, tAtelierItem[playerid][8], aObjects[dObjectID[6]][ObjectPgName]);
			case LANGUAGE_IT: PlayerTextDrawSetString(playerid, tAtelierItem[playerid][8], aObjects[dObjectID[6]][ObjectItName]);
			case LANGUAGE_DE: PlayerTextDrawSetString(playerid, tAtelierItem[playerid][8], aObjects[dObjectID[6]][ObjectDeName]);
		}
		PlayerTextDrawShow(playerid, tAtelierItem[playerid][8]);
	}
	//---
	if(!bCooking[playerid] && dHouseBuild[playerid] != 1)
	{
		//---CHANCES EN PLUS
		switch(pPlayerInfos[playerid][dArtisan])
		{
			case 1: dChances += 5;
			case 2: dChances += 10;
			case 3: dChances += 15;
		}
		if(dChances > 100) dChances = 100;
		//---
		if(pPlayerInfos[playerid][pLangue] == LANGUAGE_EN) format(string, sizeof(string), "Chances:~n~%d%s", dChances, "%");
		else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_FR) format(string, sizeof(string), "Chances:~n~%d%s", dChances, "%");
		else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_ES) format(string, sizeof(string), "Espagnol:~n~%d%s", dChances, "%");
		else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_PG) format(string, sizeof(string), "Portugais:~n~%d%s", dChances, "%");
		else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_IT) format(string, sizeof(string), "Italien:~n~%d%s", dChances, "%");
		else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_DE) format(string, sizeof(string), "Allemand:~n~%d%s", dChances, "%");
		PlayerTextDrawSetString(playerid, tAtelierItem[playerid][9], string);
		PlayerTextDrawShow(playerid, tAtelierItem[playerid][9]);
	}
}

public OnPlayerCraftItem(playerid, time, category, formula)
{
	if(bCrafting[playerid])
	{
		if(0 >= time)
		{
		    new dObjectID[7], dPrice, dChances;
		    GetEngineerFormula(category, formula, dObjectID[6], dObjectID[0], dObjectID[1], dObjectID[2], dObjectID[3], dObjectID[4], dObjectID[5], dPrice, dChances);
		    //---
		    GivePlayerGold(playerid, -dPrice);
		    for(new i = 0; i < 6; i ++) if(dObjectID[i] != 0)
			{
				GivePlayerSlotObject(playerid, ((dObjectID[i] == 70 || dObjectID[i] == 81 || dObjectID[i] == 98) ? 40 : -1), HasPlayerItem(playerid, dObjectID[i]));
			}
			//---CHANCES EN PLUS
			switch(pPlayerInfos[playerid][dArtisan])
			{
			    case 1: dChances += 5;
			    case 2: dChances += 10;
				case 3: dChances += 15;
			}
			if(dChances > 100) dChances = 100;
			if(category == 0 && formula == 15 && CallRemoteFunction("GetPlayerMission", "i", playerid) == MISSION_SHORTCUT_CRAFT) dChances = 100;//Mission où on doit craft une bombe
		    //---
		    if(Success(dChances))
		    {
		        new dFreeSlot = GetPlayerNextFreeSlot(playerid);
		        if(category == 5)//Cuisine
				{
					GivePlayerExp(playerid, 2);
					ShowPlayerTextInfo(playerid, 5000, "~g~It's ready!", "~g~Bon appétit !", "Espagnol", "Portugais", "Buonappetito !", "Allemand");
		        	GivePlayerSlotObject(playerid, dObjectID[6], dFreeSlot);
					LogInfo(true, "[ADMIN]%s cuisine %s", GetName(playerid), NoNewLineSign(aObjects[dObjectID[6]][ObjectFrName]));
		        	//SwapPlayerObjects(playerid, dFreeSlot, 0);
					if(IsPlayerNextToFire(playerid)) ShowPlayerKitchen(playerid), SetEngineerFormula(playerid, category, formula);
				}
				else if(category == 6)//Fabrication maison
				{
					GivePlayerExp(playerid, 100);
					if(formula == 5) ShowPlayerTextInfo(playerid, 5000, "~g~Move your tank where you want it~n~~r~This cannot be changed afterwards!",  "~g~Placez la citerne où vous voulez !~n~~r~La position ne peut plus être modifiée par la suite !", "~g~Mueva usted su citerna dónde lo quiere~n~~r~¡No puede la mover después!", "Portugais", "Italien", "Allemand");
					else if(formula == 4) ShowPlayerTextInfo(playerid, 5000, "~g~Move your garage where you want it~n~~r~This cannot be changed afterwards!",  "~g~Placez le garage où vous voulez !~n~~r~La position ne peut plus être modifiée par la suite !", "~g~Mueva usted su garaje dónde lo quiere~n~~r~¡No puede la mover después!", "Portugais", "Italien", "Allemand");
					else ShowPlayerTextInfo(playerid, 5000, "~g~Move your house where you want it~n~~r~This cannot be changed afterwards!", "~g~Placez la maison où vous voulez !~n~~r~La position ne peut plus être modifiée par la suite !", "~g~Mueva usted su casa dónde la quiere~n~~r~¡No puede la mover después!", "Portugais", "Italien", "Allemand");
					new Float:x, Float:y, Float:z, Float:angle;
					GetPlayerPos(playerid, x, y, z);
					GetPlayerFacingAngle(playerid, angle);
					GetXYInFrontOfPoint(x, y, angle, 10.0);
					new Float:aDiff;
					switch(dObjectID[6])
					{
						case 1: aDiff = 0.0;
						case 2: aDiff = 0.0;
						case 3: aDiff = 180.0;
						case 4: aDiff = 270.0;
						case 5: aDiff = 0.0;
					}
		    		GivePlayerSlotObject(playerid, -1, HasPlayerItem(playerid, 113));
					if(formula == 5)//CITERNE
					{
						pTank[playerid] = CreateTank(x, y, z, angle + aDiff, 0, -1);
						EditDynamicObject(playerid, CA_GetObjectID(dTanks[pTank[playerid]][oTank][0]));
					}
					if(formula == 4)//GARAGE
					{
						pGarage[playerid] = CreateGarage(x, y, z, angle + aDiff, -1);
						EditDynamicObject(playerid, CA_GetObjectID(dGarage[pGarage[playerid]][oGarage][0]));
					}
					else//MAISON
					{
						dHouseID[playerid] = CreateHouse(dObjectID[6], false, x, y, z, angle + aDiff, -1);
						EditDynamicObject(playerid, CA_GetObjectID(dHouse[dHouseID[playerid]][oHouse][0]));
						dHouseBuild[playerid] = 2;
					}
				}
		        else//Artisan
				{
					GivePlayerExp(playerid, floatround(dPrice * floatdiv(100 - dChances, 100), floatround_ceil));
					ShowPlayerTextInfo(playerid, 5000, "~g~The engineer has successfully crafted your item!", "~g~La fabrication a réussi !", "Espagnol", "Portugais", "Italien", "Allemand");
		        	GivePlayerSlotObject(playerid, dObjectID[6], dFreeSlot);
					LogInfo(true, "[ADMIN]%s a fabrique %s avec succes !", GetName(playerid), NoNewLineSign(aObjects[dObjectID[6]][ObjectFrName]));
		        	SwapPlayerObjects(playerid, dFreeSlot, 0);
					if(category == 0 && formula == 15 && CallRemoteFunction("GetPlayerMission", "i", playerid) == MISSION_SHORTCUT_CRAFT)//Mission où on doit craft une bombe
					{
						CallRemoteFunction("OnCinematicGoesOn", "iiii", playerid, 109, 14, 0);
						return 1;
					}
					//---
					if(GetPlayerNearEngineer(playerid) != -1) ShowPlayerEngineer(playerid), SetEngineerCategory(playerid, category), SetEngineerFormula(playerid, category, formula);
				}
		    }
		    else
		    {
				LogInfo(true, "[ADMIN]%s a rate sa fabrication de %s.", GetName(playerid), NoNewLineSign(aObjects[dObjectID[6]][ObjectFrName]));
		        ShowPlayerTextInfo(playerid, 5000, "~r~The crafting process failed!", "~r~La fabrication a raté !", "Espagnol", "Portugais", "Italien", "Allemand");
		    }
		}
		else
		{
			SetTimerEx("OnPlayerCraftItem", 200, false, "iiii", playerid, time - 2, category, formula);
			//---
			new string[128];
			if(pPlayerInfos[playerid][pLangue] == LANGUAGE_EN) format(string, sizeof(string), "Press ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~to cancel!~n~%.1f sec. left", floatdiv(time, 10));
			else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_FR) format(string, sizeof(string), "Appuyez sur ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~pour annuler !~n~%.1f sec. restantes", floatdiv(time, 10));
			else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_EN) format(string, sizeof(string), "!Prensa usted ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~para cancelar!~n~%.1f sec. mas", floatdiv(time, 10));
			else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_PG) format(string, sizeof(string), "Imprensa ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~ Portugais", floatdiv(time, 10));
			else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_IT) format(string, sizeof(string), "Italien !~n~%.1f sec. in più", floatdiv(time, 10));
			else if(pPlayerInfos[playerid][pLangue] == LANGUAGE_DE) format(string, sizeof(string), "Drücken sie auf ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~zum abbrechen.~n~%.1f sec. mehr", floatdiv(time, 10));
			ShowPlayerTextInfo(playerid, -1, string, string, string, string, string, string);
		}
	}
	return 1;
}

CanPlayerCraftItem(playerid, category, formula)
{
	new dObjectID[6];
	new bool:bFound[6];
	new bool:bAlreadyChecked[37];
	new dOther, dPrice;
	new dBagSize = GetPlayerBagSize(playerid, true);
	GetEngineerFormula(category, formula, dOther, dObjectID[0], dObjectID[1], dObjectID[2], dObjectID[3], dObjectID[4], dObjectID[5], dPrice, dOther);
	//---
	if(!HasPlayerGold(playerid, dPrice)) return 7;
	//---
	for(new i = 0; i < 6; i ++)
	{
	    if(dObjectID[i] == 0)
		{
			bFound[i] = true;
			continue;
		}
		//---
		for(new j = 0; j < dBagSize + 1; j ++)
		{
			if(!bAlreadyChecked[j] && GetPlayerSlotObject(playerid, j) == dObjectID[i])
			{
			    bAlreadyChecked[j] = true;
				bFound[i] = true;
				break;
			}
		}
	}
	//---
	for(new i = 0; i < 6; i ++) if(!bFound[i]) return i + 1;
	return 0;
}

public GetPlayerItemAmount(playerid, objectid)
{
	new dItemFound, dBagSize = GetPlayerBagSize(playerid, true);
	//---
	for(new j = 0; j < dBagSize + 1; j ++)
	{
		if(GetPlayerSlotObject(playerid, j) == objectid)
		{
			dItemFound ++;
		}
	}
	return dItemFound;
}

GetEngineerFormula(category, formula, &result, &object1, &object2, &object3, &object4, &object5, &object6, &price, &chances)
{
//103 metal
//104 plaque de metal
//105 planche
	switch(category)
	{
	    case 0://Armes
	    {
			switch(formula)
			{
			    case 0://Pistolet
			    {
					result = 10;
					object1 = 71;
					object2 = 103;
					object3 = 103;
					object4 = 0;
					object5 = 0;
					object6 = 0;
					price = 20;
					chances = 50;
				}
			    case 1://Silencieux
			    {
					result = 11;
					object1 = 71;
					object2 = 103;
					object3 = 103;
					object4 = 0;
					object5 = 0;
					object6 = 0;
					price = 20;
					chances = 50;
				}
			    case 2://Desert Eagle
			    {
					result = 12;
					object1 = 103;
					object2 = 103;
					object3 = 103;
					object4 = 103;
					object5 = 0;
					object6 = 0;
					price = 25;
					chances = 40;
				}
			    case 3://Fusil à pompe
			    {
					result = 13;
					object1 = 105;
					object2 = 104;
					object3 = 0;
					object4 = 0;
					object5 = 0;
					object6 = 0;
					price = 25;
					chances = 40;
				}
			    case 4://Sawn Off
			    {
					result = 14;
					object1 = 105;
					object2 = 105;
					object3 = 104;
					object4 = 0;
					object5 = 0;
					object6 = 0;
					price = 20;
					chances = 40;
				}
			    case 5://Spas 12
			    {
					result = 15;
					object1 = 104;
					object2 = 104;
					object3 = 104;
					object4 = 0;
					object5 = 0;
					object6 = 134;
					price = 30;
					chances = 35;
				}
			    case 6://UZI
			    {
					result = 16;
					object1 = 103;
					object2 = 103;
					object3 = 103;
					object4 = 103;
					object5 = 0;
					object6 = 0;
					price = 20;
					chances = 45;
				}
			    case 7://MP5
			    {
					result = 17;
					object1 = 103;
					object2 = 103;
					object3 = 103;
					object4 = 103;
					object5 = 0;
					object6 = 0;
					price = 25;
					chances = 40;
				}
			    case 8://AK47
			    {
					result = 18;
					object1 = 105;
					object2 = 105;
					object3 = 0;
					object4 = 104;
					object5 = 104;
					object6 = 133;
					price = 30;
					chances = 35;
				}
			    case 9://M4
			    {
					result = 19;
					object1 = 104;
					object2 = 104;
					object3 = 104;
					object4 = 105;
					object5 = 105;
					object6 = 133;
					price = 35;
					chances = 35;
				}
			    case 10://TEC9
			    {
					result = 20;
					object1 = 103;
					object2 = 103;
					object3 = 103;
					object4 = 103;
					object5 = 0;
					object6 = 0;
					price = 20;
					chances = 45;
				}
			    case 11://Fusil de chasse
			    {
					result = 21;
					object1 = 105;
					object2 = 105;
					object3 = 105;
					object4 = 104;
					object5 = 104;
					object6 = 0;
					price = 40;
					chances = 40;
				}
			    case 12://Sniper
			    {
					result = 22;
					object1 = 105;
					object2 = 105;
					object3 = 105;
					object4 = 104;
					object5 = 104;
					object6 = 133;
					price = 40;
					chances = 25;
				}
			    case 13://Minigun
			    {
					result = 24;
					object1 = 104;
					object2 = 104;
					object3 = 104;
					object4 = 104;
					object5 = 104;
					object6 = 134;
					price = 70;
					chances = 25;
				}
			    case 14://Mine
			    {
					result = 99;
					object1 = 107;
					object2 = 103;
					object3 = 0;
					object4 = 0;
					object5 = 0;
					object6 = 0;
					price = 5;
					chances = 65;
				}
			    case 15://Bombe
			    {
					result = 100;
					object1 = 107;
					object2 = 103;
					object3 = 0;
					object4 = 0;
					object5 = 0;
					object6 = 0;
					price = 7;
					chances = 65;
				}
				default:
				{
					result = 0;
					object1 = 0;
					object2 = 0;
					object3 = 0;
					object4 = 0;
					object5 = 0;
					object6 = 0;
					price = 0;
					chances = 0;
				}
			}
	    }
	    case 1://Outils
	    {
	        switch(formula)
	        {
	            case 0://Planche
	            {
	                result = 105;
					object1 = 71;
					object2 = 71;
					object3 = 71;
					object4 = 71;
					object5 = 71;
					object6 = 71;
					price = 2;
					chances = 95;
	            }
				case 1://Mur
				{
					result = 111;
					object1 = 105;
					object2 = 105;
					object3 = 105;
					object4 = 105;
					object5 = 105;
					object6 = 105;
					price = 5;
					chances = 80;
				}
	            case 2://Plaque de metal
	            {
	                result = 104;
					object1 = 103;
					object2 = 103;
					object3 = 103;
					object4 = 103;
					object5 = 103;
					object6 = 103;
					price = 5;
					chances = 95;
	            }
	            case 3://Casserole
	            {
	                result = 102;
					object1 = 103;
					object2 = 103;
					object3 = 103;
					object4 = 103;
					object5 = 0;
					object6 = 0;
					price = 10;
					chances = 80;
	            }
	            case 4://Serrure
	            {
	                result = 106;
	                object1 = 103;
	                object2 = 103;
	                object3 = 0;
	                object4 = 0;
	                object5 = 0;
	                object6 = 0;
					price = 10;
					chances = 60;
	            }
	            case 5://Clé anglaise
	            {
	                result = 96;
	                object1 = 104;
	                object2 = 0;
	                object3 = 0;
	                object4 = 0;
	                object5 = 0;
	                object6 = 0;
					price = 10;
					chances = 40;
	            }
	            case 6://Compresseur
	            {
	                result = 157;
	                object1 = 104;
	                object2 = 40;
	                object3 = 0;
	                object4 = 0;
	                object5 = 0;
	                object6 = 0;
					price = 30;
					chances = 10;
	            }
				default:
				{
					result = 0;
					object1 = 0;
					object2 = 0;
					object3 = 0;
					object4 = 0;
					object5 = 0;
					object6 = 0;
					price = 0;
					chances = 0;
				}
			}
	    }
	    case 2://Appareils
	    {
	        switch(formula)
	        {
	            case 0://Collecteur d'eau
	            {
	                result = 95;
					object1 = 105;
					object2 = 105;
					object3 = 105;
					object4 = 105;
					object5 = 0;
					object6 = 104;
					price = 40;
					chances = 60;
	            }
	            case 1://Broyeur
	            {
	                result = 117;
					object1 = 105;
					object2 = 0;
					object3 = 104;
					object4 = 104;
					object5 = 104;
					object6 = 104;
					price = 30;
					chances = 70;
	            }
				case 2://Porte
				{
					result = 112;
					object1 = 106;
					object2 = 105;
					object3 = 0;
					object4 = 0;
					object5 = 0;
					object6 = 0;
					price = 15;
					chances = 75;
				}
				case 3://Panneau
				{
					result = 156;
					object1 = 105;
					object2 = 0;
					object3 = 0;
					object4 = 71;
					object5 = 71;
					object6 = 71;
					price = 30;
					chances = 75;
				}
				case 4://Réfrigérateur
				{
					result = 130;
					object1 = 157;
					object2 = 104;
					object3 = 104;
					object4 = 104;
					object5 = 0;
					object6 = 104;
					price = 50;
					chances = 75;
				}
				default:
				{
					result = 0;
					object1 = 0;
					object2 = 0;
					object3 = 0;
					object4 = 0;
					object5 = 0;
					object6 = 0;
					price = 0;
					chances = 0;
				}
	        }
	    }
	    case 3://Meubles
	    {
	        switch(formula)
	        {
	            case 0://Étagère à armes
	            {
	                result = 127;
					object1 = 105;
					object2 = 105;
					object3 = 105;
					object4 = 105;
					object5 = 0;
					object6 = 0;
					price = 30;
					chances = 50;
	            }
	            case 1://Braséro
	            {
	                result = 128;
					object1 = 104;
					object2 = 104;
					object3 = 104;
					object4 = 71;
					object5 = 71;
					object6 = 71;
					price = 50;
					chances = 65;
	            }
	            case 2://Coffre fort
	            {
	                result = 97;
					object1 = 106;
					object2 = 0;
					object3 = 0;
					object4 = 104;
					object5 = 104;
					object6 = 0;
					price = 40;
					chances = 60;
	            }
	            case 3://Lit
	            {
	                result = 151;
					object1 = 80;
					object2 = 80;
					object3 = 0;
					object4 = 103;
					object5 = 103;
					object6 = 105;
					price = 50;
					chances = 80;
	            }
	            case 4://Fauteuil
	            {
	                result = 155;
					object1 = 103;
					object2 = 103;
					object3 = 105;
					object4 = 103;
					object5 = 103;
					object6 = 105;
					price = 50;
					chances = 70;
	            }
				default:
				{
					result = 0;
					object1 = 0;
					object2 = 0;
					object3 = 0;
					object4 = 0;
					object5 = 0;
					object6 = 0;
					price = 0;
					chances = 0;
				}
			}
	    }
	    case 5://Cuisine
	    {
	        switch(formula)
	        {
				case 0://Bouteille d'eau
				{
				    result = 81;
					object1 = 126;
					object2 = 0;
					object3 = 0;
					object4 = 0;
					object5 = 0;
					object6 = 0;
					price = 0;
					chances = 100;
				}
	            case 1://Pain
			 	{
					result = 110;
					object1 = 108;
					object2 = 81;
					object3 = 0;
					object4 = 0;
					object5 = 0;
					object6 = 0;
					price = 0;
					chances = 100;
	            }
	            case 2://Pizza
	            {
					result = 109;
					object1 = 108;
					object2 = 108;
					object3 = 81;
					object4 = 68;
					object5 = 74;
					object6 = 74;
					price = 0;
					chances = 100;
	            }
	            case 3://Poisson cuit
	            {
					result = 87;
					object1 = 86;
					object2 = 0;
					object3 = 0;
					object4 = 0;
					object5 = 0;
					object6 = 0;
					price = 0;
					chances = 100;
	            }
	            case 4://Brême cuite
	            {
					result = 89;
					object1 = 88;
					object2 = 0;
					object3 = 0;
					object4 = 0;
					object5 = 0;
					object6 = 0;
					price = 0;
					chances = 100;
	            }
	            case 5://Steak cuit
	            {
					result = 69;
					object1 = 68;
					object2 = 0;
					object3 = 0;
					object4 = 0;
					object5 = 0;
					object6 = 0;
					price = 0;
					chances = 100;
	            }
	            case 6://Jus d'oranges
				{
					result = 118;
					object1 = 72;
					object2 = 81;
					object3 = 0;
					object4 = 0;
					object5 = 0;
					object6 = 0;
					price = 0;
					chances = 100;
				}
	            case 7://Jus de pommes
				{
					result = 119;
					object1 = 73;
					object2 = 81;
					object3 = 0;
					object4 = 0;
					object5 = 0;
					object6 = 0;
					price = 0;
					chances = 100;
				}
				case 8://Soupe au poisson
				{
					result = 120;
					object1 = 87;
					object2 = 81;
					object3 = 0;
					object4 = 0;
					object5 = 0;
					object6 = 0;
					price = 0;
					chances = 100;
				}
				case 9://Sandwich à la viande
				{
					result = 121;
					object1 = 110;
					object2 = 69;
					object3 = 0;
					object4 = 0;
					object5 = 0;
					object6 = 0;
					price = 0;
					chances = 100;
				}
/*108 Farine
81 Bouteille d'eau
70 Lait
69 Steak Cuit
68 Steak cru
72 Orange
73 Pomme
74 Tomate
86 Poisson cru
87 Poisson cuit
88 Brême
89 Brême cuite*/
	            default:
	            {
					result = 0;
					object1 = 0;
					object2 = 0;
					object3 = 0;
					object4 = 0;
					object5 = 0;
					object6 = 0;
					price = 0;
					chances = 0;
	            }
	        }
	    }
	    case 6://Maisons
	    {
	        switch(formula)
	        {
	            case 0://Cabane avec deux objets
	            {
					result = 1;
					object1 = 111;
					object2 = 111;
					object3 = 111;
					object4 = 111;
					object5 = 111;
					object6 = 0;
					price = 0;
					chances = 100;
	            }
	            case 1://Cabane à deux portes
	            {
					result = 2;
					object1 = 111;
					object2 = 111;
					object3 = 111;
					object4 = 111;
					object5 = 111;
					object6 = 0;
					price = 0;
					chances = 100;
	            }
	            case 2://Mini cabane
	            {
					result = 3;
					object1 = 111;
					object2 = 111;
					object3 = 111;
					object4 = 111;
					object5 = 0;
					object6 = 0;
					price = 0;
					chances = 100;
	            }
	            case 3://Grande cabane
	            {
					result = 4;
					object1 = 111;
					object2 = 111;
					object3 = 111;
					object4 = 111;
					object5 = 111;
					object6 = 111;
					price = 0;
					chances = 100;
				}
	            case 4://Garage
	            {
					result = 5;
					object1 = 111;
					object2 = 111;
					object3 = 111;
					object4 = 111;
					object5 = 0;
					object6 = 129;
					price = 0;
					chances = 100;
				}
				case 5://Citerne
				{
				    result = 6;
					object1 = 104;
					object2 = 104;
					object3 = 104;
					object4 = 104;
					object5 = 104;
					object6 = 104;
					price = 0;
					chances = 100;
				    
				}
	        }
	    }
	}
}

CreateEngineerChoice(playerid)
{
	new Float:xPosText[6] = {197.0, 238.0, 279.0, 320.0, 361.0, 402.0};
	new Float:yPosText[3] = {140.0, 191.0, 242.0};
	for(new i = 0; i < 18; i ++)
	{
		tAtelierChoice[playerid][i] = CreatePlayerTextDraw(playerid, xPosText[i % 6], yPosText[floatround(floatdiv(i, 6), floatround_floor)], " ");
		PlayerTextDrawBackgroundColor(playerid, tAtelierChoice[playerid][i], 0x00000055);
		PlayerTextDrawFont(playerid, tAtelierChoice[playerid][i], 5);
		PlayerTextDrawLetterSize(playerid, tAtelierChoice[playerid][i], 0.500000, 1.000000);
		PlayerTextDrawColor(playerid, tAtelierChoice[playerid][i], -1);
		PlayerTextDrawSetOutline(playerid, tAtelierChoice[playerid][i], 0);
		PlayerTextDrawSetProportional(playerid, tAtelierChoice[playerid][i], 1);
		PlayerTextDrawSetShadow(playerid, tAtelierChoice[playerid][i], 1);
		PlayerTextDrawUseBox(playerid, tAtelierChoice[playerid][i], 1);
		PlayerTextDrawBoxColor(playerid, tAtelierChoice[playerid][i], 0x00000000);
		PlayerTextDrawTextSize(playerid, tAtelierChoice[playerid][i], 40.000000, 50.000000);
		PlayerTextDrawSetPreviewModel(playerid, tAtelierChoice[playerid][i], 19300);
		PlayerTextDrawSetPreviewRot(playerid, tAtelierChoice[playerid][i], 0.000000, 0.000000, 0.000000, 1.000000);
		PlayerTextDrawSetSelectable(playerid, tAtelierChoice[playerid][i], false);
	}
}

CreateEngineerRecipe(playerid)
{
	//---Objets recette
	tAtelierItem[playerid][0] = CreatePlayerTextDraw(playerid, 207.000000, 330.000000, " ");
	tAtelierItem[playerid][1] = CreatePlayerTextDraw(playerid, 258.000000, 330.000000, " ");
	tAtelierItem[playerid][2] = CreatePlayerTextDraw(playerid, 309.000000, 330.000000, " ");
	tAtelierItem[playerid][3] = CreatePlayerTextDraw(playerid, 207.000000, 377.000000, " ");
	tAtelierItem[playerid][4] = CreatePlayerTextDraw(playerid, 258.000000, 377.000000, " ");
	tAtelierItem[playerid][5] = CreatePlayerTextDraw(playerid, 309.000000, 377.000000, " ");
	for(new i = 0; i < 6; i ++)
	{
		PlayerTextDrawBackgroundColor(playerid, tAtelierItem[playerid][i], 0x00000088);
		PlayerTextDrawFont(playerid, tAtelierItem[playerid][i], 5);
		PlayerTextDrawLetterSize(playerid, tAtelierItem[playerid][i], 0.500000, 1.000000);
		PlayerTextDrawColor(playerid, tAtelierItem[playerid][i], -1);
		PlayerTextDrawSetOutline(playerid, tAtelierItem[playerid][i], 0);
		PlayerTextDrawSetProportional(playerid, tAtelierItem[playerid][i], 1);
		PlayerTextDrawSetShadow(playerid, tAtelierItem[playerid][i], 1);
		PlayerTextDrawUseBox(playerid, tAtelierItem[playerid][i], 1);
		PlayerTextDrawBoxColor(playerid, tAtelierItem[playerid][i], 0x00000055);
		PlayerTextDrawTextSize(playerid, tAtelierItem[playerid][i], 50.000000, 40.000000);
		PlayerTextDrawSetPreviewModel(playerid, tAtelierItem[playerid][i], 19300);
		PlayerTextDrawSetPreviewRot(playerid, tAtelierItem[playerid][i], 0.000000, 0.000000, 0.000000, 1.000000);
		PlayerTextDrawSetSelectable(playerid, tAtelierItem[playerid][i], true);
	}
	//---
	//---Prix
	tAtelierItem[playerid][6] = CreatePlayerTextDraw(playerid, 436.000000, 317.000000, "Gold: 0.0 g");
	PlayerTextDrawAlignment(playerid, tAtelierItem[playerid][6], 3);
	PlayerTextDrawBackgroundColor(playerid, tAtelierItem[playerid][6], 255);
	PlayerTextDrawFont(playerid, tAtelierItem[playerid][6], 2);
	PlayerTextDrawLetterSize(playerid, tAtelierItem[playerid][6], 0.200000, 1.000000);
	PlayerTextDrawColor(playerid, tAtelierItem[playerid][6], 0xFFD700FF);
	PlayerTextDrawSetOutline(playerid, tAtelierItem[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, tAtelierItem[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, tAtelierItem[playerid][6], false);
	//---Icone de l'objet
	tAtelierItem[playerid][7] = CreatePlayerTextDraw(playerid, 367.000000, 330.000000, " ");
	PlayerTextDrawBackgroundColor(playerid, tAtelierItem[playerid][7], 255);
	PlayerTextDrawFont(playerid, tAtelierItem[playerid][7], 5);
	PlayerTextDrawLetterSize(playerid, tAtelierItem[playerid][7], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, tAtelierItem[playerid][7], -1);
	PlayerTextDrawSetOutline(playerid, tAtelierItem[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid, tAtelierItem[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, tAtelierItem[playerid][7], 1);
	PlayerTextDrawUseBox(playerid, tAtelierItem[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid, tAtelierItem[playerid][7], 255);
	PlayerTextDrawTextSize(playerid, tAtelierItem[playerid][7], 70.000000, 80.000000);
	PlayerTextDrawSetPreviewModel(playerid, tAtelierItem[playerid][7], 19300);
	PlayerTextDrawSetPreviewRot(playerid, tAtelierItem[playerid][7], 0.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, tAtelierItem[playerid][7], true);
	//---Nom de l'objet à fabriquer
	tAtelierItem[playerid][8] = CreatePlayerTextDraw(playerid, 368.000000, 400.000000, " ");
	PlayerTextDrawBackgroundColor(playerid, tAtelierItem[playerid][8], 255);
	PlayerTextDrawFont(playerid, tAtelierItem[playerid][8], 2);
	PlayerTextDrawLetterSize(playerid, tAtelierItem[playerid][8], 0.209999, 1.000000);
	PlayerTextDrawColor(playerid, tAtelierItem[playerid][8], -1);
	PlayerTextDrawSetOutline(playerid, tAtelierItem[playerid][8], 0);
	PlayerTextDrawSetProportional(playerid, tAtelierItem[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, tAtelierItem[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, tAtelierItem[playerid][8], false);
	//---Chances de réussite
	tAtelierItem[playerid][9] = CreatePlayerTextDraw(playerid, 183.000000, 415.000000, "100 %~n~chances");
	PlayerTextDrawBackgroundColor(playerid, tAtelierItem[playerid][9], 255);
	PlayerTextDrawFont(playerid, tAtelierItem[playerid][9], 2);
	PlayerTextDrawLetterSize(playerid, tAtelierItem[playerid][9], 0.300000, 1.000000);
	PlayerTextDrawColor(playerid, tAtelierItem[playerid][9], -1);
	PlayerTextDrawSetOutline(playerid, tAtelierItem[playerid][9], 1);
	PlayerTextDrawSetProportional(playerid, tAtelierItem[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, tAtelierItem[playerid][9], false);
}

//---SYTSTÈME DE FIX-ACCESSOIRES
S_SetPlayerAttachedObject(playerid, index, modelid, bone, Float:fOffsetX = 0.0, Float:fOffsetY = 0.0, Float:fOffsetZ = 0.0, Float:fRotX = 0.0, Float:fRotY = 0.0, Float:fRotZ = 0.0, Float:fScaleX = 0.0, Float:fScaleY = 0.0, Float:fScaleZ = 0.0, materialcolor1 = 0, materialcolor2 = 0)
{
	SetPlayerAttachedObject(playerid, index, modelid, bone, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ, materialcolor1, materialcolor2);
 	pAcc[playerid][index][model] = modelid;
  	pAcc[playerid][index][pdc] = bone;
  	pAcc[playerid][index][o][0] = fOffsetX;
  	pAcc[playerid][index][o][1] = fOffsetY;
  	pAcc[playerid][index][o][2] = fOffsetZ;
  	pAcc[playerid][index][o][3] = fRotX;
    pAcc[playerid][index][o][4] = fRotY;
    pAcc[playerid][index][o][5] = fRotZ;
    pAcc[playerid][index][o][6] = fScaleX;
    pAcc[playerid][index][o][7] = fScaleY;
    pAcc[playerid][index][o][8] = fScaleZ;
    pAcc[playerid][index][col][0] = materialcolor1;
    pAcc[playerid][index][col][1] = materialcolor2;
}

S_RemovePlayerAttachedObject(playerid, index)
{
    if(!IsPlayerAttachedObjectSlotUsed(playerid, index)) return 0;
    pAcc[playerid][index][model] = 0;
    pAcc[playerid][index][pdc] = 0;
    for(new i = 0; i < 9; i++) { pAcc[playerid][index][o][i] = 0.0; }
    pAcc[playerid][index][col][0] = 0;
    pAcc[playerid][index][col][1] = 0;
    return RemovePlayerAttachedObject(playerid, index);
}

//---SYSTÈME PÊCHE
public OnLineRaiseUp(playerid)
{
	GivePlayerSlotObject(playerid, GetFishObjectID(pFishInfo[playerid][Fish]), GetPlayerNextFreeSlot(playerid));
	GivePlayerExp(playerid, pFishInfo[playerid][Fish]  * 3);
	DestroyObject(pFishInfo[playerid][FishObject]);
	pFishInfo[playerid][FishObject] = INVALID_OBJECT_ID;
	//---
	pFishInfo[playerid][Fish] = 0;
	pFishInfo[playerid][TimeCatch] = 0;
	pFishInfo[playerid][Time] = 0;
	pFishInfo[playerid][State] = 1;
	/*KillTimer(pFishInfo[playerid][FishingTimer]);
	pFishInfo[playerid][FishingTimer] = -1;*/
	pFishInfo[playerid][FishingTimer] = SetTimerEx("OnFishingUpdate", 300, true, "i", playerid);
	//---
}

public OnFishingUpdate(playerid)
{
	if(pFishInfo[playerid][Fish] == 0)
	{
		if((pPlayerInfos[playerid][dPecheur] == 1 && RandomEx(0, 50) == 25) || (pPlayerInfos[playerid][dPecheur] == 2 && RandomEx(0, 33) == 16) || RandomEx(0, 100) == 50)
		{
		    new rand = RandomEx(0, 100);
			if(rand < 10 || rand > 50)//POISSON NORMAL
			{
				pFishInfo[playerid][Fish] = 1;
				pFishInfo[playerid][TimeCatch] = RandomEx(3, 11);
   				pFishInfo[playerid][Time] = 0;
			}
			else if(27 > rand >= 10 || 50 > rand >= 33)//BRÊME
		    {
				pFishInfo[playerid][Fish] = 2;
    			pFishInfo[playerid][TimeCatch] = RandomEx(3, 11);
    			pFishInfo[playerid][Time] = 0;
		    }
			else if(29 > rand >= 27 || 33 > rand >= 30)//DRÔLE DE SAC
		    {
				pFishInfo[playerid][Fish] = 3;
    			pFishInfo[playerid][TimeCatch] = RandomEx(3, 14);
    			pFishInfo[playerid][Time] = 0;
		    }
			else if(rand == 29 && Success(50))//HUITRE
		    {
				pFishInfo[playerid][Fish] = 4;
    			pFishInfo[playerid][TimeCatch] = RandomEx(3, 14);
    			pFishInfo[playerid][Time] = 0;
		    }
		}
 	}
	else
	{
		if(pFishInfo[playerid][Time] == 15)
		{
			SendPlayerGameText(playerid, 5000, "~r~The fish is gone!", "~r~Le poisson est reparti !", "Espagnol", "Portugais", "Italien", "Allemand");
		    pFishInfo[playerid][Fish] = 0;
		}
		else
		{
			new string[128];
			if(pFishInfo[playerid][TimeCatch] <= pFishInfo[playerid][Time] <= pFishInfo[playerid][TimeCatch] + GetFishTime(pFishInfo[playerid][Fish]))
			{
				strcat(string, "~n~~n~~n~~n~~n~~n~~n~~n~~n~");
				switch(pPlayerInfos[playerid][pLangue])
				{
					case 0: strcat(string, "Hit the ~k~~PED_JUMPING~ key!");
					case 1: strcat(string, "Appuyez sur ~k~~PED_JUMPING~ !");
					case 2: strcat(string, "¡Pulse ~k~~PED_JUMPING~!");
					case 3: strcat(string, "Portugais ~k~~PED_JUMPING~ !");
					case 4: strcat(string, "Premere ~k~~PED_JUMPING~!");
					case 5: strcat(string, "Drücken sie auf ~k~~PED_JUMPING~!");
				}
				strcat(string, "~n~~r~");
			}
			else
			{
				strcat(string, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~");
			}
			for(new i = 0; i < pFishInfo[playerid][Time] + 1; i ++)
			{
				if(i == pFishInfo[playerid][TimeCatch]) strcat(string, "~g~");
				else if(i == pFishInfo[playerid][TimeCatch] + GetFishTime(pFishInfo[playerid][Fish])) strcat(string, "~r~");
				strcat(string, "|");
			}
			GameTextForPlayer(playerid, string, 2000, 3);
            pFishInfo[playerid][Time] ++;
		}
	}
}

GetFishTime(fish)
{
	switch(fish)
	{
		case 1: return 5;
		case 2: return 3;
		case 3: return 2;
		case 4: return 2;
	}
	return 0;
}

GetFishID(fish)
{
	switch(fish)
	{
		case 1: return 1599;
  		case 2: return 19630;
  		case 3: return 953;
  		case 4: return 2060;
	}
	return 0;
}

GetFishObjectID(fish)
{
	switch(fish)
	{
		case 1: return 86;
		case 2: return 88;
		case 3: return 150;
		case 4: return 149;
	}
	return 0;
}

main()
{
	//---ERREURS---//
	#if (TIME_SPEED == 7 || TIME_SPEED == 9 || TIME_SPEED > 12)
		#error TIME_SPEED cannot be 7, 9, or any more than 12, otherwise, some events won't happen.
	#endif
	//-------------//
	print("\n----------------------------------");
	print("Survive-All by [Pix]");
	print("----------------------------------\n");
}

public OnPlayerRequestDownload(playerid, type, crc)
{
    if(!IsPlayerConnected(playerid)) return 0;
    new sFilename[64], dFileFound, sFinalURL[256];
	//---
    if(type == DOWNLOAD_REQUEST_TEXTURE_FILE) dFileFound = FindTextureFileNameFromCRC(crc, sFilename, sizeof(sFilename));
    else if(type == DOWNLOAD_REQUEST_MODEL_FILE) dFileFound = FindModelFileNameFromCRC(crc, sFilename, sizeof(sFilename));
	//---
    if(dFileFound)
    {
        format(sFinalURL, sizeof(sFinalURL), "%s/%s", sDownloadServer, sFilename);
        RedirectDownload(playerid, sFinalURL);
    }
	return 1;
}

public OnGameModeInit()
{
	//---RNPC UPDATE RATE---//
	//RNPC_SetUpdateRate(180);
	//---CHARGEMENT BITMAP---//
	/*FImageOpen(BITMAP);
	dMapRes[0] = GetImageWidth(BITMAP);
	dMapRes[1] = GetImageHeight(BITMAP);*/
    //---CHARGEMENT DE LA MAP & ACTEURS---//
	SendRconCommand("loadfs [SA]Mapping");
	SendRconCommand("loadfs [SA]Actors");
	SendRconCommand("loadfs [SA]Missions");
	SendRconCommand("loadfs [SA]Shops");
	//---
	SendRconCommand("password Chabadoum");
	//---COLANDREAS, PATH FINDER & MAPANDREAS---//
	//MapAndreas_Init(MAP_ANDREAS_MODE_FULL, HMAP);
	//printf("MapAndreasAddress %x", MapAndreas_GetAddress());
	//PathFinder_Init(MapAndreas_GetAddress(), 4);
	//---BOSS---//
	dBambiKing[oBambiKing] = INVALID_OBJECT_ID;
	dJason[dJasonID] = INVALID_PLAYER_ID;
	dBossUFO[dLife] = -1;
	dDeathBoss[dDeathState] = 0;
	//---TIMERS---//
	SetTimer("OnSecondPassed", 1000, true);
	//SetTimer("OnSecondPassed", 1000, true);
	//---NAME TAGS---//
	ShowNameTags(false);
	//---MODE COURSE NORMALE & STUNT BONUS---//
	UsePlayerPedAnims();
	EnableStuntBonusForAll(false);
	//---FLÈCHES JAUNES INTERIORS---//
	DisableInteriorEnterExits();
	//---TEXTDRAWS---//
	CreateHUDForAll();
	CreateHDV();
	CreateBloodScreen();
	//---BLACKZONE---//
	zBlackZone = GangZoneCreate(-4500.0, -4500.0, 4500.0, 4500.0);
	//--- MYSQL DATABASE CONNECTION ---//
	#if defined MYSQL_SYSTEM
	mysql_log(ALL);
	mysqlPool = mysql_connect(SQL_HOST, SQL_USER, SQL_PASSWORD, SQL_DB);	
	if(mysqlPool == MYSQL_INVALID_HANDLE) 
	{
		LogInfo(true, "[MYSQL] Unable to connect to MYSQL Database"); 
		return 0;
	}
	LogInfo(true, "[MYSQL] Connected to MYSQL Database !");
	#endif
	//---CHARGEMENT MÉTEO & TEMPS---//
	#if defined MYSQL_SYSTEM
	mysql_tquery(mysqlPool, "SELECT * FROM `environment`", "OnEnvironmentLoaded");
	#else
	dEnvironment[dMeteoTime] = 1;
	if(!fexist(GPATH))
	{
	    dEnvironment[dHours] = 0;
	    dEnvironment[dMins] = 0;
	    dEnvironment[dMeteo] = 0;
	    dEnvironment[dDay] = MONDAY;
	}
	else
	{
	    #if defined LOAD_DYNAMICS
		INI_ParseFile(GPATH, "LoadGeneral_data");
		#endif
	}

	#endif		
    SetWorldTime(dEnvironment[dHours]);
    ChangeWeather(dEnvironment[dMeteo], dEnvironment[dMeteoTime]);
	//---GAMEMODE---//
	ChangeHostName();
	SetGameModeText(VERSION);
    //---SKINS---//
	//---MODÈLES
	//---CHARGEMENT PARTIES DYNAMIQUES---//
	SetupConstructibles();
	new dLastLoaded = 0;
	//---------------------//
	//---MARQUEURS DE MORT
	//---------------------//
	for(new i = 0; i < MAX_DEATH_MARKERS; i ++)
	{
		dDeath[i][oMarker] = INVALID_OBJECT_ID;
	}
	//---------------------//
	//---STATIONS SERVICE
	//---------------------//
	#if defined MYSQL_SYSTEM
	mysql_tquery(mysqlPool, "SELECT * FROM `gasstation`", "OnGasStationsLoaded");
	#else
	//INITIALISATION
	for(new i = 0; i < 19; i ++) dGasStation[i][tGasText] = Text3D:INVALID_3DTEXT_ID;
	//CHARGEMENT
 	#if defined LOAD_DYNAMICS
    INI_ParseFile(GASPATH, "LoadGasStations_data");
    #endif
	for(new i = 0; i < 19; i ++)
	{
	    new Float:x, Float:y, Float:z;
	    GetGasStationPos(i, x, y, z);
	    dGasStation[i][tGasText] = CreateDynamic3DTextLabel("0 l", KAKI, x, y, z, 40.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 50.0);
	    UpdateGasStationInfo(i);
	}
	LogInfo(true, "[INIT]Stations services chargees");
	#endif
	//---------------------//
	//---LINGOTS D'OR
	//---------------------//
	#if defined MYSQL_SYSTEM
	mysql_tquery(mysqlPool, "SELECT * FROM `gold`", "OnGoldsLoaded");
	#else
	//INITIALISATION
	dLastLoaded = 0;
	//CHARGEMENT
 	#if defined LOAD_DYNAMICS
    INI_ParseFile(GOLDPATH, "LoadGold_data");
    #endif
	for(new i = 0; i < MAX_GOLD_INGOTS; i ++)
	{
		if(dOr[i][dOrAmount] != 0)
		{
			CreateGoldIngot(dOr[i][dOrAmount], dOr[i][xOr], dOr[i][yOr], dOr[i][zOr], i);
			dLastLoaded = i;
		}
	}
	for(new i = dLastLoaded + 1; i < MAX_GOLD_INGOTS; i ++) dOr[i][dOrAmount] = 0;
    LogInfo(true, "[INIT]Lingots d'or charges");
	#endif
	//---------------------//
	//---FAUTEUILS
	//---------------------//
	#if defined MYSQL_SYSTEM
	mysql_tquery(mysqlPool, "SELECT * FROM `seat`", "OnSeatsLoaded");
	#else
	//INITIALISATION
	dLastLoaded = 0;
	for(new i = 0; i < MAX_SEATS; i ++) dSeat[i][dSeatType] = 0;
	//CHARGEMENT
 	#if defined LOAD_DYNAMICS
    INI_ParseFile(SEPATH, "LoadSeats_data");
    #endif
	for(new i = 0; i < MAX_SEATS; i ++)
	{
	    if(dSeat[i][xSeat] == 0.0 && dSeat[i][ySeat] == 0.0 && dSeat[i][zSeat] == 0.0) dSeat[i][dSeatType] = 0;
		if(dSeat[i][dSeatType] != 0)
		{
			CreateSeat(dSeat[i][dSeatType], dSeat[i][xSeat], dSeat[i][ySeat], dSeat[i][zSeat], dSeat[i][aSeat], i);
			dLastLoaded = i;
		}
	}
	for(new i = dLastLoaded + 1; i < MAX_SEATS; i ++) dSeat[i][dSeatType] = 0;
    LogInfo(true, "[INIT]Fauteuils charges");
	#endif
	//---------------------//
	//---PANNEAUX
	//---------------------//
	#if defined MYSQL_SYSTEM
	mysql_tquery(mysqlPool, "SELECT * FROM `board`", "OnBoardsLoaded");
	#else
	//INITIALISATION
	dLastLoaded = 0;
	for(new i = 0; i < MAX_BOARDS; i ++) dBoard[i][bBoard] = false;
	//CHARGEMENT
 	#if defined LOAD_DYNAMICS
    INI_ParseFile(BBPATH, "LoadBoards_data");
    #endif
	for(new i = 0; i < MAX_BOARDS; i ++)
	{
	    if(dBoard[i][xBoard] == 0.0 && dBoard[i][yBoard] == 0.0 && dBoard[i][zBoard] == 0.0) dBoard[i][bBoard] = false;
		if(dBoard[i][bBoard])
		{
			CreateBoard(dBoard[i][xBoard], dBoard[i][yBoard], dBoard[i][zBoard], dBoard[i][aBoard], i);
			SetBoardText(i, dBoard[i][sBoardText]);
			dLastLoaded = i;
		}
	}
	for(new i = dLastLoaded + 1; i < MAX_BOARDS; i ++) dBoard[i][bBoard] = false;
    LogInfo(true, "[INIT]Panneaux charges");
	#endif
	//---------------------//
	//---MEUBLES
	//---------------------//
	#if defined MYSQL_SYSTEM
	mysql_tquery(mysqlPool, "SELECT * FROM `furniture`", "OnFurnituresLoaded");
	#else
	//INITIALISATION
	dLastLoaded = 0;
	//CHARGEMENT
 	#if defined LOAD_DYNAMICS
    INI_ParseFile(FUPATH, "LoadFurniture_data");
    #endif
	for(new i = 0; i < MAX_FURN; i ++)
	{
		if(dFurn[i][dFurnitureID] > 0)
		{
			CreateFurniture(dFurn[i][dFurnitureID], dFurn[i][xFurn], dFurn[i][yFurn], dFurn[i][zFurn], dFurn[i][rxFurn], dFurn[i][ryFurn], dFurn[i][rzFurn], i);
			dLastLoaded = i;
		}
	}
	for(new i = dLastLoaded + 1; i < MAX_FURN; i ++) dFurn[i][dFurnitureID] = 0;
    LogInfo(true, "[INIT]Decorations charges");
	#endif
	//---------------------//
	//---ÉTAGÈRES À ARMES
	//---------------------//
	//INITIALISATION
	dLastLoaded = 0;
	for(new i = 0; i < MAX_GUNRACKS; i ++) dGunRackInfos[i][bRack] = false;
	//CHARGEMENT
 	#if defined LOAD_DYNAMICS
    INI_ParseFile(GRPATH, "LoadGunRacks_data");
    #endif
	for(new i = 0; i < MAX_GUNRACKS; i ++)
	{
	    if(dGunRackInfos[i][xRack] == 0.0 && dGunRackInfos[i][yRack] == 0.0 && dGunRackInfos[i][zRack] == 0.0) dGunRackInfos[i][bRack] = false;
		if(dGunRackInfos[i][bRack])
		{
			CreateGunRack(dGunRackInfos[i][xRack], dGunRackInfos[i][yRack], dGunRackInfos[i][zRack], dGunRackInfos[i][aRack], i);
			AddGunRackWeapon(i, 0, dGunRackInfos[i][dGun][0], dGunRackInfos[i][dGunAmmo][0]);
			AddGunRackWeapon(i, 1, dGunRackInfos[i][dGun][1], dGunRackInfos[i][dGunAmmo][1]);
			AddGunRackWeapon(i, 2, dGunRackInfos[i][dGun][2], dGunRackInfos[i][dGunAmmo][2]);
			AddGunRackWeapon(i, 3, dGunRackInfos[i][dGun][3], dGunRackInfos[i][dGunAmmo][3]);
			dLastLoaded = i;
		}
	}
	for(new i = dLastLoaded + 1; i < MAX_GUNRACKS; i ++)
	{
		dGunRackInfos[i][bRack] = false;
	    for(new j = 0; j < 4; j ++)
	    {
	        dGunRackInfos[i][dGun][j] = 0;
	        dGunRackInfos[i][dGunAmmo][j] = 0;
	    }
	}
    LogInfo(true, "[INIT]Etageres pour armes charges");
	//---------------------//
	//---RÉFRIGÉRATEURS
	//---------------------//
	//INITIALISATION
	dLastLoaded = 0;
	for(new i = 0; i < MAX_FRIDGES; i ++) dFridgeInfos[i][bFridge] = false;
	//CHARGEMENT
 	#if defined LOAD_DYNAMICS
    INI_ParseFile(FRPATH, "LoadFridges_data");
    #endif
	for(new i = 0; i < MAX_FRIDGES; i ++)
	{
	    if(dFridgeInfos[i][xFridge] == 0.0 && dFridgeInfos[i][yFridge] == 0.0 && dFridgeInfos[i][zFridge] == 0.0) dFridgeInfos[i][bFridge] = false;
		if(dFridgeInfos[i][bFridge])
		{
			CreateFridge(dFridgeInfos[i][xFridge], dFridgeInfos[i][yFridge], dFridgeInfos[i][zFridge], dFridgeInfos[i][aFridge], i);
			dLastLoaded = i;
		}
	}
	for(new i = dLastLoaded + 1; i < MAX_FRIDGES; i ++)
	{
		dFridgeInfos[i][bFridge] = false;
	    for(new j = 0; j < 5; j ++)
	    {
	        dFridgeInfos[i][dFood][j] = 0;
	        dFridgeInfos[i][dFoodAmount][j] = 0;
	    }
	}
    LogInfo(true, "[INIT]Frigos charges");
	//---------------------//
	//---COFFRES FORTS
	//---------------------//
	//INITIALISATION
	dLastLoaded = 0;
	//CHARGEMENT
 	#if defined LOAD_DYNAMICS
    INI_ParseFile(SPATH, "LoadSafes_data");
    #endif
	for(new i = 0; i < MAX_SAFES; i ++)
	{
	    if(dSafeInfos[i][xSafe] == 0.0 && dSafeInfos[i][ySafe] == 0.0 && dSafeInfos[i][zSafe] == 0.0) dSafeInfos[i][bSafe] = false;
		if(dSafeInfos[i][bSafe])
		{
		    new bool:bDoor = dSafeInfos[i][bOpenSafe];
			CreateSafe(dSafeInfos[i][xSafe], dSafeInfos[i][ySafe], dSafeInfos[i][zSafe], dSafeInfos[i][aSafe], i);
			ChangeSafeDoorState(i, bDoor);
			dLastLoaded = i;
		}
	}
	for(new i = dLastLoaded + 1; i < MAX_SAFES; i ++)
	{
		dSafeInfos[i][bSafe] = false;
	    for(new j = 0; j < 12; j ++)
	    {
	        dSafeInfos[i][dItem][j] = 0;
	    }
	}
    LogInfo(true, "[INIT]Coffres forts charges");
	//---------------------//
	//---COLLECTEURS D'EAU
	//---------------------//
	//INITIALISATION
	dLastLoaded = 0;
	for(new i = 0; i < MAX_COLLECTORS; i ++) dCollector[i][dEau] = -1;
	//CHARGEMENT
 	#if defined LOAD_DYNAMICS
    INI_ParseFile(CPATH, "LoadCollectors_data");
    #endif
	for(new i = 0; i < MAX_COLLECTORS; i ++)
	{
	    if(dCollector[i][xEau] == 0.0 && dCollector[i][yEau] == 0.0 && dCollector[i][zEau] == 0.0) dCollector[i][dEau] = -1;
		if(dCollector[i][dEau] != -1)
		{
			CreateCollector(dCollector[i][xEau], dCollector[i][yEau], dCollector[i][zEau], dCollector[i][aEau], dCollector[i][dEau], i);
			dLastLoaded = i;
		}
	}
	for(new i = dLastLoaded + 1; i < MAX_COLLECTORS; i ++) dCollector[i][dEau] = -1;
    LogInfo(true, "[INIT]Collecteurs d'eaux charges");
	//---------------------//
	//---CITERNES
	//---------------------//
	//INITIALISATION
	dLastLoaded = 0;
	for(new i = 0; i < MAX_TANKS; i ++) dTanks[i][dTankGas] = -1;
	//CHARGEMENT
 	#if defined LOAD_DYNAMICS
    INI_ParseFile(TKPATH, "LoadTanks_data");
    #endif
	for(new i = 0; i < MAX_TANKS; i ++)
	{
	    if(dTanks[i][xTank] == 0.0 && dTanks[i][yTank] == 0.0 && dTanks[i][zTank] == 0.0) dTanks[i][dTankGas] = -1;
		if(dTanks[i][dTankGas] != -1)
		{
			CreateTank(dTanks[i][xTank], dTanks[i][yTank], dTanks[i][zTank], dTanks[i][aTank], dTanks[i][dTankGas], i);
			dLastLoaded = i;
		}
	}
	for(new i = dLastLoaded + 1; i < MAX_TANKS; i ++) dTanks[i][dTankGas] = -1;
    LogInfo(true, "[INIT]Citernes charges");
	//---------------------//
	//---BROYEUR
	//---------------------//
	//INITIALISATION
	dLastLoaded = 0;
	for(new i = 0; i < MAX_SHREDDERS; i ++) dShredder[i][dBroyeur] = -1;
	//CHARGEMENT
 	#if defined LOAD_DYNAMICS
    INI_ParseFile(SHPATH, "LoadShredders_data");
    #endif
	for(new i = 0; i < MAX_SHREDDERS; i ++)
	{
	    if(dShredder[i][xBroyeur] == 0.0 && dShredder[i][yBroyeur] == 0.0 && dShredder[i][zBroyeur] == 0.0) dShredder[i][dBroyeur] = -1;
		if(dShredder[i][dBroyeur] != -1)
		{
			CreateShredder(dShredder[i][xBroyeur], dShredder[i][yBroyeur], dShredder[i][zBroyeur], dShredder[i][aBroyeur], dShredder[i][dBroyeur], i);
			dLastLoaded = i;
		}
	}
	for(new i = dLastLoaded + 1; i < MAX_SHREDDERS; i ++) dShredder[i][dBroyeur] = -1;
    LogInfo(true, "[INIT]Broyeurs charges");
	//---------------------//
	//---BRASEROS
	//---------------------//
	//INITIALISATION
	dLastLoaded = 0;
	for(new i = 0; i < MAX_BRASEROS; i ++) dBraseroInfos[i][dBrasero] = 0;
	//CHARGEMENT
 	#if defined LOAD_DYNAMICS
    INI_ParseFile(BRPATH, "LoadBraseros_data");
    #endif
	for(new i = 0; i < MAX_BRASEROS; i ++)
	{
		if(dBraseroInfos[i][dBrasero] != 0)
		{
			CreateBrasero(dBraseroInfos[i][xBrasero], dBraseroInfos[i][yBrasero], dBraseroInfos[i][zBrasero], dBraseroInfos[i][aBrasero], dBraseroInfos[i][dBrasero], i);
			dLastLoaded = i;
		}
	}
	for(new i = dLastLoaded + 1; i < MAX_BRASEROS; i ++) dBraseroInfos[i][dBrasero] = 0;
    LogInfo(true, "[INIT]Braseros charges");
	//---------------------//
	//---FEUX
	//---------------------//
	//INITIALISATION
	dLastLoaded = 0;
	for(new i = 0; i < MAX_FIRES; i ++) dFire[i][oFeu] = INVALID_OBJECT_ID;
	//CHARGEMENT
 	#if defined LOAD_DYNAMICS
    INI_ParseFile(FPATH, "LoadFires_data");
    #endif
	for(new i = 0; i < MAX_FIRES; i ++)
	{
		if(dFire[i][dTempsFeu] != 0)
		{
			CreateFire(dFire[i][xFeu], dFire[i][yFeu], dFire[i][zFeu], dFire[i][aFeu], dFire[i][dTempsFeu], i);
			dLastLoaded = i;
		}
	}
	for(new i = dLastLoaded + 1; i < MAX_FIRES; i ++) dFire[i][dTempsFeu] = 0;
    LogInfo(true, "[INIT]Feux charges");
	//---------------------//
	//---TENTES
	//---------------------//
	//INITIALISATION
	dLastLoaded = 0;
	for(new i = 0; i < MAX_TENTS; i ++) dTent[i][bTent] = false;
	//CHARGEMENT
 	#if defined LOAD_DYNAMICS
    INI_ParseFile(TPATH, "LoadTents_data");
    #endif
	for(new i = 0; i < MAX_TENTS; i ++)
	{
	    if(dTent[i][xTent] == 0.0 && dTent[i][yTent] == 0.0 && dTent[i][zTent] == 0.0) dTent[i][bTent] = false;
		if(dTent[i][bTent])
		{
			CreateTent(dTent[i][xTent], dTent[i][yTent], dTent[i][zTent], dTent[i][aTent], i);
			dLastLoaded = i;
		}
	}
	for(new i = dLastLoaded + 1; i < MAX_TENTS; i ++) dTent[i][bTent] = false;
    LogInfo(true, "[INIT]Tentes charges");
	//---------------------//
	//---MAISONS
	//---------------------//
	//INITIALISATION
	dLastLoaded = 0;
	for(new i = 0; i < MAX_HOUSES; i ++) dHouse[i][dHouseType] = 0;
	//CHARGEMENT
 	#if defined LOAD_DYNAMICS
    INI_ParseFile(HPATH, "LoadHouses_data");
    #endif
	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(dHouse[i][xHouse] == 0.0 && dHouse[i][yHouse] == 0.0 && dHouse[i][zHouse] == 0.0) dHouse[i][dHouseType] = 0;
		if(dHouse[i][dHouseType] != 0)
		{
		    new bool:bDoor = dHouse[i][bPorte][1];
			CreateHouse(dHouse[i][dHouseType], dHouse[i][bPorte][0], dHouse[i][xHouse], dHouse[i][yHouse], dHouse[i][zHouse], dHouse[i][aHouse], i);
			ChangeHouseDoorState(i, bDoor);
			dLastLoaded = i;
		}
	}
	for(new i = dLastLoaded + 1; i < MAX_HOUSES; i ++) dHouse[i][dHouseType] = 0;
    LogInfo(true, "[INIT]Maisons chargees");
	//---------------------//
	//---GARAGES
	//---------------------//
	//INITIALISATION
	dLastLoaded = 0;
	for(new i = 0; i < MAX_GARAGES; i ++) dGarage[i][bGarage][0] = false;
	//CHARGEMENT
 	#if defined LOAD_DYNAMICS
    INI_ParseFile(GARPATH, "LoadGarages_data");
    #endif
	for(new i = 0; i < MAX_GARAGES; i ++)
	{
	    if(dGarage[i][xGarage] == 0.0 && dGarage[i][yGarage] == 0.0 && dGarage[i][zGarage] == 0.0) dGarage[i][bGarage][0] = false;
		if(dGarage[i][bGarage][0])
		{
			CreateGarage(dGarage[i][xGarage], dGarage[i][yGarage], dGarage[i][zGarage], dGarage[i][aGarage], i);
		    new bool:bDoor = dGarage[i][bGarage][1];
			ChangeGarageDoorState(i, bDoor);
			dLastLoaded = i;
		}
	}
    LogInfo(true, "[INIT]Garages charges");
	//---------------------//
	//---LITS
	//---------------------//
	//INITIALISATION
	dLastLoaded = 0;
	for(new i = 0; i < MAX_BEDS; i ++) dBed[i][dBedType] = 0;
	//CHARGEMENT
 	#if defined LOAD_DYNAMICS
    INI_ParseFile(BPATH, "LoadBeds_data");
    #endif
	for(new i = 0; i < MAX_BEDS; i ++)
	{
	    if(dBed[i][xBed] == 0.0 && dBed[i][yBed] == 0.0 && dBed[i][zBed] == 0.0) dBed[i][dBedType] = 0;
		if(dBed[i][dBedType] != 0)
		{
			CreateBed(dBed[i][dBedType], dBed[i][xBed], dBed[i][yBed], dBed[i][zBed], dBed[i][aBed], i);
			dLastLoaded = i;
		}
	}
	for(new i = dLastLoaded + 1; i < MAX_BEDS; i ++) dBed[i][dBedType] = 0;
    LogInfo(true, "[INIT]Lits charges");
	//---------------------//
	//---PLANTES
	//---------------------//
	//INITIALISATION
	dLastLoaded = 0;
	for(new i = 0; i < MAX_PLANTS; i ++) dPlant[i][oPlantObject] = INVALID_OBJECT_ID;
	//CHARGEMENT
 	#if defined LOAD_DYNAMICS
    INI_ParseFile(PPATH, "LoadPlants_data");
    #endif
	for(new i = 0; i < MAX_PLANTS; i ++)
	{
	    if(dPlant[i][xPlant] == 0.0 && dPlant[i][yPlant] == 0.0 && dPlant[i][zPlant] == 0.0) dPlant[i][dPlantID] = 0;
		if(dPlant[i][dPlantID] != 0)
		{
			CreatePlant(dPlant[i][dPlantID], dPlant[i][dFruits], dPlant[i][dGrowTime], dPlant[i][xPlant], dPlant[i][yPlant], dPlant[i][zPlant], dPlant[i][aPlant], i);
			dLastLoaded = i;
		}
	}
	for(new i = dLastLoaded + 1; i < MAX_PLANTS; i ++) dPlant[i][dPlantID] = 0;
    LogInfo(true, "[INIT]Plantes chargees");
	//---------------------//
	//---HDV
	//---------------------//
	//INITIALISATION
	dLastLoaded = 0;
	//CHARGEMENT
 	#if defined LOAD_DYNAMICS
    INI_ParseFile(APATH, "LoadAuctionHouse_data");
    #endif
	/*for(new i = 0; i < MAX_PLANTS; i ++)
	{
	    if(dPlant[i][xPlant] == 0.0 && dPlant[i][yPlant] == 0.0 && dPlant[i][zPlant] == 0.0) dPlant[i][dPlantID] = 0;
		if(dPlant[i][dPlantID] != 0)
		{
			CreatePlant(dPlant[i][dPlantID], dPlant[i][dFruits], dPlant[i][dGrowTime], dPlant[i][xPlant], dPlant[i][yPlant], dPlant[i][zPlant], dPlant[i][aPlant], i);
			dLastLoaded = i;
		}
	}
	for(new i = dLastLoaded + 1; i < MAX_PLANTS; i ++) dPlant[i][dPlantID] = 0;*/
    LogInfo(true, "[INIT]HDV charge");
	//---------------------//
	//---OBJETS
	//---------------------//
	//INITIALISATION
	dLastLoaded = 0;
	for(new i = 0; i < MAX_GROUND_ITEMS; i ++)
	{
		dItems[i][ObjectID] = INVALID_OBJECT_ID;
		dItems[i][ObjectText] = Text3D:INVALID_3DTEXT_ID;
	}
	//CHARGEMENT
 	#if defined LOAD_DYNAMICS
    INI_ParseFile(IPATH, "LoadItems_data");
    #endif
	for(new i = 0; i < MAX_GROUND_ITEMS; i ++)
	{
		CreateItem(dItems[i][ItemID], dItems[i][xItem], dItems[i][yItem], dItems[i][zItem], dItems[i][bAutoSpawn], i);
		dLastLoaded = i;
	}
	for(new i = dLastLoaded + 1; i < MAX_GROUND_ITEMS; i ++) dItems[i][ItemID] = 0;
	//SendRconCommand("loadfs [SA]ObjectSpawner");
    LogInfo(true, "[INIT]Objets charges");
	//---------------------//
    //---ARMES
	//---------------------//
	//INITIALISATION
	dLastLoaded = 0;
	for(new i = 0; i < MAX_GROUND_WEAPONS; i ++)
	{
		dGuns[i][ObjectID] = INVALID_OBJECT_ID;
		dGuns[i][WeaponText] = Text3D:INVALID_3DTEXT_ID;
	}
 	#if defined LOAD_DYNAMICS
    INI_ParseFile(WPATH, "LoadWeapons_data");
    #endif
    for(new i = 0; i < MAX_GROUND_WEAPONS; i ++)
	{
		if(dGuns[i][WeaponID] != 0)
		{
			CreateWeapon(dGuns[i][WeaponID], dGuns[i][WeaponAmmo], dGuns[i][xWeapon], dGuns[i][yWeapon], dGuns[i][zWeapon], i);
			dLastLoaded = i;
		}
	}
	for(new i = dLastLoaded + 1; i < MAX_GROUND_WEAPONS; i ++) dGuns[i][WeaponID] = 0;
    LogInfo(true, "[INIT]Armes chargees");
	//---------------------//
	//---VÉHICULES
	//---------------------//
 	#if defined LOAD_DYNAMICS
	INI_ParseFile(VPATH, "LoadVehicles_data");
	#endif
    for(new i = 0; i < MAX_SPAWN_VEHICLES; i ++)
	{
	    if(dVehicleInfos[i][dVehicleModel] != 0)
		{
			dVehicleInfos[i][dVehicleID] = CreateVehicle(dVehicleInfos[i][dVehicleModel], dVehicleInfos[i][xVeh], dVehicleInfos[i][yVeh], dVehicleInfos[i][zVeh],dVehicleInfos[i][aVeh], dVehicleInfos[i][dColor][0],dVehicleInfos[i][dColor][1], -1, false);
			SetVehicleEngineState(dVehicleInfos[i][dVehicleID], false);
			if(dVehicleInfos[i][fHealth] < 250.0) dVehicleInfos[i][fHealth] = 251.0;
			SetVehicleHealth(i, dVehicleInfos[i][fHealth]);
			SetVehicleWheels(i);
		}
	}
    LogInfo(true, "[INIT]Vehicules charges");
	//BAMBIS
	for(new i = 0; i < MAX_BAMBIS; i ++)
	{
		dBambi[i][oBambi] = INVALID_OBJECT_ID;
		CreateBambi(i, random(4));
	}
	//BLOPTS
	for(new i = 0; i < MAX_BLOPTS; i ++)
	{
		dBlopt[i][oBlopt] = INVALID_OBJECT_ID;
		dBlopt[i][oBloptSword] = INVALID_OBJECT_ID;
		for(new j = 0; j < 5; j ++) dBlopt[i][oBloptAttach][j] = INVALID_OBJECT_ID;
		CreateBlopt(i);
	}
	//TMNT
	for(new i = 0; i < MAX_TMNT; i ++)
	{
		dTMNT[i][oTMNT] = INVALID_OBJECT_ID;
		dTMNT[i][oTMNTAttach] = INVALID_OBJECT_ID;
		dTMNT[i][oTMNTSword] = INVALID_OBJECT_ID;
		CreateTMNT(i);
	}
	//---CAKTURNS
	for(new i = 0; i < MAX_CACTUS; i ++)
	{
		dCactus[i][dCactusPlace] = -1;
		dCactus[i][oCactus] = INVALID_OBJECT_ID;
		dCactus[i][oCactusAttach][0] = INVALID_OBJECT_ID;
		dCactus[i][oCactusAttach][1] = INVALID_OBJECT_ID;
		dCactus[i][oCactusAttach][2] = INVALID_OBJECT_ID;
		dCactus[i][dCactusHealth] = 0;
		CreateCakturn(i);
	}
	SetTimer("MoveBambis", 500, true);
	//---ZOMBIES & JOHN---//
	for(new i = 0; i < MAX_ZOMBIES; i ++)
	{
		dZombie[i][dZombieID] = INVALID_PLAYER_ID;
		dZombie[i][dZombieClass] = 0;
 		SetTimerEx("CreateZombie", (i == 0 ? 200 : i * 500), false, "i", i);
	}
	for(new i = 0; i < MAX_JOHNS; i ++)
	{
		dJohn[i][dJohnID] = INVALID_PLAYER_ID;
		dJohn[i][dJohnType] = 0;
 		SetTimerEx("CreateJohn", (i == 0 ? 300 : i * 500), false, "i", i);
	}
	//---
    dStreamMobs[dBambiZone][0] = CreateDynamicRectangle(-1144.0, -2906.0, -251.0, -1947.0, -1, -1, -1);
    dStreamMobs[dBambiZone][1] = CreateDynamicRectangle(1704.0, -1035.0, 2812.0, -38.0, -1, -1, -1);
    dStreamMobs[dBambiZone][2] = CreateDynamicRectangle(-967.0, -395.0, -200.0, 255.0, -1, -1, -1);
    dStreamMobs[dBambiZone][3] = CreateDynamicRectangle(399.0, -276.0, 1270.0, 405.0, -1, -1, -1);
    //---
    dStreamMobs[dBloptZone] = CreateDynamicRectangle(-196.6679, -291.8699, 228.227, 247.5299, -1, -1, -1);
    dStreamMobs[dUFOZone] = CreateDynamicRectangle(-221.0, 1477.0, 598.0, 2303.0, -1, -1, -1);
    dStreamMobs[dCactusZone] = CreateDynamicRectangle(-420.4035, 794.0955, 233.5575, 1156.11, -1, -1, -1);
    dStreamMobs[dTMNTZone] = CreateDynamicRectangle(183.4311, -630.8967, 489.2719, -330.2325, -1, -1, -1);
    dStreamMobs[dZapperZone] =  CreateDynamicCuboid(197.5448, 1851.0675, 9.7798, 228.0231, 1880.7344, 15.7002, -1, -1, -1);
	//---GROUPES---//
	for(new i = 0; i < MAX_GROUPS; i ++)
	{
	    dGroup[i][bActive] = false;
	    for(new j = 0; j < MAX_GROUP_SIZE; j ++) dGroup[j][dMembers] = INVALID_PLAYER_ID;
	    dGroup[i][dBoss] = INVALID_PLAYER_ID;
	    format(dGroup[i][sGroupName], 16, "Team %d", i);
	}
	//---INITIALISATION---//
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{
		pChooseSkin[i] = -1;
		for(new j = 0; j < 15; j ++) pPlayerBlip[i][j] = 0;
		//---
		ResetPlayerVariables(i);
		//---
		fDetectRange[i][0] = ZOMBIE_DETECT;
		fDetectRange[i][1] = JOHN_DETECT;
		dResetTimer[i] = -1;
		//---
		format(sPlayerName[i], MAX_PLAYER_NAME + 1, "%s", "_");
	    //---
		tInfoText[i] = PlayerText:INVALID_TEXT_DRAW;
		//---
		tGroupText[i] = PlayerText:INVALID_TEXT_DRAW;
		//---
		tInventObjet[i][0] = PlayerText:INVALID_TEXT_DRAW;
		tInventObjet[i][1] = PlayerText:INVALID_TEXT_DRAW;
		//---
		tPlayerSkin[i] = PlayerText:INVALID_TEXT_DRAW;
		tSlots[i] = PlayerText:INVALID_TEXT_DRAW;
		tAtelierTitre[i] = PlayerText:INVALID_TEXT_DRAW;
		for(new j = 0; j < 8; j ++) tHDVCats[i][j] = PlayerText:INVALID_TEXT_DRAW;
		for(new j = 0; j < 2; j ++) tHDVItem[i][j] = PlayerText:INVALID_TEXT_DRAW;
		for(new j = 0; j < 2; j ++) tBossHealth[i][j] = PlayerText:INVALID_TEXT_DRAW;
		for(new j = 0; j < 18; j ++) tAtelierChoice[i][j] = PlayerText:INVALID_TEXT_DRAW;
		for(new j = 0; j < 9; j ++) tAtelierItem[i][j] = PlayerText:INVALID_TEXT_DRAW;
		for(new j = 0; j < 8; j ++) tPlayerInfos[i][j] = PlayerText:INVALID_TEXT_DRAW;
		for(new j = 0; j < 3; j ++) tLevel[i][j] = PlayerText:INVALID_TEXT_DRAW;
		for(new j = 0; j < 9; j ++) tPlayerHUD[i][j] = PlayerText:INVALID_TEXT_DRAW;
		for(new j = 0; j < 5; j ++) tPlayerVehHUD[i][j] = PlayerText:INVALID_TEXT_DRAW;
		for(new j = 0; j < 6; j ++)
		{
			tVehicleTrunk[i][j][0] = PlayerText:INVALID_TEXT_DRAW;
			tVehicleTrunk[i][j][1] = PlayerText:INVALID_TEXT_DRAW;
		}
		for(new j = 0; j < 36; j ++)
		{
			tInventory[i][j][0] = PlayerText:INVALID_TEXT_DRAW;
			tInventory[i][j][1] = PlayerText:INVALID_TEXT_DRAW;
		}
		//---
		pAdminInfos[i][dSpec] = INVALID_PLAYER_ID;
	}
	#if defined PROFILING
	Profiler_Start();
	#endif
	return 1;
}

public OnGameModeExit()
{
	SendClientMessageToAllEx(ADMIN_COLOR, "[ADMIN]The server is being shut down.", "[ADMIN]Le serveur est en train d'être fermé.", "[ADMIN]¡Espagnol !", "[ADMIN]Portugais", "[ADMIN]Italien", "[ADMIN]Allemand");
	//---SAUVEGARDE PARTIES DYNAMIQUES
 	#if defined LOAD_DYNAMICS
	SaveFiles();
	#endif
	//---ZOMBIES---//
	for(new i = 0; i < MAX_ZOMBIES; i ++) if(dZombie[i][dZombieID] != INVALID_PLAYER_ID) dZombie[i][bZombieKick] = true, FCNPC_Destroy(dZombie[i][dZombieID]);//Kick(dZombie[i][dZombieID]);
	//---FILTERSCRIPTS---//
	SendRconCommand("unloadfs [SA]Mapping");
	SendRconCommand("unloadfs [SA]Actors");
	SendRconCommand("unloadfs [SA]Missions");
	SendRconCommand("unloadfs [SA]Shops");
	#if defined PROFILING
 	Profiler_Stop();
	#endif
	#if defined MYSQL_SYSTEM
	SaveGeneralInfos();
	SaveGasStations();
	//SaveGold();
	//SaveSeats();
	mysql_close(mysqlPool);
	LIST_clear(gasStationsList);
	LIST_clear(goldList);
	
	#endif
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	SpawnPlayer(playerid);
	OnPlayerSpawn(playerid);
	return 1;
}

public FCNPC_OnCreate(npcid)
{
	return 1;
}

public OnPlayerConnect(playerid)
{
	new string[128];
	//---
	if(dMaxPlayers < playerid) dMaxPlayers = playerid;
	//---
 	if(!FCNPC_IsValid(playerid))
	{
		//---
		for(new z = 0; z < MAX_ZOMBIES; z ++) if(playerid == dZombie[z][dZombieID]) dZombie[z][dZombieID] = INVALID_PLAYER_ID;
		//TextDrawShowForPlayer(playerid, tConnection);
		PlayAudioStreamForPlayer(playerid, "http://www.c4nn4.com/musicsamp/tsdway.mp3");
		#if defined KEEP_PLAYERTEXT
		CreatePlayerVehicleHUD(playerid);
		CreatePlayerVehicleInventory(playerid);
		CreatePlayerHUD(playerid);
		CreatePlayerInventory(playerid);
		CreatePlayerSafe(playerid);
		#endif
		pChooseSkin[playerid] = -1;
		pGroupRecruit[playerid] = -1;
		pThrown[playerid][0] = INVALID_OBJECT_ID;
		pThrown[playerid][1] = NO_THROW;
		pThrown[playerid][2] = 0;
		pNPCType[playerid] = 0;
		//---
		if(fexist(UserPath(playerid)))
   		{
			if(bHideHUD[playerid]) HidePlayerHUD(playerid, false);
			//---
			new sName[MAX_PLAYER_NAME + 1];
			GetPlayerName(playerid, sName, MAX_PLAYER_NAME + 1);
   			if(strcmp(sName, sPlayerName[playerid], false) != 0)
   			{
				ResetPlayerVariables(playerid);
				GetPlayerName(playerid, sPlayerName[playerid], MAX_PLAYER_NAME + 1);
				INI_ParseFile(UserPath(playerid), "LoadUser_%s", .bExtra = true, .extra = playerid);
				ProcessPlayerSave(playerid, .save = false);
   			}
   			//---
   			switch(pPlayerInfos[playerid][pLangue])
   			{
  			 	case LANGUAGE_EN: ShowPlayerDialog(playerid, 2, DIALOG_STYLE_PASSWORD, "Connection", "{ffffff}Welcome on {ff0000}Survive-All.\n{ffffff}Enter your password:\n\n\nIf it does not work, try {CC0000}123456", "Connection", "Leave");
			    case LANGUAGE_FR: ShowPlayerDialog(playerid, 2, DIALOG_STYLE_PASSWORD,"Connexion", "{ffffff}Bienvenue sur le serveur {ff0000}Survive-all.\n{ffffff}Veuillez entrer ci-dessous votre mot de passe:\n\n\nS'il ne fonctionne pas, essayez {CC0000}123456", "Connexion", "Quitter");
			    case LANGUAGE_ES: ShowPlayerDialog(playerid, 2, DIALOG_STYLE_PASSWORD, "Conneccion", "{ffffff}Bienvenuda en el server {ff0000}Survive-all.\n{ffffff}Escribe su contraseña por favor:\n\n\nSi no funcciona, pruebe {CC0000}123456", "Connectar", "Dejar");
			    case LANGUAGE_PG: ShowPlayerDialog(playerid, 2, DIALOG_STYLE_PASSWORD, "Portugais", "{ffffff}Portugais {ff0000}Survive-all.\n{ffffff}Portugais:\n\n\nPortugais {CC0000}123456", "Portugais", "Portugais");
			    case LANGUAGE_IT: ShowPlayerDialog(playerid, 2, DIALOG_STYLE_PASSWORD, "Italien", "{ffffff}Italien {ff0000}Survive-all.\n{ffffff}Italien:\n\n\nItalien {CC0000}123456", "Italien", "Italien");
			    case LANGUAGE_DE: ShowPlayerDialog(playerid, 2, DIALOG_STYLE_PASSWORD, "Conneccion", "{ffffff}Wilkommen auf dem {ff0000}Survive-all {ffffff}server.\n{ffffff}Bitten ihren kennwort schreiben:\n\n\nWenn es nicht funktioniert, schreiben sie {CC0000}123456", "Connectieren", "Schaffen");
   			}
		}
		else
		{
			ResetPlayerVariables(playerid);
			SetPlayerAdminLevel(playerid, PLAYER);
			GetPlayerName(playerid, sPlayerName[playerid], MAX_PLAYER_NAME + 1);
			//---
			new sLangue[25];
			new sCol[2][9] = {"{00F000}", "{CC0000}"};
			format(sLangue, sizeof(sLangue), "%sEnglish\n", sCol[bLangue[0] ? 0 : 1]);
			strcat(string, sLangue);
			format(sLangue, sizeof(sLangue), "%sFrançais\n", sCol[bLangue[1] ? 0 : 1]);
			strcat(string, sLangue);
			format(sLangue, sizeof(sLangue), "%sEspañol\n", sCol[bLangue[2] ? 0 : 1]);
			strcat(string, sLangue);
			format(sLangue, sizeof(sLangue), "%sPortuguês\n", sCol[bLangue[3] ? 0 : 1]);
			strcat(string, sLangue);
			format(sLangue, sizeof(sLangue), "%sItaliano\n", sCol[bLangue[4] ? 0 : 1]);
			strcat(string, sLangue);
			format(sLangue, sizeof(sLangue), "%sDeutsch\n", sCol[bLangue[5] ? 0 : 1]);
			strcat(string, sLangue);
			//---
			ShowPlayerDialog(playerid, 0, DIALOG_STYLE_LIST, "Language", string, "OK", "");
		}
		//---
		if(!IsHUDHiddenForPlayer(playerid))
		{
			TextDrawShowForPlayer(playerid, tHUDFont[0]);
	        #if defined RADAR_HIDDEN
			TextDrawShowForPlayer(playerid, tHUDFont[8]);
			#endif
		}
		SetPlayerWeather(playerid, 9);
		SetPlayerTime(playerid, 0, 0);
		SetSpawnInfo(playerid, 0, 0, 301.6640, -109.9130, 2052.2338, 0.0, 0, 0, 0, 0, 0, 0);
		SetPlayerCameraPos(playerid, 291.985046, -124.679779, 2051.947998);
		SetPlayerCameraLookAt(playerid, 294.441650, -120.615112, 2050.384765);
		InterpolateCameraPos(playerid, 291.985046, -124.679779, 2051.947998, 302.941619, -142.554504, 2054.491210, 30000);
		InterpolateCameraLookAt(playerid, 294.441650, -120.615112, 2050.384765, 302.474060, -137.800369, 2053.014892, 25000);
	    SpawnPlayer(playerid);
	    for(new i = 0; i < 25; i ++) SendClientMessage(playerid, BLANC, " ");
		//---BLACKZONE
		GangZoneShowForPlayer(playerid, zBlackZone, 0x000000FF);
	    //---
		format(string, sizeof(string), "[+]{FFFF00}%s {008000}joined the server.", GetName(playerid));
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_EN) SendClientMessageEx(i, VERT, string, string, string, string, string, string);
		format(string, sizeof(string), "[+]{FFFF00}%s {008000}a rejoint le serveur.", GetName(playerid));
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_FR) SendClientMessageEx(i, VERT, string, string, string, string, string, string);
		format(string, sizeof(string), "[+]{FFFF00}%s {008000}Espagnol.", GetName(playerid));
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_ES) SendClientMessageEx(i, VERT, string, string, string, string, string, string);
		format(string, sizeof(string), "[+]{FFFF00}%s {008000}Portugais.", GetName(playerid));
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_PG) SendClientMessageEx(i, VERT, string, string, string, string, string, string);
		format(string, sizeof(string), "[+]{FFFF00}%s {008000}Italien.", GetName(playerid));
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_IT) SendClientMessageEx(i, VERT, string, string, string, string, string, string);
		format(string, sizeof(string), "[+]{FFFF00}%s {008000}Allemand.", GetName(playerid));
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_DE) SendClientMessageEx(i, VERT, string, string, string, string, string, string);
		new sIP[16];
		GetPlayerIp(playerid, sIP, 16);
		LogInfo(true, "[CONNEXION]%s a rejoint le serveur (%s).", GetName(playerid), sIP);
		//---
		SendClientMessageEx(playerid, ORANGE, "|=========================================", "|=========================================", "|=========================================", "|=========================================", "|=========================================", "|=========================================");
		SendClientMessageEx(playerid, ORANGE, "|              Welcome to {CC0000}Survive-All     ", "|           Bienvenue sur {CC0000}Survive-All     ", "|             Bienvenido a {CC0000}Survive-All    ", "|             Bem-vindo a {CC0000}Survive-All     ", "|             Benvenuto su {CC0000}Survive-All    ", "|            Willkommen zu {CC0000}Survive-All    ");
		SendClientMessageEx(playerid, ORANGE, "|                           {FFFF00}"VERSION"     ", "|                          {FF0000}"VERSION"      ", "|                      {FF0000}"VERSION"          ", "|                      {FF0000}"VERSION"          ", "|                      {FF0000}"VERSION"          ", "|                      {FF0000}"VERSION"          ");
		switch(RandomEx(0, 20))
		{
			case 0: SendClientMessageEx(playerid, ORANGE, "|    '{CC0000}Better than previous versions!{FF8000}'     ", "| '{CC0000}Mieux que les versions précédentes !{FF8000}' ", "|                                          ", "|                                          ", "|                                          ", "|                                          ");
			case 1: SendClientMessageEx(playerid, ORANGE, "|    '{CC0000}Will help you on heart diseases{FF8000}'    ", "|  '{CC0000}Peut guérir les maladies cardiaques{FF8000}' ", "|                                          ", "|                                          ", "|                                          ", "|                                          ");
			case 2: SendClientMessageEx(playerid, ORANGE, "|         '{CC0000}Now without human meat{FF8000}'        ", "|     '{CC0000}Maintenant sans viande humaine{FF8000}'   ", "|                                          ", "|                                          ", "|                                          ", "|                                          ");
			case 3: SendClientMessageEx(playerid, ORANGE, "|      '{CC0000}Will enhance your sex-appeal{FF8000}'     ", "|       '{CC0000}Vous rendra plus attirant{FF8000}'      ", "|                                          ", "|                                          ", "|                                          ", "|                                          ");
			case 4: SendClientMessageEx(playerid, ORANGE, "|      '{CC0000}Slows down global warming{FF8000}'        ", "| '{CC0000}Ralentit le réchauffement climatique{FF8000}' ", "|                                          ", "|                                          ", "|                                          ", "|                                          ");
			case 5: SendClientMessageEx(playerid, ORANGE, "|    '{CC0000}Gives you real-life superpower{FF8000}'     ", "|   '{CC0000}Garantit de réels super-pouvoirs{FF8000}'   ", "|                                          ", "|                                          ", "|                                          ", "|                                          ");
			case 6: SendClientMessageEx(playerid, ORANGE, "|  '{CC0000}Can be used as weight-loss program{FF8000}'   ", "|'{CC0000}Peut-être utilisé pour perdre du poids{FF8000}'", "|                                          ", "|                                          ", "|                                          ", "|                                          ");
			case 7: SendClientMessageEx(playerid, ORANGE, "|       '{CC0000}Only slav way to find love{FF8000}'      ", "|  '{CC0000}Méthode slave pour trouver l'amour{FF8000}'  ", "|                                          ", "|                                          ", "|                                          ", "|                                          ");
			case 8: SendClientMessageEx(playerid, ORANGE, "|   '{CC0000}Renduces chances of renal failure{FF8000}'   ", "|    '{CC0000}Réduit les insuffisance rénales{FF8000}'   ", "|                                          ", "|                                          ", "|                                          ", "|                                          ");
			case 9: SendClientMessageEx(playerid, ORANGE, "|    '{CC0000}Gives you 10 extra swagg points!{FF8000}'   ", "|  '{CC0000}Augmente votre swagg de 10 points !{FF8000}' ", "|                                          ", "|                                          ", "|                                          ", "|                                          ");
			case 10: SendClientMessageEx(playerid, ORANGE, "|         '{CC0000}Gives fdsiubfdsiunsd!{FF8000}'         ", "|  '{CC0000}Vous offre du fdsisopanfdnoaiidn !{FF8000}'  ", "|                                          ", "|                                          ", "|                                          ", "|                                          ");
			case 11: SendClientMessageEx(playerid, ORANGE, "|     '{CC0000}Made of 10 percents solid gold{FF8000}'    ", "|   '{CC0000}Fait de 10 pourcents d'or massif{FF8000}'   ", "|                                          ", "|                                          ", "|                                          ", "|                                          ");
			case 12: SendClientMessageEx(playerid, ORANGE, "|            '{CC0000}Broadcasted live{FF8000}'           ", "|          '{CC0000}Diffusé en direct !{FF8000}'         ", "|                                          ", "|                                          ", "|                                          ", "|                                          ");
			case 13: SendClientMessageEx(playerid, ORANGE, "|               '{CC0000}In color!{FF8000}'               ", "|             '{CC0000}En couleurs !{FF8000}'            ", "|                                          ", "|                                          ", "|                                          ", "|                                          ");
			case 14: SendClientMessageEx(playerid, ORANGE, "|         '{CC0000}Based on a real story{FF8000}'         ", "|        '{CC0000}Inspiré de faits réels{FF8000}'        ", "|                                          ", "|                                          ", "|                                          ", "|                                          ");
			case 15: SendClientMessageEx(playerid, ORANGE, "|       '{CC0000}Asbestos seal of quality{FF8000}'        ", "|         '{CC0000}Garanti sans amiante{FF8000}'         ", "|                                          ", "|                                          ", "|                                          ", "|                                          ");
			case 16: SendClientMessageEx(playerid, ORANGE, "| '{CC0000}No animals were harmed while produced{FF8000}' ", "|     '{CC0000}Aucun animal n'a été blessé{FF8000}'      ", "|                                          ", "|                                          ", "|                                          ", "|                                          ");
			case 17: SendClientMessageEx(playerid, ORANGE, "|      '{CC0000}Soon to be a major religion{FF8000}'      ", "|    '{CC0000}Bientôt sous forme de religion{FF8000}'    ", "|                                          ", "|                                          ", "|                                          ", "|                                          ");
			case 18: SendClientMessageEx(playerid, ORANGE, "|                '{CC0000}Or not?{FF8000}'                ", "|               '{CC0000}Ou pas ?{FF8000}'               ", "|                                          ", "|                                          ", "|                                          ", "|                                          ");
			case 19: SendClientMessageEx(playerid, ORANGE, "|     '{CC0000}Innocent 'til I say otherwise{FF8000}'     ", "|  '{CC0000}Innocent sans culpabilité prouvée{FF8000}'   ", "|                                          ", "|                                          ", "|                                          ", "|                                          ");
		}
		SendClientMessageEx(playerid, ORANGE, "|                 By [Pix]                ", "|                Par [Pix]                ", "|                Por [Pix]                ", "|                Por [Pix]                ", "|                 Da [Pix]                ", "|                Von [Pix]                ");
		SendClientMessageEx(playerid, ORANGE, "|=========================================", "|=========================================", "|=========================================", "|=========================================", "|=========================================", "|=========================================");
	}
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	new string[128];
	if(FCNPC_IsValid(playerid))
	{
  		for(new z = 0; z < MAX_ZOMBIES; z ++)
		{
			if(dZombie[z][dZombieID] == playerid)
   			{
      			dZombie[z][dZombieID] = INVALID_PLAYER_ID;
   			    if(dZombie[z][bZombieKick])
			   	{
				   	dZombie[z][bZombieKick] = false;
				   	break;
				}
      			CreateZombie(z);
				break;
    		}
		}
	}
	else
	{
	    switch(reason)
	    {
	        case 0:
	        {
				format(string, sizeof(string), "[-]{FFFF00}%s {CC0000}has timed out.", GetName(playerid));
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_EN) SendClientMessageEx(i, ROUGE, string, string, string, string, string, string);
				format(string, sizeof(string), "[-]{FFFF00}%s {CC0000}a crash.", GetName(playerid));
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_FR) SendClientMessageEx(i, ROUGE, string, string, string, string, string, string);
				format(string, sizeof(string), "[-]{FFFF00}%s {CC0000}Espagnol.", GetName(playerid));
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_ES) SendClientMessageEx(i, ROUGE, string, string, string, string, string, string);
				format(string, sizeof(string), "[-]{FFFF00}%s {CC0000}Portugais.", GetName(playerid));
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_PG) SendClientMessageEx(i, ROUGE, string, string, string, string, string, string);
				format(string, sizeof(string), "[-]{FFFF00}%s {CC0000}Italien.", GetName(playerid));
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_IT) SendClientMessageEx(i, ROUGE, string, string, string, string, string, string);
				format(string, sizeof(string), "[-]{FFFF00}%s {CC0000}Allemand.", GetName(playerid));
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_DE) SendClientMessageEx(i, ROUGE, string, string, string, string, string, string);
				LogInfo(false, "[CONNEXION]%s a quitte le serveur - Crash.", GetName(playerid));
			}
	        case 1:
	        {
				format(string, sizeof(string), "[-]{FFFF00}%s {CC0000}left the server.", GetName(playerid));
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_EN) SendClientMessageEx(i, ROUGE, string, string, string, string, string, string);
				format(string, sizeof(string), "[-]{FFFF00}%s {CC0000}a quitté le serveur.", GetName(playerid));
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_FR) SendClientMessageEx(i, ROUGE, string, string, string, string, string, string);
				format(string, sizeof(string), "[-]{FFFF00}%s {CC0000}Espagnol.", GetName(playerid));
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_ES) SendClientMessageEx(i, ROUGE, string, string, string, string, string, string);
				format(string, sizeof(string), "[-]{FFFF00}%s {CC0000}Portugais.", GetName(playerid));
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_PG) SendClientMessageEx(i, ROUGE, string, string, string, string, string, string);
				format(string, sizeof(string), "[-]{FFFF00}%s {CC0000}Italien.", GetName(playerid));
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_IT) SendClientMessageEx(i, ROUGE, string, string, string, string, string, string);
				format(string, sizeof(string), "[-]{FFFF00}%s {CC0000}Allemand.", GetName(playerid));
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_DE) SendClientMessageEx(i, ROUGE, string, string, string, string, string, string);
				LogInfo(false, "[CONNEXION]%s a quitte le serveur - Déconnexion.", GetName(playerid));
			}
	        case 2:
	        {
				format(string, sizeof(string), "[-]{FFFF00}%s {CC0000}was kicked out of the server.", GetName(playerid));
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_EN) SendClientMessageEx(i, ROUGE, string, string, string, string, string, string);
				format(string, sizeof(string), "[-]{FFFF00}%s {CC0000}a été kick du serveur.", GetName(playerid));
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_FR) SendClientMessageEx(i, ROUGE, string, string, string, string, string, string);
				format(string, sizeof(string), "[-]{FFFF00}%s {CC0000}Espagnol.", GetName(playerid));
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_ES) SendClientMessageEx(i, ROUGE, string, string, string, string, string, string);
				format(string, sizeof(string), "[-]{FFFF00}%s {CC0000}Portugais.", GetName(playerid));
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_PG) SendClientMessageEx(i, ROUGE, string, string, string, string, string, string);
				format(string, sizeof(string), "[-]{FFFF00}%s {CC0000}Italien.", GetName(playerid));
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_IT) SendClientMessageEx(i, ROUGE, string, string, string, string, string, string);
				format(string, sizeof(string), "[-]{FFFF00}%s {CC0000}Allemand.", GetName(playerid));
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_DE) SendClientMessageEx(i, ROUGE, string, string, string, string, string, string);
				LogInfo(false, "[CONNEXION]%s a quitte le serveur - Kick/Ban.", GetName(playerid));
			}
		}
		//---SAUVEGARDE POSITION---//
		if(pPlayerInfos[playerid][dLogState] == SPAWNED && !IsPlayerOnSpectate(playerid))
		{
			GetPlayerPos(playerid, pPlayerInfos[playerid][xPos], pPlayerInfos[playerid][yPos], pPlayerInfos[playerid][zPos]);
			GetPlayerFacingAngle(playerid, pPlayerInfos[playerid][aPos]);
		}
		//---
		new sName[MAX_PLAYER_NAME + 1];
		GetPlayerName(playerid, sName, MAX_PLAYER_NAME + 1);
		for(new i = 0; i < dMaxPlayers; i ++)
		{
		    if(i == playerid) continue;
			if(strcmp(sName, sPlayerName[playerid], false) != 0)
			{
				format(sPlayerName[i], MAX_PLAYER_NAME + 1, "N/A");
				ResetPlayerVariables(playerid);
			}
		}
		//---
		SaveUser(playerid);
		SaveUserOffline(playerid);
		//---GROUPES
		if(pGroup[playerid] != -1) RemoveGroupMember(playerid, false);
		//---LOGGED
		pPlayerInfos[playerid][dLogState] = UNLOGGED;
		//---
		CloseTextDraws(playerid);
		HidePlayerTextInfo(playerid);
		//---ARTISAN
		if(bCrafting[playerid])
		{
			bCrafting[playerid] = false;
		}
		//---PÊCHE
		if(pFishInfo[playerid][State] == 1)
		{
			pFishInfo[playerid][Fish] = 0;
			pFishInfo[playerid][TimeCatch] = 0;
			pFishInfo[playerid][Time] = 0;
			pFishInfo[playerid][State] = 0;
			KillTimer(pFishInfo[playerid][FishingTimer]);
			pFishInfo[playerid][FishingTimer] = -1;
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, true);
			ClearAnimations(playerid, true);
		}
		//---MÉDECIN
		if(bHeal[playerid]) bHeal[playerid] = false;
		//---RÉPARATION VÉHICULES
		if(dRepair[playerid][0] != 0)
		{
			TogglePlayerControllable(playerid, true);
			SetVehicleBonnetState(dRepair[playerid][3], false);
			dRepair[playerid][0] = 0;
			dRepair[playerid][1] = -1;
			dRepair[playerid][2] = 0;
			dRepair[playerid][3] = -1;
	  	}
	  	//---GUNRACKS
	  	if(pGunRack[playerid] != -1)
	  	{
	  	    pGunRack[playerid] = -1;
	  	}
	  	//---FRIDGES
	  	if(pFridge[playerid] != -1)
	  	{
	  	    pFridge[playerid] = -1;
	  	}
		//---COFFRE FORT
		if(pCreateSafe[playerid] != -1)
		{
			DestroySafe(pCreateSafe[playerid]);
			pCreateSafe[playerid] = -1;
		}
		//---GARAGES
		if(pGarage[playerid] != -1)
		{
		    pGarage[playerid] = -1;
		}
		//---CITERNES
		if(pTank[playerid] != -1)
		{
		    pTank[playerid] = -1;
		}
		//---DÉCORATION
		/*if(pFurn[playerid] != -1)
		{
		    pFurn[playerid] = -1;
		}*/
		//---NAMETAG
		Delete3DTextLabel(pPlayerTag[playerid]);
		pPlayerTag[playerid] = Text3D:INVALID_3DTEXT_ID;
		//---VÊTEMENTS
		for(new i = 0; i < 10; i ++)
		{
			S_RemovePlayerAttachedObject(playerid, i);
			pAcc[playerid][i][model] = 0;
			pAcc[playerid][i][pdc] = 0;
		 	for(new j = 0; j < 9; j ++) pAcc[playerid][i][o][j] = 0;
	   		pAcc[playerid][i][col][0] = 0;
	   		pAcc[playerid][i][col][1] = 0;
		}
		//---STREAM
		if(IsPlayerInDynamicArea(playerid, dStreamMobs[dBambiZone][0], 0)) if(-- dStreamMobs[dBambiStream][0] < 0) dStreamMobs[dBambiStream][0] = 0;
		if(IsPlayerInDynamicArea(playerid, dStreamMobs[dBambiZone][1], 0)) if(-- dStreamMobs[dBambiStream][1] < 0) dStreamMobs[dBambiStream][1] = 0;
		if(IsPlayerInDynamicArea(playerid, dStreamMobs[dBambiZone][2], 0)) if(-- dStreamMobs[dBambiStream][2] < 0) dStreamMobs[dBambiStream][2] = 0;
		if(IsPlayerInDynamicArea(playerid, dStreamMobs[dBambiZone][3], 0)) if(-- dStreamMobs[dBambiStream][3] < 0) dStreamMobs[dBambiStream][3] = 0;
		if(IsPlayerInDynamicArea(playerid, dStreamMobs[dBloptZone], 0)) if(-- dStreamMobs[dBloptZone] < 0) dStreamMobs[dBloptZone] = 0;
		if(IsPlayerInDynamicArea(playerid, dStreamMobs[dUFOZone], 0)) if(-- dStreamMobs[dUFOStream] < 0) dStreamMobs[dUFOStream] = 0;
		if(IsPlayerInDynamicArea(playerid, dStreamMobs[dCactusZone], 0)) if(-- dStreamMobs[dCactusStream] < 0) dStreamMobs[dCactusStream] = 0;
		if(IsPlayerInDynamicArea(playerid, dStreamMobs[dTMNTZone], 0)) if(-- dStreamMobs[dTMNTStream] < 0) dStreamMobs[dTMNTStream] = 0;
		if(IsPlayerInDynamicArea(playerid, dStreamMobs[dZapperZone], 0)) if(-- dStreamMobs[dZapperStream] < 0) dStreamMobs[dZapperStream] = 0;
		//---
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i ++)
		{
		    if(pAdminInfos[i][dSpec] == playerid)
		    {
				if(!PlayerSpectatesNextPlayer(i, true))
				{
					LogInfo(true, "[ADMIN]%s arrete de spec %s.", GetName(playerid), GetName(pAdminInfos[i][dSpec]));
					TogglePlayerSpectating(playerid, 0);
					SetCameraBehindPlayer(playerid);
					SetPlayerPos(playerid, pPlayerInfos[playerid][xPos], pPlayerInfos[playerid][yPos], pPlayerInfos[playerid][zPos]);
					SendClientMessageEx(playerid, ADMIN_COLOR, "[ADMIN]You stopped spectating.", "[ADMIN]Vous avez arrêté de regarder.", "[ADMIN]Espagnol", "[ADMIN]Portugais", "[ADMIN]Italien", "[ADMIN]Allemand");
				    pAdminInfos[playerid][dSpec] = INVALID_PLAYER_ID;
				}
		    }
		}
		if(pAdminInfos[playerid][dSpec] != INVALID_PLAYER_ID)
		{
			pAdminInfos[playerid][dSpec] = INVALID_PLAYER_ID;
		}
		if(pAdminInfos[playerid][bLog])
		{
		    pAdminInfos[playerid][bLog] = false;
		}
	}
	return 1;
}

public FCNPC_OnSpawn(npcid)
{
	new john = IsNPCJohn(npcid);
	new zombie = IsNPCZombie(npcid);
	if(npcid == dJason[dJasonID])
    {
		FCNPC_ApplyAnimation(dJason[dJasonID], "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
		FCNPC_SetHealth(dJason[dJasonID], 99999.0);
		SetPlayerColor(npcid, 0xCC000000);
		FCNPC_SetPosition(dJason[dJasonID], -1632.6936, -2246.8542, 32.3810);
		FCNPC_SetSkin(dJason[dJasonID], 168);
		dJason[dJasonState] = 1;
		FCNPC_ApplyAnimation(dJason[dJasonID], "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
		SetPlayerAttachedObject(dJason[dJasonID], 0, 19036, 2, 0.086, 0.043, -0.007, 86.100196, 91.500007, 0.0, 1.0, 1.0, 1.0);
        return 1;
    }
    else if(zombie != -1)
    {
		new zSkin;
		FCNPC_SetInvulnerable(npcid, false);
		//RNPC_ToggleVehicleCollisionCheck(playerid, 1);
		SetPlayerColor(dZombie[zombie][dZombieID], ZOMBIE_COLOR);
		new Float:fZombieSpawns[][3] =
		{
		    //---RED COUNTY
			{209.1414, -173.0814, 1.5781},//Blueberry
			{785.9221, -606.2787, 16.3359},//Dillimore
			{1271.5508, 295.0828, 20.6563},//Montgommery
			{-61.1210, 0.4518, 3.1172},//Blueberry Acres
			{2240.3445,-77.6846,26.5122},//Palomino Creek
			{734.7232,-468.6853,16.6168}, //Usine Armes Dillimore
			{906.0907,28.9306,87.2272}, //Fern Ridge
			{1557.7100, 31.4414, 24.1641},//Départ courses
			{1942.9865, 221.6578, 28.9491},//Ferme Palomino Creek
			//---FORÊT
			{-2123.8711,-2481.7368,30.6250},//Angel Pine
			{-548.1393,-478.7454,25.5178}, //Fallen Tree
			{-589.2219,-1051.5774,23.3272}, //Camping
			{-487.4872,-1347.4398,26.6994}, //Flint Range
			{-423.5382,-1803.8933,4.7250}, //Rivière Back O Beyond
			{-746.9127,-2073.0469,9.9573}, //Maison du Caribou
			{-1190.3136,-2349.6147,19.3157}, //Pont Back O Beyond - Shady Creeks
			{-1386.6246,-2441.3845,36.1338}, //Shady Creeks
			{-1649.4493,-2339.0818,48.8012}, //Shady Creeks près du lac
			{-1689.1039,-1777.0139,33.9188}, //Angel Pine Junkyard forêt
			{-1882.1804,-1642.3981,21.7500}, //Angel Pine Junkyard
			//---LV
			{2882.9099, 2420.7839, 10.8203}, // SpawnCamionneurs
			{2748.4265, 1835.5457, 9.0287}, // Chinois
			{2523.0190, 1255.0856, 10.9452}, // Basket
			{2424.4812, 712.3272, 10.8607}, // Rockshore
			{2069.6770, 1297.0120, 10.6719}, // Strip
			{2106.1440, 1692.4806, 10.8203}, // Caligula
			{2100.9214, 2063.8809, 10.8203}, // SexShop
			{2284.8169, 2414.7700, 10.8199}, // Commissariat
			{1907.7280, 2711.9905, 10.8589}, // PricklePine
			{1347.2323, 2442.4426, 6.7344}, // AutorouteNord
			{1618.0056, 2015.8011, 10.8659}, // Redsand
			{1797.1178, 1582.0658, 6.7031}, // AutorouteCentre
			{1428.5160, 1458.8920, 10.8203}, // Aeroport
			{1671.6862, 989.6957, 14.3643}, // LVAFreightDepot
			{1008.8698, 1368.4778, 10.7928}, // Blackfield
			//---DESERT
			{486.0252,1369.8289,4.4626}, // ZombiesOctaneSprings
			{660.3059,1810.2441,5.3595}, // ZombiesStripclub
			{504.2529,2248.0327,33.7982}, // ZombiesBoneCountyNord
			{204.1121,2507.4292,16.4893}, // ZombiesVerdantMeadows
			{-420.7636,2566.1782,41.5122}, // ZombiesLasPayasadas
			{-1495.9065,2655.9673,55.6930}, // ZombiesElQuebrados
			{-2463.5710,2329.3086,4.8359}, // ZombiesBayside
			{-1563.1779,1772.6541,17.0782}, // ZombiesTierraRobada
			{-844.0148,1495.4739,18.5611}, // ZombiesLasBarrancas
			{-715.2629,959.4414,12.2227}, // ZombiesRanch
			{-191.0160,1099.4109,19.5975}, // ZombiesFortCarson1
			{107.6545,1282.1610,20.5405}, // ZombiesFortCarson2
			{52.0657,2081.8423,17.1583}, // ZombiesArea
			{-316.2719,1732.8518,42.6875} // ZombiesRegularTom
		};
		switch(random(7))
		{
			case 0: zSkin = 162, dZombie[zombie][dZombieClass] = NONE, AttachZombieMeat(npcid, 0);
			case 1: zSkin = 78, dZombie[zombie][dZombieClass] = NONE, AttachZombieMeat(npcid, 1);
			case 2: zSkin = 137, dZombie[zombie][dZombieClass] = NONE, AttachZombieMeat(npcid, 2);
			case 3: zSkin = 230, dZombie[zombie][dZombieClass] = SPEED, AttachZombieMeat(npcid, 3);
			case 4: zSkin = 264, dZombie[zombie][dZombieClass] = BOOMER, AttachZombieMeat(npcid, 4);
			case 5: zSkin = 79, dZombie[zombie][dZombieClass] = SMOKER, AttachZombieMeat(npcid, 5);
			case 6: zSkin = 242, dZombie[zombie][dZombieClass] = TANKER, AttachZombieMeat(npcid, 6);
		}
		if(dZombie[zombie][dZombieClass] == TANKER) FCNPC_SetHealth(npcid, 750.0);
		new Float:x, Float:y, Float:z, Float:a;
		new dRandSpawn = random(sizeof(fZombieSpawns));
		//---
		a = float(RandomEx(0, 359));
		x = fZombieSpawns[dRandSpawn][0] + float(RandomEx(-5, 5));
		y = fZombieSpawns[dRandSpawn][1] + float(RandomEx(-5, 5));
    	CA_FindZ_For2DCoord(x, y, z);
		//---
		FCNPC_SetPosition(npcid, x, y, z + 1.0);
		FCNPC_SetAngle(npcid, a);
		FCNPC_SetSkin(npcid, zSkin);
	}
    else if(john != -1)
    {
		new dSkin = RandomEx(0, 311);
		FCNPC_SetInvulnerable(npcid, false);
		//RNPC_ToggleVehicleCollisionCheck(playerid, 1);
		SetPlayerColor(dJohn[john][dJohnID], ZOMBIE_COLOR);
		//---
		if(dJohn[john][bVehicle])
		{
			FCNPC_RemoveFromVehicle(dJohn[john][dJohnID]);
			dJohn[john][bVehicle] = false;
		}
		//---
		new Float:x, Float:y, Float:z, Float:a;
		a = float(RandomEx(0, 359));
		x = 0.0 + float(RandomEx(-5, 5));
		y = -250.0 + float(RandomEx(-5, 5));
    	CA_FindZ_For2DCoord(x, y, z);
		//---
		FCNPC_SetPosition(npcid, x, y, z + 1.0);
		FCNPC_SetAngle(npcid, a);
		FCNPC_SetSkin(npcid, dSkin);
		dJohn[john][dJohnType] = JOHN_PACIFIC;
		dJohn[john][dJohnFriend] = INVALID_PLAYER_ID;
		dJohn[john][dJohnTarget] = INVALID_PLAYER_ID;
		dJohn[john][dJohnWeapon] = 0;
		dJohn[john][bVehicle] = false;
		FCNPC_SetWeapon(dJohn[john][dJohnID], 0);
		//---
		dJohn[john][fNodeX][5] = 0.0;
		dJohn[john][fNodeY][5] = 0.0;
		dJohn[john][fNodeZ][5] = 0.0;
		//---
		dJohn[john][dJohnMission] = NO_MISSION;
	}
	return 1;
}

public FCNPC_OnRespawn(npcid)
{
	new john = IsNPCJohn(npcid);
	new zombie = IsNPCZombie(npcid);
	//---
	if(npcid == dJason[dJasonID])
    {
		FCNPC_ApplyAnimation(dJason[dJasonID], "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
		FCNPC_SetHealth(dJason[dJasonID], 99999.0);
		SetPlayerColor(npcid, 0xCC000000);
		FCNPC_SetPosition(dJason[dJasonID], -1632.6936, -2246.8542, 32.3810);
		FCNPC_SetSkin(dJason[dJasonID], 168);
		dJason[dJasonState] = 1;
		FCNPC_ApplyAnimation(dJason[dJasonID], "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
		SetPlayerAttachedObject(dJason[dJasonID], 0, 19036, 2, 0.086, 0.043, -0.007, 86.100196, 91.500007, 0.0, 1.0, 1.0, 1.0);
        return 1;
    }
    else if(zombie != -1)
	{
		new zSkin;
		FCNPC_SetInvulnerable(npcid, false);
		//RNPC_ToggleVehicleCollisionCheck(playerid, 1);
		SetPlayerColor(dZombie[zombie][dZombieID], ZOMBIE_COLOR);
		new Float:fZombieSpawns[][3] =
		{
		    //---RED COUNTY
			{209.1414, -173.0814, 1.5781},//Blueberry
			{785.9221, -606.2787, 16.3359},//Dillimore
			{1271.5508, 295.0828, 20.6563},//Montgommery
			{-61.1210, 0.4518, 3.1172},//Blueberry Acres
			{2240.3445,-77.6846,26.5122},//Palomino Creek
			{734.7232,-468.6853,16.6168}, //Usine Armes Dillimore
			{906.0907,28.9306,87.2272}, //Fern Ridge
			{1557.7100, 31.4414, 24.1641},//Départ courses
			{1942.9865, 221.6578, 28.9491},//Ferme Palomino Creek
			//---FORÊT
			{-2123.8711,-2481.7368,30.6250},//Angel Pine
			{-548.1393,-478.7454,25.5178}, //Fallen Tree
			{-589.2219,-1051.5774,23.3272}, //Camping
			{-487.4872,-1347.4398,26.6994}, //Flint Range
			{-423.5382,-1803.8933,4.7250}, //Rivière Back O Beyond
			{-746.9127,-2073.0469,9.9573}, //Maison du Caribou
			{-1190.3136,-2349.6147,19.3157}, //Pont Back O Beyond - Shady Creeks
			{-1386.6246,-2441.3845,36.1338}, //Shady Creeks
			{-1649.4493,-2339.0818,48.8012}, //Shady Creeks près du lac
			{-1689.1039,-1777.0139,33.9188}, //Angel Pine Junkyard forêt
			{-1882.1804,-1642.3981,21.7500}, //Angel Pine Junkyard
			//---LV
			{2882.9099, 2420.7839, 10.8203}, // SpawnCamionneurs
			{2748.4265, 1835.5457, 9.0287}, // Chinois
			{2523.0190, 1255.0856, 10.9452}, // Basket
			{2424.4812, 712.3272, 10.8607}, // Rockshore
			{2069.6770, 1297.0120, 10.6719}, // Strip
			{2106.1440, 1692.4806, 10.8203}, // Caligula
			{2100.9214, 2063.8809, 10.8203}, // SexShop
			{2284.8169, 2414.7700, 10.8199}, // Commissariat
			{1907.7280, 2711.9905, 10.8589}, // PricklePine
			{1347.2323, 2442.4426, 6.7344}, // AutorouteNord
			{1618.0056, 2015.8011, 10.8659}, // Redsand
			{1797.1178, 1582.0658, 6.7031}, // AutorouteCentre
			{1428.5160, 1458.8920, 10.8203}, // Aeroport
			{1671.6862, 989.6957, 14.3643}, // LVAFreightDepot
			{1008.8698, 1368.4778, 10.7928}, // Blackfield
			//---DESERT
			{486.0252,1369.8289,4.4626}, // ZombiesOctaneSprings
			{660.3059,1810.2441,5.3595}, // ZombiesStripclub
			{504.2529,2248.0327,33.7982}, // ZombiesBoneCountyNord
			{204.1121,2507.4292,16.4893}, // ZombiesVerdantMeadows
			{-420.7636,2566.1782,41.5122}, // ZombiesLasPayasadas
			{-1495.9065,2655.9673,55.6930}, // ZombiesElQuebrados
			{-2463.5710,2329.3086,4.8359}, // ZombiesBayside
			{-1563.1779,1772.6541,17.0782}, // ZombiesTierraRobada
			{-844.0148,1495.4739,18.5611}, // ZombiesLasBarrancas
			{-715.2629,959.4414,12.2227}, // ZombiesRanch
			{-191.0160,1099.4109,19.5975}, // ZombiesFortCarson1
			{107.6545,1282.1610,20.5405}, // ZombiesFortCarson2
			{52.0657,2081.8423,17.1583}, // ZombiesArea
			{-316.2719,1732.8518,42.6875} // ZombiesRegularTom
		};
		switch(random(7))
		{
			case 0: zSkin = 162, dZombie[zombie][dZombieClass] = NONE, AttachZombieMeat(npcid, 0);
			case 1: zSkin = 78, dZombie[zombie][dZombieClass] = NONE, AttachZombieMeat(npcid, 1);
			case 2: zSkin = 137, dZombie[zombie][dZombieClass] = NONE, AttachZombieMeat(npcid, 2);
			case 3: zSkin = 230, dZombie[zombie][dZombieClass] = SPEED, AttachZombieMeat(npcid, 3);
			case 4: zSkin = 264, dZombie[zombie][dZombieClass] = BOOMER, AttachZombieMeat(npcid, 4);
			case 5: zSkin = 79, dZombie[zombie][dZombieClass] = SMOKER, AttachZombieMeat(npcid, 5);
			case 6: zSkin = 242, dZombie[zombie][dZombieClass] = TANKER, AttachZombieMeat(npcid, 6);
		}
		if(dZombie[zombie][dZombieClass] == TANKER) FCNPC_SetHealth(npcid, 750.0);
		new Float:x, Float:y, Float:z, Float:a;
		new dRandSpawn = random(sizeof(fZombieSpawns));
		//---
		a = float(RandomEx(0, 359));
		x = fZombieSpawns[dRandSpawn][0] + float(RandomEx(-5, 5));
		y = fZombieSpawns[dRandSpawn][1] + float(RandomEx(-5, 5));
    	CA_FindZ_For2DCoord(x, y, z);
		//---
		FCNPC_SetPosition(npcid, x, y, z + 1.0);
		FCNPC_SetAngle(npcid, a);
		FCNPC_SetSkin(npcid, zSkin);
	}
    else if(john != -1)
    {
		new dSkin = RandomEx(0, 311);
		FCNPC_SetInvulnerable(npcid, false);
		//RNPC_ToggleVehicleCollisionCheck(playerid, 1);
		SetPlayerColor(dJohn[john][dJohnID], ZOMBIE_COLOR);
		//---
		if(dJohn[john][bVehicle])
		{
			FCNPC_RemoveFromVehicle(dJohn[john][dJohnID]);
			dJohn[john][bVehicle] = false;
		}
		//---
		new Float:x, Float:y, Float:z, Float:a;
		//---
		a = float(RandomEx(0, 359));
		x = 0.0 + float(RandomEx(-5, 5));
		y = -250.0 + float(RandomEx(-5, 5));
    	CA_FindZ_For2DCoord(x, y, z);
		//---
		FCNPC_SetPosition(npcid, x, y, z + 1.0);
		FCNPC_SetAngle(npcid, a);
		FCNPC_SetSkin(npcid, dSkin);
		dJohn[john][dJohnType] = JOHN_PACIFIC;
		dJohn[john][dJohnWeapon] = 0;
		FCNPC_SetWeapon(dJohn[john][dJohnID], 0);
		//---
		dJohn[john][fNodeX][5] = 0.0;
		dJohn[john][fNodeY][5] = 0.0;
		dJohn[john][fNodeZ][5] = 0.0;
		//---
		dJohn[john][dJohnMission] = NO_MISSION;
	}
	return 1;
}

public OnPlayerSpawn(playerid)
{
	static pLastSpawn[MAX_PLAYERS] = {0, ...};
	if(!FCNPC_IsValid(playerid))
	{
		/*if(TimePassedSince(pLastSpawn[playerid]) < 3 && pPlayerInfos[playerid][dLogState] == SPAWNED)
		{
			return 1;
		}*/
	    //-----------//
		//---pDead---//
		pDead[playerid] = false;
		//-----------//
	    if(pPlayerInfos[playerid][dLogState] != SPAWNED)
	    {
	        SetPlayerPos(playerid, 301.664, -109.913, 2052.2338);
			SetPlayerCameraPos(playerid, 291.985046, -124.679779, 2051.947998);
			SetPlayerCameraLookAt(playerid, 294.441650, -120.615112, 2050.384765);
			InterpolateCameraPos(playerid, 291.985046, -124.679779, 2051.947998, 302.941619, -142.554504, 2054.491210, 30000);
			InterpolateCameraLookAt(playerid, 294.441650, -120.615112, 2050.384765, 302.474060, -137.800369, 2053.014892, 25000);
	        return 1;
	    }
	    //---
  		//---
		new bool:bSetSpawnPos;
		//---ACTUALISATION BESOINS & SETPOS
		if(IsPlayerDead(playerid) && TimePassedSince(pLastSpawn[playerid]) >= 3)//Si le mec a la vie à 0, ça veut dire qu'il vient de mourir
		{
		    pPlayerInfos[playerid][pHunger] = 100;
		    pPlayerInfos[playerid][pThirst] = 100;
		    pPlayerInfos[playerid][pSleep] = 100;
		    SetHealthForPlayer(playerid, 1000, REASON_HEAL);
			if(pPlayerInfos[playerid][pTorse] == 83) SetArmourForPlayer(playerid, 1250);
		    else SetArmourForPlayer(playerid, 0);
			pPlayerInfos[playerid][pTemperature] = 370;
			pPlayerInfos[playerid][bLeg] = true;
			pPlayerInfos[playerid][bHemorragie] = false;
			UpdateInfo(playerid, 1);
			UpdateInfo(playerid, 2);
			UpdateInfo(playerid, 3);
			UpdateInfo(playerid, 7);
			UpdateInfo(playerid, 8);
			UpdateInfo(playerid, 9);
			UpdateInfo(playerid, 10);
			UpdateInfo(playerid, 11);
			switch(pPlayerInfos[playerid][dSurvivaliste])
			{
			    case 1: GivePlayerWeaponEx(playerid, RandomEx(0, 10) < 5 ? 3 : 4, 1);
			    case 2: GivePlayerWeaponEx(playerid, RandomEx(0, 10) < 5 ? 22 : 23, 12);
			    case 3: GivePlayerWeaponEx(playerid, 26, 5);
			}
			//---
			bSetSpawnPos = true;
		}
		else if(!IsPlayerDead(playerid) && TimePassedSince(pLastSpawn[playerid]) >= 3)//Sinon, c'est sûrement un premier spawn
		{
		    UpdateInfo(playerid, 1);//On actualise la faim
		    UpdateInfo(playerid, 2);//On actualise la soif
		    UpdateInfo(playerid, 3);//On actualise la barre de dodo
		    UpdateInfo(playerid, 4);//On actualise l'or
		    UpdateInfo(playerid, 5);//On actualise la barre de vie
		    UpdateInfo(playerid, 6);//On actualise la barre d'armure
		    UpdateInfo(playerid, 7);//On actualise la température
			UpdateInfo(playerid, 8);//On actualise l'état de la jambe
			UpdateInfo(playerid, 9);//On actualise l'état d'hémorragie
			UpdateInfo(playerid, 10);//On vire l'essence si ça y'est encore
			UpdateInfo(playerid, 11);//On actualise le level du monsieur
			if(pPlayerInfos[playerid][xPos] == 0.0 && pPlayerInfos[playerid][yPos] == 0.0) bSetSpawnPos = true;
			else bSetSpawnPos = false;
		}
		//---POSITION DE SPAWN---//
		if(bSetSpawnPos)
		{
			new Float:fSpawns[][4] =
			{
			    //---RED COUNTY
				{-757.2146, -133.9474, 65.8281, 315.5105}, //Panopticon
				{608.1835, -592.8008, 17.2266, 271.7177}, //Dillimore
				{670.5248, -540.9240, 16.3359, 134.3613}, //Dillimore2
				{1051.9205, -314.1725, 73.9931, 39.6927}, //Hilltop
				{2257.3503, -71.0150, 31.6016, 272.0155}, //Palomino Creek Bibliothèque
				{1373.1573, 365.0887, 20.5547, 123.5588}, // Montgommery
				{1293.3591, 351.6913, 19.5547, 243.2325}, // Montgommery
				{2395.0918, 287.6763, 20.1368, 170.1391}, // Palomino
				//---FLINT COUNTY & WHETSTONE
				{-2171.8638, -2419.1448, 34.2969, 231.0158}, // Angel Pine Escalier
				{-2115.0039, -2465.4363, 30.6250, 143.2348}, // Angel Pine Camp cassé
				{-1494.3615, -2332.1472, 1.9092, 317.5951}, // Spawn Foret Lac
				{-865.4432, -2257.6570, 26.4014, 232.5980}, // Spawn Foret Back O Beyond
				{34.2789, -2646.2043, 40.7285, 269.8528}, // Spawn Bar
				{-21.2424, -2483.3408, 36.6484, 355.4430}, // Spawn Motel Foret
				{-495.6263, -1607.8159, 6.0913, 72.1209}, // Spawn Cabane
				{-368.7805, -1414.9086, 25.7266, 70.1042}, // Spawn FlintR ange
				{-80.4059, -1198.7662, 2.3195, 41.8047}, // Spawn Station Essence
				{-41.9621, -1158.4124, 1.0781, 41.0691}, // Spawn Station Essence
				{-582.6731, -1034.4375, 23.5414, 271.0390}, // Spawn Camping
				{-520.6981, -539.8851, 25.5234, 177.9926}, // Spawn Fallen Tree
				{-1073.0569, -1153.8099, 129.2188, 255.1831}, // Spawn The Farm
				//---BONE COUNTY
				{975.1201, 2714.5842, 10.8203, 208.3729}, // SpawnVolcan
				{302.7713, 2729.8401, 27.2370, 170.3302}, // SpawnVerdantMeadows
				{355.9611, 2433.7349, 17.2902, 296.8072}, // SpawnVerdantMeadows2
				{-231.2334, 2675.3733, 62.6330, 88.3547}, // SpawnLasPayasadas
				{-1474.7101, 2766.9041, 80.2142, 81.5954}, // SpawnElQuebrados
				{-1749.7729, 2561.1394, 103.7719, 345.9670}, // SpawnElQuebrados
				{-2328.3958, 2418.5132, 7.0648, 61.2228}, // SpawnBayside
				{-2790.1160, 2553.0247, 106.6691, 206.9928}, // SpawnBayside
				{-2015.0546, 2364.8774, 6.9608, 183.8764}, // TierraRobada
				{-1460.8937, 2005.1687, 48.1669, 176.2385}, // TierraRobada
				{-1056.6394, 1960.1609, 120.2113, 44.6378}, // SpawnTierraRobada
				{-747.0247, 1445.4906, 16.2049, 213.6227}, // SpawnLasBarrancas
				{-960.1301, 1459.9771, 35.2854, 107.199}, // SpawnLasBarrancas
				{-691.7404, 984.6612, 12.2203, 311.6962}, // TierraRobada
				{-440.5173, 773.0574, 16.9544, 266.5684}, // SpawnBoneCounty
				{23.7477, 943.2663, 19.9642, 84.5008}, // SpawnFortCarson
				{-84.5362, 1148.3646, 19.7500, 59.2235}, // SpawnFortCarson
				{152.4424, 1391.6393, 10.5859, 152.0512}, // SpawnRaffinerie
				{240.2509, 1859.1727, 17.9109, 303.3389}, // SpawnArea51
				{477.2215, 1863.5198, 27.6178, 319.3528}, // SpawnBoneCounty
				{710.0715, 1984.7201, 3.5297, 170.5112}, // SpawnBoneCounty
				{678.3915, 1724.2222, 6.9922, 312.0229}, // SpawnBoneCounty
				//---LAS VENTURAS
				{954.0540, 2055.6025, 10.8203, 304.9667}, // SpawnQGPEN1
				{942.8509, 2311.1558, 10.8203, 45.3882}, // SpawnSoundNight
				{1456.2848, 2614.4248, 11.3926, 47.7553}, // SpawnGarePricklePine
				{1855.5508, 2765.9622, 14.2657, 20.3325}, // SpawnMotelNord
				{2592.4651, 2802.3003, 10.8203, 116.0843}, // SpawnKACC
				{2406.3123, 2567.8860, 21.8750, 217.6647}, // SpawnParkingNord
				{2821.5471, 2425.9128, 17.6719, 306.3301}, // SpawnCamionneur
				{2890.7307, 1590.6719, 10.8203, 336.5293}, // SpawnHangarTrain
				{2236.1604, 1280.0972, 10.8203, 147.7668}, // SpawnCamelsToe
				{2273.2161, 1504.5471, 17.2188, 222.8751}, // SpawnParking
				{1679.1449, 1761.1647, 10.8287, 221.2696}, // SpawnCercaAeroport
				{1669.3137, 1385.8002, 21.4408, 359.4429}, // SpawnAeroport
				{1375.0657, 1026.6127, 10.8203, 233.8792} // SpawnClodos
			};
			new rand = CallRemoteFunction("HasPlayerDoneIntro", "i", playerid) ? random(sizeof(fSpawns)) : random(8);
			SetSpawnInfo(playerid, 0, (pPlayerInfos[playerid][pSkin] > 311) ? 252 : pPlayerInfos[playerid][pSkin], fSpawns[rand][0], fSpawns[rand][1], fSpawns[rand][2], fSpawns[rand][3] , 0, 0, 0, 0, 0, 0);
			SetPlayerPos(playerid, fSpawns[rand][0], fSpawns[rand][1], fSpawns[rand][2]);
			SetPlayerFacingAngle(playerid, fSpawns[rand][3]);
			switch(RandomEx(0, 4))
			{
				case 0: GivePlayerInventoryObject(playerid, 39, 0);
				case 1: GivePlayerInventoryObject(playerid, 66, 0);
				case 2: GivePlayerInventoryObject(playerid, 81, 0);
				case 3: GivePlayerInventoryObject(playerid, 36, 0);
			}
        	ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 5000, true);
		}
		else
		{
			SetPlayerPos(playerid, pPlayerInfos[playerid][xPos], pPlayerInfos[playerid][yPos], pPlayerInfos[playerid][zPos]);
			SetPlayerFacingAngle(playerid, pPlayerInfos[playerid][aPos]);
		}
		LoadMapping(playerid);
		//---BLACKZONE
		GangZoneShowForPlayer(playerid, zBlackZone, 0x000000FF);
		//---NAMETAG
		Attach3DTextLabelToPlayer(pPlayerTag[playerid], playerid, 0.0, 0.0, 0.4);
		UpdatePlayerTag(playerid);
		//---ARMES
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, pPlayerInfos[playerid][pArme1][0], pPlayerInfos[playerid][pArme1][1]);
		GivePlayerWeapon(playerid, pPlayerInfos[playerid][pArme2][0], pPlayerInfos[playerid][pArme2][1]);
		GivePlayerWeapon(playerid, pPlayerInfos[playerid][pArme3][0], pPlayerInfos[playerid][pArme3][1]);
		GivePlayerWeapon(playerid, pPlayerInfos[playerid][pArme4][0], pPlayerInfos[playerid][pArme4][1]);
		SetPlayerWeaponSkill(playerid, 1, pPlayerInfos[playerid][pArme1][2]);
		SetPlayerWeaponSkill(playerid, 2, pPlayerInfos[playerid][pArme2][2]);
		SetPlayerWeaponSkill(playerid, 3, pPlayerInfos[playerid][pArme3][2]);
		SetPlayerWeaponSkill(playerid, 4, pPlayerInfos[playerid][pArme4][2]);
		//---
		SetPlayerArmedWeapon(playerid, 0);
		//---HABILLAGE
		DressPlayer(playerid, 0);
		DressPlayer(playerid, 1);
		DressPlayer(playerid, 2);
		DressPlayer(playerid, 3);
		DressPlayer(playerid, 4);
		DressPlayer(playerid, 5);
		DressPlayer(playerid, 6);
		DressPlayer(playerid, 7);
		DressPlayer(playerid, 8);
		AttachPlayerBackPack(playerid);
		UpdatePlayerHand(playerid, pPlayerInfos[playerid][HandObject]);
    	for(new s = 0; s < 10; s ++)
        {
            if(pAcc[playerid][s][model] == 0) continue;
            SetPlayerAttachedObject(playerid, s, pAcc[playerid][s][model], pAcc[playerid][s][pdc], pAcc[playerid][s][o][0], pAcc[playerid][s][o][1], pAcc[playerid][s][o][2], pAcc[playerid][s][o][3], pAcc[playerid][s][o][4], pAcc[playerid][s][o][5], pAcc[playerid][s][o][6], pAcc[playerid][s][o][7], pAcc[playerid][s][o][8], pAcc[playerid][s][col][0], pAcc[playerid][s][col][1]);
        }
  		SetPlayerSkin(playerid, pPlayerInfos[playerid][pSkin]);
		//---
		fDetectRange[playerid][0] = ZOMBIE_DETECT;
		fDetectRange[playerid][1] = JOHN_DETECT;
		KillTimer(dResetTimer[playerid]);
		dResetTimer[playerid] = -1;
		if(pGroup[playerid] != -1)
		{
			for(new i = 0; i < MAX_GROUP_SIZE; i ++)
			{
			    SetPlayerMarkerForPlayer(playerid, dGroup[pGroup[playerid]][dMembers][i], BLEU);
			    SetPlayerMarkerForPlayer(dGroup[pGroup[playerid]][dMembers][i], playerid, BLEU);

			}
		}
	}
	//---
    for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
    {
        if(pAdminInfos[i][dSpec] == playerid)
        {
            PlayerSpectatePlayer(i, playerid, SPECTATE_MODE_NORMAL);
        }
    }
	pLastSpawn[playerid] = gettime();
	return 1;
}

public OnPlayerDies(playerid, killerid, reason)
{
	static pLastDeath[MAX_PLAYERS] = {0, ...};
	if(TimePassedSince(pLastDeath[playerid]) >= 3)
	{
		switch(reason)
		{
			case REASON_HUNGER:
			{
				ShowPlayerTextInfo(playerid, 5000, "~r~You died of hunger.", "~r~Vous êtes mort de faim", "~r~Està muerto de hambre.", "Portugais", "~r~Si sei morto di fame.", "~r~Sie sint verhungert.");//On lui envoie un message
			}
			case REASON_THIRST:
			{
				ShowPlayerTextInfo(playerid, 5000, "~r~You died of thirst.", "~r~Vous êtes mort de soif", "~r~Està muerto de sed.", "Portugais", "~r~Si sei morto di sete.", "~r~Sie sint verdursted.");//On lui envoie un message
			}
		}
		if(killerid != INVALID_PLAYER_ID)
		{
		    new bool:bZombie;
			if(FCNPC_IsValid(killerid))
		 	{
				for(new i = 0; i < MAX_ZOMBIES; i ++)
				{
				    if(killerid == dZombie[i][dZombieID])
				    {
				        bZombie = true;
					}
				}
			}
			else
			{
				GivePlayerExp(killerid, 13);
	    		pPlayerInfos[killerid][pKills] ++;
			}
			if(bZombie) LogInfo(true, "[KILL]%s s'est fait tuer par un zombie.", GetName(playerid));
			else LogInfo(true, "[KILL]%s s'est fait tuer par %s - %d.", GetName(playerid), GetName(killerid), reason);
		}
		else
		{
			LogInfo(true, "[KILL]%s est mort - %d.", GetName(playerid), reason);
		}
		pPlayerInfos[playerid][pDeaths] ++;
		//-----------//
		for(new i = 0; i < MAX_JOHNS; i ++)
		{
			if(dJohn[i][dJohnFriend] == playerid) dJohn[i][dJohnFriend] = INVALID_PLAYER_ID;
			if(dJohn[i][dJohnTarget] == playerid) dJohn[i][dJohnTarget] = INVALID_PLAYER_ID;
		}
		//---pDead---//
		pDead[playerid] = true;
		//---EXP---//
		//dExpInfos = floatround(floatdiv(pPlayerInfos[playerid][pExp], GetLevelExp(pPlayerInfos[playerid][pLevel])) * 10.0, floatround_floor);
		static pLastExpLoss[MAX_PLAYERS] = {-1, ...};
		if(TimePassedSince(pLastExpLoss[playerid]) > 10)
		{
			GivePlayerExp(playerid, -floatround(floatdiv(GetLevelExp(pPlayerInfos[playerid][pLevel]), 10.0), floatround_round));
			pLastExpLoss[playerid] = gettime();
		}
		//---MARQUEUR MORT---//
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		FindZPathCoord(x, y, z, x, y, z, false);
		CreateMarker(x, y, z + 2.0);
		//---PERTE OBJETS---//
		new dBagSize, dObjectID;
		//OBJETS
		dBagSize = GetPlayerBagSize(playerid, true);
		for(new i = 0; i < dBagSize + 1; i ++)
		{
		    dObjectID = GetPlayerSlotObject(playerid, i);
		    if(dObjectID != 0)
		    {
				PlayerDropObject(playerid, dObjectID, floatdiv(RandomEx(5, 20), 10));
		        GivePlayerSlotObject(playerid, -1, i);
		    }
		}
		//ARMES
		dBagSize = GetPlayerBagSize(playerid, false);
		if(dBagSize >= 2)
		{
		    if(pPlayerInfos[playerid][pArme1][0] != 0)
		    {
		        if(GetPlayerWeaponSkill(playerid, 1) == WEAPON_AKIMBO)
				{
					PlayerDropWeapon(playerid, pPlayerInfos[playerid][pArme1][0], floatround(floatdiv(pPlayerInfos[playerid][pArme1][1], 2), floatround_round), floatdiv(RandomEx(5, 20), 10));
					PlayerDropWeapon(playerid, pPlayerInfos[playerid][pArme1][0], floatround(floatdiv(pPlayerInfos[playerid][pArme1][1], 2), floatround_round), floatdiv(RandomEx(5, 20), 10));
				}
				else
				{
					PlayerDropWeapon(playerid, pPlayerInfos[playerid][pArme1][0], pPlayerInfos[playerid][pArme1][1], floatdiv(RandomEx(5, 20), 10));
				}
		        pPlayerInfos[playerid][pArme1][0] = 0;
		        pPlayerInfos[playerid][pArme1][1] = 0;
		        pPlayerInfos[playerid][pArme1][2] = 0;
		    }
		    if(pPlayerInfos[playerid][pArme2][0] != 0)
		    {
		        if(GetPlayerWeaponSkill(playerid, 2) == WEAPON_AKIMBO)
				{
					PlayerDropWeapon(playerid, pPlayerInfos[playerid][pArme2][0], floatround(floatdiv(pPlayerInfos[playerid][pArme2][1], 2), floatround_round), floatdiv(RandomEx(5, 20), 10));
					PlayerDropWeapon(playerid, pPlayerInfos[playerid][pArme2][0], floatround(floatdiv(pPlayerInfos[playerid][pArme2][1], 2), floatround_round), floatdiv(RandomEx(5, 20), 10));
				}
				else
				{
					PlayerDropWeapon(playerid, pPlayerInfos[playerid][pArme2][0], pPlayerInfos[playerid][pArme2][1], floatdiv(RandomEx(5, 20), 10));
				}
		        pPlayerInfos[playerid][pArme2][0] = 0;
		        pPlayerInfos[playerid][pArme2][1] = 0;
		        pPlayerInfos[playerid][pArme2][2] = 0;
		    }
		}
		if(dBagSize >= 3)
		{
		    if(pPlayerInfos[playerid][pArme3][0] != 0)
		    {
		        if(GetPlayerWeaponSkill(playerid, 3) == WEAPON_AKIMBO)
				{
					PlayerDropWeapon(playerid, pPlayerInfos[playerid][pArme3][0], floatround(floatdiv(pPlayerInfos[playerid][pArme3][1], 2), floatround_round), floatdiv(RandomEx(5, 20), 10));
					PlayerDropWeapon(playerid, pPlayerInfos[playerid][pArme3][0], floatround(floatdiv(pPlayerInfos[playerid][pArme3][1], 2), floatround_round), floatdiv(RandomEx(5, 20), 10));
				}
				else
				{
					PlayerDropWeapon(playerid, pPlayerInfos[playerid][pArme3][0], pPlayerInfos[playerid][pArme3][1], floatdiv(RandomEx(5, 20), 10));
				}
				pPlayerInfos[playerid][pArme3][0] = 0;
		        pPlayerInfos[playerid][pArme3][1] = 0;
		        pPlayerInfos[playerid][pArme3][2] = 0;
		    }
		}
		if(dBagSize >= 4)
		{
		    if(pPlayerInfos[playerid][pArme4][0] != 0)
		    {
		        if(GetPlayerWeaponSkill(playerid, 4) == WEAPON_AKIMBO)
				{
					PlayerDropWeapon(playerid, pPlayerInfos[playerid][pArme4][0], floatround(floatdiv(pPlayerInfos[playerid][pArme4][1], 2), floatround_round), floatdiv(RandomEx(5, 20), 10));
					PlayerDropWeapon(playerid, pPlayerInfos[playerid][pArme4][0], floatround(floatdiv(pPlayerInfos[playerid][pArme4][1], 2), floatround_round), floatdiv(RandomEx(5, 20), 10));
				}
				else
				{
					PlayerDropWeapon(playerid, pPlayerInfos[playerid][pArme4][0], pPlayerInfos[playerid][pArme4][1], floatdiv(RandomEx(5, 20), 10));
				}
		        pPlayerInfos[playerid][pArme4][0] = 0;
		        pPlayerInfos[playerid][pArme4][1] = 0;
		        pPlayerInfos[playerid][pArme4][2] = 0;
		    }
		}
		//SAC À DOS
		switch(pPlayerInfos[playerid][pBag])
		{
			case CZECH_VEST: PlayerDropObject(playerid, 32, floatdiv(RandomEx(5, 20), 10));
			case ASSAULT_PACK: PlayerDropObject(playerid, 33, floatdiv(RandomEx(5, 20), 10));
			case ALICE_PACK: PlayerDropObject(playerid, 34, floatdiv(RandomEx(5, 20), 10));
			case COYOTE_PACK: PlayerDropObject(playerid, 35, floatdiv(RandomEx(5, 20), 10));
		}
		//SetTimerEx("RespawnPlayer", 2500, false, "i", playerid);
		pPlayerInfos[playerid][pBag] = PATROL_PACK;
		AttachPlayerBackPack(playerid);
		//RESET BESOINS
		pLastDeath[playerid] = gettime();
	}
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if(FCNPC_IsValid(playerid)) return 0;
	if(!IsPlayerDead(playerid) && IsPlayerDeadDebug(playerid)) SetHealthForPlayer(playerid, 0, REASON_BLOODLOSS, INVALID_PLAYER_ID);
	if(pFishInfo[playerid][State] == 1)
	{
		pFishInfo[playerid][Fish] = 0;
		pFishInfo[playerid][TimeCatch] = 0;
		pFishInfo[playerid][Time] = 0;
		pFishInfo[playerid][State] = 0;
		KillTimer(pFishInfo[playerid][FishingTimer]);
		pFishInfo[playerid][FishingTimer] = -1;
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, true);
		ClearAnimations(playerid, true);
	}
	if(dRepair[playerid][0] != 0)
	{
		TogglePlayerControllable(playerid, true);
		SetVehicleBonnetState(dRepair[playerid][3], false);
		dRepair[playerid][0] = 0;
		dRepair[playerid][1] = -1;
		dRepair[playerid][2] = 0;
		dRepair[playerid][3] = -1;
  	}
	return 1;
}

public FCNPC_OnDeath(npcid, killerid, reason)
{
	if(npcid == dJason[dJasonID])
	{
        new string[128];
		format(string, sizeof(string), "%s killed ~r~Jason !", GetName(killerid));
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_EN) ShowPlayerTextInfo(i, 5000, string, string, string, string, string, string);
		format(string, sizeof(string), "%s a tué ~r~Jason !", GetName(killerid));
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_FR) ShowPlayerTextInfo(i, 5000, string, string, string, string, string, string);
		format(string, sizeof(string), "%s", GetName(killerid));
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_ES) ShowPlayerTextInfo(i, 5000, string, string, string, string, string, string);
		format(string, sizeof(string), "%s", GetName(killerid));
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_PG) ShowPlayerTextInfo(i, 5000, string, string, string, string, string, string);
		format(string, sizeof(string), "%s", GetName(killerid));
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_IT) ShowPlayerTextInfo(i, 5000, string, string, string, string, string, string);
		format(string, sizeof(string), "%s", GetName(killerid));
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_DE) ShowPlayerTextInfo(i, 5000, string, string, string, string, string, string);
		ShowPlayerTextInfo(killerid, 5000, "~g~Congratulations!~n~You killed Jason!", "~g~Félicitations !~n~Vous avez tué Jason !", "Espagnol", "Portugais", "Italien", "Allemand");
		//---
		UpdateHealthBar(killerid, 0, 3500, "Jason Voorhees", "Jason Voorhees", "Jason Voorhees", "Jason Voorhees", "Jason Voorhees", "Jason Voorhees");
		//---
		if(killerid != INVALID_PLAYER_ID) GivePlayerExp(killerid, 100), OnPlayerGroupKillMob(killerid, MOB_JASON);
		new Float:x, Float:y, Float:z;
		FCNPC_GetPosition(npcid, x, y, z);
		//---BOITE
		new Float:x2 = x + float(RandomEx(-4, 4));
		new Float:y2 = y + float(RandomEx(-4, 4));
		new Float:z2;
		FindZPathCoord(x, y, z, x2, y2, z2);
        CreateItem(146, x2, y2, z2 + 1.0, false, -1);
        //---
		CreateBloodSplat(x, y, z);
		dJason[dJasonState] = 3;
		FCNPC_ApplyAnimation(npcid, "PED", "KO_shot_stom", 4.0, 0, 1, 1, 1, 0);
	}
	//---
	else if(pNPCType[npcid] == MOB_ZOMBIE)
	{
		new zombie = IsNPCZombie(npcid);
		//---
		new Float:x, Float:y, Float:z;
		if(killerid != INVALID_PLAYER_ID)
		if(dZombie[zombie][bZombieAttack])
		{
			FCNPC_StopAim(dZombie[zombie][dZombieID]);
			FCNPC_StopAttack(dZombie[zombie][dZombieID]);
			dZombie[zombie][bZombieAttack] = false;
		}
		//---
		for(new i = 0; i < MAX_JOHNS; i ++)
		{
			if(dJohn[i][dJohnTarget] == npcid) dJohn[i][dJohnTarget] = INVALID_PLAYER_ID;
		}
		//---
		if(killerid != INVALID_PLAYER_ID)
		{
			GivePlayerExp(killerid, 2);
			OnPlayerGroupKillMob(killerid, MOB_ZOMBIE);
			//---
			if(pNPCType[killerid] == MOB_JOHN)
			{
				new john = IsNPCJohn(killerid);
				if(dJohn[john][dJohnFriend] != INVALID_PLAYER_ID) CallRemoteFunction("OnPlayerKillsMob", "ii", dJohn[john][dJohnFriend], MOB_ZOMBIE);
			}
		}
		dZombie[zombie][dNodes] = 0;
		FCNPC_ApplyAnimation(npcid, "PED", "KO_shot_stom", 4.0, 0, 1, 1, 1, 0);
		dZombie[zombie][zMission] = NO_MISSION;
		SetTimerEx("ReSpawnZombie", 25000, false, "i", zombie);
		FCNPC_GetPosition(npcid, x, y, z);
		if(dZombie[zombie][bZombieWayPoint]) dZombie[zombie][bZombieWayPoint] = false, dZombie[zombie][bDistractable] = false;
		CreateBloodSplat(x, y, z);
		//---
		if(killerid != INVALID_PLAYER_ID)
		{
			if(RandomEx(0, 10) <= 4)
			{
				if(RandomEx(0, 10) < 3)
				{
					PlayerDropObject(npcid, CallRemoteFunction("PickRandomItem", "ddddddd", 30, 5, 10, 15, 30, 10, 0), floatdiv(RandomEx(5, 20), 10));
				}
				else
				{
					PlayerDropGold(npcid, RandomEx(1, 3), floatdiv(RandomEx(5, 20), 10));
				}
				//---
				if(RandomEx(0, 10) < 5)
				{
					PlayerDropObject(npcid, CallRemoteFunction("PickRandomItem", "ddddddd", 30, 5, 10, 15, 30, 10, 0), floatdiv(RandomEx(5, 20), 10));
				}
			}
		}
		//---
		/*if(dZombie[zombie][dZombieClass] == BOOMER)
		{
		    new Float:x, Float:y, Float:z;
			GetPlayerPos(npcid, x, y, z);
			CreateExplosionEx(npcid, x, y, z, EXPLOSION_LARGE, 5.0);
			SetRNPCHealth(npcid, 0.0, killerid, 51);
		}*/
	}
	else if(pNPCType[npcid] == MOB_JOHN)
	{
	    new john = IsNPCJohn(npcid);
		//---
		new Float:x, Float:y, Float:z;
		CallRemoteFunction("OnJohnDies", "i", john);
		if(killerid != INVALID_PLAYER_ID) GivePlayerExp(killerid, 1), OnPlayerGroupKillMob(killerid, MOB_JOHN);
		//---
		if(dJohn[john][dJohnAction] == JOHN_ATTACK)
		{
			FCNPC_StopAim(dJohn[john][dJohnID]);
			FCNPC_StopAttack(dJohn[john][dJohnID]);
			dJohn[john][dJohnAction] = JOHN_STAND;
		}
		//---
		for(new i = 0; i < MAX_JOHNS; i ++)
		{
			if(dJohn[i][dJohnTarget] == npcid) dJohn[i][dJohnTarget] = INVALID_PLAYER_ID;
		}
		//---
		dJohn[john][dNodes] = 0;
		dJohn[john][dJohnFriend] = INVALID_PLAYER_ID;
		dJohn[john][dJohnTarget] = INVALID_PLAYER_ID;
		dJohn[john][bVehicle] = false;
		FCNPC_ApplyAnimation(npcid, "PED", "KO_shot_stom", 4.0, 0, 1, 1, 1, 0);
		if(dJohn[john][dJohnWeapon] != 0) PlayerDropWeapon(dJohn[john][dJohnID], dJohn[john][dJohnWeapon], GetWeaponBoxAmmo(dJohn[john][dJohnWeapon]), 0.5);
		dJohn[john][dJohnMission] = NO_MISSION;
		SetTimerEx("ReSpawnJohn", 25000, false, "i", john);
		FCNPC_GetPosition(npcid, x, y, z);
		if(dJohn[john][dJohnWayPoint]) dJohn[john][dJohnWayPoint] = 0, dJohn[john][bDistractable] = false;
		CreateBloodSplat(x, y, z);
		//---
		if(killerid != INVALID_PLAYER_ID)
		{
			//PlayerDropObject(npcid, CallRemoteFunction("PickRandomItem", "ddddddd", 30, 5, 10, 15, 30, 10, 0), floatdiv(RandomEx(5, 20), 10));
		}
	}
	return 1;
}

public FCNPC_OnVehicleEntryComplete(npcid, vehicleid, seatid)
{
	if(pNPCType[npcid] == MOB_JOHN)
	{
	    new john = IsNPCJohn(npcid);
	    dJohn[john][bVehicle] = true;
	}
	return 1;
}

public OnPlayerGiveDamageActor(playerid, damaged_actorid, Float:amount, weaponid, bodypart)
{
	if(damaged_actorid == dDeathBoss[dDeathID] && dDeathBoss[dDeathState] != 3)
	{
        new dAmount = GetWeaponDamage(weaponid);
        dDeathBoss[dDeathHealth] -= dAmount;
		UpdateHealthBar(playerid, floatround(dDeathBoss[dDeathHealth], floatround_round), 100000, "Death", "Mort", "Espagnol", "Portugais", "Italien", "Tot");
		//---
		if(dDeathBoss[dDeathHealth] <= 0)
		{
	        new string[128];
			format(string, sizeof(string), "%s killed ~r~Death !", GetName(playerid));
			for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_EN) ShowPlayerTextInfo(i, 5000, string, string, string, string, string, string);
			format(string, sizeof(string), "%s a tué ~r~la Mort !", GetName(playerid));
			for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_FR) ShowPlayerTextInfo(i, 5000, string, string, string, string, string, string);
			format(string, sizeof(string), "%s", GetName(playerid));
			for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_ES) ShowPlayerTextInfo(i, 5000, string, string, string, string, string, string);
			format(string, sizeof(string), "%s", GetName(playerid));
			for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_PG) ShowPlayerTextInfo(i, 5000, string, string, string, string, string, string);
			format(string, sizeof(string), "%s", GetName(playerid));
			for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_IT) ShowPlayerTextInfo(i, 5000, string, string, string, string, string, string);
			format(string, sizeof(string), "%s", GetName(playerid));
			for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_DE) ShowPlayerTextInfo(i, 5000, string, string, string, string, string, string);
			ShowPlayerTextInfo(playerid, 5000, "~g~Congratulations!~n~You killed Death!", "~g~Félicitations !~n~Vous avez tué la Mort !", "Espagnol", "Portugais", "Italien", "Allemand");
			//---
			UpdateHealthBar(playerid, 0, 100000, "Death", "Mort", "Espagnol", "Portugais", "Italien", "Tot");
			//---
			if(playerid != INVALID_PLAYER_ID) GivePlayerExp(playerid, 100), OnPlayerGroupKillMob(playerid, MOB_DEATH);
			//---BOITE
			switch(dDeathBoss[dDeathPos])
			{
			    case 1: CreateItem(146, -1841.6383, 579.2135, 234.8874, false, -1);
			    case 2: CreateItem(146, -1771.5846, 579.0118, 234.8906, false, -1);
			    case 3: CreateItem(146, -1806.6400, 518.6753, 234.8906, false, -1);
			}
	        //---
			dDeathBoss[dDeathState] = 3;
			ApplyActorAnimation(dDeathBoss[dDeathID], "PED", "KO_shot_stom", 4.0, 0, 1, 1, 1, 0);
		}
	}
	return 1;
}

public FCNPC_OnTakeDamage(npcid, issuerid, Float:amount, weaponid, bodypart)
{
    if(npcid == dJason[dJasonID])
    {
        if(weaponid == 9)
        {
			ShowPlayerTextInfo(issuerid, 5000, "~r~Jason is immune to chainsaw", "~r~Jason est invulnérable à la tronçonneuse.", "Espagnol", "Portugais", "Italien", "Allemand");
            return 0;
		}
        new Float:fJHealth = FCNPC_GetHealth(dJason[dJasonID]);
		UpdateHealthBar(issuerid, floatround(fJHealth, floatround_round), 3500, "Jason Voorhees", "Jason Voorhees", "Jason Voorhees", "Jason Voorhees", "Jason Voorhees", "Jason Voorhees");
		return 1;
    }
    else if(pNPCType[npcid] == MOB_ZOMBIE)
    {
		new zombie = IsNPCZombie(npcid);
        if(dZombie[zombie][bZombieWayPoint] && dZombie[zombie][bDistractable])
        {
            dZombie[zombie][bZombieWayPoint] = false;
            dZombie[zombie][bDistractable] = false;
        }
        //---
        if(pNPCType[issuerid] == MOB_JOHN)
		{
			if(dJohn[IsNPCJohn(issuerid)][bHeadshot])
			{
				FCNPC_SetHealth(dZombie[zombie][dZombieID], 0.0);
				return 1;
			}
		}
        //---
        new Float:fZHealth;
		fZHealth = FCNPC_GetHealth(dZombie[zombie][dZombieID]);
        if(weaponid == 3 || weaponid == 5)//BATTE & MATRAQUE
        {
            fZHealth = (fZHealth > 33.4) ? fZHealth - 33.4 : 0.0;
            FCNPC_SetHealth(dZombie[zombie][dZombieID], fZHealth);
	  		KnockPlayer(dZombie[zombie][dZombieID], (RandomEx(0, 10) < 5));
        }
		else if(weaponid == 4 || weaponid == 8)//COUTEAU & KATANA
		{
            fZHealth = (amount == 100 ? 0.0 : (fZHealth > 40.0) ? fZHealth - 40.0 : 0.0);
            FCNPC_SetHealth(dZombie[zombie][dZombieID], fZHealth);
            if(RandomEx(0, 10) < 5) KnockPlayer(dZombie[zombie][dZombieID]);
		}
		else if(weaponid == 25 || weaponid == 26 || weaponid == 27)//FUSILS À POMPE
		{
		    new Float:x, Float:y, Float:z;
		    FCNPC_GetPosition(dZombie[zombie][dZombieID], x, y, z);
			CreateBloodSplat(x, y, z);
		    if(RandomEx(0, 10) < 7) KnockPlayer(dZombie[zombie][dZombieID], (RandomEx(0, 10) < 7));
		}
		//---
		if(!FCNPC_IsDead(dZombie[zombie][dZombieID]) && bodypart == 9)
		{
		    fZHealth = 0.0;
            FCNPC_SetHealth(dZombie[zombie][dZombieID], 0.0);

		}
		else if(dZombie[zombie][dZombieClass] == BOOMER && (bodypart == 3 || bodypart == 4) && !FCNPC_IsDead(dZombie[zombie][dZombieID]))
		{
		    new Float:x, Float:y, Float:z;
			FCNPC_GetPosition(dZombie[zombie][dZombieID], x, y, z);
			CreateBloodSplat(x, y, z);
			CreateExplosionEx(issuerid, x, y, z, EXPLOSION_LARGE, 5.0);
			fZHealth = 0.0;
			FCNPC_SetHealth(dZombie[zombie][dZombieID], 0.0);
		}
		UpdateHealthBar(issuerid, floatround(fZHealth, floatround_floor), (dZombie[zombie][dZombieClass] == TANKER) ? 750 : 100, "Zombie", "Zombie", "Zombie", "Zombie", "Zombie", "Zombie");
    }
    else if(pNPCType[npcid] == MOB_JOHN)
    {
		new john = IsNPCJohn(npcid);
        /*if(dJohn[john][dJohnWayPoint] && dJohn[john][bDistractable])
        {
            dJohn[john][dJohnWayPoint] = false;
            dJohn[john][bDistractable] = false;
        }*/
        //---
        new Float:fZHealth;
		fZHealth = FCNPC_GetHealth(dJohn[john][dJohnID]);
		//---
        if(pNPCType[issuerid] == MOB_JOHN)
		{
			if(dJohn[IsNPCJohn(issuerid)][bHeadshot])
			{
				FCNPC_SetHealth(dJohn[john][dJohnID], 0.0);
				return 1;
			}
		}
		//---
        if(weaponid == 3 || weaponid == 5)//BATTE & MATRAQUE
        {
            fZHealth = (fZHealth > 33.4) ? fZHealth - 33.4 : 0.0;
            FCNPC_SetHealth(dJohn[john][dJohnID], fZHealth);
	  		KnockPlayer(dJohn[john][dJohnID], (RandomEx(0, 10) < 5));
        }
		else if(weaponid == 4 || weaponid == 8)//COUTEAU & KATANA
		{
            fZHealth = (amount == 100 ? 0.0 : (fZHealth > 40.0) ? fZHealth - 40.0 : 0.0);
            FCNPC_SetHealth(dJohn[john][dJohnID], fZHealth);
            if(RandomEx(0, 10) < 5) KnockPlayer(dJohn[john][dJohnID]);
		}
		else if(weaponid == 25 || weaponid == 26 || weaponid == 27)//FUSILS À POMPE
		{
		    new Float:x, Float:y, Float:z;
		    FCNPC_GetPosition(dJohn[john][dJohnID], x, y, z);
			CreateBloodSplat(x, y, z);
		    if(RandomEx(0, 10) < 7) KnockPlayer(dJohn[john][dJohnID], (RandomEx(0, 10) < 7));
		}
		//---
		if(dJohn[john][dJohnType] == JOHN_PACIFIC)
		{
			if(IsWeaponFirearm(dJohn[john][dJohnWeapon]))
			{
				dJohn[john][dJohnType] = JOHN_HOSTILE;
			}
			else
			{
			    if(IsWeaponFirearm(weaponid))
				{
					dJohn[john][dJohnAction] = JOHN_SCARED;
					FCNPC_ApplyAnimation(dJohn[john][dJohnID], "ped", "cower", 4.1, 0, 0, 0, 1, 0);
				}
				else
				{
					dJohn[john][dJohnType] = JOHN_HOSTILE;
				}
			}
		}
		//dJohn[john][dJohnType] = JOHN_PACIFIC;
		//---
		if(!FCNPC_IsDead(dJohn[john][dJohnID]) && bodypart == 9)
		{
		    fZHealth = 0.0;
            FCNPC_SetHealth(dJohn[john][dJohnID], 0.0);
		}
		UpdateHealthBar(issuerid, floatround(fZHealth, floatround_floor), 100, "Human", "Humain", "Humano", "Portugais", "Italien", "Allemand");
    }
	return 1;
}

public FCNPC_OnGiveDamage(npcid, damagedid, Float:amount, weaponid, bodypart)
{
	if(npcid == dJason[dJasonID])
    {
        return 0;
    }
    //---
    else if(pNPCType[npcid] == MOB_ZOMBIE)
    {
	    for(new i = 0; i < MAX_ZOMBIES; i ++)
	    {
	        if(npcid == dZombie[i][dZombieID])
	        {
	            if(!IsPlayerInvincible(damagedid))
				{
				    #if defined ARMOUR_LOW
					GivePlayerHealth(damagedid, -150, 47, npcid);
					#else
					GivePlayerArmour(damagedid, -150, 47, npcid);
					#endif
				}
				if(RandomEx(0, 10) >= 8)
				{
				    pPlayerInfos[damagedid][bHemorragie] = true;
					UpdateInfo(damagedid, 9);
				}
	            break;
	        }
	    }
    }
    else if(pNPCType[npcid] == MOB_JOHN)
    {
		if(bodypart == 9)
		{
			if(FCNPC_IsValid(damagedid) && !FCNPC_IsDead(damagedid)) FCNPC_SetHealth(damagedid, 0.0);
		}
    }
	return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
	if(!FCNPC_IsValid(damagedid))
	{
		if(weaponid == 3 || weaponid == 5)//BATTE & MATRAQUE
		{
		    GivePlayerArmour(damagedid, -100, weaponid, playerid);
		    if(RandomEx(0, 10) < 5) KnockPlayer(damagedid, (RandomEx(0, 10) < 5));
		}
		else if(weaponid == 4 || weaponid == 8)//COUTEAU & KATANA
		{
		    if(amount == 100 && weaponid == 4)//S'il s'agit d'un lancer de couteau
			{
			    if(!pPlayerInfos[damagedid][bHemorragie] && GetPlayerArmour(damagedid) < 650)
			    {
					pPlayerInfos[damagedid][bHemorragie] = true;
					UpdateInfo(damagedid, 9);
			    }
		    	GivePlayerArmour(damagedid, -650, weaponid, playerid);
			}
			else//Sinon...
			{
		    	GivePlayerArmour(damagedid, -150, weaponid, playerid);
			}
			//---
		    if(RandomEx(0, 10) < 3) KnockPlayer(damagedid);
		}
		else if(weaponid == 25 || weaponid == 26 || weaponid == 27)//FUSILS À POMPE
		{
		    if(RandomEx(0, 10) < 3) KnockPlayer(damagedid, (RandomEx(0, 10) < 5));
		}
	}
	//---
	if(!FCNPC_IsValid(damagedid))
	{
		SetEnemyForPlayer(playerid, damagedid);
		SetEnemyForPlayer(damagedid, playerid);
	}
	else
	{
		if(!IsFCNPCDead(damagedid)) SetEnemyForPlayer(playerid, damagedid);
	}
	return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
	if(issuerid == INVALID_PLAYER_ID)
	{
	    if(weaponid == WEAPON_COLLISION)//Si le mec tombe
	    {
	        if(amount > 15 && pPlayerInfos[playerid][bLeg])
	        {
				pPlayerInfos[playerid][bLeg] = false;
				UpdateInfo(playerid, 8);
	        }
	        if(!IsPlayerInvincible(playerid)) GivePlayerHealth(playerid, -floatround(amount * 10, floatround_round), WEAPON_COLLISION);
	    }
	    else if(weaponid == 51)//Si le mec mange une explosion
	    {
	        if(amount > 45 && !pPlayerInfos[playerid][bHemorragie])
	        {
				pPlayerInfos[playerid][bHemorragie] = true;
				UpdateInfo(playerid, 9);
	        }
	        ShakePlayer(playerid);
	        if(!IsPlayerInvincible(playerid))
			{
			    #if defined ARMOUR_LOW
				GivePlayerHealth(playerid, -floatround(amount * 10, floatround_round), 51);
				#else
				GivePlayerArmour(playerid, -floatround(amount * 10, floatround_round), 51);
				#endif
			}
	    }
	}
	else if(issuerid != INVALID_PLAYER_ID)
	{
	    //---
	    if(!IsPlayerInvincible(playerid))
	    {
	        #if defined ARMOUR_LOW
	    	if(bodypart == 3 || bodypart == 4) GivePlayerArmour(playerid, -floatround(amount * 10, floatround_round), weaponid, issuerid);
	    	else GivePlayerHealth(playerid, -floatround(amount * 10, floatround_round), weaponid, issuerid);
	    	#else
	    	if(bodypart != 9) GivePlayerArmour(playerid, -floatround(amount * 10, floatround_round), weaponid, issuerid);
	    	#endif
		}
		//---
	    if((bodypart == 7 || bodypart == 8) && pPlayerInfos[playerid][bLeg] && !IsPlayerInvincible(playerid))
	    {
			pPlayerInfos[playerid][bLeg] = false;
	        ClearAnimations(playerid, true);
			UpdateInfo(playerid, 8);
	    	ApplyAnimation(playerid, "PARACHUTE", "FALL_skyDive_DIE", 4.0, 0, 1, 1, 0, -1);
			ShowPlayerTextInfo(playerid, 3000, "~r~Broken leg!", "~r~Jambe cassee !", "~r~¡ Pierna rotta !", "~r~Perna quebrada !", "~r~Gamba rotta !", "~r~Gebrochenes Bein!");
	    }
	    else if(bodypart == 9 && pNPCType[issuerid] != MOB_JOHN)//HEADSHOT
	    {
			if(pPlayerInfos[playerid][pChapeau] != 47 && pPlayerInfos[playerid][pChapeau] != 48)
			{
	        	SetHealthForPlayer(playerid, 0, weaponid, issuerid);
				pPlayerInfos[issuerid][pHeadshots] ++;
			}
			else if(pPlayerInfos[playerid][pChapeau] == 47)
			{
			    if(RandomEx(0, 10) < 2)
				{
					pPlayerInfos[playerid][pChapeau] = 141;
					ShowPlayerTextInfo(playerid, 5000, "~r~Your helmet has been damaged,~n~watch out for headshots!", "~r~Votre casque a été abimé,~n~attention aux tirs à la tête !", "~r~¡Espagnol!", "~r~Portugais!", "~r~Italien!", "~r~Allemand!");
				}
			}
			else if(pPlayerInfos[playerid][pChapeau] == 48)
			{
			    if(RandomEx(0, 10) < 4)
				{
					pPlayerInfos[playerid][pChapeau] = 142;
					ShowPlayerTextInfo(playerid, 5000, "~r~Your helmet has been damaged,~n~watch out for headshots!", "~r~Votre casque a été abimé,~n~attention aux tirs à la tête !", "~r~¡Espagnol!", "~r~Portugais!", "~r~Italien!", "~r~Allemand!");
				}
			}
	    }
	    else if(pPlayerInfos[playerid][pTorse] != 83 && ((pNPCType[issuerid] != MOB_JOHN && RandomEx(0, 15) < 1) || RandomEx(0, 10) < 3) && (bodypart == 3 || bodypart == 4) && !(7 >= weaponid >= 0))
	    {
			pPlayerInfos[playerid][bHemorragie] = true;
			UpdateInfo(playerid, 9);
	    }
	}
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
    new vehicle = GetVehicleID(vehicleid);
    DestroyVeh(vehicle);
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
	/*new vehicle = GetVehicleID(vehicleid);
	new Float:vHealth;
	GetVehicleHealth(vehicleid, vHealth);
	if(vehicle != -1 && !(vHealth > 0.0)) SetTimerEx("DestroyVeh", 7500, false, "i", vehicle);
	//---
	//CreateRandomVehicle();*/
	return 1;
}

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
	new vehicle = GetVehicleID(vehicleid);
    if(vehicle != -1) GetVehicleWheels(vehicle);
    return 1;
}

public OnPlayerText(playerid, text[])
{
	new string[256];
	if(pPlayerInfos[playerid][dLogState] == UNLOGGED)
	{
		SendClientMessageEx(playerid, ROUGE, "You must be logged in order to chat!", "Vous devez être loggé pour parler !", "¡Debe estar connectado para hablar!", "Portugais", "Italien", "Allemand");
	}
	else if(pPlayerInfos[playerid][pMute] != 0)
	{
		SendClientMessageEx(playerid, ROUGE, "You are muted!", "Vous êtes mute !", "¡Espagnol!", "Portugais", "Italien", "Allemand");
	}
	else if(AreThereTooMuchCaps(text))
	{
		SendClientMessageEx(playerid, ROUGE, "Release your Shift key!", "N'abusez pas des majuscules !", "Espagnol", "Portugais", "Italien", "Allemand");
	}
	else
	{
		if(text[0] == '*')
		{
  			if(pPlayerInfos[playerid][pAdmin] < MODERATOR)
			{
	  			format(string,sizeof(string),"[GLOBAL]%s: {FFFF00}%s", GetName(playerid), text);
	  			SendClientMessageToAll(ORANGE, string);
				LogInfo(false, "[GLOBAL]%s: %s", GetName(playerid), text);
			}
			else
			{
				format(string, sizeof(string), "[ADMINCHAT]%s: {CC0000}%s", GetName(playerid), text[1]);
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pAdmin] > PLAYER && pPlayerInfos[i][dLogState] != UNLOGGED) SendClientMessage(i, ADMIN_COLOR, string);
				LogInfo(false, "[ADMINCHAT]%s: %s", GetName(playerid), text[1]);
			}
		}
		else if(text[0] == ',')
		{
  			if(pPlayerInfos[playerid][pAdmin] < MODERATOR)
			{
	  			format(string,sizeof(string),"[GLOBAL]%s: {FFFF00}%s", GetName(playerid), text);
	  			SendClientMessageToAll(ORANGE, string);
				LogInfo(false, "[GLOBAL]%s: %s", GetName(playerid), text);
			}
			else
			{
				if(pPlayerInfos[playerid][pAdmin] == MODERATOR)
				{
					format(string,sizeof(string),"*Moderator: {CC0000}%s", text[1]);
     				SendClientMessageToAll(MODO_COLOR, string);
					LogInfo(false, "[GLOBAL]Moderateur %s: %s", GetName(playerid), text[1]);
				}
				else if(pPlayerInfos[playerid][pAdmin] == ADMINISTRATOR)
				{
					format(string,sizeof(string),"*Administrator: {CC0000}%s", text[1]);
     				SendClientMessageToAll(ADMIN_COLOR, string);
					LogInfo(false, "[GLOBAL]Administrateur %s: %s", GetName(playerid), text[1]);
				}
				else if(pPlayerInfos[playerid][pAdmin] == OWNER)
				{
					format(string,sizeof(string),"*Owner: {CC0000}%s", text[1]);
     				SendClientMessageToAll(VERT, string);
					LogInfo(false, "[GLOBAL]Owner %s: %s", GetName(playerid), text[1]);
				}
			}
		}
		else if(text[0] == '=' && pGroup[playerid] != -1)
		{
			format(string, sizeof(string), "[TEAM]%s: {FFFFFF}%s", GetName(playerid), text[1]);
    		SendGroupMessage(pGroup[playerid], string, string, string, string, string, string);
			LogInfo(true, "[TEAM %d]%s: %s", pGroup[playerid], GetName(playerid), text[1]);
		}
		else if(text[0] == ';')
		{
			format(string, sizeof(string), "[LOCAL]%s: {FFFF00}%s", GetName(playerid), text[1]);
			new dNearPlayers = SendNearPlayerMessage(playerid, 25.0, BLEU_FONCE, string, string, string, string, string, string);
			LogInfo(true, "[LOCAL %d]%s: %s", dNearPlayers, GetName(playerid), text[1]);
		}
		else
		{
  			format(string,sizeof(string),"[GLOBAL]%s: {FFFF00}%s", GetName(playerid), text);
  			SendClientMessageToAll(ORANGE, string);
			LogInfo(false, "[GLOBAL]%s: %s", GetName(playerid), text);
		}
	}
	return 0;
}

public OnPlayerCommandText(playerid, cmdtext[])
{
	if(strcmp("/tpbambi", cmdtext, true, 10) == 0)
	{
		new Float:x, Float:y, Float:z;
		GetDynamicObjectPos(dBambi[random(MAX_BAMBIS)][oBambi], x, y, z);
		SetPlayerPos(playerid, x, y, z);
		return 1;
	}
	if(strcmp("/jason", cmdtext, true) == 0)
	{
        dEnvironment[dHours] = 19;
        dEnvironment[dMins] = 20;
		SetWorldTime(dEnvironment[dHours]);
		CheckTime(dEnvironment[dDay], dEnvironment[dHours], dEnvironment[dMins]);
		return 1;
	}
	//if(strcmp("/zstreams", cmdtext, true, 10) == 0)
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(ispassenger)
	{
		new Float:x, Float:y, Float:z, Float:x2, Float:y2, Float:z2;
		GetPlayerPos(playerid, x, y, z);
		GetVehiclePos(vehicleid, x2, y2, z2);
		if(IsColBetweenTwoPos(x, y, z, x2, y2, z2)) ClearAnimations(playerid, 1);
	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(IsEngineOn(vehicleid) && GetPlayerVehicleSeat(playerid) == 0)
	{
	    SetVehicleEngineState(vehicleid, false);
	}
	//---
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	/*if(!FCNPC_IsValid(playerid) && newstate == PLAYER_STATE_WASTED)
	{
	    printf("%s dies", GetName(playerid));
	    SetTimerEx("RespawnPlayer", 2500, false, "i", playerid);
	}*/
	//---
	new vehicleid = GetPlayerVehicleID(playerid);
	if(oldstate == PLAYER_STATE_ONFOOT && newstate == PLAYER_STATE_DRIVER)
	{
		new vehicle = GetVehicleID(vehicleid);
		SetVehicleWheels(vehicle);
		if(vehicle != -1)
		{
			if(!pPlayerInfos[playerid][bAide][10]) ShowPlayerHelp(playerid, 11, 10000);
			UpdateInfo(playerid, 10);
		    if((dVehicleInfos[vehicle][bEngine] && dVehicleInfos[vehicle][dFuel] > 0) || IsVehicleBicycle(vehicleid))
			{
				SetVehicleEngineState(vehicleid, true);
			}
		    else
			{
			    SetVehicleEngineState(vehicleid, false);
			}
		}
		else
		{
			SetVehicleEngineState(vehicleid, true);
		}
	    //---
	    for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
        {
            if(pAdminInfos[i][dSpec] == playerid)
            {
				PlayerSpectateVehicle(i, vehicleid, SPECTATE_MODE_NORMAL);
            }
        }
		for(new i = 0; i < MAX_BOMBS; i ++)
		{
		    if(dBomb[i][dBombType] == 1 && dBomb[i][vBombID] == vehicleid)
		    {
		        ExplodeBomb(i);
		    }
		}
	}
	else if(oldstate == PLAYER_STATE_DRIVER && newstate == PLAYER_STATE_ONFOOT)
	{
	    for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
        {
            if(pAdminInfos[i][dSpec] == playerid)
            {
				PlayerSpectatePlayer(i, playerid, SPECTATE_MODE_NORMAL);
            }
        }
		UpdateInfo(playerid, 10);
	}
	return 1;
}

public OnPlayerEnterDynamicCP(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 3.0, 150.3489990, 1928.1619873, 19.2759991))
	{
		LoadMapping(playerid);
		SetPlayerPos(playerid, 217.992, 1866.6269, 3618.165);
		return 1;
	}
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	LogInfo(true, "[ADMIN]OnPlayerRequestSpawn called onto %s.", GetName(playerid));
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

public OnDynamicObjectMoved(objectid)
{
	for(new k = 0; k < MAX_GARAGES; k ++)
	{
		if(objectid == CA_GetObjectID(dGarage[k][oGarage][1]))
		{
			for(new i = 0, j = GetPlayerPoolSize(); i <= j; i ++) if(IsPlayerConnected(i)) PlayerPlaySound(i, 1154, dGarage[k][xGarage], dGarage[k][yGarage], dGarage[k][zGarage]);
		    break;
		}
	}
	return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(!FCNPC_IsValid(playerid))
	{
		new ud,lr;
    	GetPlayerKeys(playerid, ud, ud, lr);
	    if(Pressed(KEY_SPRINT))//Touche de sprint
		{
			if(CallRemoteFunction("GetPlayerMission", "i", playerid) == MISSION_REGGAE_5_GIG || CallRemoteFunction("GetPlayerMission", "i", playerid) == MISSION_REGGAE_8_GIG) return 1;
		    else if(!pPlayerInfos[playerid][bLeg] && !IsPlayerInAnyVehicle(playerid))
		    {
		    	ApplyAnimation(playerid, "PARACHUTE", "FALL_skyDive_DIE", 4.0, 0, 1, 1, 0, -1);
		    }
			else
			{
			    if(dResetTimer[playerid] != -1)
				{
					fDetectRange[playerid][0] = (ZOMBIE_DETECT * 2);
					fDetectRange[playerid][1] = (JOHN_DETECT * 2);
					dResetTimer[playerid] = SetTimerEx("ResetDetectRange", 5000, false, "i", playerid);
				}
			}
		}
		else if(Pressed(KEY_JUMP))//Touche de saut
		{
			if(CallRemoteFunction("GetPlayerMission", "i", playerid) == MISSION_REGGAE_5_GIG || CallRemoteFunction("GetPlayerMission", "i", playerid) == MISSION_REGGAE_8_GIG) return 1;
		    else if(CallRemoteFunction("GetPlayerShop", "i", playerid))
		    {
		        CallRemoteFunction("BuyPlayerItem", "i", playerid);
		        return 1;
		    }
		    //---
			if(pFishInfo[playerid][State] == 1)
			{
				if(pFishInfo[playerid][Fish] != 0 && pFishInfo[playerid][TimeCatch] <= pFishInfo[playerid][Time] <= pFishInfo[playerid][TimeCatch] + GetFishTime(pFishInfo[playerid][Fish]))
				{
			        if(GetPlayerNextFreeSlot(playerid) == -1)
			        {
					    SendClientMessageEx(playerid, ROUGE, "You cannot carry more items!", "Vous ne pouvez pas porter plus d'objets !", "¡No puede llevar más objetos!", "Portugais", "Italien", "Sie können nicht mehr Objekte tragen!");
					    return 1;
			        }
					new Float:x, Float:y, Float:z, Float:a;
	    			GetPlayerPos(playerid, x, y, z);
					GetPlayerFacingAngle(playerid, a);
					x += (1.5441 * floatsin(-a, degrees));
					y += (1.5441 * floatcos(-a, degrees));
					switch(pFishInfo[playerid][Fish])
					{
						case 1: pFishInfo[playerid][FishObject] = CreateObject(GetFishID(pFishInfo[playerid][Fish]), x, y, z - 2.8896, 90.0, 180.0, 90.0);
						case 2: pFishInfo[playerid][FishObject] = CreateObject(GetFishID(pFishInfo[playerid][Fish]), x, y, z - 2.8896, 180.0, 270.0, 180.0);
						case 3: pFishInfo[playerid][FishObject] = CreateObject(GetFishID(pFishInfo[playerid][Fish]), x, y, z - 2.8896, 0.0, 0.0, 180.0);
						case 4: pFishInfo[playerid][FishObject] = CreateObject(GetFishID(pFishInfo[playerid][Fish]), x, y, z - 2.8896, 180.0, 270.0, 90.0);
					}
					MoveObject(pFishInfo[playerid][FishObject], x, y, z, 0.65);
					pFishInfo[playerid][State] = 2;
					KillTimer(pFishInfo[playerid][FishingTimer]);
					SetTimerEx("OnLineRaiseUp", 5000, false, "i", playerid);
				}
				else if(pFishInfo[playerid][Fish] != 0)
				{
					SendPlayerGameText(playerid, 5000, "~r~The fish is gone!", "~r~Le poisson est reparti !", "Espagnol", "Portugais", "Italien", "Allemand");
					pFishInfo[playerid][Fish] = 0;
					pFishInfo[playerid][TimeCatch] = 0;
					pFishInfo[playerid][Time] = 0;
					pFishInfo[playerid][State] = 1;
				}
				return 1;
			}
		    if((!pPlayerInfos[playerid][bLeg] || (pPlayerInfos[playerid][pSleep] < 15 && RandomEx(1, 4) == 2)) && !IsPlayerInAnyVehicle(playerid))
		    {
		        ClearAnimations(playerid, true);
		    	ApplyAnimation(playerid, "PARACHUTE", "FALL_skyDive_DIE", 4.0, 0, 1, 1, 0, -1);
		    	return 1;
		    }
		    if(pKnockOut[playerid])
		    {
		    	DecreaseKnockOut(playerid);
		    	return 1;
		    }
		}
		else if(Pressed(KEY_NO))//Touche conversation 'non', moi je l'utilise pour utiliser un objet
		{
			if(CallRemoteFunction("GetPlayerMission", "i", playerid) == MISSION_REGGAE_5_GIG || CallRemoteFunction("GetPlayerMission", "i", playerid) == MISSION_REGGAE_8_GIG) return 1;
		    else if(dRepair[playerid][0] != 0)
		    {
				if(dRepair[playerid][1] == 1)
				{
					HidePlayerTextInfo(playerid);
					dRepair[playerid][2] ++;
					dRepair[playerid][1] = -1;
					//---
					if((pPlayerInfos[playerid][dMecano] >= 1 && dRepair[playerid][2] == 3) || dRepair[playerid][2] == 5)
					{
                        dRepair[playerid][0] = 0;
						dRepair[playerid][1] = -1;
						dRepair[playerid][2] = 0;
                        TogglePlayerControllable(playerid, true);
						ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
						SetVehicleHealth(dRepair[playerid][3], 1000);
						SetTimerEx("SetVehicleBonnetState", 1500, false, "ib", dRepair[playerid][3], false);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	 					LogInfo(true, "[JOUEUR]%s a réparé le véhicule %d.", GetName(playerid), dRepair[playerid][3]);
						dRepair[playerid][3] = 0;
						GivePlayerExp(playerid, 3);
						ShowPlayerTextInfo(playerid, 2500, "~g~Engine fixed!", "~g~Moteur réparé !", "~g~¡Motor reparado!", "Portugais", "Italien", "Allemand");
					}
					else
					{
						PlayerPlaySound(playerid, 32000, 0.0, 0.0, 0.0);
					}
				}
				else
				{
					HidePlayerTextInfo(playerid);
					dRepair[playerid][2] --;
					if(dRepair[playerid][2] < 0) dRepair[playerid][2] = 0;
					dRepair[playerid][1] = -1;
					ApplyAnimation(playerid, "RAPPING", "RAP_A_Loop", 4.0, 0, 1, 1, 1, 0);
					ShowPlayerTextInfo(playerid, 1500, "~r~You're doing nothing good!", "~r~Tu fais n'importe quoi !", "~r~¡No hace bueno!", "Portugais", "Italien", "Allemand");
				}
		        return 1;
		    }
		    UsePlayerItem(playerid);
		}
		else if(Pressed(KEY_YES))//Touche conversation 'oui', moi je la use pour ouvrir l'interface
		{
			if(CallRemoteFunction("GetPlayerMission", "i", playerid) == MISSION_REGGAE_5_GIG || CallRemoteFunction("GetPlayerMission", "i", playerid) == MISSION_REGGAE_8_GIG) return 1;
		    else if(dRepair[playerid][0] != 0)
		    {
				if(dRepair[playerid][1] == 2)
				{
					HidePlayerTextInfo(playerid);
					dRepair[playerid][2] ++;
					dRepair[playerid][1] = -1;
					//---
					if((pPlayerInfos[playerid][dMecano] >= 1 && dRepair[playerid][2] == 3) || dRepair[playerid][2] == 5)
					{
                        dRepair[playerid][0] = 0;
						dRepair[playerid][1] = -1;
						dRepair[playerid][2] = 0;
                        TogglePlayerControllable(playerid, true);
						ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
						SetVehicleHealth(dRepair[playerid][3], 1000);
						SetTimerEx("SetVehicleBonnetState", 1500, false, "ib", dRepair[playerid][3], false);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	 					LogInfo(true, "[JOUEUR]%s a réparé le véhicule %d.", GetName(playerid), dRepair[playerid][3]);
						dRepair[playerid][3] = 0;
						GivePlayerExp(playerid, 3);
						ShowPlayerTextInfo(playerid, 2500, "~g~Engine fixed!", "~g~Moteur réparé !", "~g~¡Motor reparado!", "Portugais", "Italien", "Allemand");
					}
					else
					{
						PlayerPlaySound(playerid, 32000, 0.0, 0.0, 0.0);
					}
				}
				else
				{
					HidePlayerTextInfo(playerid);
					dRepair[playerid][2] --;
					if(dRepair[playerid][2] < 0) dRepair[playerid][2] = 0;
					dRepair[playerid][1] = -1;
					ApplyAnimation(playerid, "RAPPING", "RAP_A_Loop", 4.0, 0, 1, 1, 1, 0);
					ShowPlayerTextInfo(playerid, 1500, "~r~You're doing nothing good!", "~r~Tu fais n'importe quoi !", "~r~¡No hace bueno!", "Portugais", "Italien", "Allemand");
				}
		        return 1;
		    }
		    if(pUseInventory[playerid] == -1 && !dHelp[playerid])
		    {
				if(CallRemoteFunction("GetPlayerMission", "i", playerid) == MISSION_FLIGHT_GUARD) CallRemoteFunction("OnCinematicGoesOn", "iiii", playerid, 100, 27, 0);
		        pUseInventory[playerid] = 0;
				#if !defined KEEP_PLAYERTEXT
				CreatePlayerHUD(playerid);
				CreatePlayerInventory(playerid);
				#endif
				TextDrawShowForPlayer(playerid, tFondHUD[0]);
				TextDrawShowForPlayer(playerid, tFondHUD[1]);
				TextDrawShowForPlayer(playerid, tFondHUD[2]);
				TextDrawShowForPlayer(playerid, tHelp);
				TextDrawShowForPlayer(playerid, tCompetence);
				TextDrawShowForPlayer(playerid, tGroup);
				TextDrawShowForPlayer(playerid, tOptions);
				UpdatePlayerInventorySlots(playerid);
				for(new i = 0; i < 5; i ++) UpdatePlayerClothesTexts(playerid, i);
				for(new i = 0; i < 4; i ++) UpdatePlayerWeaponTexts(playerid, i + 1);
				for(new i = 0; i < 36; i ++) UpdatePlayerInventory(playerid, i, pPlayerInfos[playerid][BagObject][i]);
				//---
				new vehicleid = GetVehicleID(GetPlayerVehicleID(playerid));
				if(vehicleid == -1)
				{
				    new Float:x, Float:y, Float:z;
					GetPlayerPos(playerid, x, y, z);
					GetVehicleWithinDistance(x, y, z, 10.0, vehicleid);
					if(vehicleid != -1) vehicleid = GetVehicleID(vehicleid);
				}
				if(vehicleid != -1)
				{
					#if !defined KEEP_PLAYERTEXT
				    CreatePlayerVehicleHUD(playerid);
				    CreatePlayerVehicleInventory(playerid);
					#endif
					TextDrawShowForPlayer(playerid, tFondHUD[3]);
					pVehicleInventory[playerid] = vehicleid;
					for(new i = 0; i < 6; i ++) UpdateVehicleInventory(playerid, vehicleid, i, dVehicleInfos[vehicleid][TrunkObject][i]);
					UpdateVehicleHUD(playerid);
					SetVehicleTrunkState(dVehicleInfos[pVehicleInventory[playerid]][dVehicleID], true);
				}
				//---
				pPlayerSafe[playerid] = IsPlayerNearSafe(playerid);
				if(pPlayerSafe[playerid] != -1)
				{
					if(dSafeInfos[pPlayerSafe[playerid]][bOpenSafe])
					{
						TextDrawShowForPlayer(playerid, tFondHUD[4]);
						#if !defined KEEP_PLAYERTEXT
						CreatePlayerSafe(playerid);
						#endif
						for(new i = 0; i < 12; i ++) UpdateSafe(playerid, pPlayerSafe[playerid], i, dSafeInfos[pPlayerSafe[playerid]][dItem][i]);
					}
					else
					{
					    pPlayerSafe[playerid] = -1;
					}
				}
				//---
				SelectTextDraw(playerid, VERT);
		    }
		}
		else if(Pressed(KEY_CTRL_BACK))//Touche 'H'
		{
			if(CallRemoteFunction("GetPlayerMission", "i", playerid) == MISSION_REGGAE_5_GIG || CallRemoteFunction("GetPlayerMission", "i", playerid) == MISSION_REGGAE_8_GIG || (CallRemoteFunction("GetPlayerMission", "i", playerid) == MISSION_FLIGHT_INTRO && IsPlayerInRangeOfPoint(playerid, 2.0, -1862.3173, 119.2878, 1054.317)))
			{
				return 1;
			}
		    else if(dRepair[playerid][0] != 0)
		    {
				if(dRepair[playerid][1] == 3)
				{
					HidePlayerTextInfo(playerid);
					dRepair[playerid][2] ++;
					dRepair[playerid][1] = -1;
					//---
					if((pPlayerInfos[playerid][dMecano] >= 1 && dRepair[playerid][2] == 3) || dRepair[playerid][2] == 5)
					{
                        dRepair[playerid][0] = 0;
						dRepair[playerid][1] = -1;
						dRepair[playerid][2] = 0;
                        TogglePlayerControllable(playerid, true);
						ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
						SetVehicleHealth(dRepair[playerid][3], 1000);
						SetTimerEx("SetVehicleBonnetState", 1500, false, "ib", dRepair[playerid][3], false);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	 					LogInfo(true, "[JOUEUR]%s a réparé le véhicule %d.", GetName(playerid), dRepair[playerid][3]);
						dRepair[playerid][3] = 0;
						GivePlayerExp(playerid, 3);
						ShowPlayerTextInfo(playerid, 2500, "~g~Engine fixed!", "~g~Moteur réparé !", "~g~¡Motor reparado!", "Portugais", "Italien", "Allemand");
					}
					else
					{
						PlayerPlaySound(playerid, 32000, 0.0, 0.0, 0.0);
					}
				}
				else
				{
					HidePlayerTextInfo(playerid);
					dRepair[playerid][2] --;
					if(dRepair[playerid][2] < 0) dRepair[playerid][2] = 0;
					dRepair[playerid][1] = -1;
					ApplyAnimation(playerid, "RAPPING", "RAP_A_Loop", 4.0, 0, 1, 1, 1, 0);
					ShowPlayerTextInfo(playerid, 1500, "~r~You're doing nothing good!", "~r~Tu fais n'importe quoi !", "~r~¡No hace bueno!", "Portugais", "Italien", "Allemand");
				}
		        return 1;
		    }
			if(!IsPlayerInAnyVehicle(playerid))
			{
				new dStation = IsPlayerNearGasStation(playerid);
				new Float:x, Float:y, Float:z, vehicleid = INVALID_VEHICLE_ID, vehicle = -1;
				GetPlayerPos(playerid, x, y, z);
				GetVehicleWithinDistance(x, y, z, 7.0, vehicleid);
				vehicle = GetVehicleID(vehicleid);
				//---
				if(dStation != -1 && vehicleid != INVALID_VEHICLE_ID)
				{
					if(IsVehicleBicycle(vehicleid)) return 1;
					if(vehicle == -1)
					{
					    SendClientMessageEx(playerid, ROUGE, "This vehicle cannot be refilled!", "Vous ne pouvez pas remplir ce véhicule !", "¡No puede repostar gasolina en este vehículo!", "Portugais", "Italien", "Allemand");
					    return 1;
					}
					//---
					if(dVehicleInfos[vehicle][dFuel] > floatround(floatdiv(GetVehicleMaxFuel(vehicle), 2), floatround_round))
					{
					    SendClientMessageEx(playerid, ROUGE, "This vehicle doesn't need gas!", "Ce véhicule n'a pas besoin d'essence !", "¡Esto vehículo no necessita gasolina!", "Portugais", "Italien", "Allemand");
						return 1;
					}
					new dGasAmount = GetVehicleMaxFuel(vehicle) - dVehicleInfos[vehicle][dFuel];
					if(dGasAmount == 0)
					{
					    SendClientMessageEx(playerid, ROUGE, "This gas station does not have enough gas left!", "Cette station service n'a pas assez d'essence !", "¡Esta estacíon de gasolíno no tiene suficiente de gasolíno!", "Portugais", "Italien", "Allemand");
						return 1;
					}
					ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
					GiveVehicleFuel(vehicle, (dGasAmount > GetStationFuel(dStation)) ? GetStationFuel(dStation) : dGasAmount);
					GiveStationFuel(dStation, (dGasAmount > GetStationFuel(dStation)) ? -GetStationFuel(dStation) : -dGasAmount);
				}
				else
				{
					CheckItemsRoundPlayer(playerid);
				}
			}
		}
		else if(Pressed(KEY_SECONDARY_ATTACK))//Touche 'Enter'
		{
		    if(!dHelp[playerid])
			{
				if(CallRemoteFunction("StartPlayerMission", "i", playerid)) return 1;
			}
		    //---
		    if(IsPlayerOnSpectate(playerid))
		    {
				LogInfo(true, "[ADMIN]%s arrete de spec %s.", GetName(playerid), GetName(pAdminInfos[playerid][dSpec]));
				TogglePlayerSpectating(playerid, 0);
				SetCameraBehindPlayer(playerid);
				SetPlayerPos(playerid, pPlayerInfos[playerid][xPos], pPlayerInfos[playerid][yPos], pPlayerInfos[playerid][zPos]);
				SendClientMessageEx(playerid, ADMIN_COLOR, "[ADMIN]You stopped spectating.", "[ADMIN]Vous avez arrêté de regarder.", "[ADMIN]Espagnol", "[ADMIN]Portugais", "[ADMIN]Italien", "[ADMIN]Allemand");
			    pAdminInfos[playerid][dSpec] = INVALID_PLAYER_ID;
		    }
			if(bCrafting[playerid])
			{
			    ClearAnimations(playerid, true);
			    bCrafting[playerid] = false;
			    HidePlayerTextInfo(playerid);
				return 1;
			}
			if(CallRemoteFunction("GetPlayerNearCart", "i", playerid) != -1)
			{
			    if(HasPlayerGold(playerid, 2))
			    {
				    new dFreeSlot = GetPlayerNextFreeSlot(playerid);
				    if(dFreeSlot  == -1)
				    {
						PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
						SendClientMessageEx(playerid, ROUGE, "You cannot carry more items!", "Vous ne pouvez pas porter plus d'objets !", "¡No puede llevar más objetos!", "Portugais", "Italien", "Sie können nicht mehr Objekte tragen!");
						return 1;
				    }
				    GivePlayerGold(playerid, -2);
    				GivePlayerSlotObject(playerid, 153, dFreeSlot);
			        ShowPlayerTextInfo(playerid, 5000, "~r~Chef~w~: Bon appetite!", "~r~Chef~w~: Bon appétit !", "~r~Jefe~w~: Buen provecho.", "~r~Portugais~w~:", "~r~Chef~w~: Buonappetito !", "~r~Chef~w~: Guten appetit!");
			    }
			    else
				{
					SendClientMessageEx(playerid, ROUGE, "You don't have enough gold!", "Vous n'avez pas assez d'or !", "¡No tiene suficiente de oro!", "Portugais", "Non avete abbastanza di oro.", "Sie haben nicht genug gold!");
				}
				return 1;
			}
		    if(CallRemoteFunction("GetPlayerShop", "i", playerid))
		    {
		        CallRemoteFunction("ClosePlayerShop", "i", playerid);
				return 1;
		    }
		    if(CallRemoteFunction("IsPlayerPlayerNearButton", "i", playerid) != 0)
		    {
       			CallRemoteFunction("OnPlayerPressButton", "i", playerid);
		    }
		    //---
		    if(CallRemoteFunction("GetPlayerNearAuctionHouse", "i", playerid) != -1)
		    {
				if(IsThereUnsoldItem(playerid) && HasPlayerItem(playerid, 158) == -1)
				{
			        new dFreeSlot = GetPlayerNextFreeSlot(playerid);
			        if(dFreeSlot == -1)
			        {
					    SendClientMessageEx(playerid, ROUGE, "You cannot carry more items!", "Vous ne pouvez pas porter plus d'objets !", "¡No puede llevar más objetos!", "Portugais", "Italien", "Sie können nicht mehr Objekte tragen!");
					    return 1;
			        }
				    GivePlayerSlotObject(playerid, 158, dFreeSlot);
					ShowPlayerTextInfo(playerid, 5000, "~r~Auction man~w~: I've got some unsold stuff for you.", "~r~Commissaire~w~: J'ai quelques invendus à vous rendre.", "Espagnol", "Portugais", "Italien", "Allemand");
				    return 1;
				}
		        ShowPlayerAuctionHouse(playerid);
		        return 1;
		    }
		    //---
			new dNearShop = CallRemoteFunction("GetPlayerNearShop", "i", playerid);
			//---
			if(!dHelp[playerid] && CallRemoteFunction("ShowPlayerShop", "ii", playerid, dNearShop))
			{
			    return 1;
			}
			//---
			dEngineer[playerid] = GetPlayerNearEngineer(playerid);
			if(!dHelp[playerid] && dEngineer[playerid] != -1)
			{
			    ClearAnimations(playerid, true);
			    dFormula[playerid] = 0;
			    ShowPlayerEngineer(playerid);
			    return 1;
			}
			//---
			if(IsPlayerNearDoctor(playerid) != -1 && !bHeal[playerid])
			{
			    ClearAnimations(playerid, true);
				switch(pPlayerInfos[playerid][pLangue])
				{
					case LANGUAGE_EN: ShowPlayerDialog(playerid, 33, DIALOG_STYLE_TABLIST, "Doctor", "{FFFFFF}Get healed\t{FFD700}0.5g gold\n{FFFFFF}Change skin\t{FFD700}1g gold", "Ok", "Cancel");
					case LANGUAGE_FR: ShowPlayerDialog(playerid, 33, DIALOG_STYLE_TABLIST, "Docteur", "{FFFFFF}Vous faire soigner\t{FFD700}0.5g d'or\n{FFFFFF}Changer de skin\t{FFD700}1g d'or", "Ok", "Annuler");
				   	case LANGUAGE_ES: ShowPlayerDialog(playerid, 33, DIALOG_STYLE_TABLIST, "Doctor", "{FFFFFF}Recibir tratamientos\t{FFD700}0.5g de oro\n{FFFFFF}Cambiar de skin\t{FFD700}1g de oro", "Ok", "Espagnol");
				   	case LANGUAGE_PG: ShowPlayerDialog(playerid, 33, DIALOG_STYLE_TABLIST, "Portugais", "Portugais", "Ok", "Portugais");
					case LANGUAGE_IT: ShowPlayerDialog(playerid, 33, DIALOG_STYLE_TABLIST, "Italien", "Italien", "Ok", "Italien");
					case LANGUAGE_DE: ShowPlayerDialog(playerid, 33, DIALOG_STYLE_TABLIST, "Allemand", "Allemand" , "Ok", "Allemand");
				}
			}
			//---
			if(IsPlayerNearMechanic(playerid) != -1 && !IsPlayerInAnyVehicle(playerid))
			{
			    ClearAnimations(playerid, true);
				switch(pPlayerInfos[playerid][pLangue])
				{
					case LANGUAGE_EN: ShowPlayerDialog(playerid, 41, DIALOG_STYLE_TABLIST, "Mechanic", "{FFFFFF}Fix\t{FFD700}1.5g gold\n{FFFFFF}Tear apart\t{FFD700}1g gold\n{FFFFFF}Extract 20l of gas\t{FFD700}0.2g gold\n{FFFFFF}Pull wheel off\t{FFD700}0.3g gold\n{FFFFFF}Get engine\t{FFD700}0.5g gold", "Ok", "Cancel");
					case LANGUAGE_FR: ShowPlayerDialog(playerid, 41, DIALOG_STYLE_TABLIST, "Mécanicien", "{FFFFFF}Réparer\t{FFD700}1.5g gold\n{FFFFFF}Désosser\t{FFD700}1g gold\n{FFFFFF}Siphoner 20 litres d'essence\t{FFD700}0.2g gold\n{FFFFFF}Prendre roue\t{FFD700}0.3g gold\n{FFFFFF}Retirer moteur\t{FFD700}0.5g gold", "Ok", "Annuler");
				   	case LANGUAGE_ES: ShowPlayerDialog(playerid, 41, DIALOG_STYLE_TABLIST, "Espagnol", "Espagnol", "Ok", "Espagnol");
				   	case LANGUAGE_PG: ShowPlayerDialog(playerid, 41, DIALOG_STYLE_TABLIST, "Portugais", "Portugais", "Ok", "Portugais");
					case LANGUAGE_IT: ShowPlayerDialog(playerid, 41, DIALOG_STYLE_TABLIST, "Italien", "Italien", "Ok", "Italien");
					case LANGUAGE_DE: ShowPlayerDialog(playerid, 41, DIALOG_STYLE_TABLIST, "Allemand", "Allemand" , "Ok", "Allemand");
				}
			}
			//---
			if(pFishInfo[playerid][State] == 1)
			{
				pFishInfo[playerid][Fish] = 0;
				pFishInfo[playerid][TimeCatch] = 0;
				pFishInfo[playerid][Time] = 0;
				pFishInfo[playerid][State] = 0;
				KillTimer(pFishInfo[playerid][FishingTimer]);
				pFishInfo[playerid][FishingTimer] = -1;
				SetCameraBehindPlayer(playerid);
	   			TogglePlayerControllable(playerid, true);
				ApplyAnimation(playerid, "GRENADE", "WEAPON_throwu", 4.0, 0, 0, 0, 0, 0, 1);
				return 1;
			}
		}
		else if(Pressed(KEY_CROUCH))//Touche 'C'
		{
			if(CallRemoteFunction("GetPlayerMission", "i", playerid) == MISSION_REGGAE_5_GIG || CallRemoteFunction("GetPlayerMission", "i", playerid) == MISSION_REGGAE_8_GIG) return 1;
		    else if(dRepair[playerid][0] != 0)
		    {
				if(dRepair[playerid][1] == 0)
				{
					HidePlayerTextInfo(playerid);
					dRepair[playerid][2] ++;
					dRepair[playerid][1] = -1;
					//---
					if((pPlayerInfos[playerid][dMecano] >= 1 && dRepair[playerid][2] == 3) || dRepair[playerid][2] == 5)
					{
                        dRepair[playerid][0] = 0;
						dRepair[playerid][1] = -1;
						dRepair[playerid][2] = 0;
                        TogglePlayerControllable(playerid, true);
						ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
						SetVehicleHealth(dRepair[playerid][3], 1000);
						SetTimerEx("SetVehicleBonnetState", 1500, false, "ib", dRepair[playerid][3], false);
	 					LogInfo(true, "[JOUEUR]%s a réparé le véhicule %d.", GetName(playerid), dRepair[playerid][3]);
						dRepair[playerid][3] = 0;
						GivePlayerExp(playerid, 3);
						ShowPlayerTextInfo(playerid, 2500, "~g~Engine fixed!", "~g~Moteur réparé !", "~g~¡Motor reparado!", "Portugais", "Italien", "Allemand");
					}
					else
					{
						PlayerPlaySound(playerid, 32000, 0.0, 0.0, 0.0);
					}
				}
				else
				{
					HidePlayerTextInfo(playerid);
					dRepair[playerid][2] --;
					if(dRepair[playerid][2] < 0) dRepair[playerid][2] = 0;
					dRepair[playerid][1] = -1;
					ApplyAnimation(playerid, "RAPPING", "RAP_A_Loop", 4.0, 0, 1, 1, 1, 0);
					ShowPlayerTextInfo(playerid, 1500, "~r~You're doing nothing good!", "~r~Tu fais n'importe quoi !", "~r~¡No hace bueno!", "Portugais", "Italien", "Allemand");
				}
		        return 1;
		    }
		    new dElevator = CallRemoteFunction("IsPlayerNearToElevator", "i", playerid);
		    if(dElevator != 0)
		    {
			    ClearAnimations(playerid, true);
				CallRemoteFunction("PlayerMoveElevator", "ii", playerid, dElevator);
				return 1;
			}
		    //---
		    new dBedID = IsPlayerNearBed(playerid);
		    if(dBedID != -1 && !IsPlayerSleeping(playerid))
		    {
		        if(dBedID == BUD_BED)
		        {
		            if(pPlayerInfos[playerid][pIntro] >= 4)
		            {
						SetPlayerPos(playerid, -55.3701, -230.7322, 5.9485);
						SetPlayerFacingAngle(playerid, 180.0);
						SetPlayerCameraPos(playerid, -55.3701, -233.7322, 7.4485 + 1.5);
						SetPlayerCameraLookAt(playerid, -55.3701, -230.7322, 5.9485, 2);
						LogInfo(true, "[JOUEUR]%s dort dans le lit de Bud.", GetName(playerid));
		            }
		        }
		        else
		        {
			        switch(dBed[dBedID][dBedType])
			        {
			            case 1:
			            {
			                new Float:angle = dBed[dBedID][aBed] - 180.0;
							SetPlayerPos(playerid, dBed[dBedID][xBed] - 1.67 * floatsin(-angle, degrees), dBed[dBedID][yBed] - 1.67 * floatcos(-angle, degrees), dBed[dBedID][zBed] + 0.47);
							SetPlayerFacingAngle(playerid, angle);
							SetPlayerCameraPos(playerid, dBed[dBedID][xBed] + 3.0 * floatsin(-angle, degrees), dBed[dBedID][yBed] + 3.0 * floatcos(-angle, degrees), dBed[dBedID][zBed] + 1.5);
							SetPlayerCameraLookAt(playerid, dBed[dBedID][xBed], dBed[dBedID][yBed], dBed[dBedID][zBed], 2);
						}
			            case 2:
			            {
			                new Float:angle = dBed[dBedID][aBed] - 180.0;
							SetPlayerPos(playerid, dBed[dBedID][xBed] - 2.834 * floatsin(-angle, degrees), dBed[dBedID][yBed] - 2.834 * floatcos(-angle, degrees), dBed[dBedID][zBed] + 0.641);
							SetPlayerFacingAngle(playerid, angle);
							SetPlayerCameraPos(playerid, dBed[dBedID][xBed] + 3.0 * floatsin(-angle, degrees), dBed[dBedID][yBed] + 3.0 * floatcos(-angle, degrees), dBed[dBedID][zBed] + 1.5);
							SetPlayerCameraLookAt(playerid, dBed[dBedID][xBed], dBed[dBedID][yBed], dBed[dBedID][zBed], 2);
						}
			        }
		        }
				TogglePlayerControllable(playerid, false);
				ApplyAnimation(playerid,"BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
				PlayerPlaySound(playerid, 19602, 0.0, 0.0, 0.0);
				dNap[playerid] = RandomEx(3, 8);
				LogInfo(true, "[JOUEUR]%s dort dans le lit %d.", GetName(playerid), dBedID);
		    }
		    //---
		    new dSeatID = IsPlayerNearSeat(playerid);

		    if(dSeatID != -1 && !IsPlayerSitting(playerid))
		    {
				new Pointer: pt = LIST_IT_data_ptr(GetNodeAt(seatList, dSeatID));
				new seat[Seat];
				MEM_get_arr(pt, _, seat);
		        switch(seat[dSeatType])
		        {
		            case 1729:
		            {
		                new Float:angle = seat[aSeat] - 180.0;
						SetPlayerPos(playerid, seat[xSeat] + 0.6 * floatsin(-angle, degrees), seat[ySeat] + 0.6 * floatcos(-angle, degrees), seat[zSeat]);
						SetPlayerFacingAngle(playerid, angle);
						InterpolateCameraPos(playerid, seat[xSeat] - 3.0 * floatsin(-(angle - 45), degrees), seat[ySeat] - 3.0 * floatcos(-(angle - 45), degrees), seat[zSeat] + 1.0, seat[xSeat] - 3.0 * floatsin(-(angle + 45), degrees), seat[ySeat] - 3.0 * floatcos(-(angle + 45), degrees), seat[zSeat] + 1.0, 35000);
						InterpolateCameraLookAt(playerid, seat[xSeat], seat[ySeat], seat[zSeat], seat[xSeat], seat[ySeat], seat[zSeat], 35000);
					}
				}
				TogglePlayerControllable(playerid, false);
			    ApplyAnimation(playerid,"PED","SEAT_IDLE",4,0,0,0, 1,0,1);
				dSit[playerid] = RandomEx(3, 8);
				LogInfo(true, "[JOUEUR]%s s'asseoit dans le fauteuil %d.", GetName(playerid), dSeatID);
		    }
			//---
			pGunRack[playerid] = IsPlayerNearRack(playerid);
			if(pGunRack[playerid] != -1)
			{
			    new string[135];
			    new sWeap[35];
				for(new i = 0; i < 4; i ++)
				{
					new gun, ammo;
	    			GetGunRackWeapon(pGunRack[playerid], i, gun, ammo);
	   				if(GetWeaponAmmoType(gun) == NO_AMMO)  format(sWeap, sizeof(sWeap), "%s", GetGunName(gun, pPlayerInfos[playerid][pLangue]));
					else format(sWeap, sizeof(sWeap), "%s - %d", GetGunName(gun, pPlayerInfos[playerid][pLangue]), ammo);
					strcat(string, sWeap);
					if(i != 3) strcat(string, "\n");
				}
				switch(pPlayerInfos[playerid][pLangue])
				{
					case LANGUAGE_EN: ShowPlayerDialog(playerid, 38, DIALOG_STYLE_LIST, "Gunrack", string, "Take", "Cancel");
				   	case LANGUAGE_FR: ShowPlayerDialog(playerid, 38, DIALOG_STYLE_LIST, "Étagère", string, "Prendre", "Annuler");
				   	case LANGUAGE_ES: ShowPlayerDialog(playerid, 38, DIALOG_STYLE_LIST, "Espagnol", string, "Espagnol", "Espagnol");
				   	case LANGUAGE_PG: ShowPlayerDialog(playerid, 38, DIALOG_STYLE_LIST, "Portugais", string, "Portugais", "Portugais");
					case LANGUAGE_IT: ShowPlayerDialog(playerid, 38, DIALOG_STYLE_LIST, "Italien", string, "Italien", "Italien");
					case LANGUAGE_DE: ShowPlayerDialog(playerid, 38, DIALOG_STYLE_LIST, "Regal", string , "Allemand", "Allemand");
				}
			}
			//---
			pFridge[playerid] = IsPlayerNearFridge(playerid);
			if(pFridge[playerid] != -1)
			{
			    new string[256];
			    new sFood[50];
				for(new i = 0; i < 5; i ++)
				{
					new food, amount;
	    			GetFridgeFood(pFridge[playerid], i, food, amount);
	   				if(food == 0)  format(sFood, sizeof(sFood), "{CC0000}%s", GetItemName(food, pPlayerInfos[playerid][pLangue]));
					else format(sFood, sizeof(sFood), "{FFFF00}%s - {008000}%d", GetItemName(food, pPlayerInfos[playerid][pLangue]), amount);
					strcat(string, sFood);
					if(i != 4) strcat(string, "\n");
				}
				switch(pPlayerInfos[playerid][pLangue])
				{
					case LANGUAGE_EN: ShowPlayerDialog(playerid, 58, DIALOG_STYLE_LIST, "Fridge", string, "Take", "Cancel");
				   	case LANGUAGE_FR: ShowPlayerDialog(playerid, 58, DIALOG_STYLE_LIST, "Réfrigérateur", string, "Prendre", "Annuler");
				   	case LANGUAGE_ES: ShowPlayerDialog(playerid, 58, DIALOG_STYLE_LIST, "Espagnol", string, "Espagnol", "Espagnol");
				   	case LANGUAGE_PG: ShowPlayerDialog(playerid, 58, DIALOG_STYLE_LIST, "Portugais", string, "Portugais", "Portugais");
					case LANGUAGE_IT: ShowPlayerDialog(playerid, 58, DIALOG_STYLE_LIST, "Italien", string, "Italien", "Italien");
					case LANGUAGE_DE: ShowPlayerDialog(playerid, 58, DIALOG_STYLE_LIST, "Regal", string , "Allemand", "Allemand");
				}
			}
			//---
			pPlayerSafe[playerid] = IsPlayerNearSafe(playerid);
			if(!dHelp[playerid] && pPlayerSafe[playerid] != -1)
			{
			    if(!dSafeInfos[pPlayerSafe[playerid]][bOpenSafe])
			    {
					switch(pPlayerInfos[playerid][pLangue])
					{
					   	case LANGUAGE_EN: ShowPlayerDialog(playerid, 8, DIALOG_STYLE_INPUT, "Safe", "Enter the code:", "Ok", "Cancel");
					   	case LANGUAGE_FR: ShowPlayerDialog(playerid, 8, DIALOG_STYLE_INPUT, "Coffre Fort", "Entrez le code:", "Ok", "Annuler");
					   	case LANGUAGE_ES: ShowPlayerDialog(playerid, 8, DIALOG_STYLE_INPUT, "Espagnol", "Espagnol", "Ok", "Espagnol");
					   	case LANGUAGE_PG: ShowPlayerDialog(playerid, 8, DIALOG_STYLE_INPUT, "Portugais", "Portugais", "Ok", "Portugais");
						case LANGUAGE_IT: ShowPlayerDialog(playerid, 8, DIALOG_STYLE_INPUT, "Italien", "Italien", "Ok", "Italien");
						case LANGUAGE_DE: ShowPlayerDialog(playerid, 8, DIALOG_STYLE_INPUT, "Allemand", "Allemand" , "Ok", "Allemand");
					}
				}
				else
				{
					ChangeSafeDoorState(pPlayerSafe[playerid], false);
				}
			}
			//---
			dDoor[playerid] = IsPlayerNearHouseDoor(playerid);
			if(!dHelp[playerid] && dDoor[playerid] != -1)
			{
			    if(!dHouse[dDoor[playerid]][bPorte][1])
			    {
			    	ClearAnimations(playerid, true);
					switch(pPlayerInfos[playerid][pLangue])
					{
					   	case LANGUAGE_EN: ShowPlayerDialog(playerid, 11, DIALOG_STYLE_INPUT, "Door", "Enter the code:", "Ok", "Cancel");
					   	case LANGUAGE_FR: ShowPlayerDialog(playerid, 11, DIALOG_STYLE_INPUT, "Porte", "Entrez le code:", "Ok", "Annuler");
					   	case LANGUAGE_ES: ShowPlayerDialog(playerid, 11, DIALOG_STYLE_INPUT, "Puerta", "Espagnol", "Ok", "Espagnol");
					   	case LANGUAGE_PG: ShowPlayerDialog(playerid, 11, DIALOG_STYLE_INPUT, "Porta", "Portugais", "Ok", "Portugais");
						case LANGUAGE_IT: ShowPlayerDialog(playerid, 11, DIALOG_STYLE_INPUT, "Porta", "Italien", "Ok", "Italien");
						case LANGUAGE_DE: ShowPlayerDialog(playerid, 11, DIALOG_STYLE_INPUT, "Tür", "Allemand" , "Ok", "Allemand");
					}
				}
				else
				{
			    	ClearAnimations(playerid, true);
					ChangeHouseDoorState(dDoor[playerid], false);
				}
			    return 1;
			}
			dDoor[playerid] = IsPlayerNearGarageDoor(playerid);
			if(!dHelp[playerid] && dDoor[playerid] != -1)
			{
			    if(!dGarage[dDoor[playerid]][bGarage][1])
			    {
			    	ClearAnimations(playerid, true);
					switch(pPlayerInfos[playerid][pLangue])
					{
					   	case LANGUAGE_EN: ShowPlayerDialog(playerid, 40, DIALOG_STYLE_INPUT, "Garage", "Enter the code:", "Ok", "Cancel");
					   	case LANGUAGE_FR: ShowPlayerDialog(playerid, 40, DIALOG_STYLE_INPUT, "Garage", "Entrez le code:", "Ok", "Annuler");
					   	case LANGUAGE_ES: ShowPlayerDialog(playerid, 40, DIALOG_STYLE_INPUT, "Garaje", "Espagnol", "Ok", "Espagnol");
					   	case LANGUAGE_PG: ShowPlayerDialog(playerid, 40, DIALOG_STYLE_INPUT, "Porta", "Portugais", "Ok", "Portugais");
						case LANGUAGE_IT: ShowPlayerDialog(playerid, 40, DIALOG_STYLE_INPUT, "Porta", "Italien", "Ok", "Italien");
						case LANGUAGE_DE: ShowPlayerDialog(playerid, 40, DIALOG_STYLE_INPUT, "Garage", "Allemand" , "Ok", "Allemand");
					}
				}
				else
				{
			    	ClearAnimations(playerid, true);
					ChangeGarageDoorState(dDoor[playerid], false);
				}
			    return 1;
			}
		}
		else if(Pressed(KEY_AIM))
		{
		    if(IsPlayerOnSpectate(playerid))
		    {
				PlayerSpectatesNextPlayer(playerid, true);
		    }
		}
		else if(Pressed(KEY_FIRE))
		{
			new Float:x, Float:y, Float:z;
            if(CallRemoteFunction("GetPlayerMission", "i", playerid) == MISSION_REGGAE_4_MISSILE) return 1;
            //---
		    if(IsPlayerOnSpectate(playerid))
		    {
				PlayerSpectatesNextPlayer(playerid, false);
		    }
            if(15 >= GetPlayerWeapon(playerid) >= 2)
            {
				new dBloptHit = -1;
				for(new i = 0; i < MAX_BLOPTS; i ++)
				{
					GetObjectPos(dBlopt[i][oBlopt], x, y, z);
				    if(IsPlayerInRangeOfPoint(playerid, 2.0, x, y, z))
				    {
				        dBloptHit = i;
				        break;
				    }
				}
				if(dBloptHit != -1)
				{
			    	UpdateHealthBar(playerid, 0, 180, "Blopt", "Blopt", "Blopt", "Blopt", "Blopt", "Blopt");
					OnPlayerKillsBlopt(playerid, dBloptHit);
					return 1;
				}
			}
			//---CACTUS
			if(GetPlayerWeapon(playerid) == 9 && IsPlayerInDynamicArea(playerid, dStreamMobs[dCactusZone]))
			{
				for(new i = 0; i < MAX_CACTUS; i ++)
				{
				    if(dCactus[i][dCactusHealth] > 0 && IsObjectNearToPlayer(2.5, playerid, dCactus[i][oCactus]))
				    {
				        dCactus[i][dCactusHealth] -= 600;
			    		UpdateHealthBar(playerid, dCactus[i][dCactusHealth], 1800, "Cakturn", "Cakturn", "Cakturn", "Cakturn", "Cakturn", "Cakturn");
				        if(dCactus[i][dCactusHealth] <= 0)
				        {
							OnPlayerKillsCakturn(playerid, i);
						}
			        	break;
				    }
				}
			}
		    if(GetPlayerWeapon(playerid) == 4 || GetPlayerWeapon(playerid) == 8)//Pour dépecer les bambi
		    {
			    for(new bambi = 0; bambi < MAX_BAMBIS; bambi ++)
			    {
					GetDynamicObjectPos(dBambi[bambi][oBambi], x, y, z);
					if(GetDistanceToPoint(playerid, x, y, z) < 2.0)
					{
						if(dBambi[bambi][bBambiDead])
						{
							if(pPlayerInfos[playerid][dBoucher] >= 1 || RandomEx(0, 10) < 8)
							{
							    x += floatdiv(RandomEx(5, 15), 10);
							    y += floatdiv(RandomEx(5, 15), 10);
						    	CA_FindZ_For2DCoord(x, y, z);
				            	CreateItem(68, x, y, z + 1.0, true, -1);
				            	if(RandomEx(0, 10) < 3)
				            	{
									GetDynamicObjectPos(dBambi[bambi][oBambi], x, y, z);
								    x += floatdiv(RandomEx(5, 15), 10);
								    y += floatdiv(RandomEx(5, 15), 10);
	    							CA_FindZ_For2DCoord(x, y, z);
				            		CreateItem(68, x, y, z + 1.0, true, -1);
				            	}
							}
			            	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
		            		dBambi[bambi][bBambiDead] = false;
							SetTimerEx("DestroyObjectEx", 1500, false, "ib", dBambi[bambi][oBambi], true);
							dBambi[bambi][oBambi] = INVALID_OBJECT_ID;
							CreateBambi(bambi, random(2));
							LogInfo(true, "[JOUEUR]%s depece un bambi.", GetName(playerid));
					    }
						return 1;
					}
		    	}
		    }
            if(GetPlayerWeapon(playerid) == 9)
            {
				#if defined MYSQL_SYSTEM
				LIST_foreach<my_iterator>(boardList)
				{
					new board[Board];
					new Pointer:data_ptr = LIST_IT_data_ptr(my_iterator);
					MEM_get_arr(data_ptr, _, board);
					if(!board[bBoard]) continue;
			        if(IsPlayerInRangeOfPoint(playerid, 1.5, board[xBoard], board[yBoard], board[zBoard]) && board[boardResistance] > 0)
			        {
			            board[boardResistance] --;
			            if(board[boardResistance] <= 0)
			            {
		                    for(new j = 0; j < 2; j ++)
		                    {
							    x = board[xBoard] + floatdiv(RandomEx(-25, 25), 10);
								y = board[yBoard] + floatdiv(RandomEx(-25, 25), 10);
								z = board[zBoard];
								//---
								new Float:x2, Float:y2, Float:z2;
								CA_RayCastLine(board[xBoard], board[yBoard], board[zBoard], x, y, z - 2.0, x2, y2, z2);
		                        CreateItem(71, x2, y2, z2 + 1.0, false, -1);
		                    }
			                DestroyBoard(my_iterator);
			            }
			            else
			            {
							new string[45];
							strcat(string, "~n~~n~~n~~n~~n~~n~~n~~n~~n~");
							strcat(string, "~r~");
							for(new j = 0; j < board[boardResistance]; j ++) strcat(string, "|");
							GameTextForPlayer(playerid, string, 3000, 3);
						}
						MEM_set_arr(data_ptr, _, board);
						return 1;
					}
				}
				#else
			    for(new i = 0; i < MAX_BOARDS; i ++)
			    {
			        if(!dBoard[i][bBoard]) continue;
					static dBoardResistance[MAX_BOARDS] = {5, ...};
			        if(IsPlayerInRangeOfPoint(playerid, 1.5, dBoard[i][xBoard], dBoard[i][yBoard], dBoard[i][zBoard]) && dBoardResistance[i] != 0)
			        {
			            dBoardResistance[i] --;
			            if(dBoardResistance[i] <= 0)
			            {
		                    for(new j = 0; j < 2; j ++)
		                    {
							    x = dBoard[i][xBoard] + floatdiv(RandomEx(-25, 25), 10);
								y = dBoard[i][yBoard] + floatdiv(RandomEx(-25, 25), 10);
								z = dBoard[i][zBoard];
								//---
								new Float:x2, Float:y2, Float:z2;
								CA_RayCastLine(dBoard[i][xBoard], dBoard[i][yBoard], dBoard[i][zBoard], x, y, z - 2.0, x2, y2, z2);
		                        CreateItem(71, x2, y2, z2 + 1.0, false, -1);
		                    }
		                    dBoardResistance[i] = 5;
			                DestroyBoard(i);
			            }
			            else
			            {
							new string[45];
							strcat(string, "~n~~n~~n~~n~~n~~n~~n~~n~~n~");
							strcat(string, "~r~");
							for(new j = 0; j < dBoardResistance[i]; j ++) strcat(string, "|");
							GameTextForPlayer(playerid, string, 3000, 3);
						}
						return 1;
					}
				}
				#endif
		    }
		    for(new i = 0; i < MAX_PLANTS; i ++)
		    {
		        if(IsPlayerInRangeOfPoint(playerid, 1.5, dPlant[i][xPlant], dPlant[i][yPlant], dPlant[i][zPlant]) && dPlant[i][dResistance] != 0 && dPlant[i][dGrowTime] == 0)
		        {
		            if((GetPlayerWeapon(playerid) == 4 && dPlant[i][dResistance] == 1) || (GetPlayerWeapon(playerid) == 8 && dPlant[i][dResistance] <= 2) || GetPlayerWeapon(playerid) == 9)
		            {
			            dPlant[i][dResistance] --;
		                new dLogs = 0;
			            if(dPlant[i][dResistance] == 0)
			            {
			                switch(dPlant[i][dPlantID])
			                {
								case 1: dLogs = 0;
								case 2: dLogs = 2;
								case 3: dLogs = 3;
								case 4: dLogs = 1;
								case 5: dLogs = 6;
			                }
			                if(dPlant[i][dPlantID] == 1)//BLÉ
			                {
								if(RandomEx(0, 10) > 3)//On crée éventuellement des graines
								{
				                    x = dPlant[i][xPlant] + floatdiv(RandomEx(-15, 15), 10);
									y = dPlant[i][yPlant] + floatdiv(RandomEx(-15, 15), 10);
									z = dPlant[i][zPlant];
									//---
									new Float:x2, Float:y2, Float:z2;
									CA_RayCastLine(dPlant[i][xPlant], dPlant[i][yPlant], dPlant[i][zPlant], x, y, z - 2.0, x2, y2, z2);
         							CreateItem(115, x2, y2, z2 + 1.0, false, -1);
			                    }
			                    //---
				                if(RandomEx(0, 10) > 6) CreateItem(116, dPlant[i][xPlant], dPlant[i][yPlant], dPlant[i][zPlant] + 1.0, false, -1);//Et le ballot de blé
			                }
			                else if(dPlant[i][dPlantID] == 5)//SAPIN
			                {
								if(RandomEx(0, 10) > 2)//On crée éventuellement des graines
								{
				                    x = dPlant[i][xPlant] + floatdiv(RandomEx(-15, 15), 10);
									y = dPlant[i][yPlant] + floatdiv(RandomEx(-15, 15), 10);
									z = dPlant[i][zPlant];
									//---
									new Float:x2, Float:y2, Float:z2;
									CA_RayCastLine(dPlant[i][xPlant], dPlant[i][yPlant], dPlant[i][zPlant], x, y, z - 2.0, x2, y2, z2);
         							CreateItem(148, x2, y2, z2 + 1.0, false, -1);
									if(RandomEx(0, 10) > 6)//On crée éventuellement des graines
									{
					                    x = dPlant[i][xPlant] + floatdiv(RandomEx(-15, 15), 10);
										y = dPlant[i][yPlant] + floatdiv(RandomEx(-15, 15), 10);
										z = dPlant[i][zPlant];
										//---
										CA_RayCastLine(dPlant[i][xPlant], dPlant[i][yPlant], dPlant[i][zPlant], x, y, z - 2.0, x2, y2, z2);
	         							CreateItem(148, x2, y2, z2 + 1.0, false, -1);
				                    }
			                    }
			                }
			                if(dLogs != 0)
			                {
								//---
			                    for(new j = 0; j < dLogs; j ++)
			                    {
								    x = dPlant[i][xPlant] + floatdiv(RandomEx(-25, 25), 10);
									y = dPlant[i][yPlant] + floatdiv(RandomEx(-25, 25), 10);
									z = dPlant[i][zPlant];
									//---
									new Float:x2, Float:y2, Float:z2;
									CA_RayCastLine(dPlant[i][xPlant], dPlant[i][yPlant], dPlant[i][zPlant], x, y, z - 2.0, x2, y2, z2);
			                        CreateItem(71, x2, y2, z2 + 1.0, false, -1);
			                    }
								SetTimerEx("DestroyObjectEx", 15000, false, "ib", CreateDynamicObject(834, dPlant[i][xPlant], dPlant[i][yPlant], dPlant[i][zPlant] - 2.8669, 0.0, 0.0, dPlant[i][aPlant]), true);
			                }
			                DestroyPlant(i);
			            }
			            else
			            {
							new string[45];
							strcat(string, "~n~~n~~n~~n~~n~~n~~n~~n~~n~");
							strcat(string, "~r~");
							for(new j = 0; j < dPlant[i][dResistance]; j ++) strcat(string, "|");
							GameTextForPlayer(playerid, string, 3000, 3);
						}
						return 1;
					}
				}
		    }
		    if(GetPlayerWeapon(playerid) == 4 && !IsPlayerInAnyVehicle(playerid) && pThrowKnifeTimer[playerid] == -1)//Lancer de couteau
		    {
		        pThrowKnifeTimer[playerid] = SetTimerEx("IsPlayerThrowingKnife", 550, false, "i", playerid);
		    }
            //---
		}
		else if(Released(KEY_FIRE))
		{
		    if(pThrowKnifeTimer[playerid] >= 1)
			{
				KillTimer(pThrowKnifeTimer[playerid]);
				pThrowKnifeTimer[playerid] = -1;
		    }
		    else if(pThrowKnifeTimer[playerid] == 0)
		    {
		        new pWeaponSlot = HasPlayerWeapon(playerid, 4);
		        if(pWeaponSlot == 0 || GetPlayerWeapon(playerid) != 4 || IsPlayerInAnyVehicle(playerid))
		        {
		            pThrowKnifeTimer[playerid] = -1;
		            return 1;
		        }
				RemovePlayerWeapon(playerid, 4);
				ThrowPlayerKnife(playerid);
				switch(HasPlayerWeapon(playerid, 4))
				{
				    case 1:
				    {
						SetPlayerWeaponSkill(playerid, 1, WEAPON_SIMPLE);
		    			pPlayerInfos[playerid][pArme1][0] = 0;
		    			pPlayerInfos[playerid][pArme1][1] = 0;
    			    }
				    case 2:
				    {
						SetPlayerWeaponSkill(playerid, 2, WEAPON_SIMPLE);
		    			pPlayerInfos[playerid][pArme2][0] = 0;
		    			pPlayerInfos[playerid][pArme2][1] = 0;
    			    }
				    case 3:
				    {
						SetPlayerWeaponSkill(playerid, 3, WEAPON_SIMPLE);
		    			pPlayerInfos[playerid][pArme3][0] = 0;
		    			pPlayerInfos[playerid][pArme3][1] = 0;
    			    }
				    case 4:
				    {
						SetPlayerWeaponSkill(playerid, 4, WEAPON_SIMPLE);
		    			pPlayerInfos[playerid][pArme4][0] = 0;
		    			pPlayerInfos[playerid][pArme4][1] = 0;
    			    }
    			}
		    }
		}
	}
	return 1;
}

public OnPlayerPressDirectionKey(playerid, newkeys, oldkeys)
{
	if(!FCNPC_IsValid(playerid))
	{
		if(Pressed(KEY_LEFT))//GAUCHE
		{
		    if(CallRemoteFunction("GetPlayerShop", "i", playerid))
		    {
		        CallRemoteFunction("NextShopItemForPlayer", "ib", playerid, false);
		        return 1;
		    }
		}
		else if(Pressed(KEY_RIGHT))//DROITE
		{
		    if(CallRemoteFunction("GetPlayerShop", "i", playerid))
		    {
		        CallRemoteFunction("NextShopItemForPlayer", "ib", playerid, true);
		        return 1;
		    }
		}
	}
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	return 1;
}

public OnPlayerUpdate(playerid)
{
	if(!FCNPC_IsValid(playerid))
	{
		static pOldWeapon[MAX_PLAYERS];
	    new dCurrentWeapon = GetPlayerWeapon(playerid);
	    if(dCurrentWeapon != pOldWeapon[playerid])
	    {
	        OnPlayerChangeWeapon(playerid, pOldWeapon[playerid], dCurrentWeapon);
	        pOldWeapon[playerid] = dCurrentWeapon;
	    }
	    //---
		new lastcheck;
		if(gettime() - lastcheck > 90)
		{
			new key, ud, lr;
			GetPlayerKeys(playerid, key, ud, lr);
			if(ud == KEY_UP || ud == KEY_DOWN || lr == KEY_RIGHT || lr == KEY_LEFT)
			{
			    if(lr == KEY_RIGHT) OnPlayerPressDirectionKey(playerid, KEY_RIGHT, NO_KEY);
			    else if(lr == KEY_LEFT) OnPlayerPressDirectionKey(playerid, KEY_LEFT, NO_KEY);
			    if(ud == KEY_UP) OnPlayerPressDirectionKey(playerid, KEY_UP, NO_KEY);
			    else if(ud == KEY_DOWN) OnPlayerPressDirectionKey(playerid, KEY_DOWN, NO_KEY);
			}
			lastcheck = gettime();
		}
		//---
    }
    return 1;
}

public OnPlayerChangeWeapon(playerid, oldweapon, newweapon)
{
    new dOldWeaponSlot = HasPlayerWeapon(playerid, oldweapon);
    new dNewWeaponSlot = HasPlayerWeapon(playerid, newweapon);
	if(dNewWeaponSlot != 0) DressPlayer(playerid, dNewWeaponSlot + 4);
	if(dOldWeaponSlot != 0) DressPlayer(playerid, dOldWeaponSlot + 4);
	//---
	if(oldweapon == 4 && pThrowKnifeTimer[playerid] != -1)//Lancer de couteau
	{
 		if(pThrowKnifeTimer[playerid] == 0)
 		{
 		    pThrowKnifeTimer[playerid] = -1;
			TextDrawHideForPlayer(playerid, tKnifeAim);
 		}
 		else
 		{
		 	KillTimer(pThrowKnifeTimer[playerid]);
			pThrowKnifeTimer[playerid] = -1;
		}
	}
	return 1;
}

/*public OnRNPCPlaybackFinished(npcid)
{
	for(new i = 0; i < MAX_ZOMBIES; i ++)
	{
	    if(dZombie[i][dZombieID] == npcid)
	    {
			if(dZombie[i][bZombiePlayBack])
			{
				dZombie[i][bZombiePlayBack] = false;
			}
			break;
	    }
	}
	return 1;
}*/

public OnPlayerStreamIn(playerid, forplayerid)
{
	if(pGroup[playerid] != -1)
	{
	    if(pGroup[playerid] == pGroup[forplayerid])
	    {
            SetPlayerMarkerForPlayer(forplayerid, playerid, BLEU);
	    }
	}
	//---
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	new string[150];
	new sLangue[25];
	new sCol[2][9] = {"{00F000}", "{CC0000}"};
	switch(dialogid)
	{
	    case 0://LANGUE
	    {
	        if(!bLangue[listitem])
	        {
				format(sLangue, sizeof(sLangue), "%sEnglish\n", sCol[bLangue[0] ? 0 : 1]);
				strcat(string, sLangue);
				format(sLangue, sizeof(sLangue), "%sFrançais\n", sCol[bLangue[1] ? 0 : 1]);
				strcat(string, sLangue);
				format(sLangue, sizeof(sLangue), "%sEspañol\n", sCol[bLangue[2] ? 0 : 1]);
				strcat(string, sLangue);
				format(sLangue, sizeof(sLangue), "%sPortuguês\n", sCol[bLangue[3] ? 0 : 1]);
				strcat(string, sLangue);
				format(sLangue, sizeof(sLangue), "%sItaliano\n", sCol[bLangue[4] ? 0 : 1]);
				strcat(string, sLangue);
				format(sLangue, sizeof(sLangue), "%sDeutsch\n", sCol[bLangue[5] ? 0 : 1]);
				strcat(string, sLangue);
				//---
				ShowPlayerDialog(playerid, 0, DIALOG_STYLE_LIST, "Language", string, "OK", "");
				return 1;
			}
			//---
	        pPlayerInfos[playerid][pLangue] = listitem;
	        ShowPlayerTextInfo(playerid, -1, "You have chosen ~r~English.", "Vous avez choisi le ~r~Français.", "Ha usted eligido español.", "Portugais", "Italien", "Allemand");
	        SendClientMessageEx(playerid, VERT_FONCE, "You have chosen {CC0000}English.", "Vous avez choisi le {CC0000}Français.", "Ha usted eligido {CC0000}Español.", "Portugais", "Italien", "Allemand");
	        switch(pPlayerInfos[playerid][pLangue])
	        {
	            case LANGUAGE_EN: ShowPlayerDialog(playerid, 1, DIALOG_STYLE_PASSWORD, "Password", "{FFFFFF}Enter a {CC0000}password {FFFFFF}to create your account:", "Register", "Leave");
	            case LANGUAGE_FR: ShowPlayerDialog(playerid, 1, DIALOG_STYLE_PASSWORD, "Mot de passe", "{FFFFFF}Entrez un {CC0000}mot de passe {FFFFFF}pour créer votre compte:", "Créer", "Quitter");
	            case LANGUAGE_ES: ShowPlayerDialog(playerid, 1, DIALOG_STYLE_PASSWORD, "Contraseña", "{FFFFFF}Escriba un {CC0000}contraseña {FFFFFF}para crear su cuenta:", "Crear", "Dejar");
	            case LANGUAGE_PG: ShowPlayerDialog(playerid, 1, DIALOG_STYLE_PASSWORD, "Portugais", "Portugais", "Portugais", "Portugais");
				case LANGUAGE_IT: ShowPlayerDialog(playerid, 1, DIALOG_STYLE_PASSWORD, "Password", "{FFFFFF}Scrivete un {CC0000}password {FFFFFF}per creare vostro conto:", "Creare", "Lasciare");
				case LANGUAGE_DE: ShowPlayerDialog(playerid, 1, DIALOG_STYLE_PASSWORD, "Kennwort", "{FFFFFF}Schreiben sie einem {CC0000}kennwort {FFFFFF}fur ihren konto schaffen:", "Schaffen", "Verlassen");
	        }
	    }
	    case 1://REGISTER
	    {
			if(response)
			{
				if(!strlen(inputtext) || strlen(inputtext) > 30)
				{
		   			switch(pPlayerInfos[playerid][pLangue])
		   			{
			            case LANGUAGE_EN: ShowPlayerDialog(playerid, 1, DIALOG_STYLE_PASSWORD, "Password", "{CC0000}Wrong password.\n{FFFFFF}Enter a {CC0000}password {FFFFFF}to create your account:", "Register", "Leave");
			            case LANGUAGE_FR: ShowPlayerDialog(playerid, 1, DIALOG_STYLE_PASSWORD, "Mot de passe", "{CC0000}Mauvais mot de passe.\n{FFFFFF}Entrez un {CC0000}mot de passe {FFFFFF}pour créer votre compte:", "Créer", "Quitter");
			            case LANGUAGE_ES: ShowPlayerDialog(playerid, 1, DIALOG_STYLE_PASSWORD, "Contraseña", "{CC0000}Contraseña incorrecta.\n{FFFFFF}Escriba un {CC0000}contraseña {FFFFFF}para crear su cuenta:", "Crear", "Dejar");
			            case LANGUAGE_PG: ShowPlayerDialog(playerid, 1, DIALOG_STYLE_PASSWORD, "Portugais", "Portugais", "Portugais", "Portugais");
						case LANGUAGE_IT: ShowPlayerDialog(playerid, 1, DIALOG_STYLE_PASSWORD, "Password", "{CC0000}Password errata.\n{FFFFFF}Scrivete un {CC0000}password {FFFFFF}per creare vostro conto:", "Creare", "Lasciare");
						case LANGUAGE_DE: ShowPlayerDialog(playerid, 1, DIALOG_STYLE_PASSWORD, "Kennwort", "{CC0000}Falsches kennwort.\n{FFFFFF}Schreiben sie einem {CC0000}kennwort {FFFFFF}fur ihren konto schaffen:", "Schaffen", "Verlassen");
					}
					return 1;
				}
				AddPlayerToIP(GetName(playerid), GetIPFromPlayer(playerid));
				AddIPToPlayer(GetIPFromPlayer(playerid), GetName(playerid));
				//mysql_format(MySQL, string, sizeof(string), "INSERT INTO `players` (username, gold) VALUES ('%s', '%d')", GetName(playerid), 0);
			    //mysql_query(MySQL, string);
			    //---
			    if(IsIPBanned(GetIPFromPlayer(playerid))) return aBan(INVALID_PLAYER_ID, playerid, 1, "Banned IP");
				//---
				HidePlayerTextInfo(playerid);
				//---
			    new INI:File = INI_Open(UserPath(playerid));
			    INI_SetTag(File,"data");
			    INI_WriteInt(File,"Password", udb_hash(inputtext));
			    //---
				new date[6];
				getdate(date[0], date[1], date[2]);
				gettime(date[3], date[4], date[5]);
				format(string, sizeof(string), "%d/%d/%d - %d:%d:%d", date[2], date[1], date[0], date[3], date[4], date[5]);
				INI_WriteString(File,"FirstCo", string);
				INI_WriteString(File,"LastConnection", string);
				strcpy(pPlayerInfos[playerid][sFirstCo], string);
				strcpy(pPlayerInfos[playerid][sLastCo], string);
				//---
			    INI_WriteInt(File,"Admin", 0);
			    INI_WriteInt(File,"VIP", 0);
			    INI_WriteInt(File,"VIPTime", 0);
				INI_WriteInt(File,"Ban", 0);
			    INI_WriteInt(File,"Langue", pPlayerInfos[playerid][pLangue]);
			    INI_WriteInt(File,"Or", 0);
			    INI_WriteInt(File,"Kills", 0);
			    INI_WriteInt(File,"Morts", 0);
			    INI_WriteInt(File,"TempsDeJeu", 0);
			    INI_WriteInt(File,"Sac", 1);
			    INI_WriteInt(File,"Faim", 100);
			    INI_WriteInt(File,"Soif", 100);
			    INI_WriteInt(File,"Sommeil", 100);
			    INI_WriteInt(File,"Vie", 1000);
			    INI_WriteInt(File,"Armure", 1000);
			    INI_WriteFloat(File,"X", 0.0);
			    INI_WriteFloat(File,"Y", 0.0);
			    INI_WriteFloat(File,"Z", 0.0);
			    INI_WriteFloat(File,"A", 0.0);
			    INI_WriteBool(File,"Jambe", true);
			    INI_WriteInt(File,"Temperature", 370);
			    INI_WriteInt(File,"Skin", 0);
			    INI_WriteInt(File,"Chapeau", 0);
			    INI_WriteInt(File,"Lunettes", 0);
			    INI_WriteInt(File,"Masque", 0);
			    INI_WriteInt(File,"Torse", 0);
			    INI_WriteInt(File,"Camouflage", 0);
			    INI_WriteInt(File,"Arme1", 0);
			    INI_WriteInt(File,"Arme1Muns", 0);
			    INI_WriteInt(File,"Arme2", 0);
			    INI_WriteInt(File,"Arme2Muns", 0);
			    INI_WriteInt(File,"Arme3", 0);
			    INI_WriteInt(File,"Arme3Muns", 0);
			    INI_WriteInt(File,"Arme4", 0);
			    INI_WriteInt(File,"Arme4Muns", 0);
			    //---
			    INI_WriteInt(File,"Password", udb_hash(inputtext));
			    INI_WriteInt(File,"Admin", 0);
			    INI_WriteInt(File,"Langue", pPlayerInfos[playerid][pLangue]);
			    INI_WriteInt(File,"Or", 0);
			    INI_WriteInt(File,"Kills", 0);
			    INI_WriteInt(File,"Morts", 0);
			    INI_WriteInt(File,"TempsDeJeu", 0);
			    INI_WriteInt(File,"Sac", 1);
			    INI_WriteInt(File,"Faim", 100);
			    INI_WriteInt(File,"Soif", 100);
			    INI_WriteInt(File,"Sommeil", 100);
			    INI_WriteInt(File,"Vie", 1000);
			    INI_WriteInt(File,"Armure", 1000);
			    INI_WriteFloat(File,"X", 0.0);
			    INI_WriteFloat(File,"Y", 0.0);
			    INI_WriteFloat(File,"Z", 0.0);
			    INI_WriteFloat(File,"A", 0.0);
			    INI_WriteBool(File,"Jambe", true);
				INI_WriteInt(File,"Temperature", 370);
			    //ARMES
			    INI_WriteInt(File,"Arme1", 0);
			    INI_WriteInt(File,"Arme1Muns", 0);
			    INI_WriteInt(File,"Arme2", 0);
			    INI_WriteInt(File,"Arme2Muns", 0);
			    INI_WriteInt(File,"Arme3", 0);
			    INI_WriteInt(File,"Arme3Muns", 0);
			    INI_WriteInt(File,"Arme4", 0);
			    INI_WriteInt(File,"Arme4Muns", 0);
			    //VÊTEMENTS
			    INI_WriteInt(File,"Skin", 0);
			    INI_WriteInt(File,"Chapeau", 0);
			    INI_WriteFloat(File,"PosChapeau1", 0.0);
			    INI_WriteFloat(File,"PosChapeau2", 0.0);
			    INI_WriteFloat(File,"PosChapeau3", 0.0);
			    INI_WriteFloat(File,"PosChapeau4", 0.0);
			    INI_WriteFloat(File,"PosChapeau5", 0.0);
			    INI_WriteFloat(File,"PosChapeau6", 0.0);
			    INI_WriteFloat(File,"PosChapeau7", 0.0);
			    INI_WriteFloat(File,"PosChapeau8", 0.0);
			    INI_WriteFloat(File,"PosChapeau9", 0.0);
			    INI_WriteInt(File,"Lunettes", 0);
			    INI_WriteFloat(File,"PosLunettes1", 0.0);
			    INI_WriteFloat(File,"PosLunettes2", 0.0);
			    INI_WriteFloat(File,"PosLunettes3", 0.0);
			    INI_WriteFloat(File,"PosLunettes4", 0.0);
			    INI_WriteFloat(File,"PosLunettes5", 0.0);
			    INI_WriteFloat(File,"PosLunettes6", 0.0);
			    INI_WriteFloat(File,"PosLunettes7", 0.0);
			    INI_WriteFloat(File,"PosLunettes8", 0.0);
			    INI_WriteFloat(File,"PosLunettes9", 0.0);
			    INI_WriteInt(File,"Masque", 0);
			    INI_WriteFloat(File,"PosMasque1", 0.0);
			    INI_WriteFloat(File,"PosMasque2", 0.0);
			    INI_WriteFloat(File,"PosMasque3", 0.0);
			    INI_WriteFloat(File,"PosMasque4", 0.0);
			    INI_WriteFloat(File,"PosMasque5", 0.0);
			    INI_WriteFloat(File,"PosMasque6", 0.0);
			    INI_WriteFloat(File,"PosMasque7", 0.0);
			    INI_WriteFloat(File,"PosMasque8", 0.0);
			    INI_WriteFloat(File,"PosMasque9", 0.0);
			    INI_WriteInt(File,"Torse", 0);
			    INI_WriteFloat(File,"PosTorse1", 0.0);
			    INI_WriteFloat(File,"PosTorse2", 0.0);
			    INI_WriteFloat(File,"PosTorse3", 0.0);
			    INI_WriteFloat(File,"PosTorse4", 0.0);
			    INI_WriteFloat(File,"PosTorse5", 0.0);
			    INI_WriteFloat(File,"PosTorse6", 0.0);
			    INI_WriteFloat(File,"PosTorse7", 0.0);
			    INI_WriteFloat(File,"PosTorse8", 0.0);
			    INI_WriteFloat(File,"PosTorse9", 0.0);
			    //INVENTAIRE
			    INI_WriteInt(File,"ObjetMain", 0);
			    INI_WriteInt(File,"Objet1", 0);
			    INI_WriteInt(File,"Objet2", 0);
			    INI_WriteInt(File,"Objet3", 0);
			    INI_WriteInt(File,"Objet4", 0);
			    INI_WriteInt(File,"Objet5", 0);
			    INI_WriteInt(File,"Objet6", 0);
			    INI_WriteInt(File,"Objet7", 0);
			    INI_WriteInt(File,"Objet8", 0);
			    INI_WriteInt(File,"Objet9", 0);
			    INI_WriteInt(File,"Objet10", 0);
			    INI_WriteInt(File,"Objet11", 0);
			    INI_WriteInt(File,"Objet12", 0);
			    INI_WriteInt(File,"Objet13", 0);
			    INI_WriteInt(File,"Objet14", 0);
			    INI_WriteInt(File,"Objet15", 0);
			    INI_WriteInt(File,"Objet16", 0);
			    INI_WriteInt(File,"Objet17", 0);
			    INI_WriteInt(File,"Objet18", 0);
			    INI_WriteInt(File,"Objet19", 0);
			    INI_WriteInt(File,"Objet20", 0);
			    INI_WriteInt(File,"Objet21", 0);
			    INI_WriteInt(File,"Objet22", 0);
			    INI_WriteInt(File,"Objet23", 0);
			    INI_WriteInt(File,"Objet24", 0);
			    INI_WriteInt(File,"Objet25", 0);
			    INI_WriteInt(File,"Objet26", 0);
			    INI_WriteInt(File,"Objet27", 0);
			    INI_WriteInt(File,"Objet28", 0);
			    INI_WriteInt(File,"Objet29", 0);
			    INI_WriteInt(File,"Objet30", 0);
			    INI_WriteInt(File,"Objet31", 0);
			    INI_WriteInt(File,"Objet32", 0);
			    INI_WriteInt(File,"Objet33", 0);
			    INI_WriteInt(File,"Objet34", 0);
			    INI_WriteInt(File,"Objet35", 0);
			    INI_WriteInt(File,"Objet36", 0);
			    //---
			    INI_WriteInt(File,"Level", 1);
			    INI_WriteInt(File,"Exp", 0);
			    INI_WriteInt(File,"PointsCompetence", 0);
			    //---
			    INI_WriteInt(File,"Boucher", 0);
			    INI_WriteInt(File,"Medecine", 0);
			    INI_WriteInt(File,"Sante", 0);
			    INI_WriteInt(File,"Artisan", 0);
			    INI_WriteInt(File,"Transporteur", 0);
			    INI_WriteInt(File,"Pecheur", 0);
			    INI_WriteInt(File,"Mecano", 0);
			    INI_WriteInt(File,"Jardinie", 0);
			    INI_WriteInt(File,"Athlete", 0);
			    //---
			    INI_WriteBool(File,"Aide1", false);
			    INI_WriteBool(File,"Aide2", false);
			    INI_WriteBool(File,"Aide3", false);
			    INI_WriteBool(File,"Aide4", false);
			    INI_WriteBool(File,"Aide5", false);
			    INI_WriteBool(File,"Aide6", false);
			    INI_WriteBool(File,"Aide7", false);
			    INI_WriteBool(File,"Aide8", false);
			    INI_WriteBool(File,"Aide9", false);
			    INI_WriteBool(File,"Aide10", false);
			    INI_WriteBool(File,"Aide11", false);
			    INI_WriteBool(File,"Aide12", false);
			    INI_WriteBool(File,"Aide13", false);
			    INI_WriteBool(File,"Aide14", false);
			    INI_WriteBool(File,"Aide15", false);
			    INI_WriteBool(File,"Aide16", false);
			    //---
    			INI_WriteInt(File,"MissionReggae", 0);
			    INI_Close(File);
				//------------------------------CRÉATION DE TEXTDRAWS------------------------------------------------//
				CreatePlayerInventoryText(playerid);
				CreatePlayerInfoTexts(playerid);
				//---
				switch(pPlayerInfos[playerid][pLangue])
		        {
		            case LANGUAGE_EN: format(string, sizeof(string), "{0000FF}Username: {FFFF00}%s\n{0000FF}Password: {FFFF00}%s\n{0000FF}You can now choose your skin.", GetName(playerid), inputtext), ShowPlayerDialog(playerid, 3, DIALOG_STYLE_MSGBOX, "Password", string, "Ok", "");
		            case LANGUAGE_FR: format(string, sizeof(string), "{0000FF}Nom: {FFFF00}%s\n{0000FF}Mot de passe: {FFFF00}%s\nVous pouvez maintenant choisir un skin.", GetName(playerid), inputtext), ShowPlayerDialog(playerid, 3, DIALOG_STYLE_MSGBOX, "Mot de passe", string, "Ok", "");
		            case LANGUAGE_ES: format(string, sizeof(string), "{0000FF}Nombre: {FFFF00}%s\n{0000FF}Contraseña: {FFFF00}%s\nPuede elegir un personaje.", GetName(playerid), inputtext), ShowPlayerDialog(playerid, 3, DIALOG_STYLE_MSGBOX, "Contraseña", string, "Ok", "");
		            case LANGUAGE_PG: format(string, sizeof(string), "{0000FF}Portugais: {FFFF00}%s\n{0000FF}Portugais: {FFFF00}%s\nPortugais.", GetName(playerid), inputtext), ShowPlayerDialog(playerid, 3, DIALOG_STYLE_MSGBOX, "Portugais", string, "Ok", "");
					case LANGUAGE_IT: format(string, sizeof(string), "{0000FF}Nomme: {FFFF00}%s\n{0000FF}Password: {FFFF00}%s\nSi potete sceliere un skin.", GetName(playerid), inputtext), ShowPlayerDialog(playerid, 3, DIALOG_STYLE_MSGBOX, "Password", string, "Ok", "");
					case LANGUAGE_DE: format(string, sizeof(string), "{0000FF}Name: {FFFF00}%s\n{0000FF}Kennwort: {FFFF00}%s\nSie können einem skin wählen.", GetName(playerid), inputtext), ShowPlayerDialog(playerid, 3, DIALOG_STYLE_MSGBOX, "Kennwort", string, "Ok", "");
		        }
		        //---
				tPlayerSkin[playerid] = CreatePlayerTextDraw(playerid,260.000000, 140.000000, "Skin");
				PlayerTextDrawBackgroundColor(playerid,tPlayerSkin[playerid], 0);
				PlayerTextDrawFont(playerid,tPlayerSkin[playerid], 5);
				PlayerTextDrawLetterSize(playerid,tPlayerSkin[playerid], 0.500000, 1.000000);
				PlayerTextDrawColor(playerid,tPlayerSkin[playerid], -1);
				PlayerTextDrawSetOutline(playerid,tPlayerSkin[playerid], 0);
				PlayerTextDrawSetProportional(playerid,tPlayerSkin[playerid], 1);
				PlayerTextDrawSetShadow(playerid,tPlayerSkin[playerid], 1);
				PlayerTextDrawUseBox(playerid,tPlayerSkin[playerid], 1);
				PlayerTextDrawBoxColor(playerid,tPlayerSkin[playerid], 255);
				PlayerTextDrawTextSize(playerid,tPlayerSkin[playerid], 160.000000, 140.000000);
				PlayerTextDrawSetPreviewModel(playerid, tPlayerSkin[playerid], 0);
				PlayerTextDrawSetPreviewRot(playerid, tPlayerSkin[playerid], 0.000000, 0.000000, 0.000000, 1.000000);
				PlayerTextDrawSetSelectable(playerid,tPlayerSkin[playerid], 0);
				//---
				pPlayerInfos[playerid][pSkin] = 0;
				pChooseSkin[playerid] = 0;
				for(new i = 0; i < 6; i ++) TextDrawShowForPlayer(playerid, tSkinSelect[i]);
				PlayerTextDrawShow(playerid, tPlayerSkin[playerid]);
		        //---
				pPlayerInfos[playerid][pPass] = udb_hash(inputtext);
				SetPlayerAdminLevel(playerid, 0);
				SetPlayerColor(playerid, 0xCC000000);
				TogglePlayerControllable(playerid, false);
				//---
				if(!strcmp(GetName(playerid), OWNER_NAME, true))
				{
				    SetPlayerAdminLevel(playerid, OWNER);
				}
			}
			else
			{
	        	SendClientMessageEx(playerid, VERT_FONCE, "You didn't enter a password.", "Vous n'avez pas choisi de mot de passe.", "No ha escribo no contraseña.", "Portugais", "Italien", "Allemand");
				bKick[playerid] = true;
			}
	    }
	    case 2://LOGIN
	    {
	        if(response)
	        {
				if(udb_hash(inputtext) == pPlayerInfos[playerid][pPass])
				{
					//------------------------------CRÉATION DE TEXTDRAWS------------------------------------------------//
					CreatePlayerInventoryText(playerid);
					CreatePlayerInfoTexts(playerid);
				    //---
					SetPlayerColor(playerid, 0xCC000000);
					pPlayerInfos[playerid][dLogState] = UNSPAWNED;
					//---
					switch(pPlayerInfos[playerid][pLangue])
			        {
			            case LANGUAGE_EN: ShowPlayerDialog(playerid, 4, DIALOG_STYLE_MSGBOX, "Password", "You are connected.\nYou can play now.", "Spawn", "");
			            case LANGUAGE_FR: ShowPlayerDialog(playerid, 4, DIALOG_STYLE_MSGBOX, "Mot de passe", "Vous êtes connecté.\nVous pouvez jouer maintenant.", "Spawn", "");
			            case LANGUAGE_ES: ShowPlayerDialog(playerid, 4, DIALOG_STYLE_MSGBOX, "Contraseña", "Esta connectado.\nPuede juegar ahora.", "Spawn", "");
			            case LANGUAGE_PG: ShowPlayerDialog(playerid, 4, DIALOG_STYLE_MSGBOX, "Portugais", "Portugais", "Spawn", "");
						case LANGUAGE_IT: ShowPlayerDialog(playerid, 4, DIALOG_STYLE_MSGBOX, "Password", "Sei connectado.\nSi potete giocare adesso.", "Spawn", "");
						case LANGUAGE_DE: ShowPlayerDialog(playerid, 4, DIALOG_STYLE_MSGBOX, "Kennwort", "Sie sind verbuden\nSie können spielen jetzt." , "Spawn", "");
			        }
			        //---
					AddPlayerToIP(GetName(playerid), GetIPFromPlayer(playerid));
					AddIPToPlayer(GetIPFromPlayer(playerid), GetName(playerid));
					if(gettime() > pPlayerInfos[playerid][pBan]) UnbanAllPlayerIP(GetName(playerid));
			        if(gettime() < pPlayerInfos[playerid][pBan] && IsIPBanned(GetIPFromPlayer(playerid))) return aBan(INVALID_PLAYER_ID, playerid, 1, "Banned IP");
					//---
					if(pPlayerInfos[playerid][pBan] == -1)
					{
		   			    SendClientMessageEx(playerid, ADMIN_COLOR, "[ADMIN]You are banned for life.", "[ADMIN]Vous êtes banni à vie.", "Espagnol", "Portugais", "Italien", "Allemand");
		   			    aBan(INVALID_PLAYER_ID, playerid, -1, "Ban evade");
					}
					else if(pPlayerInfos[playerid][pBan] > gettime())
		   			{
		   			    SendClientMessageEx(playerid, ADMIN_COLOR, "[ADMIN]You get 24 extra ban hours for this ban evade.", "[ADMIN]Vous gagnez 24 heures de ban supplémentaire pour avoir ban evade.", "Espagnol", "Portugais", "Italien", "Allemand");
		   			    aBan(INVALID_PLAYER_ID, playerid, 1, "Ban evade");
		   			}
		   			//---
					if(pPlayerInfos[playerid][pAdmin] > PLAYER) TextDrawShowForPlayer(playerid, tAdmin);
					else TextDrawHideForPlayer(playerid, tAdmin);
					//---
					if(!strcmp(GetName(playerid), OWNER_NAME, true))
					{
				    	SetPlayerAdminLevel(playerid, OWNER);
					}
					
				}
				else
				{
		   			switch(pPlayerInfos[playerid][pLangue])
		   			{
		   			    case LANGUAGE_EN: ShowPlayerDialog(playerid, 2, DIALOG_STYLE_PASSWORD, "Connection", "{CC0000}Wrong password.\n{ffffff}Enter your password:\n\n\nIf it does not work, try {CC0000}123456", "Connection", "Leave");
		   			    case LANGUAGE_FR: ShowPlayerDialog(playerid, 2, DIALOG_STYLE_PASSWORD,"Connexion", "{CC0000}Mauvais mot de passe.\n{ffffff}Veuillez entrer ci-dessous votre mot de passe:\n\n\nS'il ne fonctionne pas, essayez {CC0000}123456", "Connexion", "Quitter");
		   			    case LANGUAGE_ES: ShowPlayerDialog(playerid, 2, DIALOG_STYLE_PASSWORD, "Conneccion", "{CC0000}Contraseña incorrecta.\n{ffffff}Escribe su contraseña por favor:\n\n\nSi no funcciona, pruebe {CC0000}123456", "Connectar", "Dejar");
		   			    case LANGUAGE_PG: ShowPlayerDialog(playerid, 2, DIALOG_STYLE_PASSWORD, "Portugais", "{CC0000}Portugais {ff0000}Survive-all.\n{ffffff}Portugais:\n\n\nPortugais {CC0000}123456", "Portugais", "Portugais");
		   			    case LANGUAGE_IT: ShowPlayerDialog(playerid, 2, DIALOG_STYLE_PASSWORD, "Italien", "{CC0000}Password errata {ff0000}Survive-all.\n{ffffff}Italien:\n\n\nItalien {CC0000}123456", "Italien", "Italien");
		   			    case LANGUAGE_DE: ShowPlayerDialog(playerid, 2, DIALOG_STYLE_PASSWORD, "Conneccion", "{CC0000}Falsches kennwort.\n{ffffff}Bitten ihren kennwort schreiben:\n\n\nWenn es nicht funktioniert, schreiben sie {CC0000}123456", "Connectieren", "Schaffen");
		   			}
				}
				TogglePlayerControllable(playerid, false);
	        }
			else
			{
	        	SendClientMessageEx(playerid, VERT_FONCE, "You didn't enter your password.", "Vous n'avez pas choisi votre mot de passe.", "No ha escribo su contraseña.", "Portugais", "Italien", "Allemand");
				bKick[playerid] = true;
			}
	    }
	    case 3://CHOIX SKIN
	    {
			SelectTextDraw(playerid, ROUGE);
	    }
	    case 4://SPAWN
	    {
			if(!IsHUDHiddenForPlayer(playerid))
			{
		        #if defined RADAR_HIDDEN
		        for(new i = 0; i < 9; i ++) TextDrawShowForPlayer(playerid, tHUDFont[i]);
				#else
		        for(new i = 0; i < 8; i ++) TextDrawShowForPlayer(playerid, tHUDFont[i]);
				#endif
			}
			SetPlayerScore(playerid, 0);
			//TextDrawHideForPlayer(playerid, tConnection);
			TogglePlayerControllable(playerid, true);
			//---
			pPlayerInfos[playerid][dLogState] = SPAWNED;
			//---
			SetSpawnInfo(playerid, 0, (pPlayerInfos[playerid][pSkin] > 311) ? 252 : pPlayerInfos[playerid][pSkin], 0.0, 0.0, 3.0, 0.0, 0, 0, 0, 0, 0, 0);
		    SpawnPlayer(playerid);
		    OnPlayerSpawn(playerid);
			pPlayerTag[playerid] = Create3DTextLabel(GetName(playerid), BLEU, 0.0, 0.0, 0.0, TAG_DISTANCE, -1, 1);
			UpdatePlayerTag(playerid);
	        StopAudioStreamForPlayer(playerid);
	        CallRemoteFunction("DestroyMapping", "i", playerid);//Fonction pour détruire certains objets de la map
	        LoadAnimations(playerid);
		    //---
			if(LoadMissionProgress(playerid, "Intro") == 0)
			{
				CallRemoteFunction("OnCinematicGoesOn", "iiii", playerid, 100, 0, 0);
			}
			else
			{
			    ShowPlayerRules(playerid);
			}
			//---
			SetPlayerWeather(playerid, dEnvironment[dMeteo]);
			SetPlayerTime(playerid, dEnvironment[dHours], dEnvironment[dMins]);
			//---AJOUT DE L'OR
			new dGoldToRecieve = LoadPlayerExtraGold(playerid);
			if(dGoldToRecieve != 0)
			{
				switch(pPlayerInfos[playerid][pLangue])
			    {
				    case LANGUAGE_EN: format(string, sizeof(string), "You recieve {FFD700}%.1f grams of gold{FFFF00}!", floatdiv(dGoldToRecieve, 10));
				    case LANGUAGE_FR: format(string, sizeof(string), "Vous recevez {FFD700}%.1f grammes d'or {FFFF00}!", floatdiv(dGoldToRecieve, 10));
				    case LANGUAGE_ES: format(string, sizeof(string), "Espagnol {FFD700}%.1f espagnol {FFFF00}!", floatdiv(dGoldToRecieve, 10));
				    case LANGUAGE_PG: format(string, sizeof(string), "Portugais {FFD700}%.1 portugais{FFFF00}", floatdiv(dGoldToRecieve, 10));
					case LANGUAGE_IT: format(string, sizeof(string), "Italien {FFD700}%.1 italien{FFFF00}", floatdiv(dGoldToRecieve, 10));
					case LANGUAGE_DE: format(string, sizeof(string), "Sie erhalten {FFD700}%.1f Gramm Gold{FFFF00}!", floatdiv(dGoldToRecieve, 10));
				}
				SendClientMessageEx(playerid, JAUNE, string, string, string, string, string, string);
				GivePlayerGold(playerid, dGoldToRecieve);
 			}
			//---
			format(string, sizeof(string), OFFPATH, GetName(playerid));
			if(fexist(string))
			{
				INI_ParseFile(string, "LoadUserOffline_%s", .bExtra = true, .extra = playerid);
			}
			//---
			if(pPlayerOfflineInfos[playerid][dRecievedGold] != 0)
			{
				switch(GetPlayerLanguage(playerid))
				{
				    case LANGUAGE_EN: format(string, sizeof(string), "[SALE]Your offline sales have paid you {FFFF00}%.1fg {784F10}of gold!", floatdiv(pPlayerOfflineInfos[playerid][dRecievedGold], 10));
				    case LANGUAGE_FR: format(string, sizeof(string), "[VENTE]Vos ventes hors ligne vous ont rapporté {FFFF00}%.1fg {784F10}d'or !", floatdiv(pPlayerOfflineInfos[playerid][dRecievedGold], 10));
				    case LANGUAGE_ES: format(string, sizeof(string), "%s~n~Espagnol: %.1fg", floatdiv(pPlayerOfflineInfos[playerid][dRecievedGold], 10));
				    case LANGUAGE_PG: format(string, sizeof(string), "%s~n~Portugais: %.1fg", floatdiv(pPlayerOfflineInfos[playerid][dRecievedGold], 10));
				    case LANGUAGE_IT: format(string, sizeof(string), "%s~n~Italien: %.1fg", floatdiv(pPlayerOfflineInfos[playerid][dRecievedGold], 10));
				    case LANGUAGE_DE: format(string, sizeof(string), "%s~n~Allemand: %.1fg", floatdiv(pPlayerOfflineInfos[playerid][dRecievedGold], 10));
				}
				SendClientMessageEx(playerid, BRUN, string, string, string, string, string, string);
				GivePlayerGold(playerid, pPlayerOfflineInfos[playerid][dRecievedGold]);
				pPlayerOfflineInfos[playerid][dRecievedGold] = 0;
			}
			if(IsThereUnsoldItem(playerid))
		    {
				SendClientMessageEx(playerid, BRUN, "Items at the auction house haven't been sold, you'd better take them back.", "Certains objets à l'hôtel des ventes n'ont pas été vendus, vous pouvez aller les reprendre.", "Espagnol", "Portugais", "Italien", "Allemand");
		    }
	    }
	    case 5://TRAITEMENT DES OBJETS
	    {
	        if(response)
	        {
		        switch(pUseInventory[playerid])
		        {
		            //---ARMES---//
		            case 1:
		            {
		                if(listitem == 0)//
					  	{
					        if(GetPlayerWeaponSkill(playerid, 1) == WEAPON_AKIMBO)
							{
								PlayerDropWeapon(playerid, pPlayerInfos[playerid][pArme1][0], floatround(floatdiv(pPlayerInfos[playerid][pArme1][1], 2), floatround_round), floatdiv(RandomEx(5, 20), 10));
								PlayerDropWeapon(playerid, pPlayerInfos[playerid][pArme1][0], floatround(floatdiv(pPlayerInfos[playerid][pArme1][1], 2), floatround_round), floatdiv(RandomEx(5, 20), 10));
							}
							else
							{
								PlayerDropWeapon(playerid, pPlayerInfos[playerid][pArme1][0], pPlayerInfos[playerid][pArme1][1], floatdiv(RandomEx(5, 20), 10));
							}
							PlayerPlaySound(playerid, 1131, 0.0, 0.0, 0.0);
							SetPlayerWeaponSkill(playerid, 1, WEAPON_SIMPLE);
							RemovePlayerWeapon(playerid, pPlayerInfos[playerid][pArme1][0]);
			                pPlayerInfos[playerid][pArme1][0] = 0;
			                pPlayerInfos[playerid][pArme1][1] = 0;
							CloseTextDraws(playerid);
		                }
		                else if(listitem == 1)//RANGER
		                {
		                    new rackid = IsPlayerNearRack(playerid);
							if(rackid != -1)
							{
								new slotid = GetRackNextFreeSlot(rackid);
								if(slotid != -1)
								{
							        if(GetPlayerWeaponSkill(playerid, 1) == WEAPON_AKIMBO)
									{
										AddGunRackWeapon(rackid, slotid, pPlayerInfos[playerid][pArme1][0], floatround(floatdiv(pPlayerInfos[playerid][pArme1][1], 2), floatround_round));
										GivePlayerWeaponEx(playerid, pPlayerInfos[playerid][pArme1][0], -floatround(floatdiv(pPlayerInfos[playerid][pArme1][1], 2), floatround_round));
										SetPlayerWeaponSkill(playerid, 1, WEAPON_SIMPLE);
									}
									else
									{
										AddGunRackWeapon(rackid, slotid, pPlayerInfos[playerid][pArme1][0], pPlayerInfos[playerid][pArme1][1]);
										RemovePlayerWeapon(playerid, pPlayerInfos[playerid][pArme1][0]);
						                pPlayerInfos[playerid][pArme1][0] = 0;
						                pPlayerInfos[playerid][pArme1][1] = 0;
									}
								}
								else
								{
									SendClientMessageEx(playerid, ROUGE, "This gunrack cannot contain any extra weapon!", "Cette étagère ne peut contenir plus d'armes !", "Espagnol", "Portugais", "Italien", "Allemand");
								}
							}
							CloseTextDraws(playerid);
		                }
		            }
		            case 2:
		            {
		                if(listitem == 0)
					  	{
					        if(GetPlayerWeaponSkill(playerid, 2) == WEAPON_AKIMBO)
							{
								PlayerDropWeapon(playerid, pPlayerInfos[playerid][pArme2][0], floatround(floatdiv(pPlayerInfos[playerid][pArme2][1], 2), floatround_round), floatdiv(RandomEx(5, 20), 10));
								PlayerDropWeapon(playerid, pPlayerInfos[playerid][pArme2][0], floatround(floatdiv(pPlayerInfos[playerid][pArme2][1], 2), floatround_round), floatdiv(RandomEx(5, 20), 10));
							}
							else
							{
								PlayerDropWeapon(playerid, pPlayerInfos[playerid][pArme2][0], pPlayerInfos[playerid][pArme2][1], floatdiv(RandomEx(5, 20), 10));
							}
							PlayerPlaySound(playerid, 1131, 0.0, 0.0, 0.0);
							RemovePlayerWeapon(playerid, pPlayerInfos[playerid][pArme2][0]);
							SetPlayerWeaponSkill(playerid, 2, WEAPON_SIMPLE);
			                pPlayerInfos[playerid][pArme2][0] = 0;
			                pPlayerInfos[playerid][pArme2][1] = 0;
							CloseTextDraws(playerid);
						}
		                else if(listitem == 1)//RANGER
		                {
		                    new rackid = IsPlayerNearRack(playerid);
							if(rackid != -1)
							{
								new slotid = GetRackNextFreeSlot(rackid);
								if(slotid != -1)
								{
							        if(GetPlayerWeaponSkill(playerid, 2) == WEAPON_AKIMBO)
									{
										AddGunRackWeapon(rackid, slotid, pPlayerInfos[playerid][pArme2][0], floatround(floatdiv(pPlayerInfos[playerid][pArme2][1], 2), floatround_round));
										GivePlayerWeaponEx(playerid, pPlayerInfos[playerid][pArme2][0], -floatround(floatdiv(pPlayerInfos[playerid][pArme2][1], 2), floatround_round));
										SetPlayerWeaponSkill(playerid, 2, WEAPON_SIMPLE);
									}
									else
									{
										AddGunRackWeapon(rackid, slotid, pPlayerInfos[playerid][pArme2][0], pPlayerInfos[playerid][pArme2][1]);
										RemovePlayerWeapon(playerid, pPlayerInfos[playerid][pArme2][0]);
						                pPlayerInfos[playerid][pArme2][0] = 0;
						                pPlayerInfos[playerid][pArme2][1] = 0;
									}
								}
								else
								{
									SendClientMessageEx(playerid, ROUGE, "This gunrack cannot contain any extra weapon!", "Cette étagère ne peut contenir plus d'armes !", "Espagnol", "Portugais", "Italien", "Allemand");
								}
							}
							CloseTextDraws(playerid);
		                }
		            }
		            case 3:
		            {
		                if(listitem == 0)
					  	{
					        if(GetPlayerWeaponSkill(playerid, 3) == WEAPON_AKIMBO)
							{
								PlayerDropWeapon(playerid, pPlayerInfos[playerid][pArme3][0], floatround(floatdiv(pPlayerInfos[playerid][pArme3][1], 2), floatround_round), floatdiv(RandomEx(5, 20), 10));
								PlayerDropWeapon(playerid, pPlayerInfos[playerid][pArme3][0], floatround(floatdiv(pPlayerInfos[playerid][pArme3][1], 2), floatround_round), floatdiv(RandomEx(5, 20), 10));
							}
							else
							{
								PlayerDropWeapon(playerid, pPlayerInfos[playerid][pArme3][0], pPlayerInfos[playerid][pArme3][1], floatdiv(RandomEx(5, 20), 10));
							}
							PlayerPlaySound(playerid, 1131, 0.0, 0.0, 0.0);
							RemovePlayerWeapon(playerid, pPlayerInfos[playerid][pArme3][0]);
							SetPlayerWeaponSkill(playerid, 3, WEAPON_SIMPLE);
			                pPlayerInfos[playerid][pArme3][0] = 0;
			                pPlayerInfos[playerid][pArme3][1] = 0;
							CloseTextDraws(playerid);
						}
		                else if(listitem == 1)//RANGER
		                {
		                    new rackid = IsPlayerNearRack(playerid);
							if(rackid != -1)
							{
								new slotid = GetRackNextFreeSlot(rackid);
								if(slotid != -1)
								{
							        if(GetPlayerWeaponSkill(playerid, 3) == WEAPON_AKIMBO)
									{
										AddGunRackWeapon(rackid, slotid, pPlayerInfos[playerid][pArme3][0], floatround(floatdiv(pPlayerInfos[playerid][pArme3][1], 2), floatround_round));
										GivePlayerWeaponEx(playerid, pPlayerInfos[playerid][pArme3][0], -floatround(floatdiv(pPlayerInfos[playerid][pArme3][1], 2), floatround_round));
										SetPlayerWeaponSkill(playerid, 3, WEAPON_SIMPLE);
									}
									else
									{
										AddGunRackWeapon(rackid, slotid, pPlayerInfos[playerid][pArme3][0], pPlayerInfos[playerid][pArme3][1]);
										RemovePlayerWeapon(playerid, pPlayerInfos[playerid][pArme3][0]);
						                pPlayerInfos[playerid][pArme3][0] = 0;
						                pPlayerInfos[playerid][pArme3][1] = 0;
									}
								}
								else
								{
									SendClientMessageEx(playerid, ROUGE, "This gunrack cannot contain any extra weapon!", "Cette étagère ne peut contenir plus d'armes !", "Espagnol", "Portugais", "Italien", "Allemand");
								}
							}
							CloseTextDraws(playerid);
		                }
		            }
		            case 4:
		            {
		                if(listitem == 0)
					  	{
					        if(GetPlayerWeaponSkill(playerid, 4) == WEAPON_AKIMBO)
							{
								PlayerDropWeapon(playerid, pPlayerInfos[playerid][pArme4][0], floatround(floatdiv(pPlayerInfos[playerid][pArme4][1], 2), floatround_round), floatdiv(RandomEx(5, 20), 10));
								PlayerDropWeapon(playerid, pPlayerInfos[playerid][pArme4][0], floatround(floatdiv(pPlayerInfos[playerid][pArme4][1], 2), floatround_round), floatdiv(RandomEx(5, 20), 10));
							}
							else
							{
								PlayerDropWeapon(playerid, pPlayerInfos[playerid][pArme4][0], pPlayerInfos[playerid][pArme4][1], floatdiv(RandomEx(5, 20), 10));
							}
							PlayerPlaySound(playerid, 1131, 0.0, 0.0, 0.0);
							RemovePlayerWeapon(playerid, pPlayerInfos[playerid][pArme4][0]);
							SetPlayerWeaponSkill(playerid, 4, WEAPON_SIMPLE);
			                pPlayerInfos[playerid][pArme4][0] = 0;
			                pPlayerInfos[playerid][pArme4][1] = 0;
							CloseTextDraws(playerid);
						}
		                else if(listitem == 1)//RANGER
		                {
		                    new rackid = IsPlayerNearRack(playerid);
							if(rackid != -1)
							{
								new slotid = GetRackNextFreeSlot(rackid);
								if(slotid != -1)
								{
							        if(GetPlayerWeaponSkill(playerid, 4) == WEAPON_AKIMBO)
									{
										AddGunRackWeapon(rackid, slotid, pPlayerInfos[playerid][pArme4][0], floatround(floatdiv(pPlayerInfos[playerid][pArme4][1], 2), floatround_round));
										GivePlayerWeaponEx(playerid, pPlayerInfos[playerid][pArme4][0], -floatround(floatdiv(pPlayerInfos[playerid][pArme4][1], 2), floatround_round));
										SetPlayerWeaponSkill(playerid, 4, WEAPON_SIMPLE);
									}
									else
									{
										AddGunRackWeapon(rackid, slotid, pPlayerInfos[playerid][pArme4][0], pPlayerInfos[playerid][pArme4][1]);
										RemovePlayerWeapon(playerid, pPlayerInfos[playerid][pArme4][0]);
						                pPlayerInfos[playerid][pArme4][0] = 0;
						                pPlayerInfos[playerid][pArme4][1] = 0;
									}
								}
								else
								{
									SendClientMessageEx(playerid, ROUGE, "This gunrack cannot contain any extra weapon!", "Cette étagère ne peut contenir plus d'armes !", "Espagnol", "Portugais", "Italien", "Allemand");
								}
							}
							CloseTextDraws(playerid);
		                }
		            }
		            //---VÊTEMENTS---//
		            case 5://CHAPEAU
		            {
		                if(listitem == 0)
		                {
        					EditAttachedObject(playerid, HAT_OBJECT_ID);
							CloseTextDraws(playerid);
		                }
		                else if(listitem == 1)
		                {
							PlayerDropObject(playerid, pPlayerInfos[playerid][pChapeau], floatdiv(RandomEx(5, 20), 10));
							pPlayerInfos[playerid][pChapeau] = 0;
							DressPlayer(playerid, 1);
							CloseTextDraws(playerid);
		                }
		            }
		            case 6://LUNETTES
		            {
		                if(listitem == 0)
		                {
        					EditAttachedObject(playerid, GLASSES_OBJECT_ID);
							CloseTextDraws(playerid);
		                }
		                else if(listitem == 1)
		                {
							PlayerDropObject(playerid, pPlayerInfos[playerid][pLunettes], floatdiv(RandomEx(5, 20), 10));
							pPlayerInfos[playerid][pLunettes] = 0;
							DressPlayer(playerid, 2);
							CloseTextDraws(playerid);
		                }
		            }
		            case 7://MASQUE
		            {
		                if(listitem == 0)
		                {
        					EditAttachedObject(playerid, MASK_OBJECT_ID);
							CloseTextDraws(playerid);
		                }
		                else if(listitem == 1)
		                {
							PlayerDropObject(playerid, pPlayerInfos[playerid][pMasque], floatdiv(RandomEx(5, 20), 10));
							pPlayerInfos[playerid][pMasque] = 0;
							DressPlayer(playerid, 3);
							CloseTextDraws(playerid);
		                }
		            }
		            case 8://TORSE
		            {
		                if(listitem == 0)
		                {
        					EditAttachedObject(playerid, TORSO_OBJECT_ID);
							CloseTextDraws(playerid);
		                }
		                else if(listitem == 1)
		                {
							PlayerDropObject(playerid, pPlayerInfos[playerid][pTorse], floatdiv(RandomEx(5, 20), 10));
							//---
		                    if(pPlayerInfos[playerid][pTorse] == 83) SetArmourForPlayer(playerid, 0);
		                    //---
							pPlayerInfos[playerid][pTorse] = 0;
							DressPlayer(playerid, 4);
							CloseTextDraws(playerid);
		                }
		            }
		            //---OBJETS---//
		            case 9 .. 44:
		            {
		                if(listitem == 0)//Utiliser
		                {
		                    new pItem = pUseInventory[playerid];
							CloseTextDraws(playerid);
							UsePlayerItem(playerid, pItem - 8);
		                }
		                else if(listitem == 1)//Déposer
		                {
							if(CallRemoteFunction("OnPlayerDropMissionItem", "ii", playerid, GetPlayerSlotObject(playerid, pUseInventory[playerid] - 8)))
							{
								CloseTextDraws(playerid);
								return 1;
							}
							LogInfo(true, "[JOUEUR]%s depose %s", GetName(playerid), NoNewLineSign(aObjects[GetPlayerSlotObject(playerid, pUseInventory[playerid] - 8)][ObjectFrName]));
							PlayerDropObject(playerid, GetPlayerSlotObject(playerid, pUseInventory[playerid] - 8), floatdiv(RandomEx(5, 20), 10));
							GivePlayerSlotObject(playerid, -1, pUseInventory[playerid] - 8);
							SelectTextDraw(playerid, VERT);
							pUseInventory[playerid] = 0;
						}
						else if(listitem == 2)//Vendre - Démonter - HDV - FRIGO
						{
						    if(aObjects[GetPlayerSlotObject(playerid, pUseInventory[playerid] - 8)][dObjectType] ==  TYPE_NOSELL)
						    {
						        SendClientMessageEx(playerid, ROUGE, "You can't sell this item!", "Vous ne pouvez pas vendre cet objet !", "¡ No puede usted vender esto objecto !", "Portugais", "Italien", "Allemand");
								SelectTextDraw(playerid, VERT);
								pUseInventory[playerid] = 0;
								return 1;
						    }
						    if(CallRemoteFunction("GetPlayerNearAuctionHouse", "i", playerid) != -1)
						    {
			    				pHDVSale[playerid][0] = pUseInventory[playerid] - 8;
								switch(pPlayerInfos[playerid][pLangue])
								{
								 	case LANGUAGE_EN: ShowPlayerDialog(playerid, 52, DIALOG_STYLE_INPUT, "Auction house", "{FFFFFF}Enter the {CC0000}price {FFFFFF}you want to sell your item for:\n{CC0000}WARNING: {FFFFFF}Setting an item for sale costs 0.2g of gold.", "Sell", "Cancel");
								 	case LANGUAGE_FR: ShowPlayerDialog(playerid, 52, DIALOG_STYLE_INPUT, "Hôtel des ventes", "{FFFFFF}Entrez le {CC0000}prix {FFFFFF}de vente de votre objet:\n{CC0000}ATTENTION: {FFFFFF}Vendre un objet coûte 0.2g d'or.", "Vendre", "Annuler");
						 			case LANGUAGE_ES: ShowPlayerDialog(playerid, 52, DIALOG_STYLE_INPUT, "Espagnol", "Espagnol", "Ok", "Anterior");
						 			case LANGUAGE_PG: ShowPlayerDialog(playerid, 52, DIALOG_STYLE_INPUT, "Portugais", "Portugais", "Ok", "Anterior");
									case LANGUAGE_IT: ShowPlayerDialog(playerid, 52, DIALOG_STYLE_INPUT, "Italien", "Italien", "Ok", "Indietro");
									case LANGUAGE_DE: ShowPlayerDialog(playerid, 52, DIALOG_STYLE_INPUT, "Allemand", "Allemand" , "Ok", "Zurück");
								}
						    }
							if(CallRemoteFunction("GetPlayerNearShop", "i", playerid) != -1)
							{
								if(CallRemoteFunction("OnPlayerDropMissionItem", "ii", playerid, GetPlayerSlotObject(playerid, pUseInventory[playerid] - 8)))
								{
									CloseTextDraws(playerid);
									return 1;
								}
							    PlayerPlaySound(playerid, 5852, 0.0, 0.0, 0.0);
								LogInfo(true, "[JOUEUR]%s vend %s pour %.1fg d'or.", GetName(playerid), NoNewLineSign(aObjects[GetPlayerSlotObject(playerid, pUseInventory[playerid] - 8)][ObjectFrName]), floatdiv(aObjects[GetPlayerSlotObject(playerid, pUseInventory[playerid] - 8)][dSellPrice], 10));
								GivePlayerExp(playerid, aObjects[GetPlayerSlotObject(playerid, pUseInventory[playerid] - 8)][dSellPrice]);
								GivePlayerGold(playerid, aObjects[GetPlayerSlotObject(playerid, pUseInventory[playerid] - 8)][dSellPrice]);
								GivePlayerSlotObject(playerid, -1, pUseInventory[playerid] - 8);
								SelectTextDraw(playerid, VERT);
								pUseInventory[playerid] = 0;
							}
							else if(GetPlayerNearEngineer(playerid) != -1)
							{
								if(CallRemoteFunction("OnPlayerDropMissionItem", "ii", playerid, GetPlayerSlotObject(playerid, pUseInventory[playerid] - 8)))
								{
									CloseTextDraws(playerid);
									return 1;
								}
		    	            	new dParts[3][2];
		    	           	 	GetObjectParts(GetPlayerSlotObject(playerid, pUseInventory[playerid] - 8), dParts[0][0], dParts[0][1], dParts[1][0], dParts[1][1], dParts[2][0], dParts[2][1]);
		    	           	 	new dSlots = dParts[0][1] + dParts[1][1] + dParts[2][1];
		    	           	 	if(GetPlayerFreeSlots(playerid) > dSlots - 1)
		    	           	 	{
									GivePlayerSlotObject(playerid, -1, pUseInventory[playerid] - 8);
									for(new i = 0; i < 3; i ++) if(dParts[i][0] != 0) for(new j = 0; j < dParts[i][1]; j ++) GivePlayerSlotObject(playerid, dParts[i][0], GetPlayerNextFreeSlot(playerid));
									ShowPlayerTextInfo(playerid, 5000, "~g~Object succesfully taken apart!", "Objet démonté avec succès !", "Espagnol", "Portugais", "Italien", "~g~Er folgreich auseinandermontiertet Objkete!");
		    	           	 	}
		    	           	 	else
		    	           	 	{
		    	           	 	    SendClientMessageEx(playerid, ROUGE, "You don't have enough free slots to take this object appart!", "Vous n'avez pas assez de slots libres pour démonter cet objet !", "Espagnol", "Portugais", "Italien", "Sie haben nicht genüg Platz um die verschiedenen teile zu lagern!");
		    	           	 	}
								SelectTextDraw(playerid, VERT);
								pUseInventory[playerid] = 0;
							}
			    	        else if(aObjects[GetPlayerSlotObject(playerid, pUseInventory[playerid] - 8)][dObjectType] ==  TYPE_FOOD && IsPlayerNearFridge(playerid) != -1)
			    	        {
								if(CallRemoteFunction("OnPlayerDropMissionItem", "ii", playerid, GetPlayerSlotObject(playerid, pUseInventory[playerid] - 8)))
								{
									CloseTextDraws(playerid);
									return 1;
								}
								new dFridge = IsPlayerNearFridge(playerid);
								//---
								if(HasFridgeFood(dFridge, GetPlayerSlotObject(playerid, pUseInventory[playerid] - 8)) == -1 && GetFridgeNextFreeSlot(dFridge) == -1)
								{
									SendClientMessageEx(playerid, ROUGE, "This fridge cannot contain any extra food!", "Ce réfrigérateur ne peut contenir plus de nourriture !", "Espagnol", "Portugais", "Italien", "Allemand");
									return 1;
								}
								//---
                                new dAmount = AddFridgeFood(dFridge, GetPlayerSlotObject(playerid, pUseInventory[playerid] - 8), 1);
								LogInfo(true, "[JOUEUR]%s met %s dans le réfrigérateur %d: %d.", GetName(playerid), NoNewLineSign(aObjects[GetPlayerSlotObject(playerid, pUseInventory[playerid] - 8)][ObjectFrName]), dFridge, dAmount);
								GivePlayerSlotObject(playerid, -1, pUseInventory[playerid] - 8);
								SelectTextDraw(playerid, VERT);
								pUseInventory[playerid] = 0;
			    	        }
						}
		            }
		            case 45:
		            {
		                if(listitem == 0)//Utiliser
		                {
							UsePlayerItem(playerid, 0);
							CloseTextDraws(playerid);
		                }
		                else if(listitem == 1)//Jeter
		                {
							if(CallRemoteFunction("OnPlayerDropMissionItem", "ii", playerid, GetPlayerSlotObject(playerid, 0)))
							{
								CloseTextDraws(playerid);
								return 1;
							}
							PlayerDropObject(playerid, GetPlayerSlotObject(playerid, 0), floatdiv(RandomEx(5, 20), 10));
							GivePlayerSlotObject(playerid, -1, 0);
							SelectTextDraw(playerid, VERT);
							pUseInventory[playerid] = 0;
						}
						else if(listitem == 2)//Vendre
						{
						    if(aObjects[GetPlayerSlotObject(playerid, 0)][dObjectType] ==  TYPE_NOSELL)
						    {
						        SendClientMessageEx(playerid, ROUGE, "You can't sell this item!", "Vous ne pouvez pas vendre cet objet !", "¡ No puede usted vender esto objecto !", "Portugais", "Italien", "Allemand");
								SelectTextDraw(playerid, VERT);
								pUseInventory[playerid] = 0;
								return 1;
						    }
						    if(CallRemoteFunction("GetPlayerNearAuctionHouse", "i", playerid) != -1)
						    {
			    				pHDVSale[playerid][0] = 0;
								switch(pPlayerInfos[playerid][pLangue])
								{
								 	case LANGUAGE_EN: ShowPlayerDialog(playerid, 52, DIALOG_STYLE_INPUT, "Auction house", "{FFFFFF}Enter the {CC0000}price {FFFFFF}you want to sell your item for:\n{CC0000}WARNING: {FFFFFF}Setting an item for sale costs 0.2g of gold.", "Sell", "Cancel");
								 	case LANGUAGE_FR: ShowPlayerDialog(playerid, 52, DIALOG_STYLE_INPUT, "Hôtel des ventes", "{FFFFFF}Entrez le {CC0000}prix {FFFFFF}de vente de votre objet:\n{CC0000}ATTENTION: {FFFFFF}Vendre un objet coûte 0.2g d'or.", "Vendre", "Annuler");
						 			case LANGUAGE_ES: ShowPlayerDialog(playerid, 52, DIALOG_STYLE_INPUT, "Espagnol", "Espagnol", "Ok", "Anterior");
						 			case LANGUAGE_PG: ShowPlayerDialog(playerid, 52, DIALOG_STYLE_INPUT, "Portugais", "Portugais", "Ok", "Anterior");
									case LANGUAGE_IT: ShowPlayerDialog(playerid, 52, DIALOG_STYLE_INPUT, "Italien", "Italien", "Ok", "Indietro");
									case LANGUAGE_DE: ShowPlayerDialog(playerid, 52, DIALOG_STYLE_INPUT, "Allemand", "Allemand" , "Ok", "Zurück");
								}
						    }
							if(CallRemoteFunction("GetPlayerNearShop", "i", playerid) != -1)
							{
								if(CallRemoteFunction("OnPlayerDropMissionItem", "ii", playerid, GetPlayerSlotObject(playerid, 0)))
								{
									CloseTextDraws(playerid);
									return 1;
								}
							    PlayerPlaySound(playerid, 5852, 0.0, 0.0, 0.0);
								LogInfo(true, "[JOUEUR]%s vend %s pour %.1fg d'or.", GetName(playerid), NoNewLineSign(aObjects[GetPlayerSlotObject(playerid, pUseInventory[playerid] - 8)][ObjectFrName]), floatdiv(aObjects[GetPlayerSlotObject(playerid, pUseInventory[playerid] - 8)][dSellPrice], 10));
								GivePlayerExp(playerid, aObjects[GetPlayerSlotObject(playerid, 0)][dSellPrice]);
								GivePlayerGold(playerid, aObjects[GetPlayerSlotObject(playerid, 0)][dSellPrice]);
								GivePlayerSlotObject(playerid, -1, 0);
								SelectTextDraw(playerid, VERT);
								pUseInventory[playerid] = 0;
							}
							else if(GetPlayerNearEngineer(playerid) != -1)
							{
								if(CallRemoteFunction("OnPlayerDropMissionItem", "ii", playerid, GetPlayerSlotObject(playerid, 0)))
								{
									CloseTextDraws(playerid);
									return 1;
								}
		    	            	new dParts2[3][2];
		    	           	 	GetObjectParts(GetPlayerSlotObject(playerid, 0), dParts2[0][0], dParts2[0][1], dParts2[1][0], dParts2[1][1], dParts2[2][0], dParts2[2][1]);
		    	           	 	new dSlots = dParts2[0][1] + dParts2[1][1] + dParts2[2][1];
		    	           	 	if(GetPlayerFreeSlots(playerid) > dSlots - 1)
		    	           	 	{
									GivePlayerSlotObject(playerid, -1, 0);
									for(new i = 0; i < 3; i ++) if(dParts2[i][0] != 0) for(new j = 0; j < dParts2[i][1]; j ++) GivePlayerSlotObject(playerid, dParts2[i][0], GetPlayerNextFreeSlot(playerid));
									ShowPlayerTextInfo(playerid, 5000, "~g~Object succesfully taken apart!", "Objet démonté avec succès !", "Espagnol", "Portugais", "Italien", "~g~Er folgreich auseinandermontiertet Objkete!");
		    	           	 	}
		    	           	 	else
		    	           	 	{
		    	           	 	    SendClientMessageEx(playerid, ROUGE, "You don't have enough free slots to take this object appart!", "Vous n'avez pas assez de slots libres pour démonter cet objet !", "Espagnol", "Portugais", "Italien", "Sie haben nicht genüg Platz um die verschiedenen teile zu lagern!");
		    	           	 	}
								SelectTextDraw(playerid, VERT);
								pUseInventory[playerid] = 0;
							}
			    	        else if(aObjects[GetPlayerSlotObject(playerid, 0)][dObjectType] ==  TYPE_FOOD && IsPlayerNearFridge(playerid) != -1)
			    	        {
								if(CallRemoteFunction("OnPlayerDropMissionItem", "ii", playerid, GetPlayerSlotObject(playerid, 0)))
								{
									CloseTextDraws(playerid);
									return 1;
								}
								new dFridge = IsPlayerNearFridge(playerid);
								//---
								if(HasFridgeFood(dFridge, GetPlayerSlotObject(playerid, 0)) == -1 && GetFridgeNextFreeSlot(dFridge) == -1)
								{
									SendClientMessageEx(playerid, ROUGE, "This fridge cannot contain any extra food!", "Ce réfrigérateur ne peut contenir plus de nourriture !", "Espagnol", "Portugais", "Italien", "Allemand");
									return 1;
								}
								//---
								LogInfo(true, "[JOUEUR]%s met %s dans le réfrigérateur %d.", GetName(playerid), NoNewLineSign(aObjects[GetPlayerSlotObject(playerid, 0)][ObjectFrName]), dFridge);
                                AddFridgeFood(dFridge, GetPlayerSlotObject(playerid, 0), 1);
								GivePlayerSlotObject(playerid, -1, 0);
								SelectTextDraw(playerid, VERT);
								pUseInventory[playerid] = 0;
			    	        }
						}
		            }
		        }
	        }
	        else
	        {
				SelectTextDraw(playerid, VERT);
				pUseInventory[playerid] = 0;
	        }
	    }
	    case 6://RAMASSAGE OBJETS
	    {
	        if(response)
	        {
			    if(pAroundItems[playerid][listitem][1] == 0)//Si cet objet est un item
			    {
			        if(dItems[pAroundItems[playerid][listitem][0]][ItemID] == 0)
			        {
					    SendClientMessageEx(playerid, ROUGE, "This item has already been picked up!", "Cet objet a déjà été ramassé !", "¡Esto objeto ya ha recogado!", "Portugais", "Italien", "Dieser Objekte hat schon abgeholt ");
					    return 1;
			        }
			        new dFreeSlot = GetPlayerNextFreeSlot(playerid);
			        if(dFreeSlot == -1)
			        {
					    SendClientMessageEx(playerid, ROUGE, "You cannot carry more items!", "Vous ne pouvez pas porter plus d'objets !", "¡No puede llevar más objetos!", "Portugais", "Italien", "Sie können nicht mehr Objekte tragen!");
					    return 1;
			        }
					LogInfo(true, "[JOUEUR]%s ramasse %s", GetName(playerid), NoNewLineSign(aObjects[dItems[pAroundItems[playerid][listitem][0]][ItemID]][ObjectFrName]));
			        GivePlayerSlotObject(playerid, dItems[pAroundItems[playerid][listitem][0]][ItemID], dFreeSlot);
					if(aObjects[dItems[pAroundItems[playerid][listitem][0]][ItemID]][bHeavy])
					{
						ApplyAnimation(playerid, "CARRY", "liftup", 3.0, 0, 0, 0, 0, 0);
	        			if(dFreeSlot != 0) SwapPlayerObjects(playerid, 0, dFreeSlot);
					}
			    	else
					{
						ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
					}
					CallRemoteFunction("OnPlayerPickupMisison", "ii", playerid, dItems[pAroundItems[playerid][listitem][0]][ItemID]);
					DestroyItem(pAroundItems[playerid][listitem][0]);
					if(!pPlayerInfos[playerid][bAide][0]) pPlayerInfos[playerid][bAide][0] = true;
			    }
			    else if(pAroundItems[playerid][listitem][1] == 1)//Si cet objet est une arme
			    {
			        if(dGuns[pAroundItems[playerid][listitem][0]][WeaponID] == 0)
			        {
					    SendClientMessageEx(playerid, ROUGE, "This item has already been picked up!", "Cet objet a déjà été ramassé !", "¡Esto objeto ya ha recogado!", "Portugais", "Italien", "Dieser Objekte hat schon abgeholt ");
					    return 1;
			        }
			        new dFreeSlot = GetPlayerNextFreeWeaponSlot(playerid);
					new dWeaponSlot = HasPlayerWeapon(playerid, dGuns[pAroundItems[playerid][listitem][0]][WeaponID]);
					new dSameWeapon = HasPlayerSameTypeWeapon(playerid, dGuns[pAroundItems[playerid][listitem][0]][WeaponID]);
					if(dWeaponSlot != 0 && GetWeaponAmmoType(dGuns[pAroundItems[playerid][listitem][0]][WeaponID]) != NO_AMMO)
					{
						ApplyReloadAnim(playerid, dGuns[pAroundItems[playerid][listitem][0]][WeaponID]);
					    GivePlayerWeaponEx(playerid, dGuns[pAroundItems[playerid][listitem][0]][WeaponID], dGuns[pAroundItems[playerid][listitem][0]][WeaponAmmo]);
					    if(GetPlayerWeaponSkill(playerid, dWeaponSlot) != WEAPON_AKIMBO)
					    {
					        if(dGuns[pAroundItems[playerid][listitem][0]][WeaponID] == 22 || dGuns[pAroundItems[playerid][listitem][0]][WeaponID] == 26 || dGuns[pAroundItems[playerid][listitem][0]][WeaponID] == 28 || dGuns[pAroundItems[playerid][listitem][0]][WeaponID] == 32)
					        {
					            SetPlayerWeaponSkill(playerid, dWeaponSlot, WEAPON_AKIMBO);
					        }
					        else
					        {
								PlayerDropObject(playerid, GetObjectFromWeapon(dGuns[pAroundItems[playerid][listitem][0]][WeaponID]), floatdiv(RandomEx(5, 20), 10));
					        }
				    	}
				    	else
				    	{
							PlayerDropObject(playerid, GetObjectFromWeapon(dGuns[pAroundItems[playerid][listitem][0]][WeaponID]), floatdiv(RandomEx(5, 20), 10));
				    	}
						DestroyWeapon(pAroundItems[playerid][listitem][0]);
					    return 1;
					}
					if(dSameWeapon == 1)//Retourne 0 si le mec n'a pas d'armes du même type, 1 si le mec a une arme du même type, 2 si le mec a l'arme en question
					{
						if(GetWeaponAmmoType(GetPlayerWeapon(playerid)) == GetWeaponAmmoType(dGuns[pAroundItems[playerid][listitem][0]][WeaponID]) && GetWeaponAmmoType(GetPlayerWeapon(playerid)) != NO_AMMO)
						{
							GivePlayerWeaponEx(playerid, GetPlayerWeapon(playerid), dGuns[pAroundItems[playerid][listitem][0]][WeaponAmmo]);
							PlayerDropObject(playerid, GetObjectFromWeapon(dGuns[pAroundItems[playerid][listitem][0]][WeaponID]), floatdiv(RandomEx(5, 20), 10));
							DestroyWeapon(pAroundItems[playerid][listitem][0]);
							return 1;
						}
					    SendClientMessageEx(playerid, ROUGE, "You already have this type of weapon!", "Vous avez déjà une arme de ce type !", "¡Ya tiene una arma de esto tipo!", "Portugais", "Già hai una arma di questo tipo !", "Sie haben schon so eine Waffe!");
					    return 1;
					}
					if(dFreeSlot == 0)
					{
					    SendClientMessageEx(playerid, ROUGE, "You cannot carry more weapons!", "Vous ne pouvez pas porter plus d'armes !", "¡No puede llevar más armas!", "Portugais", "Italien", "Sie können nicht mehr Waffen tragen!");
					    return 1;
					}
					ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
					GivePlayerWeaponEx(playerid, dGuns[pAroundItems[playerid][listitem][0]][WeaponID], dGuns[pAroundItems[playerid][listitem][0]][WeaponAmmo]);
					SetPlayerWeaponSkill(playerid, dFreeSlot, WEAPON_SIMPLE);
					DestroyWeapon(pAroundItems[playerid][listitem][0]);
					if(!pPlayerInfos[playerid][bAide][0]) pPlayerInfos[playerid][bAide][0] = true;
			    }
			    else if(pAroundItems[playerid][listitem][1] == 2)//Si cet objet est un lit
			    {
			        if(dBed[pAroundItems[playerid][listitem][0]][dBedType] == 0)
			        {
					    SendClientMessageEx(playerid, ROUGE, "This item has already been picked up!", "Cet objet a déjà été ramassé !", "¡Esto objeto ya ha recogado!", "Portugais", "Italien", "Dieser Objekte hat schon abgeholt ");
					    return 1;
			        }
			        new dFreeSlot = GetPlayerNextFreeSlot(playerid);
			        if(dFreeSlot == -1)
			        {
					    SendClientMessageEx(playerid, ROUGE, "You cannot carry more items!", "Vous ne pouvez pas porter plus d'objets !", "¡No puede llevar más objetos!", "Portugais", "Italien", "Sie können nicht mehr Objekte tragen!");
					    return 1;
			        }
				    switch(dBed[pAroundItems[playerid][listitem][0]][dBedType])
				    {
				        case 1: GivePlayerSlotObject(playerid, 80, dFreeSlot);
				        case 2: GivePlayerSlotObject(playerid, 151, dFreeSlot);
				    }
					DestroyBed(pAroundItems[playerid][listitem][0]);
					ApplyAnimation(playerid, "CARRY", "liftup", 3.0, 0, 0, 0, 0, 0);
			    }
			    else if(pAroundItems[playerid][listitem][1] == 3)//Si cet objet est une tente
			    {
			        if(!dTent[pAroundItems[playerid][listitem][0]][bTent])
			        {
					    SendClientMessageEx(playerid, ROUGE, "This item has already been picked up!", "Cet objet a déjà été ramassé !", "¡Esto objeto ya ha recogado!", "Portugais", "Italien", "Dieser Objekte hat schon abgeholt ");
					    return 1;
			        }
			        new dFreeSlot = GetPlayerNextFreeSlot(playerid);
			        if(dFreeSlot == -1)
			        {
					    SendClientMessageEx(playerid, ROUGE, "You cannot carry more items!", "Vous ne pouvez pas porter plus d'objets !", "¡No puede llevar más objetos!", "Portugais", "Italien", "Sie können nicht mehr Objekte tragen!");
					    return 1;
			        }
				    GivePlayerSlotObject(playerid, 1, dFreeSlot);
        			DestroyTent(pAroundItems[playerid][listitem][0]);
					ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
			    }
			    else if(pAroundItems[playerid][listitem][1] == 4)//Si cet objet est un collecteur d'eau
			    {
			        if(dCollector[pAroundItems[playerid][listitem][0]][dEau] == -1)
			        {
					    SendClientMessageEx(playerid, ROUGE, "This item has already been picked up!", "Cet objet a déjà été ramassé !", "¡Esto objeto ya ha recogado!", "Portugais", "Italien", "Dieser Objekte hat schon abgeholt ");
					    return 1;
			        }
			        new dFreeSlot = GetPlayerNextFreeSlot(playerid);
			        if(dFreeSlot == -1)
			        {
					    SendClientMessageEx(playerid, ROUGE, "You cannot carry more items!", "Vous ne pouvez pas porter plus d'objets !", "¡No puede llevar más objetos!", "Portugais", "Italien", "Sie können nicht mehr Objekte tragen!");
					    return 1;
			        }
					#if defined WARNING_PICKUP
					switch(pPlayerInfos[playerid][pLangue])
					{
					 	case LANGUAGE_EN: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Collector", "If you pick up this collector, it'll waste its water.", "Pick up", "Cancel");
					 	case LANGUAGE_FR: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Broyeur", "Si vous ramassez ce collecteur, son eau sera perdu.", "Ramasser", "Annuler");
					 	case LANGUAGE_ES: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Espagnol", "Espagnol", "Ok", "");
					 	case LANGUAGE_PG: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Portugais", "Portugais", "Ok", "");
						case LANGUAGE_IT: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Italien", "Italien", "Ok", "");
						case LANGUAGE_DE: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Allemand", "Allemand" , "Ok", "");
					}
		        	pAroundItems[playerid][0][0] = pAroundItems[playerid][listitem][0];
		        	pAroundItems[playerid][0][1] = pAroundItems[playerid][listitem][1];
					#else
					ApplyAnimation(playerid, "CARRY", "liftup", 3.0, 0, 0, 0, 0, 0);
				    GivePlayerSlotObject(playerid, 95, dFreeSlot);
		        	DestroyCollector(pAroundItems[playerid][listitem][0]);
		        	#endif
			    }
			    else if(pAroundItems[playerid][listitem][1] == 5)//Si cet objet est un coffre fort
			    {
			        if(!dSafeInfos[pAroundItems[playerid][listitem][0]][bSafe])
			        {
					    SendClientMessageEx(playerid, ROUGE, "This item has already been picked up!", "Cet objet a déjà été ramassé !", "¡Esto objeto ya ha recogado!", "Portugais", "Italien", "Dieser Objekte hat schon abgeholt ");
					    return 1;
			        }
			        new dFreeSlot = GetPlayerNextFreeSlot(playerid);
			        if(dFreeSlot == -1)
			        {
					    SendClientMessageEx(playerid, ROUGE, "You cannot carry more items!", "Vous ne pouvez pas porter plus d'objets !", "¡No puede llevar más objetos!", "Portugais", "Italien", "Sie können nicht mehr Objekte tragen!");
					    return 1;
			        }
			        if(!dSafeInfos[pAroundItems[playerid][listitem][0]][bOpenSafe])
			        {
			            ShowPlayerTextInfo(playerid, 5000, "~r~Open the safe before you pick it up.", "~r~Ouvrez ce coffre avant de le ramasser.", "Espagnol", "Portugais", "Italien", "Allemand");
			            return 1;
			        }
			        if(!IsSafeEmpty(pAroundItems[playerid][listitem][0]))
			        {
			            ShowPlayerTextInfo(playerid, 5000, "~r~Take all the items out before you pick the safe up.", "~r~Videz ce coffre avant de le ramasser.",  "Espagnol", "Portugais", "Italien", "Allemand");
			            return 1;
			        }
					ApplyAnimation(playerid, "CARRY", "liftup", 3.0, 0, 0, 0, 0, 0);
				    GivePlayerSlotObject(playerid, 97, dFreeSlot);
		        	DestroySafe(pAroundItems[playerid][listitem][0]);
			    }
			    else if(pAroundItems[playerid][listitem][1] == 6)//Si cet objet est de l'or
			    {
					new gold[Or];
					MEM_get_arr(LIST_IT_data_ptr(nodeFound[playerid]), _, gold);
			        if(gold[dOrAmount] == 0)
			        {
					    SendClientMessageEx(playerid, ROUGE, "This item has already been picked up!", "Cet objet a déjà été ramassé !", "¡Esto objeto ya ha recogado!", "Portugais", "Italien", "Dieser Objekte hat schon abgeholt ");
					    return 1;
			        }
					
					ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
					LogInfo(true, "[JOUEUR]%s ramasse %.1fg d'or", GetName(playerid), floatdiv(gold[dOrAmount], 10));
				    GivePlayerGold(playerid, gold[dOrAmount]);
		        	DestroyGold(nodeFound[playerid]);
			    }
			    else if(pAroundItems[playerid][listitem][1] == 7)//Si cet objet est un broyeur
			    {
			        if(dShredder[pAroundItems[playerid][listitem][0]][dBroyeur] == -1)
			        {
					    SendClientMessageEx(playerid, ROUGE, "This item has already been picked up!", "Cet objet a déjà été ramassé !", "¡Esto objeto ya ha recogado!", "Portugais", "Italien", "Dieser Objekte hat schon abgeholt ");
					    return 1;
			        }
			        new dFreeSlot = GetPlayerNextFreeSlot(playerid);
			        if(dFreeSlot == -1)
			        {
					    SendClientMessageEx(playerid, ROUGE, "You cannot carry more items!", "Vous ne pouvez pas porter plus d'objets !", "¡No puede llevar más objetos!", "Portugais", "Italien", "Sie können nicht mehr Objekte tragen!");
					    return 1;
			        }
					#if defined WARNING_PICKUP
					switch(pPlayerInfos[playerid][pLangue])
					{
					 	case LANGUAGE_EN: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Shredder", "If you pick up this shredder, it'll waste its gas.", "Pick up", "Cancel");
					 	case LANGUAGE_FR: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Broyeur", "Si vous ramassez ce broyeur, le carburant sera perdu.", "Ramasser", "Annuler");
					 	case LANGUAGE_ES: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Espagnol", "Espagnol", "Ok", "");
					 	case LANGUAGE_PG: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Portugais", "Portugais", "Ok", "");
						case LANGUAGE_IT: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Italien", "Italien", "Ok", "");
						case LANGUAGE_DE: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Allemand", "Allemand" , "Ok", "");
					}
		        	pAroundItems[playerid][0][0] = pAroundItems[playerid][listitem][0];
		        	pAroundItems[playerid][0][1] = pAroundItems[playerid][listitem][1];
					#else
					ApplyAnimation(playerid, "CARRY", "liftup", 3.0, 0, 0, 0, 0, 0);
				    GivePlayerSlotObject(playerid, 117, dFreeSlot);
		        	DestroyShredder(pAroundItems[playerid][listitem][0]);
		        	#endif
			    }
			    else if(pAroundItems[playerid][listitem][1] == 8)//Si cet objet est une étagère
			    {
			        if(!dGunRackInfos[pAroundItems[playerid][listitem][0]][bRack])
			        {
					    SendClientMessageEx(playerid, ROUGE, "This item has already been picked up!", "Cet objet a déjà été ramassé !", "¡Esto objeto ya ha recogado!", "Portugais", "Italien", "Dieser Objekte hat schon abgeholt ");
					    return 1;
			        }
			        new dFreeSlot = GetPlayerNextFreeSlot(playerid);
			        if(dFreeSlot == -1)
			        {
					    SendClientMessageEx(playerid, ROUGE, "You cannot carry more items!", "Vous ne pouvez pas porter plus d'objets !", "¡No puede llevar más objetos!", "Portugais", "Italien", "Sie können nicht mehr Objekte tragen!");
					    return 1;
			        }
			        if(!IsRackEmpty(pAroundItems[playerid][listitem][0]))
			        {
			            ShowPlayerTextInfo(playerid, 5000, "~r~Unload the gunrack before you pick it up!", "~r~Videz l'étagère avant de la ramasser !", "Espagnol", "O senhor tem que abrir essa caixa forte antes de apanha-lo !", "Italien", "Allemand");
			            return 1;
			        }
					ApplyAnimation(playerid, "CARRY", "liftup", 3.0, 0, 0, 0, 0, 0);
				    GivePlayerSlotObject(playerid, 127, dFreeSlot);
		        	DestroyGunRack(pAroundItems[playerid][listitem][0]);
			    }
			    else if(pAroundItems[playerid][listitem][1] == 9)//Si cet objet est un brasero
			    {
			        if(!dBraseroInfos[pAroundItems[playerid][listitem][0]][dBrasero])
			        {
					    SendClientMessageEx(playerid, ROUGE, "This item has already been picked up!", "Cet objet a déjà été ramassé !", "¡Esto objeto ya ha recogado!", "Portugais", "Italien", "Dieser Objekte hat schon abgeholt ");
					    return 1;
			        }
			        new dFreeSlot = GetPlayerNextFreeSlot(playerid);
			        if(dFreeSlot == -1)
			        {
					    SendClientMessageEx(playerid, ROUGE, "You cannot carry more items!", "Vous ne pouvez pas porter plus d'objets !", "¡No puede llevar más objetos!", "Portugais", "Italien", "Sie können nicht mehr Objekte tragen!");
					    return 1;
			        }
					ApplyAnimation(playerid, "CARRY", "liftup", 3.0, 0, 0, 0, 0, 0);
				    GivePlayerSlotObject(playerid, 128, dFreeSlot);
		        	DestroyBrasero(pAroundItems[playerid][listitem][0]);
			    }
				else if(pAroundItems[playerid][listitem][1] == 10)//Si cet objet est une décoration
			    {
					new furn[Furniture];
			        new dFreeSlot = GetPlayerNextFreeSlot(playerid);
					MEM_get_arr(LIST_IT_data_ptr(nodeFound[playerid]), _, furn);
			        if(dFreeSlot == -1)
			        {
					    SendClientMessageEx(playerid, ROUGE, "You cannot carry more items!", "Vous ne pouvez pas porter plus d'objets !", "¡No puede llevar más objetos!", "O senhor não pode carregar mais objetos", "Italien", "Sie können nicht mehr Objekte tragen!");
					    return 1;
			        }
					ApplyAnimation(playerid, "CARRY", "liftup", 3.0, 0, 0, 0, 0, 0);
				    GivePlayerSlotObject(playerid, GetFurnitureObjectID(furn[dFurnitureType], true), dFreeSlot);
		        	DestroyFurniture(nodeFound[playerid]);
			    }
			    else if(pAroundItems[playerid][listitem][1] == 11)//Si cet objet est un fauteuil
			    {
					new Pointer: pt = LIST_IT_data_ptr(nodeFound[playerid]);
					new seat[Seat];
					MEM_get_arr(pt, _, seat);
			        if(seat[dSeatType] == 0)
			        {
					    SendClientMessageEx(playerid, ROUGE, "This item has already been picked up!", "Cet objet a déjà été ramassé !", "¡Esto objeto ya ha recogado!", "Portugais", "Italien", "Dieser Objekte hat schon abgeholt ");
					    return 1;
			        }
			        new dFreeSlot = GetPlayerNextFreeSlot(playerid);
			        if(dFreeSlot == -1)
			        {
					    SendClientMessageEx(playerid, ROUGE, "You cannot carry more items!", "Vous ne pouvez pas porter plus d'objets !", "¡No puede llevar más objetos!", "Portugais", "Italien", "Sie können nicht mehr Objekte tragen!");
					    return 1;
			        }
				    switch(seat[dSeatType])
				    {
				        case 1729: GivePlayerSlotObject(playerid, 155, dFreeSlot);
				    }
					DestroySeat(nodeFound[playerid]);
					ApplyAnimation(playerid, "CARRY", "liftup", 3.0, 0, 0, 0, 0, 0);
			    }
			    else if(pAroundItems[playerid][listitem][1] == 12)//Si cet objet est un frigo
			    {
			        if(!dFridgeInfos[pAroundItems[playerid][listitem][0]][bFridge])
			        {
					    SendClientMessageEx(playerid, ROUGE, "This item has already been picked up!", "Cet objet a déjà été ramassé !", "¡Esto objeto ya ha recogado!", "Portugais", "Italien", "Dieser Objekte hat schon abgeholt ");
					    return 1;
			        }
			        new dFreeSlot = GetPlayerNextFreeSlot(playerid);
			        if(dFreeSlot == -1)
			        {
					    SendClientMessageEx(playerid, ROUGE, "You cannot carry more items!", "Vous ne pouvez pas porter plus d'objets !", "¡No puede llevar más objetos!", "Portugais", "Italien", "Sie können nicht mehr Objekte tragen!");
					    return 1;
			        }
					#if defined WARNING_PICKUP
					switch(pPlayerInfos[playerid][pLangue])
					{
					 	case LANGUAGE_EN: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Fridge", "If you pick up this fridge, it'll waste all its content.", "Pick up", "Cancel");
					 	case LANGUAGE_FR: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Réfrigérateur", "Si vous ramassez ce réfrigérateur, toute la nourriture sera perdue.", "Ramasser", "Annuler");
					 	case LANGUAGE_ES: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Espagnol", "Espagnol", "Ok", "");
					 	case LANGUAGE_PG: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Portugais", "Portugais", "Ok", "");
						case LANGUAGE_IT: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Italien", "Italien", "Ok", "");
						case LANGUAGE_DE: ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX, "Allemand", "Allemand" , "Ok", "");
					}
		        	pAroundItems[playerid][0][0] = pAroundItems[playerid][listitem][0];
		        	pAroundItems[playerid][0][1] = pAroundItems[playerid][listitem][1];
					#else
					ApplyAnimation(playerid, "CARRY", "liftup", 3.0, 0, 0, 0, 0, 0);
				    GivePlayerSlotObject(playerid, 130, dFreeSlot);
		        	DestroyFridge(pAroundItems[playerid][listitem][0]);
		        	#endif
			    }
	        }
	    }
	    case 7://CRÉATION COFFRE FORT
	    {
	        if(response)
			{
			    if(!IsNumeric(inputtext) || strlen(inputtext) != 4)
			    {
					switch(pPlayerInfos[playerid][pLangue])
					{
					   	case LANGUAGE_EN: ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Safe", "Enter a four numbered code:", "Ok", "Cancel");
					   	case LANGUAGE_FR: ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Coffre Fort", "Écrivez un nombre à quatre chiffres comme code:", "Ok", "Annuler");
					   	case LANGUAGE_ES: ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Espagnol", "Espagnol", "Ok", "Espagnol");
					   	case LANGUAGE_PG: ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Portugais", "Portugais", "Ok", "Portugais");
						case LANGUAGE_IT: ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Italien", "Italien", "Ok", "Italien");
						case LANGUAGE_DE: ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Allemand", "Allemand" , "Ok", "Allemand");
					}
					return 1;
			    }
			    //---
			    format(dSafeInfos[pCreateSafe[playerid]][sSafeCode], 5, "%s", inputtext);
				ApplyAnimation(playerid, "GRENADE", "WEAPON_throwu", 4.0, 0, 0, 0, 0, 0, 1);
				ChangeSafeDoorState(pCreateSafe[playerid], true);
				pCreateSafe[playerid] = -1;
			}
			else if(!response)
			{
				DestroySafe(pCreateSafe[playerid]);
				pCreateSafe[playerid] = -1;
				GivePlayerSlotObject(playerid, 97, GetPlayerNextFreeSlot(playerid));
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
			}
	    }
	    case 8://OUVERTURE COFFRE FORT
	    {
	        if(response)
			{
			    if(!strlen(inputtext) || strcmp(inputtext, dSafeInfos[pPlayerSafe[playerid]][sSafeCode], true) != 0)
			    {
					LogInfo(true, "[JOUEUR]%s s'est trompe de code pour ouvrir le coffre %d.", GetName(playerid), pPlayerSafe[playerid]);
					ShowPlayerTextInfo(playerid, 5000, "~r~Wrong code.", "~r~Mauvais code.", "~r~Espagnol", "~r~Portugais", "~r~Italien", "~r~Allemand");
					return 1;
			    }
			    //---
				ChangeSafeDoorState(pPlayerSafe[playerid], true);
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
				LogInfo(true, "[JOUEUR]%s ouvre la porte du coffre %d.", GetName(playerid), pPlayerSafe[playerid]);
			}
			else if(!response)
			{
				pPlayerSafe[playerid] = -1;
			}
	    }
	    case 9://DROP OR
	    {
	        if(response)
	        {
	            new Float:fVal = floatstr(inputtext);
			    new dGoldValue = floatround(fVal * 10, floatround_round);
			    if(fVal < 0.1 || strlen(inputtext) == 0 || !HasPlayerGold(playerid, dGoldValue))
			    {
					switch(pPlayerInfos[playerid][pLangue])
					{
						case LANGUAGE_EN: ShowPlayerDialog(playerid, 9, DIALOG_STYLE_INPUT, "Gold", "How much gold do you want to drop?", "Drop", "Cancel");
						case LANGUAGE_FR: ShowPlayerDialog(playerid, 9, DIALOG_STYLE_INPUT, "Or", "Combien d'or voulez-vous lâcher ?", "Lâcher", "Annuler");
		    			case LANGUAGE_ES: ShowPlayerDialog(playerid, 9, DIALOG_STYLE_INPUT, "Oro", "¿Cuando oro quiere depositar?", "Depositar", "Cancelar");
		    			case LANGUAGE_PG: ShowPlayerDialog(playerid, 9, DIALOG_STYLE_INPUT, "Ouro", "Portugais", "Portugais", "Portugais");
						case LANGUAGE_IT: ShowPlayerDialog(playerid, 9, DIALOG_STYLE_INPUT, "Oro", "Quanto di oro vuoi depositare ?", "Depositare", "Italien");
						case LANGUAGE_DE: ShowPlayerDialog(playerid, 9, DIALOG_STYLE_INPUT, "Gold", "Wie viele Gold wollen Sie " , "Allemand", "Schlissen");
					}
					return 1;
			    }
				LogInfo(true, "[JOUEUR]%s depose %.1fg d'or", GetName(playerid), floatdiv(dGoldValue, 10));
				PlayerDropGold(playerid, dGoldValue, floatdiv(RandomEx(5, 20), 10));
				GivePlayerGold(playerid, -dGoldValue);
				ApplyAnimation(playerid, "GRENADE", "WEAPON_throwu", 4.0, 0, 0, 0, 0, 0, 1);
	        }
	    }
	    case 10://CRÉATION PORTE
	    {
	        if(response)
			{
			    if(!IsNumeric(inputtext) || strlen(inputtext) != 4)
			    {
					switch(pPlayerInfos[playerid][pLangue])
					{
					   	case LANGUAGE_EN: ShowPlayerDialog(playerid, 10, DIALOG_STYLE_INPUT, "Door", "Enter a four numbered code:", "Ok", "");
	   					case LANGUAGE_FR: ShowPlayerDialog(playerid, 10, DIALOG_STYLE_INPUT, "Porte", "Écrivez un nombre à quatre chiffres comme code:", "Ok", "");
	   					case LANGUAGE_ES: ShowPlayerDialog(playerid, 10, DIALOG_STYLE_INPUT, "Puerta", "Espagnol", "Ok", "");
	   					case LANGUAGE_PG: ShowPlayerDialog(playerid, 10, DIALOG_STYLE_INPUT, "Porta", "Portugais", "Ok", "");
						case LANGUAGE_IT: ShowPlayerDialog(playerid, 10, DIALOG_STYLE_INPUT, "Porta", "Italien", "Ok", "");
						case LANGUAGE_DE: ShowPlayerDialog(playerid, 10, DIALOG_STYLE_INPUT, "Tür", "Allemand" , "Ok", "");
					}
					return 1;
			    }
   			 	//---
			    format(dHouse[dHouseID[playerid]][sCodePorte], 5, "%s", inputtext);
				GivePlayerSlotObject(playerid, -1, HasPlayerItem(playerid, 112));
				//---
				new type, Float:x, Float:y, Float:z, Float:angle;
				x = dHouse[dHouseID[playerid]][xHouse];
				y = dHouse[dHouseID[playerid]][yHouse];
				z = dHouse[dHouseID[playerid]][zHouse];
				angle = dHouse[dHouseID[playerid]][aHouse];
				type = dHouse[dHouseID[playerid]][dHouseType];
				//---
				DestroyHouse(dHouseID[playerid]);
				CreateHouse(type, true, x, y, z, angle, dHouseID[playerid]);
				ChangeHouseDoorState(dHouseID[playerid], true);
				//---
				dHouseID[playerid] = -1;
				dHouseBuild[playerid] = 0;
			}
			else if(!response)
			{
				switch(pPlayerInfos[playerid][pLangue])
				{
					case LANGUAGE_EN: ShowPlayerDialog(playerid, 10, DIALOG_STYLE_INPUT, "Door", "Enter a four numbered code:", "Ok", "");
					case LANGUAGE_FR: ShowPlayerDialog(playerid, 10, DIALOG_STYLE_INPUT, "Porte", "Écrivez un nombre à quatre chiffres comme code:", "Ok", "");
					case LANGUAGE_ES: ShowPlayerDialog(playerid, 10, DIALOG_STYLE_INPUT, "Puerta", "Espagnol", "Ok", "");
					case LANGUAGE_PG: ShowPlayerDialog(playerid, 10, DIALOG_STYLE_INPUT, "Porta", "Portugais", "Ok", "");
					case LANGUAGE_IT: ShowPlayerDialog(playerid, 10, DIALOG_STYLE_INPUT, "Porta", "Italien", "Ok", "");
					case LANGUAGE_DE: ShowPlayerDialog(playerid, 10, DIALOG_STYLE_INPUT, "Tür", "Allemand" , "Ok", "");
				}
				return 1;
			}
	    }
	    case 11://OUVERTURE PORTE MAISON
	    {
	        if(response)
			{
			    if(!strlen(inputtext) || strcmp(inputtext, dHouse[dDoor[playerid]][sCodePorte], true) != 0)
			    {
					LogInfo(true, "[JOUEUR]%s s'est trompe de code pour ouvrir la maison %d.", GetName(playerid), dDoor[playerid]);
					ShowPlayerTextInfo(playerid, 5000, "~r~Wrong code.", "~r~Mauvais code.", "~r~Espagnol", "~r~Portugais", "~r~Italien", "~r~Allemand");
					return 1;
			    }
			    //---
				ChangeHouseDoorState(dDoor[playerid], true, GetDoorFacingForPlayer(dDoor[playerid], playerid));
				LogInfo(true, "[JOUEUR]%s ouvre la porte de la maison %d.", GetName(playerid), dDoor[playerid]);
				dDoor[playerid] = -1;
			}
			else if(!response)
			{
				dDoor[playerid] = -1;
			}
	    }
	    case 12://ADMINISTRATION
	    {
	        if(response)
	        {
	        	if(listitem == 0)
				{
					ShowPlayerDialog(playerid, 13, DIALOG_STYLE_LIST, "Admin", AllPlayersString(), ">", "X");
				}
				else if(listitem == 1)
				{
				    if(pPlayerInfos[playerid][pAdmin] == MODERATOR)
				    {
						switch(pPlayerInfos[playerid][pLangue])
						{
						 	case LANGUAGE_EN: ShowPlayerDialog(playerid, 14, DIALOG_STYLE_LIST, "Admin", "{00F000}Change day\n{00F000}Change weather\n{00F000}Change time\n{CC0000}Destroy house\n{CC0000}Destroy garage\n{CC0000}Destroy tank\n{CC0000}Ban a player\n{CC0000}Unban player\n{CC0000}Ban IP\n{CC0000}Unban IP\n{CC0000}Reboot\n{CC0000}Reload filterscript\n{CC0000}See logs", "Ok", "Back");
						 	case LANGUAGE_FR: ShowPlayerDialog(playerid, 14, DIALOG_STYLE_LIST, "Admin", "{00F000}Changer jour\n{00F000}Changer météo\n{00F000}Changer heure\n{CC0000}Détruire maison\n{CC0000}Détruire garage\n{CC0000}Détruire citerne\n{CC0000}Bannir un joueur\n{CC0000}Débannir un joueur\n{CC0000}Bannir IP\n{CC0000}Débannir IP\n{CC0000}Reboot\n{CC0000}Recharger filterscript\n{CC0000}Voir logs", "Ok", "Précédent");
				 			case LANGUAGE_ES: ShowPlayerDialog(playerid, 14, DIALOG_STYLE_LIST, "Admin", "{00F000}Cambiar dío\n{00F000}Cambiar tiempo\n{00F000}Cambiar hora\n{CC0000}Destruir casa\n{CC0000}Destruir garaje\n{CC0000}Destruir tanque\n{CC0000}Ban un jugador\n{CC0000}Unban jugador\n{CC0000}Ban IP\n{CC0000}Unban IP\n{CC0000}Reboot\n{CC0000}Recargar filterscript\n{CC0000}Espagnol", "Ok", "Anterior");
				 			case LANGUAGE_PG: ShowPlayerDialog(playerid, 14, DIALOG_STYLE_LIST, "Admin", "{00F000}Portugais\n{00F000}Portugais\n{00F000}Portugais\n{CC0000}Portugais\n{CC0000}Portugais\n{CC0000}Portugais\n{CC0000}Portugais\n{CC0000}Portugais\n{CC0000}Portugais\n{CC0000}Portugais\n{CC0000}Reboot\n{CC0000}Recarregar filterscript\n{CC0000}Portugais", "Ok", "Anterior");
							case LANGUAGE_IT: ShowPlayerDialog(playerid, 14, DIALOG_STYLE_LIST, "Admin", "{00F000}Italien\n{00F000}Italien\n{00F000}Italien\n{CC0000}Italien\n{CC0000}Italien\n{CC0000}Italien\n{CC0000}Italien\n{CC0000}Italien\n{CC0000}Italien\n{CC0000}Italien\n{CC0000}Reboot\n{CC0000}Ricaricare filterscript\n{CC0000}Italien", "Ok", "Indietro");
							case LANGUAGE_DE: ShowPlayerDialog(playerid, 14, DIALOG_STYLE_LIST, "Admin", "{00F000}Allemand\n{00F000}Allemand\n{00F000}Allemand\n{CC0000}Allemand\n{CC0000}Allemand\n{CC0000}Allemand\n{CC0000}Allemand\n{CC0000}Allemand\n{CC0000}Allemand\n{CC0000}Allemand\n{CC0000}Server neustarten\n{CC0000}Neuladen filterscript\n{CC0000}Allemand" , "Ok", "Zurück");
						}
					}
				    else if(pPlayerInfos[playerid][pAdmin] == ADMINISTRATOR)
				    {
						switch(pPlayerInfos[playerid][pLangue])
						{
						 	case LANGUAGE_EN: ShowPlayerDialog(playerid, 14, DIALOG_STYLE_LIST, "Admin", "{00F000}Change day\n{00F000}Change weather\n{00F000}Change time\n{CC0000}Destroy house\n{CC0000}Destroy garage\n{CC0000}Destroy tank\n{00F000}Ban a player\n{00F000}Unban player\n{00F000}Ban IP\n{00F000}Unban IP\n{CC0000}Reboot\n{CC0000}Reload filterscript\n{00F000}See logs", "Ok", "");
						 	case LANGUAGE_FR: ShowPlayerDialog(playerid, 14, DIALOG_STYLE_LIST, "Admin", "{00F000}Changer jour\n{00F000}Changer météo\n{00F000}Changer heure\n{CC0000}Détruire maison\n{CC0000}Détruire garage\n{CC0000}Détruire citerne\n{00F000}Bannir un joueur\n{CC0000}Débannir un joueur\n{CC0000}Bannir IP\n{CC0000}Débannir IP\n{CC0000}Reboot\n{CC0000}Recharger filterscript\n{00F000}Voir logs", "Ok", "Précédent");
				 			case LANGUAGE_ES: ShowPlayerDialog(playerid, 14, DIALOG_STYLE_LIST, "Admin", "{00F000}Cambiar dío\n{00F000}Cambiar tiempo\n{00F000}Cambiar hora\n{CC0000}Destruir casa\n{CC0000}Destruir garaje\n{CC0000}Destruir tanque\n{00F000}Ban un jugador desconectado\n{00F000}Unban jugador\n{00F000}Ban IP\n{00F000}Unban IP\n{CC0000}Reboot\n{CC0000}Recargar filterscript\n{00F000}Espagnol", "Ok", "Anterior");
				 			case LANGUAGE_PG: ShowPlayerDialog(playerid, 14, DIALOG_STYLE_LIST, "Admin", "{00F000}Portugais\n{00F000}Portugais\n{00F000}Portugais\n{CC0000}Portugais\n{CC0000}Portugais\n{CC0000}Portugais\n{00F000}Portugais\n{00F000}Portugais\n{00F000}Portugais\n{00F000}Portugais\n{CC0000}Reboot\n{CC0000}Recarregar filterscript\n{00F000}Portugais", "Ok", "Anterior");
							case LANGUAGE_IT: ShowPlayerDialog(playerid, 14, DIALOG_STYLE_LIST, "Admin", "{00F000}Italien\n{00F000}Italien\n{00F000}Italien\n{CC0000}Italien\n{CC0000}Italien\n{CC0000}Italien\n{00F000}Italien\n{00F000}Italien\n{00F000}Italien\n{00F000}Italien\n{00F000}Reboot\n{CC0000}Ricaricare filterscript\n{00F000}Italien", "Ok", "Indietro");
							case LANGUAGE_DE: ShowPlayerDialog(playerid, 14, DIALOG_STYLE_LIST, "Admin", "{00F000}Allemand\n{00F000}Allemand\n{00F000}Allemand\n{CC0000}Allemand\n{CC0000}Allemand\n{CC0000}Allemand\n{00F000}Allemand\n{00F000}Allemand\n{00F000}Allemand\n{00F000}Allemand\n{CC0000}Server neustarten\n{CC0000}Neuladen filterscript\n{00F000}Allemand" , "Ok", "Zurück");
						}
					}
				    else if(pPlayerInfos[playerid][pAdmin] == OWNER)
				    {
						switch(pPlayerInfos[playerid][pLangue])
						{
						 	case LANGUAGE_EN: ShowPlayerDialog(playerid, 14, DIALOG_STYLE_LIST, "Admin", "{00F000}Change day\n{00F000}Change weather\n{00F000}Change time\n{00F000}Destroy house\n{00F000}Destroy garage\n{00F000}Destroy tank\n{00F000}Ban a player\n{00F000}Unban player\n{00F000}Ban IP\n{00F000}Unban IP\n{00F000}Reboot\n{00F000}Reload filterscript\n{00F000}See logs", "Ok", "");
						 	case LANGUAGE_FR: ShowPlayerDialog(playerid, 14, DIALOG_STYLE_LIST, "Admin", "{00F000}Changer jour\n{00F000}Changer météo\n{00F000}Changer heure\n{00F000}Détruire maison\n{00F000}Détruire garage\n{00F000}Détruire citerne\n{00F000}Bannir un joueur\n{00F000}Débannir un joueur\n{00F000}Bannir IP\n{00F000}Débannir IP\n{00F000}Reboot\n{00F000}Recharger filterscript\n{00F000}Voir logs", "Ok", "Précédent");
				 			case LANGUAGE_ES: ShowPlayerDialog(playerid, 14, DIALOG_STYLE_LIST, "Admin", "{00F000}Cambiar dío\n{00F000}Cambiar tiempo\n{00F000}Cambiar hora\n{00F000}Destruir casa\n{00F000}Destruir garaje\n{00F000}Destruir tanque\n{00F000}Ban un jugador\n{00F000}Unban jugador\n{00F000}Ban IP\n{00F000}Unban IP\n{00F000}Reboot\n{00F000}Recargar filterscript\n{00F000}Espagnol", "Ok", "Anterior");
				 			case LANGUAGE_PG: ShowPlayerDialog(playerid, 14, DIALOG_STYLE_LIST, "Admin", "{00F000}Portugais\n{00F000}Portugais\n{00F000}Portugais\n{00F000}Portugais\n{00F000}Portugais\n{00F000}Portugais\n{00F000}Portugais\n{00F000}Portugais\n{00F000}Portugais\n{00F000}Portugais\n{00F000}Reboot\n{00F000}Recarregar filterscript\n{00F000}Portugais", "Ok", "Anterior");
							case LANGUAGE_IT: ShowPlayerDialog(playerid, 14, DIALOG_STYLE_LIST, "Admin", "{00F000}Italien\n{00F000}Italien\n{00F000}Italien\n{00F000}Italien\n{00F000}Italien\n{00F000}Italien\n{00F000}Italien\n{00F000}Italien\n{00F000}Italien\n{00F000}Italien\n{CC0000}Reboot\n{00F000}Ricaricare filterscript\n{00F000}Italien", "Ok", "Indietro");
							case LANGUAGE_DE: ShowPlayerDialog(playerid, 14, DIALOG_STYLE_LIST, "Admin", "{00F000}Allemand\n{00F000}Allemand\n{00F000}Allemand\n{00F000}Allemand\n{00F000}Allemand\n{00F000}Allemand\n{00F000}Allemand\n{00F000}Allemand\n{00F000}Allemand\n{00F000}Allemand\n{00F000}Server neustarten\n{00F000}Neuladen filterscript\n{00F000}Allemand" , "Ok", "Zurück");
						}
					}
				}
	        }
	    }
	    case 13://ADMINISTRATION JOUEUR
	    {
	        if(response)
	        {
	            new dPuni = INVALID_PLAYER_ID;
				dPuni = PlayeridFromName(inputtext);
				//---
				if(dPuni == INVALID_PLAYER_ID)
				{
				    ShowPlayerAdminDialog(playerid);
					return 1;
				}
				else
				{
				    pAdminInfos[playerid][dPuniID] = dPuni;
				    //---
				    if(pPlayerInfos[playerid][pAdmin] == MODERATOR)
				    {
						switch(pPlayerInfos[playerid][pLangue])
						{
						 	case LANGUAGE_EN: ShowPlayerDialog(playerid, 15, DIALOG_STYLE_LIST, GetName(dPuni), "{00F000}Kick\n{CC0000}Ban\n{00F000}Freeze\n{00F000}Unfreeze\n{00F000}Mute\n{00F000}Unmute\n{CC0000}Rename\n{00F000}IP\n{00F000}TP\n{00F000}Give object\n{CC0000}Set staff\n{00F000}Kill\n{00F000}Spectate\n{00F000}Give gold", "Ok", "Back");
						 	case LANGUAGE_FR: ShowPlayerDialog(playerid, 15, DIALOG_STYLE_LIST, GetName(dPuni), "{00F000}Kick\n{CC0000}Bannir\n{00F000}Freeze\n{00F000}Unfreeze\n{00F000}Mute\n{00F000}Unmute\n{CC0000}Renommer\n{00F000}IP\n{00F000}TP\n{00F000}Donner objet\n{CC0000}Mettre staff\n{00F000}Tuer\n{00F000}Observer\n{00F000}Donner or", "Ok", "Précédent");
				 			case LANGUAGE_ES: ShowPlayerDialog(playerid, 15, DIALOG_STYLE_LIST, GetName(dPuni), "{00F000}Kick\n{CC0000}Ban\n{00F000}Freeze\n{00F000}Unfreeze\n{00F000}Mute\n{00F000}Unmute\n{CC0000}Espagnol\n{00F000}IP\n{00F000}TP\n{00F000}Der objecto\n{CC0000}Poner staff\n{00F000}Matar\n{00F000}Espagnol\n{00F000}Espagnol", "Ok", "Anterior");
				 			case LANGUAGE_PG: ShowPlayerDialog(playerid, 15, DIALOG_STYLE_LIST, GetName(dPuni), "{00F000}Kick\n{CC0000}Ban\n{00F000}Freeze\n{00F000}Unfreeze\n{00F000}Mute\n{00F000}Unmute\n{CC0000}Portugais\n{00F000}IP\n{00F000}TP\n{00F000}Portugais\n{CC0000}Portugais\n{00F000}Portugais\n{00F000}Portugais\n{00F000}Portugais", "Ok", "Anterior");
							case LANGUAGE_IT: ShowPlayerDialog(playerid, 15, DIALOG_STYLE_LIST, GetName(dPuni), "{00F000}Kick\n{CC0000}Ban\n{00F000}Freeze\n{00F000}Unfreeze\n{00F000}Mute\n{00F000}Unmute\n{CC0000}Italien\n{00F000}IP\n{00F000}TP\n{00F000}Italien\n{CC0000}Italien\n{00F000}Italien\n{00F000}Italien\n{00F000}Italien", "Ok", "Indietro");
							case LANGUAGE_DE: ShowPlayerDialog(playerid, 15, DIALOG_STYLE_LIST, GetName(dPuni), "{00F000}Kick\n{CC0000}Ban\n{00F000}Freeze\n{00F000}Unfreeze\n{00F000}Mute\n{00F000}Unmute\n{CC0000}Allemand\n{00F000}IP\n{00F000}TP\n{00F000}Allemand\n{CC0000}Allemand\n{00F000}Allemand\n{00F000}Allemand\n{00F000}Allemand" , "Ok", "Zurück");
						}
					}
				    else if(pPlayerInfos[playerid][pAdmin] == ADMINISTRATOR)
				    {
						switch(pPlayerInfos[playerid][pLangue])
						{
						 	case LANGUAGE_EN: ShowPlayerDialog(playerid, 15, DIALOG_STYLE_LIST, GetName(dPuni), "{00F000}Kick\n{00F000}Ban\n{00F000}Freeze\n{00F000}Unfreeze\n{00F000}Mute\n{00F000}Unmute\n{00F000}Rename\n{00F000}IP\n{00F000}TP\n{00F000}Give object\n{CC0000}Set staff\n{00F000}Kill\n{00F000}Spectate\n{00F000}Give gold", "Ok", "Back");
						 	case LANGUAGE_FR: ShowPlayerDialog(playerid, 15, DIALOG_STYLE_LIST, GetName(dPuni), "{00F000}Kick\n{00F000}Bannir\n{00F000}Freeze\n{00F000}Unfreeze\n{00F000}Mute\n{00F000}Unmute\n{00F000}Renommer\n{00F000}IP\n{00F000}TP\n{00F000}Donner objet\n{CC0000}Mettre staff\n{00F000}Tuer\n{00F000}Observer\n{00F000}Donner or", "Ok", "Précédent");
				 			case LANGUAGE_ES: ShowPlayerDialog(playerid, 15, DIALOG_STYLE_LIST, GetName(dPuni), "{00F000}Kick\n{00F000}Ban\n{00F000}Freeze\n{00F000}Unfreeze\n{00F000}Mute\n{00F000}Unmute\n{00F000}Espagnol\n{00F000}IP\n{00F000}TP\n{00F000}Der objecto\n{CC0000}Poner staff\n{00F000}Matar\n{00F000}Espagnol\n{00F000}Espagnol", "Ok", "Anterior");
				 			case LANGUAGE_PG: ShowPlayerDialog(playerid, 15, DIALOG_STYLE_LIST, GetName(dPuni), "{00F000}Kick\n{00F000}Ban\n{00F000}Freeze\n{00F000}Unfreeze\n{00F000}Mute\n{00F000}Unmute\n{00F000}Portugais\n{00F000}IP\n{00F000}TP\n{00F000}Portugais\n{CC0000}Portugais\n{00F000}Portugais\n{00F000}Portugais\n{00F000}Portugais", "Ok", "Anterior");
							case LANGUAGE_IT: ShowPlayerDialog(playerid, 15, DIALOG_STYLE_LIST, GetName(dPuni), "{00F000}Kick\n{00F000}Italien\n{00F000}Freeze\n{00F000}Unfreeze\n{00F000}Mute\n{00F000}Unmute\n{00F000}Italien\n{00F000}IP\n{00F000}TP\n{00F000}Italien\n{CC0000}Italien\n{00F000}Italien\n{00F000}Italien\n{00F000}Italien", "Ok", "Indietro");
							case LANGUAGE_DE: ShowPlayerDialog(playerid, 15, DIALOG_STYLE_LIST, GetName(dPuni), "{00F000}Kick\n{00F000}Ban\n{00F000}Freeze\n{00F000}Unfreeze\n{00F000}Mute\n{00F000}Unmute\n{00F000}Allemand\n{00F000}IP\n{00F000}TP\n{00F000}Allemand\n{CC0000}Allemand\n{00F000}Allemand\n{00F000}Allemand\n{00F000}Allemand" , "Ok", "Zurück");
						}
					}
				    else if(pPlayerInfos[playerid][pAdmin] == OWNER)
				    {
						switch(pPlayerInfos[playerid][pLangue])
						{
						 	case LANGUAGE_EN: ShowPlayerDialog(playerid, 15, DIALOG_STYLE_LIST, GetName(dPuni), "{00F000}Kick\n{00F000}Ban\n{00F000}Freeze\n{00F000}Unfreeze\n{00F000}Mute\n{00F000}Unmute\n{00F000}Rename\n{00F000}IP\n{00F000}TP\n{00F000}Give object\n{00F000}Set staff\n{00F000}Kill\n{00F000}Spectate\n{00F000}Give gold", "Ok", "Back");
						 	case LANGUAGE_FR: ShowPlayerDialog(playerid, 15, DIALOG_STYLE_LIST, GetName(dPuni), "{00F000}Kick\n{00F000}Bannir\n{00F000}Freeze\n{00F000}Unfreeze\n{00F000}Mute\n{00F000}Unmute\n{00F000}Renommer\n{00F000}IP\n{00F000}TP\n{00F000}Donner objet\n{00F000}Mettre staff\n{00F000}Tuer\n{00F000}Observer\n{00F000}Donner or", "Ok", "Précédent");
				 			case LANGUAGE_ES: ShowPlayerDialog(playerid, 15, DIALOG_STYLE_LIST, GetName(dPuni), "{00F000}Kick\n{00F000}Ban\n{00F000}Freeze\n{00F000}Unfreeze\n{00F000}Mute\n{00F000}Unmute\n{00F000}Espagnol\n{00F000}IP\n{00F000}TP\n{00F000}Der objecto\n{00F000}Poner staff\n{00F000}Matar\n{00F000}Espagnol\n{00F000}Espagnol", "Ok", "Anterior");
				 			case LANGUAGE_PG: ShowPlayerDialog(playerid, 15, DIALOG_STYLE_LIST, GetName(dPuni), "{00F000}Kick\n{00F000}Ban\n{00F000}Freeze\n{00F000}Unfreeze\n{00F000}Mute\n{00F000}Unmute\n{00F000}Portugais\n{00F000}IP\n{00F000}TP\n{00F000}Portugais\n{00F000}Portugais\n{00F000}Portugais\n{00F000}Portugais\n{00F000}Portugais", "Ok", "Anterior");
							case LANGUAGE_IT: ShowPlayerDialog(playerid, 15, DIALOG_STYLE_LIST, GetName(dPuni), "{00F000}Kick\n{00F000}Italien\n{00F000}Freeze\n{00F000}Unfreeze\n{00F000}Mute\n{00F000}Unmute\n{00F000}Italien\n{00F000}IP\n{00F000}TP\n{00F000}Italien\n{00F000}Italien\n{00F000}Italien\n{00F000}Italien\n{00F000}Italien", "Ok", "Indietro");
							case LANGUAGE_DE: ShowPlayerDialog(playerid, 15, DIALOG_STYLE_LIST, GetName(dPuni), "{00F000}Kick\n{00F000}Ban\n{00F000}Freeze\n{00F000}Unfreeze\n{00F000}Mute\n{00F000}Unmute\n{00F000}Allemand\n{00F000}IP\n{00F000}TP\n{00F000}Allemand\n{00F000}Allemand\n{00F000}Allemand\n{00F000}Allemand\n{00F000}Allemand" , "Ok", "Zurück");
						}
					}
				}
	        }
	        else if(!response)
	        {
				ShowPlayerAdminDialog(playerid);
			}
	    }
	    case 14://ADMINISTRATION SERVEUR
	    {
	        if(response)
	        {
				switch(listitem)
				{
				    case 0://Changer jour
				    {
						switch(pPlayerInfos[playerid][pLangue])
						{
							case LANGUAGE_EN: ShowPlayerDialog(playerid, 42, DIALOG_STYLE_LIST, "Admin", "Monday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday", "Ok", "Cancel");
							case LANGUAGE_FR: ShowPlayerDialog(playerid, 42, DIALOG_STYLE_LIST, "Admin", "Lundi\nMardi\nMercredi\nJeudi\nVendredi\nSamedi\nDimanche", "Ok", "Annuler");
			    			case LANGUAGE_ES: ShowPlayerDialog(playerid, 42, DIALOG_STYLE_LIST, "Admin", "Espagnol", "Ok", "Cancelar");
			    			case LANGUAGE_PG: ShowPlayerDialog(playerid, 42, DIALOG_STYLE_LIST, "Admin", "Portugais", "Ok", "Portugais");
							case LANGUAGE_IT: ShowPlayerDialog(playerid, 42, DIALOG_STYLE_LIST, "Admin", "Italien", "Ok", "Italien");
							case LANGUAGE_DE: ShowPlayerDialog(playerid, 42, DIALOG_STYLE_LIST, "Admin", "Allemand" , "Ok", "Schlissen");
						}
				    }
				    case 1://Changer météo
				    {
						switch(pPlayerInfos[playerid][pLangue])
						{
							case LANGUAGE_EN: ShowPlayerDialog(playerid, 16, DIALOG_STYLE_LIST, "Admin", "Blue sky\nRain\nNormal\nMist\nHot and colored\nBeautiful", "Ok", "Cancel");
							case LANGUAGE_FR: ShowPlayerDialog(playerid, 16, DIALOG_STYLE_LIST, "Admin", "Ciel bleu\nPluie\nNormal\nBrûme\nChaud et coloré\nBeau", "Ok", "Annuler");
			    			case LANGUAGE_ES: ShowPlayerDialog(playerid, 16, DIALOG_STYLE_LIST, "Admin", "Espagnol", "Ok", "Cancelar");
			    			case LANGUAGE_PG: ShowPlayerDialog(playerid, 16, DIALOG_STYLE_LIST, "Admin", "Portugais", "Ok", "Portugais");
							case LANGUAGE_IT: ShowPlayerDialog(playerid, 16, DIALOG_STYLE_LIST, "Admin", "Italien", "Ok", "Italien");
							case LANGUAGE_DE: ShowPlayerDialog(playerid, 16, DIALOG_STYLE_LIST, "Admin", "Allemand" , "Ok", "Schlissen");
						}
				    }
				    case 2://Changer heure
				    {
						ShowPlayerDialog(playerid, 17, DIALOG_STYLE_LIST, "Admin", "{0000FF}0h\n{0000FF}2h\n{0000FF}4h\n{0080FF}6h\n{0080FF}8h\n{0080FF}10h\n{0080FF}12h\n{0080FF}14h\n{0080FF}16h\n{0080FF}18h\n{0080FF}20h\n{0000FF}22h", "Ok", "Cancel");
				    }
				    case 3://Détruire une maison
				    {
				        if(pPlayerInfos[playerid][pAdmin] >= OWNER)
				        {
					        new dNearHouse = -1;
							for(new i = 0; i < MAX_HOUSES; i ++) if(IsPlayerInRangeOfPoint(playerid, 10.0, dHouse[i][xHouse], dHouse[i][yHouse], dHouse[i][zHouse]))
							{
							    dNearHouse = i;
							    break;
							}
							//---
							if(dNearHouse != -1)
							{
							    DestroyHouse(dNearHouse);
								ShowPlayerAdminDialog(playerid);
							}
						}
						else
						{
							ShowPlayerAdminDialog(playerid);
						}
				    }
				    case 4://Détruire un garage
				    {
				        if(pPlayerInfos[playerid][pAdmin] >= OWNER)
				        {
					        new dNearGarage = -1;
							for(new i = 0; i < MAX_GARAGES; i ++) if(IsPlayerInRangeOfPoint(playerid, 10.0, dGarage[i][xGarage], dGarage[i][yGarage], dGarage[i][zGarage]))
							{
							    dNearGarage = i;
							    break;
							}
							//---
							if(dNearGarage != -1)
							{
							    DestroyGarage(dNearGarage);
								ShowPlayerAdminDialog(playerid);
							}
						}
						else
						{
							ShowPlayerAdminDialog(playerid);
						}
				    }
				    case 5://Détruire une citerne
				    {
				        if(pPlayerInfos[playerid][pAdmin] >= OWNER)
				        {
					        new dNearTank = -1;
							dNearTank = IsPlayerNearTank(playerid);
							//---
							if(dNearTank != -1)
							{
							    DestroyTank(dNearTank);
								ShowPlayerAdminDialog(playerid);
							}
						}
						else
						{
							ShowPlayerAdminDialog(playerid);
						}
				    }
				    case 6://Bannir un joueur
				    {
				        if(pPlayerInfos[playerid][pAdmin] >= ADMINISTRATOR)
				        {
					        pAdminInfos[playerid][dPunition] = -1;
							switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Enter the {CC0000}name {FFFFFF}of the player to ban:", "Ban", "Cancel");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Écrivez le {CC0000}pseudo {FFFFFF}du joueur à bannir:", "Bannir", "Annuler");
				    			case LANGUAGE_ES: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "Espagnol", "Ok", "Cancelar");
				    			case LANGUAGE_PG: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "Portugais", "Ok", "Portugais");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "Italien", "Ok", "Italien");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "Allemand" , "Ok", "Schlissen");
							}
						}
						else
						{
							ShowPlayerAdminDialog(playerid);
						}
				    }
				    case 7://Débannir un joueur
				    {
				        if(pPlayerInfos[playerid][pAdmin] >= ADMINISTRATOR)
				        {
					        pAdminInfos[playerid][dPunition] = -2;
							switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Enter the {CC0000}name {FFFFFF}of the player to unban:", "Unban", "Cancel");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Écrivez le {CC0000}pseudo {FFFFFF}du joueur à débannir:", "Débannir", "Annuler");
				    			case LANGUAGE_ES: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "Espagnol", "Ok", "Cancelar");
				    			case LANGUAGE_PG: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "Portugais", "Ok", "Portugais");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "Italien", "Ok", "Italien");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "Allemand" , "Ok", "Schlissen");
							}
						}
						else
						{
							ShowPlayerAdminDialog(playerid);
						}
				    }
				    case 8://Bannir une IP
				    {
				        if(pPlayerInfos[playerid][pAdmin] >= ADMINISTRATOR)
				        {
					        pAdminInfos[playerid][dPunition] = -3;
							switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Enter the {CC0000}IP {FFFFFF}to ban:", "Ban", "Cancel");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Écrivez l'{CC0000}adresse IP {FFFFFF}à bannir:", "Bannir", "Annuler");
				    			case LANGUAGE_ES: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "Espagnol", "Ok", "Cancelar");
				    			case LANGUAGE_PG: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "Portugais", "Ok", "Portugais");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "Italien", "Ok", "Italien");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "Allemand" , "Ok", "Schlissen");
							}
						}
						else
						{
							ShowPlayerAdminDialog(playerid);
						}
				    }
				    case 9://Débannir une IP
				    {
				        if(pPlayerInfos[playerid][pAdmin] >= ADMINISTRATOR)
				        {
					        pAdminInfos[playerid][dPunition] = -4;
							switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Enter the {CC0000}IP adress {FFFFFF}to unban:", "Unban", "Cancel");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Écrivez l'{CC0000}adresse IP {FFFFFF}à débannir:", "Débannir", "Annuler");
				    			case LANGUAGE_ES: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "Espagnol", "Ok", "Cancelar");
				    			case LANGUAGE_PG: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "Portugais", "Ok", "Portugais");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "Italien", "Ok", "Italien");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "Allemand" , "Ok", "Schlissen");
							}
						}
						else
						{
							ShowPlayerAdminDialog(playerid);
						}
				    }
				    case 10://Reboot
				    {
				        if(pPlayerInfos[playerid][pAdmin] >= OWNER)
				        {
					        SendClientMessageToAllEx(ADMIN_COLOR, "[ADMIN]The admin has set the server to reboot!", "[ADMIN]L'admin a lancé la procédure de reboot du serveur !", "[ADMIN]¡El administrator ha hecho un reboot del server!", "[ADMIN]Portugais", "[ADMIN]Italien", "[ADMIN]Allemand");
					        SendClientMessageToAllEx(ADMIN_COLOR, "[ADMIN]The server's and your stats are being saved!", "[ADMIN]Vos stats et celles du serveur sont en train d'être sauvegardées !", "[ADMIN]¡Su estadísticas están guardado por el server!", "[ADMIN]Portugais", "[ADMIN]Italien", "[ADMIN]Allemand");
							SendRconCommand("gmx");
						}
						else
						{
							ShowPlayerAdminDialog(playerid);
						}
				    }
				    case 11://Recharger Filterscript
				    {
				        if(pPlayerInfos[playerid][pAdmin] >= OWNER)
				        {
							switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 19, DIALOG_STYLE_LIST, "Admin", "[SA]Mapping - Server's mapping\n[SA]Actors - Server's actors\n[SA]ObjectSpawner - Server's item spawn positions\n[SA]Missions - Server's NPC missions\n[SA]Shops - Shops and foodtrucks", "Reload", "Cancel");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 19, DIALOG_STYLE_LIST, "Admin", "[SA]Mapping - Mapping du serveur\n[SA]Actors - Acteurs du serveur\n[SA]ObjectSpawner - Positions de spawn des objets\n[SA]Missions - Missions du serveur\n[SA]Shops - Magasins et stands", "Recharger", "Annuler");
				    			case LANGUAGE_ES: ShowPlayerDialog(playerid, 19, DIALOG_STYLE_LIST, "Admin", "Espagnol", "Ok", "Cancelar");
				    			case LANGUAGE_PG: ShowPlayerDialog(playerid, 19, DIALOG_STYLE_LIST, "Admin", "Portugais", "Ok", "Portugais");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 19, DIALOG_STYLE_LIST, "Admin", "Italien", "Ok", "Italien");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 19, DIALOG_STYLE_LIST, "Admin", "Allemand" , "Ok", "Schlissen");
							}
						}
						else
						{
							ShowPlayerAdminDialog(playerid);
						}
				    }
				    case 12://Voir logs
				    {
				        if(pPlayerInfos[playerid][pAdmin] >= ADMINISTRATOR)
				        {
				            if(pAdminInfos[playerid][bLog])
				            {
								SendClientMessageEx(playerid, ADMIN_COLOR, "[ADMIN]You stopped reviewing the logs.", "[ADMIN]Vous avez arrêté de consulter les logs.", "[ADMIN]Espagnol", "[ADMIN]Portugais", "[ADMIN]Italien", "[ADMIN]Allemand");
						    	pAdminInfos[playerid][bLog] = false;
         					}
				            else
				            {
								SendClientMessageEx(playerid, ADMIN_COLOR, "[ADMIN]You can now see the logs - To stop, reselect the 'See logs' function.", "[ADMIN]Vous pouvez maintenant voir les logs - Pour arrêter, réutilisez la fonction 'Voir logs'.", "[ADMIN]Espagnol", "[ADMIN]Portugais", "[ADMIN]Italien", "[ADMIN]Allemand");
						    	pAdminInfos[playerid][bLog] = true;
				            }
				        }
						else
						{
							ShowPlayerAdminDialog(playerid);
						}
				    }
				}
	        }
	        else if(!response)
	        {
				ShowPlayerAdminDialog(playerid);
	        }
	    }
	    case 15://PUNITIONS JOUEUR
	    {
			if(response)
			{
			    switch(listitem)
			    {
			        case 0://KICK
			        {
						switch(pPlayerInfos[playerid][pLangue])
						{
							case LANGUAGE_EN: ShowPlayerDialog(playerid, 20, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Enter a reason:", "Kick", "Cancel");
							case LANGUAGE_FR: ShowPlayerDialog(playerid, 20, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Entrez une raison:", "Kick", "Annuler");
			    			case LANGUAGE_ES: ShowPlayerDialog(playerid, 20, DIALOG_STYLE_INPUT, "Admin", "Espagnol", "Kick", "Cancelar");
			    			case LANGUAGE_PG: ShowPlayerDialog(playerid, 20, DIALOG_STYLE_INPUT, "Admin", "Portugais", "Kick", "Portugais");
							case LANGUAGE_IT: ShowPlayerDialog(playerid, 20, DIALOG_STYLE_INPUT, "Admin", "Italien", "Kick", "Italien");
							case LANGUAGE_DE: ShowPlayerDialog(playerid, 20, DIALOG_STYLE_INPUT, "Admin", "Allemand" , "Kick", "Schlissen");
						}
			        }
					case 1://BAN
			        {
				        if(pPlayerInfos[playerid][pAdmin] >= ADMINISTRATOR)
				        {
							switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 21, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}How long shall the ban last (In days)?:\nLet empty if lifetime ban.", "Ban", "Cancel");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 21, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Quelle durée voulez-vous appliquer (En jours) ?:\nLaissez vide pour un ban à vie.", "Ban", "Annuler");
			  					case LANGUAGE_ES: ShowPlayerDialog(playerid, 21, DIALOG_STYLE_INPUT, "Admin", "Espagnol", "Ban", "Cancelar");
			  					case LANGUAGE_PG: ShowPlayerDialog(playerid, 21, DIALOG_STYLE_INPUT, "Admin", "Portugais", "Ban", "Portugais");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 21, DIALOG_STYLE_INPUT, "Admin", "Italien", "Ban", "Italien");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 21, DIALOG_STYLE_INPUT, "Admin", "Allemand" , "Ban", "Schlissen");
							}
						}
						else
						{
							ShowPlayerAdminDialog(playerid);
						}
					}
					case 2://FREEZE
					{
						switch(pPlayerInfos[playerid][pLangue])
						{
							case LANGUAGE_EN: ShowPlayerDialog(playerid, 23, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}How long shall the freeze last (In minutes)?:\n{CC0000}Max.: 30.", "Freeze", "Cancel");
							case LANGUAGE_FR: ShowPlayerDialog(playerid, 23, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Quelle durée voulez-vous appliquer (En minutes) ?:\n{CC0000}Max. : 30.", "Freeze", "Annuler");
		  					case LANGUAGE_ES: ShowPlayerDialog(playerid, 23, DIALOG_STYLE_INPUT, "Admin", "Espagnol", "Freeze", "Cancelar");
		  					case LANGUAGE_PG: ShowPlayerDialog(playerid, 23, DIALOG_STYLE_INPUT, "Admin", "Portugais", "Freeze", "Portugais");
							case LANGUAGE_IT: ShowPlayerDialog(playerid, 23, DIALOG_STYLE_INPUT, "Admin", "Italien", "Freeze", "Italien");
							case LANGUAGE_DE: ShowPlayerDialog(playerid, 23, DIALOG_STYLE_INPUT, "Admin", "Allemand" , "Freeze", "Schlissen");
						}
					}
					case 3://UNFREEZE
					{
					    UnfreezePlayer(pAdminInfos[playerid][dPuniID]);
					}
					case 4://MUTE
					{
						switch(pPlayerInfos[playerid][pLangue])
						{
							case LANGUAGE_EN: ShowPlayerDialog(playerid, 25, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}How long shall the mute last (In minutes)?:\n{CC0000}Max.: 30.", "Mute", "Cancel");
							case LANGUAGE_FR: ShowPlayerDialog(playerid, 25, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Quelle durée voulez-vous appliquer (En minutes) ?:\n{CC0000}Max. : 30.", "Mute", "Annuler");
		  					case LANGUAGE_ES: ShowPlayerDialog(playerid, 25, DIALOG_STYLE_INPUT, "Admin", "Espagnol", "Freeze", "Cancelar");
		  					case LANGUAGE_PG: ShowPlayerDialog(playerid, 25, DIALOG_STYLE_INPUT, "Admin", "Portugais", "Freeze", "Portugais");
							case LANGUAGE_IT: ShowPlayerDialog(playerid, 25, DIALOG_STYLE_INPUT, "Admin", "Italien", "Freeze", "Italien");
							case LANGUAGE_DE: ShowPlayerDialog(playerid, 25, DIALOG_STYLE_INPUT, "Admin", "Allemand" , "Freeze", "Schlissen");
						}
					}
					case 5://UNMUTE
					{
					    UnmutePlayer(pAdminInfos[playerid][dPuniID]);
					}
					case 6://RENAME
					{
						switch(pPlayerInfos[playerid][pLangue])
						{
							case LANGUAGE_EN: ShowPlayerDialog(playerid, 27, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Enter the name you want to set for this player:", "Rename", "Cancel");
							case LANGUAGE_FR: ShowPlayerDialog(playerid, 27, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Entrez le nouveau pseudo:", "Rename", "Annuler");
			    			case LANGUAGE_ES: ShowPlayerDialog(playerid, 27, DIALOG_STYLE_INPUT, "Admin", "Espagnol", "Rename", "Cancelar");
			    			case LANGUAGE_PG: ShowPlayerDialog(playerid, 27, DIALOG_STYLE_INPUT, "Admin", "Portugais", "Rename", "Portugais");
							case LANGUAGE_IT: ShowPlayerDialog(playerid, 27, DIALOG_STYLE_INPUT, "Admin", "Italien", "Rename", "Italien");
							case LANGUAGE_DE: ShowPlayerDialog(playerid, 27, DIALOG_STYLE_INPUT, "Admin", "Allemand" , "Rename", "Schlissen");
						}
					}
					case 7://IP
					{
					    new sIP[16];
					    GetPlayerIp(pAdminInfos[playerid][dPuniID], sIP, 16);
					    format(string, sizeof(string), "IP %s: {CC0000}%s", GetName(pAdminInfos[playerid][dPuniID]), sIP);
					    SendClientMessage(playerid, ADMIN_COLOR, string);
					}
					case 8://TP
					{
						switch(pPlayerInfos[playerid][pLangue])
						{
							case LANGUAGE_EN: ShowPlayerDialog(playerid, 28, DIALOG_STYLE_LIST, "Admin", "Teleport the player to you\nTeleport yourself to him\nTeleport to another player\nTeleport another player to", "Ok", "Cancel");
							case LANGUAGE_FR: ShowPlayerDialog(playerid, 28, DIALOG_STYLE_LIST, "Admin", "Téléporter le joueur à vous\nVous téléporter vers lui\nLe téléporter vers un autre joueur\nTéléporter un autre joueur à lui", "Ok", "Annuler");
			    			case LANGUAGE_ES: ShowPlayerDialog(playerid, 28, DIALOG_STYLE_LIST, "Admin", "Espagnol", "Ok", "Cancelar");
			    			case LANGUAGE_PG: ShowPlayerDialog(playerid, 28, DIALOG_STYLE_LIST, "Admin", "Portugais", "Ok", "Portugais");
							case LANGUAGE_IT: ShowPlayerDialog(playerid, 28, DIALOG_STYLE_LIST, "Admin", "Italien", "Ok", "Italien");
							case LANGUAGE_DE: ShowPlayerDialog(playerid, 28, DIALOG_STYLE_LIST, "Admin", "Allemand" , "Ok", "Schlissen");
						}
					}
					case 9://GIVEOBJECT
					{
						switch(pPlayerInfos[playerid][pLangue])
						{
							case LANGUAGE_EN: ShowPlayerDialog(playerid, 30, DIALOG_STYLE_INPUT, "Admin", "What item do you want to give?", "Ok", "Cancel");
							case LANGUAGE_FR: ShowPlayerDialog(playerid, 30, DIALOG_STYLE_INPUT, "Admin", "Quel objet voulez-vous donner ?", "Ok", "Annuler");
			    			case LANGUAGE_ES: ShowPlayerDialog(playerid, 30, DIALOG_STYLE_INPUT, "Admin", "Espagnol", "Ok", "Cancelar");
			    			case LANGUAGE_PG: ShowPlayerDialog(playerid, 30, DIALOG_STYLE_INPUT, "Admin", "Portugais", "Ok", "Portugais");
							case LANGUAGE_IT: ShowPlayerDialog(playerid, 30, DIALOG_STYLE_INPUT, "Admin", "Italien", "Ok", "Italien");
							case LANGUAGE_DE: ShowPlayerDialog(playerid, 30, DIALOG_STYLE_INPUT, "Admin", "Allemand" , "Ok", "Schlissen");
						}
					}
					case 10://STAFF
					{
						switch(pPlayerInfos[playerid][pLangue])
						{
							case LANGUAGE_EN: ShowPlayerDialog(playerid, 37, DIALOG_STYLE_LIST, "Admin", "{FFFFFF}Player\n{FF0000}Moderator\n{4E8EB9}Administrator\n{8A2BE2}Owner", "Set", "Cancel");
							case LANGUAGE_FR: ShowPlayerDialog(playerid, 37, DIALOG_STYLE_LIST, "Admin", "{FFFFFF}Joueur\n{FF0000}Moderateur\n{4E8EB9}Administrateur\n{8A2BE2}Owner", "Mettre", "Annuler");
			    			case LANGUAGE_ES: ShowPlayerDialog(playerid, 37, DIALOG_STYLE_LIST, "Admin", "Espagnol", "Poner", "Cancelar");
			    			case LANGUAGE_PG: ShowPlayerDialog(playerid, 37, DIALOG_STYLE_LIST, "Admin", "Portugais", "Ok", "Portugais");
							case LANGUAGE_IT: ShowPlayerDialog(playerid, 37, DIALOG_STYLE_LIST, "Admin", "Italien", "Ok", "Italien");
							case LANGUAGE_DE: ShowPlayerDialog(playerid, 37, DIALOG_STYLE_LIST, "Admin", "Allemand" , "Ok", "Schlissen");
						}
					}
					case 11://KILL
					{
						switch(pPlayerInfos[playerid][pLangue])
						{
							case LANGUAGE_EN: ShowPlayerDialog(playerid, 51, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Enter a reason:", "Kill", "Cancel");
							case LANGUAGE_FR: ShowPlayerDialog(playerid, 51, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Entrez une raison:", "Kill", "Annuler");
							case LANGUAGE_ES: ShowPlayerDialog(playerid, 51, DIALOG_STYLE_INPUT, "Admin", "Espagnol", "Kill", "Cancelar");
							case LANGUAGE_PG: ShowPlayerDialog(playerid, 51, DIALOG_STYLE_INPUT, "Admin", "Portugais", "Kill", "Portugais");
							case LANGUAGE_IT: ShowPlayerDialog(playerid, 51, DIALOG_STYLE_INPUT, "Admin", "Italien", "Kill", "Italien");
							case LANGUAGE_DE: ShowPlayerDialog(playerid, 51, DIALOG_STYLE_INPUT, "Admin", "Allemand" , "Kill", "Schlissen");
						}
					}
					case 12://SPEC
					{
						if(pAdminInfos[playerid][dSpec] != INVALID_PLAYER_ID)
						{
							LogInfo(true, "[ADMIN]%s arrete de spec %s.", GetName(playerid), GetName(pAdminInfos[playerid][dSpec]));
							TogglePlayerSpectating(playerid, 0);
							SetCameraBehindPlayer(playerid);
							SetPlayerPos(playerid, pPlayerInfos[playerid][xPos], pPlayerInfos[playerid][yPos], pPlayerInfos[playerid][zPos]);
							SendClientMessageEx(playerid, ADMIN_COLOR, "[ADMIN]You stopped spectating.", "[ADMIN]Vous avez arrêté de regarder.", "[ADMIN]Espagnol", "[ADMIN]Portugais", "[ADMIN]Italien", "[ADMIN]Allemand");
						    pAdminInfos[playerid][dSpec] = INVALID_PLAYER_ID;
						}
						else
						{
							GetPlayerPos(playerid, pPlayerInfos[playerid][xPos], pPlayerInfos[playerid][yPos], pPlayerInfos[playerid][zPos]);
							pAdminInfos[playerid][dSpec] = pAdminInfos[playerid][dPuniID];
							TogglePlayerSpectating(playerid, 1);
							if(IsPlayerInAnyVehicle(pAdminInfos[playerid][dSpec])) PlayerSpectateVehicle(playerid, GetPlayerVehicleID(pAdminInfos[playerid][dSpec]), SPECTATE_MODE_NORMAL);
							else PlayerSpectatePlayer(playerid, pAdminInfos[playerid][dSpec]);
							//---
							SendClientMessageEx(playerid, ADMIN_COLOR, "[ADMIN]You're spectating a player, you can switch between players with {CC0000}LMB {4E8EB9}and {CC0000}RMB{4E8EB9}.", "[ADMIN]Vous observez un joueur, vous pouvez changer avec {CC0000}LMB {4E8EB9}et {CC0000}RMB{4E8EB9}.", "[ADMIN]Espagnol", "[ADMIN]Portugais", "[ADMIN]Italien", "[ADMIN]Allemand");
							SendClientMessageEx(playerid, ADMIN_COLOR, "To stop spectating, hit {CC0000}Enter{4E8EB9}.", "Pour arrêter de regarder, appuyez sur {CC0000}Enter{4E8EB9}.", "Espagnol", "Portugais", "Italien", "Allemand");
							LogInfo(true, "[ADMIN]%s observe %s.", GetName(playerid), GetName(pAdminInfos[playerid][dSpec]));
						}
					}
					case 13://DONNER DE L'OR
					{
						switch(pPlayerInfos[playerid][pLangue])
						{
							case LANGUAGE_EN: ShowPlayerDialog(playerid, 64, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}How much gold do you want to give?:", "Give", "Cancel");
							case LANGUAGE_FR: ShowPlayerDialog(playerid, 64, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Combien d'or voulez-vous donner ?:", "Donner", "Annuler");
		  					case LANGUAGE_ES: ShowPlayerDialog(playerid, 64, DIALOG_STYLE_INPUT, "Admin", "Espagnol", "Espagnol", "Cancelar");
		  					case LANGUAGE_PG: ShowPlayerDialog(playerid, 64, DIALOG_STYLE_INPUT, "Admin", "Portugais", "Portugais", "Portugais");
							case LANGUAGE_IT: ShowPlayerDialog(playerid, 64, DIALOG_STYLE_INPUT, "Admin", "Italien", "Italien", "Italien");
							case LANGUAGE_DE: ShowPlayerDialog(playerid, 64, DIALOG_STYLE_INPUT, "Admin", "Allemand" , "Allemand", "Schlissen");
						}
					}
				}
			}
			else if(!response)
			{
				ShowPlayerAdminDialog(playerid);
			}
	    }
	    case 16://MÉTEO
	    {
			if(response)
			{
				ChangeWeather(listitem, RandomEx(2, 30));
			}
			ShowPlayerAdminDialog(playerid);
	    }
	    case 17://HEURE
	    {
	        if(response)
	        {
		        dEnvironment[dHours] = listitem * 2;
		        dEnvironment[dMins] = 0;
	    		SetWorldTime(dEnvironment[dHours]);
	    		CheckTime(dEnvironment[dDay], dEnvironment[dHours], 0);
    		}
			ShowPlayerAdminDialog(playerid);
	    }
	    case 18://BAN - DEBAN --- JOUEUR - IP
	    {
			if(response)
			{
			    switch(pAdminInfos[playerid][dPunition])
			    {
				    case -1://Bannir un joueur
				    {
						format(string, sizeof(string), "/Comptes/%s.ini", inputtext);
						//---
						if(!fexist(string) || !strlen(inputtext))
						{
							switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "{CC0000}Non-existent account!\n{FFFFFF}Enter the {CC0000}name {FFFFFF}of the player to ban:", "Ban", "Cancel");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "{CC0000}Compte inexistant !\n{FFFFFF}Écrivez le {CC0000}pseudo {FFFFFF}du joueur à bannir:", "Bannir", "Annuler");
				    			case LANGUAGE_ES: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "Espagnol", "Ok", "Cancelar");
				    			case LANGUAGE_PG: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "Portugais", "Ok", "Portugais");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "Italien", "Ok", "Italien");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "Allemand" , "Ok", "Schlissen");
							}
							return 1;
						}
						//---
						new banid = PlayeridFromName(inputtext);
						//---
						if(banid != INVALID_PLAYER_ID)
						{
							pAdminInfos[playerid][dPuniID] = banid;
							switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 21, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Enter a reason:", "Next", "Cancel");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 21, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Entrez une raison:", "Suivant", "Annuler");
				    			case LANGUAGE_ES: ShowPlayerDialog(playerid, 21, DIALOG_STYLE_INPUT, "Admin", "Espagnol", "Espagnol", "Cancelar");
				    			case LANGUAGE_PG: ShowPlayerDialog(playerid, 21, DIALOG_STYLE_INPUT, "Admin", "Portugais", "Portugais", "Portugais");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 21, DIALOG_STYLE_INPUT, "Admin", "Italien", "Italien", "Italien");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 21, DIALOG_STYLE_INPUT, "Admin", "Allemand" , "Allemand", "Schlissen");
							}
						}
						else
						{
						}
				    }
				    case -2://Débannir un joueur
				    {
						format(string, sizeof(string), "/Comptes/%s.ini", inputtext);
						//---
						if(!fexist(string) || !strlen(inputtext))
						{
							switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "{CC0000}Non-existent account!\n{FFFFFF}Enter the {CC0000}name {FFFFFF}of the player to unban:", "Unban", "Cancel");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "{CC0000}Compte inexistant !\n{FFFFFF}Écrivez le {CC0000}pseudo {FFFFFF}du joueur à débannir:", "Débannir", "Annuler");
				    			case LANGUAGE_ES: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "Espagnol", "Ok", "Cancelar");
				    			case LANGUAGE_PG: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "Portugais", "Ok", "Portugais");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "Italien", "Ok", "Italien");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "Allemand" , "Ok", "Schlissen");
							}
							return 1;
						}
						new INI:File = INI_Open(string);
						INI_SetTag(File,"data");
						INI_WriteInt(File,"Ban", 0);
						INI_Close(File);
						ShowPlayerTextInfo(playerid, 5000, "~g~Player successfully unbanned!", "~g~Joueur débanni avec succès !", "Espagnol", "Portugais", "Italien", "Allemand");
						//---
						for(new i = 0; i < MAX_PLAYERS; i ++)
						{
						    if(!strcmp(sPlayerName[i], inputtext, false))
						    {
						        format(sPlayerName[i], MAX_PLAYER_NAME + 1, " ");
								ResetPlayerVariables(i);
						        break;
						    }
						}
						//---
				        pAdminInfos[playerid][dPunition] = 0;
				    }
				    case -3://Bannir une IP
				    {
						//---
						if(!IsTextIP(inputtext))
						{
							switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Enter the {CC0000}IP adress {FFFFFF}to ban:", "Unban", "Cancel");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Écrivez l'{CC0000}adresse IP {FFFFFF}à bannir:", "Débannir", "Annuler");
				    			case LANGUAGE_ES: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "Espagnol", "Ok", "Cancelar");
				    			case LANGUAGE_PG: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "Portugais", "Ok", "Portugais");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "Italien", "Ok", "Italien");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "Allemand" , "Ok", "Schlissen");
							}
							return 1;
						}
						//---
						SetIPBan(inputtext, true);
						SendClientMessageEx(playerid, ADMIN_COLOR, "[ADMIN]IP banned!", "[ADMIN]IP bannie !", "Espagnol", "Portugais", "Italien", "Allemand");
                        ShowPlayerAdminDialog(playerid);
					}
				    case -4://Débannir une IP
				    {
						//---
						if(!IsTextIP(inputtext))
						{
							switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Enter the {CC0000}IP adress {FFFFFF}to unban:", "Unban", "Cancel");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Écrivez l'{CC0000}adresse IP {FFFFFF}à débannir:", "Débannir", "Annuler");
				    			case LANGUAGE_ES: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "Espagnol", "Ok", "Cancelar");
				    			case LANGUAGE_PG: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "Portugais", "Ok", "Portugais");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "Italien", "Ok", "Italien");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Admin", "Allemand" , "Ok", "Schlissen");
							}
							return 1;
						}
						//---
						SetIPBan(inputtext, false);
						SendClientMessageEx(playerid, ADMIN_COLOR, "[ADMIN]IP unbanned!", "[ADMIN]IP débannie !", "Espagnol", "Portugais", "Italien", "Allemand");
						ShowPlayerAdminDialog(playerid);
				    }
			    }
			}
			else if(!response)
			{
				ShowPlayerAdminDialog(playerid);
			}
	    }
	    case 19://RECHARGEMENT FILTERSCRIPT
	    {
	        if(response)
	        {
	            switch(listitem)
	            {
	                case 0:
					{
						SendRconCommand("reloadfs [SA]Mapping");
						SendClientMessageEx(playerid, ADMIN_COLOR, "[ADMIN]Mapping reloaded.", "[ADMIN]Mapping rechargé.", "[ADMIN]Mapping recargado.", "[ADMIN]Portugais", "[ADMIN]Italien", "[ADMIN]Allemand");
					}
	                case 1:
					{
						SendRconCommand("reloadfs [SA]Actors");
						SendClientMessageEx(playerid, ADMIN_COLOR, "[ADMIN]Actors reloaded.", "[ADMIN]Acteurs rechargés.", "[ADMIN]Actores script recargado.", "[ADMIN]Portugais", "[ADMIN]Italien", "[ADMIN]Allemand");
					}
	                case 2:
					{
						SendRconCommand("reloadfs [SA]ObjectSpawner");
						SendClientMessageEx(playerid, ADMIN_COLOR, "[ADMIN]Item spawn pos reloaded.", "[ADMIN]Spawn des objets rechargé.", "[ADMIN]Objetos spawn recargado.", "[ADMIN]Portugais", "[ADMIN]Italien", "[ADMIN]Allemand");
					}
	                case 3:
					{
						SendRconCommand("reloadfs [SA]Missions");
						SendClientMessageEx(playerid, ADMIN_COLOR, "[ADMIN]Missions reloaded.", "[ADMIN]Missions rechargé.", "[ADMIN]Missions recargado.", "[ADMIN]Portugais", "[ADMIN]Italien", "[ADMIN]Allemand");
					}
	                case 4:
					{
						SendRconCommand("reloadfs [SA]Shops");
						SendClientMessageEx(playerid, ADMIN_COLOR, "[ADMIN]Shops reloaded.", "[ADMIN]Shops rechargé.", "[ADMIN]Shops recargado.", "[ADMIN]Portugais", "[ADMIN]Italien", "[ADMIN]Allemand");
					}
	            }
				ShowPlayerAdminDialog(playerid);
	        }
			else if(!response)
			{
				ShowPlayerAdminDialog(playerid);
			}
		}
		case 20://KICK
		{
		    if(response)
		    {
				if(!strlen(inputtext))
				{
					switch(pPlayerInfos[playerid][pLangue])
					{
						case LANGUAGE_EN: ShowPlayerDialog(playerid, 20, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Enter a reason:", "Kick", "Cancel");
						case LANGUAGE_FR: ShowPlayerDialog(playerid, 20, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Entrez une raison:", "DéKick", "Annuler");
	  					case LANGUAGE_ES: ShowPlayerDialog(playerid, 20, DIALOG_STYLE_INPUT, "Admin", "Espagnol", "Kick", "Cancelar");
	  					case LANGUAGE_PG: ShowPlayerDialog(playerid, 20, DIALOG_STYLE_INPUT, "Admin", "Portugais", "Kick", "Portugais");
						case LANGUAGE_IT: ShowPlayerDialog(playerid, 20, DIALOG_STYLE_INPUT, "Admin", "Italien", "Kick", "Italien");
						case LANGUAGE_DE: ShowPlayerDialog(playerid, 20, DIALOG_STYLE_INPUT, "Admin", "Allemand" , "Kick", "Schlissen");
					}
					return 1;
				}
				aKick(playerid, pAdminInfos[playerid][dPuniID], inputtext);
				ShowPlayerAdminDialog(playerid);
			}
		    if(!response)
		    {
				ShowPlayerAdminDialog(playerid);
			}
		}
		case 21://BAN - DURÉE
		{
		    if(response)
		    {
		        new dLenght = -1;
		        if(IsNumeric(inputtext) && strlen(inputtext))
		        {
					dLenght = strval(inputtext);
		        }
		   		pAdminInfos[playerid][dPunition] = dLenght;
				switch(pPlayerInfos[playerid][pLangue])
				{
					case LANGUAGE_EN: ShowPlayerDialog(playerid, 22, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Enter a reason:", "Ban", "Cancel");
					case LANGUAGE_FR: ShowPlayerDialog(playerid, 22, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Entrez une raison:", "Ban", "Annuler");
					case LANGUAGE_ES: ShowPlayerDialog(playerid, 22, DIALOG_STYLE_INPUT, "Admin", "Espagnol", "Ban", "Cancelar");
					case LANGUAGE_PG: ShowPlayerDialog(playerid, 22, DIALOG_STYLE_INPUT, "Admin", "Portugais", "Ban", "Portugais");
					case LANGUAGE_IT: ShowPlayerDialog(playerid, 22, DIALOG_STYLE_INPUT, "Admin", "Italien", "Ban", "Italien");
					case LANGUAGE_DE: ShowPlayerDialog(playerid, 22, DIALOG_STYLE_INPUT, "Admin", "Allemand" , "Ban", "Schlissen");
				}
			}
		    else if(!response)
		    {
				ShowPlayerAdminDialog(playerid);
			}
		}
		case 22://BAN - RAISON
		{
		    if(response)
		    {
				if(!strlen(inputtext))
				{
					switch(pPlayerInfos[playerid][pLangue])
					{
						case LANGUAGE_EN: ShowPlayerDialog(playerid, 22, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Enter a reason:", "Ban", "Cancel");
						case LANGUAGE_FR: ShowPlayerDialog(playerid, 22, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Entrez une raison:", "Ban", "Annuler");
   						case LANGUAGE_ES: ShowPlayerDialog(playerid, 22, DIALOG_STYLE_INPUT, "Admin", "Espagnol", "Ban", "Cancelar");
   						case LANGUAGE_PG: ShowPlayerDialog(playerid, 22, DIALOG_STYLE_INPUT, "Admin", "Portugais", "Ban", "Portugais");
						case LANGUAGE_IT: ShowPlayerDialog(playerid, 22, DIALOG_STYLE_INPUT, "Admin", "Italien", "Ban", "Italien");
						case LANGUAGE_DE: ShowPlayerDialog(playerid, 22, DIALOG_STYLE_INPUT, "Admin", "Allemand" , "Ban", "Schlissen");
					}
					return 1;
				}
				aBan(playerid, pAdminInfos[playerid][dPuniID], pAdminInfos[playerid][dPunition], inputtext);
				ShowPlayerAdminDialog(playerid);
			}
		    else if(!response)
		    {
				ShowPlayerAdminDialog(playerid);
			}
		}
		case 23://FREEZE - DURÉE
		{
		    if(response)
		    {
		        new dLenght = -1;
		        if(IsNumeric(inputtext) && strlen(inputtext))
		        {
					dLenght = strval(inputtext);
		        }
		   		pAdminInfos[playerid][dPunition] = dLenght;
				switch(pPlayerInfos[playerid][pLangue])
				{
					case LANGUAGE_EN: ShowPlayerDialog(playerid, 24, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Enter a reason:", "Freeze", "Cancel");
					case LANGUAGE_FR: ShowPlayerDialog(playerid, 24, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Entrez une raison:", "Freeze", "Annuler");
					case LANGUAGE_ES: ShowPlayerDialog(playerid, 24, DIALOG_STYLE_INPUT, "Admin", "Espagnol", "Freeze", "Cancelar");
					case LANGUAGE_PG: ShowPlayerDialog(playerid, 24, DIALOG_STYLE_INPUT, "Admin", "Portugais", "Freeze", "Portugais");
					case LANGUAGE_IT: ShowPlayerDialog(playerid, 24, DIALOG_STYLE_INPUT, "Admin", "Italien", "Freeze", "Italien");
					case LANGUAGE_DE: ShowPlayerDialog(playerid, 24, DIALOG_STYLE_INPUT, "Admin", "Allemand" , "Freeze", "Schlissen");
				}
			}
		    else if(!response)
		    {
				ShowPlayerAdminDialog(playerid);
			}
		}
		case 24://FREEZE - RAISON
		{
		    if(response)
		    {
				if(!strlen(inputtext))
				{
					switch(pPlayerInfos[playerid][pLangue])
					{
						case LANGUAGE_EN: ShowPlayerDialog(playerid, 24, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Enter a reason:", "Freeze", "Cancel");
						case LANGUAGE_FR: ShowPlayerDialog(playerid, 24, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Entrez une raison:", "Freeze", "Annuler");
   						case LANGUAGE_ES: ShowPlayerDialog(playerid, 24, DIALOG_STYLE_INPUT, "Admin", "Espagnol", "Freeze", "Cancelar");
   						case LANGUAGE_PG: ShowPlayerDialog(playerid, 24, DIALOG_STYLE_INPUT, "Admin", "Portugais", "Freeze", "Portugais");
						case LANGUAGE_IT: ShowPlayerDialog(playerid, 24, DIALOG_STYLE_INPUT, "Admin", "Italien", "Freeze", "Italien");
						case LANGUAGE_DE: ShowPlayerDialog(playerid, 24, DIALOG_STYLE_INPUT, "Admin", "Allemand" , "Freeze", "Schlissen");
					}
					return 1;
				}
				aFreeze(playerid, pAdminInfos[playerid][dPuniID], pAdminInfos[playerid][dPunition], inputtext);
				ShowPlayerAdminDialog(playerid);
			}
		    if(!response)
		    {
				ShowPlayerAdminDialog(playerid);
			}
		}
		case 25://MUTE - DURÉE
		{
		    if(response)
		    {
		        new dLenght = -1;
		        if(IsNumeric(inputtext) && strlen(inputtext))
		        {
					dLenght = strval(inputtext);
		        }
		   		pAdminInfos[playerid][dPunition] = dLenght;
				switch(pPlayerInfos[playerid][pLangue])
				{
					case LANGUAGE_EN: ShowPlayerDialog(playerid, 26, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Enter a reason:", "Mute", "Cancel");
					case LANGUAGE_FR: ShowPlayerDialog(playerid, 26, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Entrez une raison:", "Mute", "Annuler");
					case LANGUAGE_ES: ShowPlayerDialog(playerid, 26, DIALOG_STYLE_INPUT, "Admin", "Espagnol", "Mute", "Cancelar");
					case LANGUAGE_PG: ShowPlayerDialog(playerid, 26, DIALOG_STYLE_INPUT, "Admin", "Portugais", "Mute", "Portugais");
					case LANGUAGE_IT: ShowPlayerDialog(playerid, 26, DIALOG_STYLE_INPUT, "Admin", "Italien", "Mute", "Italien");
					case LANGUAGE_DE: ShowPlayerDialog(playerid, 26, DIALOG_STYLE_INPUT, "Admin", "Allemand" , "Mute", "Schlissen");
				}
			}
		    else if(!response)
		    {
				ShowPlayerAdminDialog(playerid);
			}
		}
		case 26://MUTE - RAISON
		{
		    if(response)
		    {
				if(!strlen(inputtext))
				{
					switch(pPlayerInfos[playerid][pLangue])
					{
						case LANGUAGE_EN: ShowPlayerDialog(playerid, 26, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Enter a reason:", "Mute", "Cancel");
						case LANGUAGE_FR: ShowPlayerDialog(playerid, 26, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Entrez une raison:", "Mute", "Annuler");
						case LANGUAGE_ES: ShowPlayerDialog(playerid, 26, DIALOG_STYLE_INPUT, "Admin", "Espagnol", "Mute", "Cancelar");
						case LANGUAGE_PG: ShowPlayerDialog(playerid, 26, DIALOG_STYLE_INPUT, "Admin", "Portugais", "Mute", "Portugais");
						case LANGUAGE_IT: ShowPlayerDialog(playerid, 26, DIALOG_STYLE_INPUT, "Admin", "Italien", "Mute", "Italien");
						case LANGUAGE_DE: ShowPlayerDialog(playerid, 26, DIALOG_STYLE_INPUT, "Admin", "Allemand" , "Mute", "Schlissen");
					}
					return 1;
				}
				aMute(playerid, pAdminInfos[playerid][dPuniID], pAdminInfos[playerid][dPunition], inputtext);
				ShowPlayerAdminDialog(playerid);
			}
		    else if(!response)
		    {
				ShowPlayerAdminDialog(playerid);
			}
		}
		case 27://RENAME
		{
		    if(response)
		    {
		        new sSaveName[MAX_PLAYER_NAME + 1];
		        GetPlayerName(pAdminInfos[playerid][dPuniID], sSaveName, MAX_PLAYER_NAME + 1);
		        //---
		        new result = SetPlayerName(pAdminInfos[playerid][dPuniID], inputtext);
		        if(result != 1)
		        {
					switch(pPlayerInfos[playerid][pLangue])
					{
						case LANGUAGE_EN: ShowPlayerDialog(playerid, 27, DIALOG_STYLE_INPUT, "Admin", "{CC0000}Invalid name.\n{FFFFFF}Enter the name you want to set for this player:", "Rename", "Cancel");
						case LANGUAGE_FR: ShowPlayerDialog(playerid, 27, DIALOG_STYLE_INPUT, "Admin", "{CC0000}Pseudo invalide.\n{FFFFFF}Entrez le nouveau pseudo:", "Rename", "Annuler");
	  					case LANGUAGE_ES: ShowPlayerDialog(playerid, 27, DIALOG_STYLE_INPUT, "Admin", "Espagnol", "Rename", "Cancelar");
	  					case LANGUAGE_PG: ShowPlayerDialog(playerid, 27, DIALOG_STYLE_INPUT, "Admin", "Portugais", "Rename", "Portugais");
						case LANGUAGE_IT: ShowPlayerDialog(playerid, 27, DIALOG_STYLE_INPUT, "Admin", "Italien", "Rename", "Italien");
						case LANGUAGE_DE: ShowPlayerDialog(playerid, 27, DIALOG_STYLE_INPUT, "Admin", "Allemand" , "Rename", "Schlissen");
					}
				    return 1;
				}
				//---
				format(string,sizeof(string),"[ADMIN]%s's new name is %s.", GetName(playerid), inputtext);
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[playerid][pLangue] == LANGUAGE_EN) SendClientMessage(i, ADMIN_COLOR, string);
				//
				format(string,sizeof(string),"[ADMIN]%s s'appelle maintenant %s.", GetName(playerid), inputtext);
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[playerid][pLangue] == LANGUAGE_FR) SendClientMessage(i, ADMIN_COLOR, string);
				//
				format(string,sizeof(string),"[ADMIN]%s Espagnol", GetName(playerid), inputtext);
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[playerid][pLangue] == LANGUAGE_ES) SendClientMessage(i, ADMIN_COLOR, string);
				//
				format(string,sizeof(string),"[ADMIN]%s Portugais", GetName(playerid), inputtext);
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[playerid][pLangue] == LANGUAGE_PG) SendClientMessage(i, ADMIN_COLOR, string);
				//
				format(string,sizeof(string),"[ADMIN]%s Italien", GetName(playerid), inputtext);
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[playerid][pLangue] == LANGUAGE_IT) SendClientMessage(i, ADMIN_COLOR, string);
				//
				format(string,sizeof(string),"[ADMIN]%s Allemand", GetName(playerid), inputtext);
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[playerid][pLangue] == LANGUAGE_DE) SendClientMessage(i, ADMIN_COLOR, string);
				//---
				SendClientMessageEx(pAdminInfos[playerid][dPuniID], ADMIN_COLOR, "You have been renamed.", "Vous avez été renommé.", "Espagnol", "Portugais", "Italien", "Allemand");
				//---
				format(string,sizeof(string), UPATH, sSaveName);
    			fremove(string);
				//---
				GetPlayerName(pAdminInfos[playerid][dPuniID], sPlayerName[pAdminInfos[playerid][dPuniID]], MAX_PLAYER_NAME + 1);
				SaveUser(pAdminInfos[playerid][dPuniID]);
				ShowPlayerAdminDialog(playerid);
		    }
		    else if(!response)
		    {
				ShowPlayerAdminDialog(playerid);
			}
		}
		case 28://TP
		{
		    if(response)
		    {
		        if(listitem == 0)//Téléporter à vous
		        {
					new interiorid;
					new Float:x, Float:y, Float:z, Float:angle;
					SendClientMessageEx(pAdminInfos[playerid][dPuniID], ADMIN_COLOR, "[ADMIN]The admin teleported you to him.", "[ADMIN]L'admin vous a téléporté à lui", "[ADMIN]Espagnol", "[ADMIN]Portugais", "[ADMIN]Italien", "[ADMIN]Allemand");
					//---
					interiorid = GetPlayerInterior(playerid);
					GetPlayerPos(playerid, x, y, z);
					GetPlayerFacingAngle(playerid, angle);
					GetXYInFrontOfPoint(x, y, angle, 3.0);
					SetPlayerPos(pAdminInfos[playerid][dPuniID], x, y, z);
					SetPlayerInterior(pAdminInfos[playerid][dPuniID], interiorid);
					ShowPlayerAdminDialog(playerid);
		        }
		        else if(listitem == 1)//Vous téléporter à lui
		        {
					new interiorid;
					new Float:x, Float:y, Float:z, Float:angle;
					SendClientMessageEx(pAdminInfos[playerid][dPuniID], ADMIN_COLOR, "[ADMIN]The admin teleported to you.", "[ADMIN]L'admin s'est téléporté à vous.", "[ADMIN]Espagnol", "[ADMIN]Portugais", "[ADMIN]Italien", "[ADMIN]Allemand");
					//---
					interiorid = GetPlayerInterior(pAdminInfos[playerid][dPuniID]);
					GetPlayerPos(pAdminInfos[playerid][dPuniID], x, y, z);
					GetPlayerFacingAngle(pAdminInfos[playerid][dPuniID], angle);
					GetXYInFrontOfPoint(x, y, angle, 3.0);
					SetPlayerPos(playerid, x, y, z);
					SetPlayerInterior(playerid, interiorid);
					ShowPlayerAdminDialog(playerid);
		        }
		        else if(listitem == 2 || listitem == 3)//Téléporter le joueur à un autre joueur && téléporter un autre joueur à lui
		        {
					ShowPlayerDialog(playerid, 29, DIALOG_STYLE_LIST, "Admin", AllPlayersString(), ">", "X");
					pAdminInfos[playerid][dPunition] = listitem - 1;
		        }
		    }
		    else if(!response)
		    {
				ShowPlayerAdminDialog(playerid);
		    }
		}
		case 29://TP DEUX JOUEURS
		{
			if(response)
			{
				new dPuni = pAdminInfos[playerid][dPuniID];
				new dPlayerTP = INVALID_PLAYER_ID;
				dPlayerTP = PlayeridFromName(inputtext);
				//---
				if(dPlayerTP == INVALID_PLAYER_ID)
				{
					ShowPlayerAdminDialog(playerid);
					return 1;
				}
				//---
				//---
				if(pAdminInfos[playerid][dPunition] == 1)
				{
				    swap(dPuni, dPlayerTP);
				}
				//---
				new interiorid;
				new Float:x, Float:y, Float:z, Float:angle;
				SendClientMessageEx(dPlayerTP, ADMIN_COLOR, "[ADMIN]The admin teleported you.", "[ADMIN]L'admin vous a téléporté.", "[ADMIN]Espagnol", "[ADMIN]Portugais", "[ADMIN]Italien", "[ADMIN]Allemand");
				SendClientMessageEx(dPuni, ADMIN_COLOR, "[ADMIN]The admin teleported someone to you.", "[ADMIN]L'admin a téléporté quelqu'un a vous.", "[ADMIN]Espagnol", "[ADMIN]Portugais", "[ADMIN]Italien", "[ADMIN]Allemand");
				//---
				interiorid = GetPlayerInterior(dPuni);
				GetPlayerPos(dPuni, x, y, z);
				GetPlayerFacingAngle(dPuni, angle);
				GetXYInFrontOfPoint(x, y, angle, 3.0);
				SetPlayerPos(dPlayerTP, x, y, z);
				SetPlayerInterior(dPlayerTP, interiorid);
				ShowPlayerAdminDialog(playerid);
			}
			else if(!response)
			{
				ShowPlayerAdminDialog(playerid);
			}
		}
		case 30://DONNER OBJET
		{
		    if(response)
		    {
		        new i = 0;
		        new dItemID = -1;
		        switch(pPlayerInfos[playerid][pLangue])
		        {
					case LANGUAGE_EN: for(i = 0; i < MAX_ITEMS; i ++) if(strfind(NoNewLineSign(aObjects[i][ObjectEnName]), inputtext, true) != -1)
					{
						dItemID = i;
						break;
					}
					case LANGUAGE_FR: for(i = 0; i < MAX_ITEMS; i ++) if(strfind(NoNewLineSign(aObjects[i][ObjectFrName]), inputtext, true) != -1)
					{
						dItemID = i;
						break;
					}
  					case LANGUAGE_ES: for(i = 0; i < MAX_ITEMS; i ++) if(strfind(NoNewLineSign(aObjects[i][ObjectEsName]), inputtext, true) != -1)
					{
						dItemID = i;
						break;
					}
  					case LANGUAGE_PG: for(i = 0; i < MAX_ITEMS; i ++) if(strfind(NoNewLineSign(aObjects[i][ObjectPgName]), inputtext, true) != -1)
					{
						dItemID = i;
						break;
					}
					case LANGUAGE_IT: for(i = 0; i < MAX_ITEMS; i ++) if(strfind(NoNewLineSign(aObjects[i][ObjectItName]), inputtext, true) != -1)
					{
						dItemID = i;
						break;
					}
					case LANGUAGE_DE: for(i = 0; i < MAX_ITEMS; i ++) if(strfind(NoNewLineSign(aObjects[i][ObjectDeName]), inputtext, true) != -1)
					{
						dItemID = i;
						break;
					}
		        }
				new dFreeSlot = GetPlayerNextFreeSlot(pAdminInfos[playerid][dPuniID]);
				if(dFreeSlot == -1)
				{
				    SendClientMessageEx(playerid, ROUGE, "This player does not have any free slot!", "Ce joueur n'a pas de slots libres !", "Espagnol", "Portugais", "Italien", "Allemand");
      				ShowPlayerAdminDialog(playerid);
					return 1;
				}
				//---
		        if(dItemID == -1)
		        {
					switch(pPlayerInfos[playerid][pLangue])
					{
						case LANGUAGE_EN: ShowPlayerDialog(playerid, 30, DIALOG_STYLE_INPUT, "Admin", "What item do you want to give?", "Ok", "Cancel");
						case LANGUAGE_FR: ShowPlayerDialog(playerid, 30, DIALOG_STYLE_INPUT, "Admin", "Quel objet voulez-vous donner ?", "Ok", "Annuler");
	  					case LANGUAGE_ES: ShowPlayerDialog(playerid, 30, DIALOG_STYLE_INPUT, "Admin", "Espagnol", "Ok", "Cancelar");
	  					case LANGUAGE_PG: ShowPlayerDialog(playerid, 30, DIALOG_STYLE_INPUT, "Admin", "Portugais", "Ok", "Portugais");
						case LANGUAGE_IT: ShowPlayerDialog(playerid, 30, DIALOG_STYLE_INPUT, "Admin", "Italien", "Ok", "Italien");
						case LANGUAGE_DE: ShowPlayerDialog(playerid, 30, DIALOG_STYLE_INPUT, "Admin", "Allemand" , "Ok", "Schlissen");
					}
		            return 1;
		        }
		        //---
				GivePlayerSlotObject(pAdminInfos[playerid][dPuniID], dItemID, dFreeSlot);
				SwapPlayerObjects(pAdminInfos[playerid][dPuniID], dFreeSlot, 0);
				LogInfo(true, "[ADMIN]%s donne %s a %s", GetName(playerid), NoNewLineSign(aObjects[dItemID][ObjectFrName]), GetName(pAdminInfos[playerid][dPuniID]));
    			SendClientMessageEx(playerid, ADMIN_COLOR, "[ADMIN]Object given.", "[ADMIN]Objet donné.", "Espagnol", "Portugais", "Italien", "Allemand");
    			SendClientMessageEx(pAdminInfos[playerid][dPuniID], ADMIN_COLOR, "[ADMIN]The admin gave you an item.", "[ADMIN]L'admin vous a donné un objet.", "Espagnol", "Portugais", "Italien", "Allemand");
		    }
		    else if(!response)
		    {
		        ShowPlayerAdminDialog(playerid);
		    }
		}
		case 31://AIDE
		{
		    if(response)
		    {
		        ShowPlayerHelp(playerid, listitem + 1, 10000);
		    }
		}
		case 32://SKIN
		{
		    if(response)
		    {
		        GivePlayerGold(playerid, -10);
				pPlayerInfos[playerid][pSkin] = pChooseSkin[playerid];
				SetPlayerSkin(playerid, pChooseSkin[playerid]);
				pChooseSkin[playerid] = -1;
				for(new i = 0; i < 7; i ++) if(i != 5) TextDrawHideForPlayer(playerid, tSkinSelect[i]);
				PlayerTextDrawHide(playerid, tPlayerSkin[playerid]);
				PlayerTextDrawDestroy(playerid, tPlayerSkin[playerid]);
				tPlayerSkin[playerid] = PlayerText:INVALID_TEXT_DRAW;
				CancelSelectTextDraw(playerid);
		    }
		    else if(!response)
		    {
				pChooseSkin[playerid] = -1;
				for(new i = 0; i < 7; i ++) if(i != 5) TextDrawHideForPlayer(playerid, tSkinSelect[i]);
				PlayerTextDrawHide(playerid, tPlayerSkin[playerid]);
				PlayerTextDrawDestroy(playerid, tPlayerSkin[playerid]);
				tPlayerSkin[playerid] = PlayerText:INVALID_TEXT_DRAW;
				CancelSelectTextDraw(playerid);
		    }
		}
		case 33://DOCTEUR
		{
			if(response)
			{
			    if(listitem == 0)//SOINS
			    {
				    ClearAnimations(playerid, true);
				    if(!HasPlayerGold(playerid, 5))
				    {
				        SendClientMessageEx(playerid, ROUGE, "You don't have enough gold!", "Vous n'avez pas assez d'or !", "¡No tiene usted sufficiente de oro!", "Portugais", "Italien", "Allemand");
				        return 1;
					}
					HealPlayer(playerid);
					GivePlayerGold(playerid, -5);
			    }
			    else if(listitem == 1)//CHANGEMENT DE SKIN
			    {
				    if(!HasPlayerGold(playerid, 10))
				    {
				        SendClientMessageEx(playerid, ROUGE, "You don't have enough gold!", "Vous n'avez pas assez d'or !", "¡No tiene usted sufficiente de oro!", "Portugais", "Italien", "Allemand");
				        return 1;
					}
					pChooseSkin[playerid] = 0;
					//---
					tPlayerSkin[playerid] = CreatePlayerTextDraw(playerid,260.000000, 140.000000, "Skin");
					PlayerTextDrawBackgroundColor(playerid,tPlayerSkin[playerid], 0);
					PlayerTextDrawFont(playerid,tPlayerSkin[playerid], 5);
					PlayerTextDrawLetterSize(playerid,tPlayerSkin[playerid], 0.500000, 1.000000);
					PlayerTextDrawColor(playerid,tPlayerSkin[playerid], -1);
					PlayerTextDrawSetOutline(playerid,tPlayerSkin[playerid], 0);
					PlayerTextDrawSetProportional(playerid,tPlayerSkin[playerid], 1);
					PlayerTextDrawSetShadow(playerid,tPlayerSkin[playerid], 1);
					PlayerTextDrawUseBox(playerid,tPlayerSkin[playerid], 1);
					PlayerTextDrawBoxColor(playerid,tPlayerSkin[playerid], 255);
					PlayerTextDrawTextSize(playerid,tPlayerSkin[playerid], 160.000000, 140.000000);
					PlayerTextDrawSetPreviewModel(playerid, tPlayerSkin[playerid], 0);
					PlayerTextDrawSetPreviewRot(playerid, tPlayerSkin[playerid], 0.000000, 0.000000, 0.000000, 1.000000);
					PlayerTextDrawSetSelectable(playerid,tPlayerSkin[playerid], 0);
					//---
					for(new i = 0; i < 7; i ++) if(i != 5) TextDrawShowForPlayer(playerid, tSkinSelect[i]);
					PlayerTextDrawShow(playerid, tPlayerSkin[playerid]);
					SelectTextDraw(playerid, VERT);
			    }
			}
		}
		case 34://COMPÉTENCES
		{
			if(response)
			{
			    pSkill[playerid] = listitem;
			    new pSkillLevel;
				new dUpgradePrice;
			    new sSkills[512];
			    switch(listitem)
			    {
			        case 0://BOUCHER
					{
						pSkillLevel = pPlayerInfos[playerid][dBoucher];
						switch(pPlayerInfos[playerid][pLangue])
						{
							case LANGUAGE_EN: format(sSkills, sizeof(sSkills), "{CC0000}Butcher:\n{FFFFFF}You will always find meat on beasts you kill.\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, BUTCHER);
							case LANGUAGE_FR: format(sSkills, sizeof(sSkills), "{CC0000}Boucher:\n{FFFFFF}Vous trouverez toujours de la viande à la chasse.\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, BUTCHER);
							case LANGUAGE_ES: format(sSkills, sizeof(sSkills), "{CC0000}Espagnol:\n{FFFFFF}Espagnol\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, BUTCHER);
							case LANGUAGE_PG: format(sSkills, sizeof(sSkills), "{CC0000}Portugais:\n{FFFFFF}Portugais\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, BUTCHER);
							case LANGUAGE_IT: format(sSkills, sizeof(sSkills), "{CC0000}Italien:\n{FFFFFF}Italien\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, BUTCHER);
							case LANGUAGE_DE: format(sSkills, sizeof(sSkills), "{CC0000}Allemand:\n{FFFFFF}Allemand\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, BUTCHER);
						}
						//---
						if(0 <= pSkillLevel < BUTCHER)
						{
						    if(pSkillLevel == 0) dUpgradePrice = 2;
							switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: format(string, sizeof(string), "\n{FFFFFF}You can upgrade this skill for %d skill points.\nYou currently have %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_FR: format(string, sizeof(string), "\n{FFFFFF}Vous pouvez augmenter cette compétence pour %d points de compétence.\nVous en avez %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_ES: format(string, sizeof(string), "\n{FFFFFF}Espagnol %s%d Espagnol.\nEspagnol %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_PG: format(string, sizeof(string), "\n{FFFFFF}Portugais %s%d Portugais.\nPortugais %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_IT: format(string, sizeof(string), "\n{FFFFFF}Italien %s%d Italien.\nItalien %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_DE: format(string, sizeof(string), "\n{FFFFFF}Allemand %s%d Allemand.\nAllemand %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
							}
							strcat(sSkills, string);
						    switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Skills", sSkills, "Upgrade", "Back");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Compétences", sSkills, "Augmenter", "Retour");
	  							case LANGUAGE_ES: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Espagnol", sSkills, "Ok", "Cancelar");
	  							case LANGUAGE_PG: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Portugais", sSkills, "Ok", "Portugais");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Italien", sSkills, "Ok", "Italien");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Allemand", sSkills, "Ok", "Schlissen");
							}
						}
						else if(pSkillLevel == BUTCHER)
						{
						    switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Skills", sSkills, "Back", "");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Compétences", sSkills, "Retour", "");
	  							case LANGUAGE_ES: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Espagnol", sSkills, "Espagnol", "");
	  							case LANGUAGE_PG: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Portugais", sSkills, "Portugais", "");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Italien", sSkills, "Italien", "");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Allemand", sSkills, "Züruck", "");
							}
						}
					}
			        case 1://MEDECIN
					{
						pSkillLevel = pPlayerInfos[playerid][dMedecine];
						switch(pPlayerInfos[playerid][pLangue])
						{
							case LANGUAGE_EN: format(sSkills, sizeof(sSkills), "{CC0000}Doctor:\n{FFFFFF}You regain health.\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, DOCTOR);
							case LANGUAGE_FR: format(sSkills, sizeof(sSkills), "{CC0000}Médecin:\n{FFFFFF}Votre santé remonte automatiquement.\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, DOCTOR);
							case LANGUAGE_ES: format(sSkills, sizeof(sSkills), "{CC0000}Espagnol:\n{FFFFFF}Espagnol\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, DOCTOR);
							case LANGUAGE_PG: format(sSkills, sizeof(sSkills), "{CC0000}Portugais:\n{FFFFFF}Portugais\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, DOCTOR);
							case LANGUAGE_IT: format(sSkills, sizeof(sSkills), "{CC0000}Italien:\n{FFFFFF}Italien\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, DOCTOR);
							case LANGUAGE_DE: format(sSkills, sizeof(sSkills), "{CC0000}Allemand:\n{FFFFFF}Allemand\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, DOCTOR);
						}
						//---
						if(0 <= pSkillLevel < DOCTOR)
						{
						    if(pSkillLevel == 0) dUpgradePrice = 3;
						    else if(pSkillLevel == 1) dUpgradePrice = 5;
							switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: format(string, sizeof(string), "\n{FFFFFF}You can upgrade this skill for %d skill points.\nYou currently have %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_FR: format(string, sizeof(string), "\n{FFFFFF}Vous pouvez augmenter cette compétence pour %d points de compétence.\nVous en avez %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_ES: format(string, sizeof(string), "\n{FFFFFF}Espagnol %s%d Espagnol.\nEspagnol %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_PG: format(string, sizeof(string), "\n{FFFFFF}Portugais %s%d Portugais.\nPortugais %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_IT: format(string, sizeof(string), "\n{FFFFFF}Italien %s%d Italien.\nItalien %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_DE: format(string, sizeof(string), "\n{FFFFFF}Allemand %s%d Allemand.\nAllemand %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
							}
							strcat(sSkills, string);
						    switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Skills", sSkills, "Upgrade", "Back");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Compétences", sSkills, "Augmenter", "Retour");
	  							case LANGUAGE_ES: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Espagnol", sSkills, "Ok", "Cancelar");
	  							case LANGUAGE_PG: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Portugais", sSkills, "Ok", "Portugais");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Italien", sSkills, "Ok", "Italien");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Allemand", sSkills, "Ok", "Schlissen");
							}
						}
						else if(pSkillLevel == DOCTOR)
						{
						    switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Skills", sSkills, "Back", "");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Compétences", sSkills, "Retour", "");
	  							case LANGUAGE_ES: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Espagnol", sSkills, "Espagnol", "");
	  							case LANGUAGE_PG: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Portugais", sSkills, "Portugais", "");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Italien", sSkills, "Italien", "");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Allemand", sSkills, "Züruck", "");
							}
						}
					}
			        case 2://SANTÉ
					{
						pSkillLevel = pPlayerInfos[playerid][dSante];
						switch(pPlayerInfos[playerid][pLangue])
						{
							case LANGUAGE_EN: format(sSkills, sizeof(sSkills), "{CC0000}Health:\n{FFFFFF}Maximum health incresed.\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, HEALTH);
							case LANGUAGE_FR: format(sSkills, sizeof(sSkills), "{CC0000}Santé:\n{FFFFFF}Santé max. augmentée.\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, HEALTH);
							case LANGUAGE_ES: format(sSkills, sizeof(sSkills), "{CC0000}Espagnol:\n{FFFFFF}Espagnol\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, HEALTH);
							case LANGUAGE_PG: format(sSkills, sizeof(sSkills), "{CC0000}Portugais:\n{FFFFFF}Portugais\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, HEALTH);
							case LANGUAGE_IT: format(sSkills, sizeof(sSkills), "{CC0000}Italien:\n{FFFFFF}Italien\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, HEALTH);
							case LANGUAGE_DE: format(sSkills, sizeof(sSkills), "{CC0000}Allemand:\n{FFFFFF}Allemand\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, HEALTH);
						}
						//---
						if(0 <= pSkillLevel < HEALTH)
						{
						    if(pSkillLevel == 0) dUpgradePrice = 3;
						    else if(pSkillLevel == 1) dUpgradePrice = 5;
							switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: format(string, sizeof(string), "\n{FFFFFF}You can upgrade this skill for %d skill points.\nYou currently have %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_FR: format(string, sizeof(string), "\n{FFFFFF}Vous pouvez augmenter cette compétence pour %d points de compétence.\nVous en avez %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_ES: format(string, sizeof(string), "\n{FFFFFF}Espagnol %s%d Espagnol.\nEspagnol %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_PG: format(string, sizeof(string), "\n{FFFFFF}Portugais %s%d Portugais.\nPortugais %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_IT: format(string, sizeof(string), "\n{FFFFFF}Italien %s%d Italien.\nItalien %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_DE: format(string, sizeof(string), "\n{FFFFFF}Allemand %s%d Allemand.\nAllemand %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
							}
							strcat(sSkills, string);
						    switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Skills", sSkills, "Upgrade", "Back");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Compétences", sSkills, "Augmenter", "Retour");
	  							case LANGUAGE_ES: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Espagnol", sSkills, "Ok", "Cancelar");
	  							case LANGUAGE_PG: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Portugais", sSkills, "Ok", "Portugais");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Italien", sSkills, "Ok", "Italien");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Allemand", sSkills, "Ok", "Schlissen");
							}
						}
						else if(pSkillLevel == HEALTH)
						{
						    switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Skills", sSkills, "Back", "");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Compétences", sSkills, "Retour", "");
	  							case LANGUAGE_ES: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Espagnol", sSkills, "Espagnol", "");
	  							case LANGUAGE_PG: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Portugais", sSkills, "Portugais", "");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Italien", sSkills, "Italien", "");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Allemand", sSkills, "Züruck", "");
							}
						}
					}
			        case 3://ARTISAN
					{
						pSkillLevel = pPlayerInfos[playerid][dArtisan];
						switch(pPlayerInfos[playerid][pLangue])
						{
							case LANGUAGE_EN: format(sSkills, sizeof(sSkills), "{CC0000}Craftsman:\n{FFFFFF}Better chances to craft an item.\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, CRAFTER);
							case LANGUAGE_FR: format(sSkills, sizeof(sSkills), "{CC0000}Artisan:\n{FFFFFF}Plus de chances de réussir une fabrication.\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, CRAFTER);
							case LANGUAGE_ES: format(sSkills, sizeof(sSkills), "{CC0000}Espagnol:\n{FFFFFF}Espagnol\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, CRAFTER);
							case LANGUAGE_PG: format(sSkills, sizeof(sSkills), "{CC0000}Portugais:\n{FFFFFF}Portugais\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, CRAFTER);
							case LANGUAGE_IT: format(sSkills, sizeof(sSkills), "{CC0000}Italien:\n{FFFFFF}Italien\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, CRAFTER);
							case LANGUAGE_DE: format(sSkills, sizeof(sSkills), "{CC0000}Allemand:\n{FFFFFF}Allemand\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, CRAFTER);
						}
						//---
						if(0 <= pSkillLevel < CRAFTER)
						{
						    if(pSkillLevel == 0) dUpgradePrice = 3;
						    else if(pSkillLevel == 1) dUpgradePrice = 3;
						    else if(pSkillLevel == 2) dUpgradePrice = 3;
							switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: format(string, sizeof(string), "\n{FFFFFF}You can upgrade this skill for %d skill points.\nYou currently have %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_FR: format(string, sizeof(string), "\n{FFFFFF}Vous pouvez augmenter cette compétence pour %d points de compétence.\nVous en avez %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_ES: format(string, sizeof(string), "\n{FFFFFF}Espagnol %s%d Espagnol.\nEspagnol %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_PG: format(string, sizeof(string), "\n{FFFFFF}Portugais %s%d Portugais.\nPortugais %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_IT: format(string, sizeof(string), "\n{FFFFFF}Italien %s%d Italien.\nItalien %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_DE: format(string, sizeof(string), "\n{FFFFFF}Allemand %s%d Allemand.\nAllemand %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
							}
							strcat(sSkills, string);
						    switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Skills", sSkills, "Upgrade", "Back");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Compétences", sSkills, "Augmenter", "Retour");
	  							case LANGUAGE_ES: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Espagnol", sSkills, "Ok", "Cancelar");
	  							case LANGUAGE_PG: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Portugais", sSkills, "Ok", "Portugais");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Italien", sSkills, "Ok", "Italien");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Allemand", sSkills, "Ok", "Schlissen");
							}
						}
						else if(pSkillLevel == CRAFTER)
						{
						    switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Skills", sSkills, "Back", "");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Compétences", sSkills, "Retour", "");
	  							case LANGUAGE_ES: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Espagnol", sSkills, "Espagnol", "");
	  							case LANGUAGE_PG: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Portugais", sSkills, "Portugais", "");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Italien", sSkills, "Italien", "");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Allemand", sSkills, "Züruck", "");
							}
						}
					}
			        case 4://TRANSPORTEUR
					{
						pSkillLevel = pPlayerInfos[playerid][dTransporteur];
						switch(pPlayerInfos[playerid][pLangue])
						{
							case LANGUAGE_EN: format(sSkills, sizeof(sSkills), "{CC0000}Transporter:\n{FFFFFF}You come back to life with a better bag.\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, TRANSPORTER);
							case LANGUAGE_FR: format(sSkills, sizeof(sSkills), "{CC0000}Transporteur:\n{FFFFFF}Vous ressucitez avec un meilleur sac.\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, TRANSPORTER);
							case LANGUAGE_ES: format(sSkills, sizeof(sSkills), "{CC0000}Espagnol:\n{FFFFFF}Espagnol\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, TRANSPORTER);
							case LANGUAGE_PG: format(sSkills, sizeof(sSkills), "{CC0000}Portugais:\n{FFFFFF}Portugais\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, TRANSPORTER);
							case LANGUAGE_IT: format(sSkills, sizeof(sSkills), "{CC0000}Italien:\n{FFFFFF}Italien\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, TRANSPORTER);
							case LANGUAGE_DE: format(sSkills, sizeof(sSkills), "{CC0000}Allemand:\n{FFFFFF}Allemand\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, TRANSPORTER);
						}
						//---
						if(0 <= pSkillLevel < TRANSPORTER)
						{
						    if(pSkillLevel == 0) dUpgradePrice = 5;
							switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: format(string, sizeof(string), "\n{FFFFFF}You can upgrade this skill for %d skill points.\nYou currently have %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_FR: format(string, sizeof(string), "\n{FFFFFF}Vous pouvez augmenter cette compétence pour %d points de compétence.\nVous en avez %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_ES: format(string, sizeof(string), "\n{FFFFFF}Espagnol %s%d Espagnol.\nEspagnol %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_PG: format(string, sizeof(string), "\n{FFFFFF}Portugais %s%d Portugais.\nPortugais %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_IT: format(string, sizeof(string), "\n{FFFFFF}Italien %s%d Italien.\nItalien %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_DE: format(string, sizeof(string), "\n{FFFFFF}Allemand %s%d Allemand.\nAllemand %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
							}
							strcat(sSkills, string);
						    switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Skills", sSkills, "Upgrade", "Back");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Compétences", sSkills, "Augmenter", "Retour");
	  							case LANGUAGE_ES: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Espagnol", sSkills, "Ok", "Cancelar");
	  							case LANGUAGE_PG: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Portugais", sSkills, "Ok", "Portugais");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Italien", sSkills, "Ok", "Italien");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Allemand", sSkills, "Ok", "Schlissen");
							}
						}
						else if(pSkillLevel == TRANSPORTER)
						{
						    switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Skills", sSkills, "Back", "");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Compétences", sSkills, "Retour", "");
	  							case LANGUAGE_ES: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Espagnol", sSkills, "Espagnol", "");
	  							case LANGUAGE_PG: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Portugais", sSkills, "Portugais", "");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Italien", sSkills, "Italien", "");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Allemand", sSkills, "Züruck", "");
							}
						}
					}
			        case 5://PÊCHEUR
					{
						pSkillLevel = pPlayerInfos[playerid][dPecheur];
						switch(pPlayerInfos[playerid][pLangue])
						{
							case LANGUAGE_EN: format(sSkills, sizeof(sSkills), "{CC0000}Fisherman:\n{FFFFFF}Fishes bite more often.\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, FISHERMAN);
							case LANGUAGE_FR: format(sSkills, sizeof(sSkills), "{CC0000}Pêcheur:\n{FFFFFF}Les poissons mordent plus souvent.\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, FISHERMAN);
							case LANGUAGE_ES: format(sSkills, sizeof(sSkills), "{CC0000}Espagnol:\n{FFFFFF}Espagnol\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, FISHERMAN);
							case LANGUAGE_PG: format(sSkills, sizeof(sSkills), "{CC0000}Portugais:\n{FFFFFF}Portugais\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, FISHERMAN);
							case LANGUAGE_IT: format(sSkills, sizeof(sSkills), "{CC0000}Italien:\n{FFFFFF}Italien\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, FISHERMAN);
							case LANGUAGE_DE: format(sSkills, sizeof(sSkills), "{CC0000}Allemand:\n{FFFFFF}Allemand\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, FISHERMAN);
						}
						//---
						if(0 <= pSkillLevel < FISHERMAN)
						{
						    if(pSkillLevel == 0) dUpgradePrice = 3;
						    else if(pSkillLevel == 1) dUpgradePrice = 5;
							switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: format(string, sizeof(string), "\n{FFFFFF}You can upgrade this skill for %d skill points.\nYou currently have %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_FR: format(string, sizeof(string), "\n{FFFFFF}Vous pouvez augmenter cette compétence pour %d points de compétence.\nVous en avez %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_ES: format(string, sizeof(string), "\n{FFFFFF}Espagnol %s%d Espagnol.\nEspagnol %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_PG: format(string, sizeof(string), "\n{FFFFFF}Portugais %s%d Portugais.\nPortugais %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_IT: format(string, sizeof(string), "\n{FFFFFF}Italien %s%d Italien.\nItalien %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_DE: format(string, sizeof(string), "\n{FFFFFF}Allemand %s%d Allemand.\nAllemand %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
							}
							strcat(sSkills, string);
						    switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Skills", sSkills, "Upgrade", "Back");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Compétences", sSkills, "Augmenter", "Retour");
	  							case LANGUAGE_ES: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Espagnol", sSkills, "Ok", "Cancelar");
	  							case LANGUAGE_PG: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Portugais", sSkills, "Ok", "Portugais");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Italien", sSkills, "Ok", "Italien");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Allemand", sSkills, "Ok", "Schlissen");
							}
						}
						else if(pSkillLevel == FISHERMAN)
						{
						    switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Skills", sSkills, "Back", "");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Compétences", sSkills, "Retour", "");
	  							case LANGUAGE_ES: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Espagnol", sSkills, "Espagnol", "");
	  							case LANGUAGE_PG: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Portugais", sSkills, "Portugais", "");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Italien", sSkills, "Italien", "");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Allemand", sSkills, "Züruck", "");
							}
						}
					}
			        case 6://MECANIC
					{
						pSkillLevel = pPlayerInfos[playerid][dMecano];
						switch(pPlayerInfos[playerid][pLangue])
						{
							case LANGUAGE_EN: format(sSkills, sizeof(sSkills), "{CC0000}Mecanic:\n{FFFFFF}Cars are fixable easier.\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, MECANIC);
							case LANGUAGE_FR: format(sSkills, sizeof(sSkills), "{CC0000}Mécano:\n{FFFFFF}Les voitures se réparent plus facilement.\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, MECANIC);
							case LANGUAGE_ES: format(sSkills, sizeof(sSkills), "{CC0000}Espagnol:\n{FFFFFF}Espagnol\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, MECANIC);
							case LANGUAGE_PG: format(sSkills, sizeof(sSkills), "{CC0000}Portugais:\n{FFFFFF}Portugais\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, MECANIC);
							case LANGUAGE_IT: format(sSkills, sizeof(sSkills), "{CC0000}Italien:\n{FFFFFF}Italien\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, MECANIC);
							case LANGUAGE_DE: format(sSkills, sizeof(sSkills), "{CC0000}Allemand:\n{FFFFFF}Allemand\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, MECANIC);
						}
						//---
						if(0 <= pSkillLevel < MECANIC)
						{
						    if(pSkillLevel == 0) dUpgradePrice = 3;
							switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: format(string, sizeof(string), "\n{FFFFFF}You can upgrade this skill for %d skill points.\nYou currently have %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_FR: format(string, sizeof(string), "\n{FFFFFF}Vous pouvez augmenter cette compétence pour %d points de compétence.\nVous en avez %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_ES: format(string, sizeof(string), "\n{FFFFFF}Espagnol %s%d Espagnol.\nEspagnol %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_PG: format(string, sizeof(string), "\n{FFFFFF}Portugais %s%d Portugais.\nPortugais %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_IT: format(string, sizeof(string), "\n{FFFFFF}Italien %s%d Italien.\nItalien %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_DE: format(string, sizeof(string), "\n{FFFFFF}Allemand %s%d Allemand.\nAllemand %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
							}
							strcat(sSkills, string);
						    switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Skills", sSkills, "Upgrade", "Back");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Compétences", sSkills, "Augmenter", "Retour");
	  							case LANGUAGE_ES: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Espagnol", sSkills, "Ok", "Cancelar");
	  							case LANGUAGE_PG: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Portugais", sSkills, "Ok", "Portugais");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Italien", sSkills, "Ok", "Italien");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Allemand", sSkills, "Ok", "Schlissen");
							}
						}
						else if(pSkillLevel == MECANIC)
						{
						    switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Skills", sSkills, "Back", "");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Compétences", sSkills, "Retour", "");
	  							case LANGUAGE_ES: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Espagnol", sSkills, "Espagnol", "");
	  							case LANGUAGE_PG: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Portugais", sSkills, "Portugais", "");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Italien", sSkills, "Italien", "");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Allemand", sSkills, "Züruck", "");
							}
						}
					}
			        case 7://JARDINIER
					{
						pSkillLevel = pPlayerInfos[playerid][dJardinier];
						switch(pPlayerInfos[playerid][pLangue])
						{
							case LANGUAGE_EN: format(sSkills, sizeof(sSkills), "{CC0000}Farmer:\n{FFFFFF}Plants grow faster.\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, FARMER);
							case LANGUAGE_FR: format(sSkills, sizeof(sSkills), "{CC0000}Jardinier:\n{FFFFFF}Les plantes poussent plus vite.\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, FARMER);
							case LANGUAGE_ES: format(sSkills, sizeof(sSkills), "{CC0000}Espagnol:\n{FFFFFF}Espagnol\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, FARMER);
							case LANGUAGE_PG: format(sSkills, sizeof(sSkills), "{CC0000}Portugais:\n{FFFFFF}Portugais\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, FARMER);
							case LANGUAGE_IT: format(sSkills, sizeof(sSkills), "{CC0000}Italien:\n{FFFFFF}Italien\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, FARMER);
							case LANGUAGE_DE: format(sSkills, sizeof(sSkills), "{CC0000}Allemand:\n{FFFFFF}Allemand\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, FARMER);
						}
						//---
						if(0 <= pSkillLevel < FARMER)
						{
						    if(pSkillLevel == 0) dUpgradePrice = 1;
						    else if(pSkillLevel == 1) dUpgradePrice = 2;
						    else if(pSkillLevel == 2) dUpgradePrice = 3;
							switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: format(string, sizeof(string), "\n{FFFFFF}You can upgrade this skill for %d skill points.\nYou currently have %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_FR: format(string, sizeof(string), "\n{FFFFFF}Vous pouvez augmenter cette compétence pour %d points de compétence.\nVous en avez %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_ES: format(string, sizeof(string), "\n{FFFFFF}Espagnol %s%d Espagnol.\nEspagnol %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_PG: format(string, sizeof(string), "\n{FFFFFF}Portugais %s%d Portugais.\nPortugais %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_IT: format(string, sizeof(string), "\n{FFFFFF}Italien %s%d Italien.\nItalien %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_DE: format(string, sizeof(string), "\n{FFFFFF}Allemand %s%d Allemand.\nAllemand %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
							}
							strcat(sSkills, string);
						    switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Skills", sSkills, "Upgrade", "Back");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Compétences", sSkills, "Augmenter", "Retour");
	  							case LANGUAGE_ES: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Espagnol", sSkills, "Ok", "Cancelar");
	  							case LANGUAGE_PG: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Portugais", sSkills, "Ok", "Portugais");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Italien", sSkills, "Ok", "Italien");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Allemand", sSkills, "Ok", "Schlissen");
							}
						}
						else if(pSkillLevel == FARMER)
						{
						    switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Skills", sSkills, "Back", "");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Compétences", sSkills, "Retour", "");
	  							case LANGUAGE_ES: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Espagnol", sSkills, "Espagnol", "");
	  							case LANGUAGE_PG: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Portugais", sSkills, "Portugais", "");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Italien", sSkills, "Italien", "");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Allemand", sSkills, "Züruck", "");
							}
						}
					}
			        case 8://ATHLÈTE
					{
						pSkillLevel = pPlayerInfos[playerid][dAthlete];
						switch(pPlayerInfos[playerid][pLangue])
						{
							case LANGUAGE_EN: format(sSkills, sizeof(sSkills), "{CC0000}Athlete:\n{FFFFFF}You can run without loosing more sleep.\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, ATHLETE);
							case LANGUAGE_FR: format(sSkills, sizeof(sSkills), "{CC0000}Athlète:\n{FFFFFF}Courir ne fait plus baisser votre sommeil.\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, ATHLETE);
							case LANGUAGE_ES: format(sSkills, sizeof(sSkills), "{CC0000}Espagnol:\n{FFFFFF}Espagnol\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, ATHLETE);
							case LANGUAGE_PG: format(sSkills, sizeof(sSkills), "{CC0000}Portugais:\n{FFFFFF}Portugais\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, ATHLETE);
							case LANGUAGE_IT: format(sSkills, sizeof(sSkills), "{CC0000}Italien:\n{FFFFFF}Italien\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, ATHLETE);
							case LANGUAGE_DE: format(sSkills, sizeof(sSkills), "{CC0000}Allemand:\n{FFFFFF}Allemand\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, ATHLETE);
						}
						//---
						if(0 <= pSkillLevel < ATHLETE)
						{
						    if(pSkillLevel == 0) dUpgradePrice = 1;
							switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: format(string, sizeof(string), "\n{FFFFFF}You can upgrade this skill for %d skill points.\nYou currently have %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_FR: format(string, sizeof(string), "\n{FFFFFF}Vous pouvez augmenter cette compétence pour %d points de compétence.\nVous en avez %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_ES: format(string, sizeof(string), "\n{FFFFFF}Espagnol %s%d Espagnol.\nEspagnol %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_PG: format(string, sizeof(string), "\n{FFFFFF}Portugais %s%d Portugais.\nPortugais %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_IT: format(string, sizeof(string), "\n{FFFFFF}Italien %s%d Italien.\nItalien %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_DE: format(string, sizeof(string), "\n{FFFFFF}Allemand %s%d Allemand.\nAllemand %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
							}
							strcat(sSkills, string);
						    switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Skills", sSkills, "Upgrade", "Back");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Compétences", sSkills, "Augmenter", "Retour");
	  							case LANGUAGE_ES: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Espagnol", sSkills, "Ok", "Cancelar");
	  							case LANGUAGE_PG: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Portugais", sSkills, "Ok", "Portugais");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Italien", sSkills, "Ok", "Italien");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Allemand", sSkills, "Ok", "Schlissen");
							}
						}
						else if(pSkillLevel == ATHLETE)
						{
						    switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Skills", sSkills, "Back", "");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Compétences", sSkills, "Retour", "");
	  							case LANGUAGE_ES: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Espagnol", sSkills, "Espagnol", "");
	  							case LANGUAGE_PG: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Portugais", sSkills, "Portugais", "");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Italien", sSkills, "Italien", "");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Allemand", sSkills, "Züruck", "");
							}
						}
					}
			        case 9://SURVIVALISTE
					{
						pSkillLevel = pPlayerInfos[playerid][dSurvivaliste];
						switch(pPlayerInfos[playerid][pLangue])
						{
							case LANGUAGE_EN: format(sSkills, sizeof(sSkills), "{CC0000}Survivor:\n{FFFFFF}You'll respawn with a weapon.\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, SURVIVOR);
							case LANGUAGE_FR: format(sSkills, sizeof(sSkills), "{CC0000}Survivaliste:\n{FFFFFF}Vous apparaitrez avec une arme.\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, SURVIVOR);
							case LANGUAGE_ES: format(sSkills, sizeof(sSkills), "{CC0000}Espagnol:\n{FFFFFF}Espagnol\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, SURVIVOR);
							case LANGUAGE_PG: format(sSkills, sizeof(sSkills), "{CC0000}Portugais:\n{FFFFFF}Portugais\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, SURVIVOR);
							case LANGUAGE_IT: format(sSkills, sizeof(sSkills), "{CC0000}Italien:\n{FFFFFF}Italien\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, SURVIVOR);
							case LANGUAGE_DE: format(sSkills, sizeof(sSkills), "{CC0000}Allemand:\n{FFFFFF}Allemand\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, SURVIVOR);
						}
						//---
						if(0 <= pSkillLevel < SURVIVOR)
						{
						    if(pSkillLevel == 0) dUpgradePrice = 2;
						    else if(pSkillLevel == 1) dUpgradePrice = 3;
						    else if(pSkillLevel == 2) dUpgradePrice = 5;
							switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: format(string, sizeof(string), "\n{FFFFFF}You can upgrade this skill for %d skill points.\nYou currently have %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_FR: format(string, sizeof(string), "\n{FFFFFF}Vous pouvez augmenter cette compétence pour %d points de compétence.\nVous en avez %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_ES: format(string, sizeof(string), "\n{FFFFFF}Espagnol %s%d Espagnol.\nEspagnol %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_PG: format(string, sizeof(string), "\n{FFFFFF}Portugais %s%d Portugais.\nPortugais %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_IT: format(string, sizeof(string), "\n{FFFFFF}Italien %s%d Italien.\nItalien %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_DE: format(string, sizeof(string), "\n{FFFFFF}Allemand %s%d Allemand.\nAllemand %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
							}
							strcat(sSkills, string);
						    switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Skills", sSkills, "Upgrade", "Back");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Compétences", sSkills, "Augmenter", "Retour");
	  							case LANGUAGE_ES: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Espagnol", sSkills, "Ok", "Cancelar");
	  							case LANGUAGE_PG: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Portugais", sSkills, "Ok", "Portugais");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Italien", sSkills, "Ok", "Italien");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Allemand", sSkills, "Ok", "Schlissen");
							}
						}
						else if(pSkillLevel == SURVIVOR)
						{
						    switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Skills", sSkills, "Back", "");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Compétences", sSkills, "Retour", "");
	  							case LANGUAGE_ES: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Espagnol", sSkills, "Espagnol", "");
	  							case LANGUAGE_PG: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Portugais", sSkills, "Portugais", "");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Italien", sSkills, "Italien", "");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Allemand", sSkills, "Züruck", "");
							}
						}
					}
			        case 10://TANK
					{
						pSkillLevel = pPlayerInfos[playerid][dTank];
						switch(pPlayerInfos[playerid][pLangue])
						{
							case LANGUAGE_EN: format(sSkills, sizeof(sSkills), "{CC0000}Tank:\n{FFFFFF}Maximum health incresed.\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, TANK);
							case LANGUAGE_FR: format(sSkills, sizeof(sSkills), "{CC0000}Tank:\n{FFFFFF}Bouclier max. augmenté.\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, TANK);
							case LANGUAGE_ES: format(sSkills, sizeof(sSkills), "{CC0000}Espagnol:\n{FFFFFF}Espagnol\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, TANK);
							case LANGUAGE_PG: format(sSkills, sizeof(sSkills), "{CC0000}Portugais:\n{FFFFFF}Portugais\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, TANK);
							case LANGUAGE_IT: format(sSkills, sizeof(sSkills), "{CC0000}Italien:\n{FFFFFF}Italien\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, TANK);
							case LANGUAGE_DE: format(sSkills, sizeof(sSkills), "{CC0000}Allemand:\n{FFFFFF}Allemand\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, TANK);
						}
						//---
						if(0 <= pSkillLevel < TANK)
						{
						    if(pSkillLevel == 0) dUpgradePrice = 3;
							switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: format(string, sizeof(string), "\n{FFFFFF}You can upgrade this skill for %d skill points.\nYou currently have %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_FR: format(string, sizeof(string), "\n{FFFFFF}Vous pouvez augmenter cette compétence pour %d points de compétence.\nVous en avez %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_ES: format(string, sizeof(string), "\n{FFFFFF}Espagnol %s%d Espagnol.\nEspagnol %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_PG: format(string, sizeof(string), "\n{FFFFFF}Portugais %s%d Portugais.\nPortugais %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_IT: format(string, sizeof(string), "\n{FFFFFF}Italien %s%d Italien.\nItalien %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_DE: format(string, sizeof(string), "\n{FFFFFF}Allemand %s%d Allemand.\nAllemand %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
							}
							strcat(sSkills, string);
						    switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Skills", sSkills, "Upgrade", "Back");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Compétences", sSkills, "Augmenter", "Retour");
	  							case LANGUAGE_ES: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Espagnol", sSkills, "Ok", "Cancelar");
	  							case LANGUAGE_PG: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Portugais", sSkills, "Ok", "Portugais");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Italien", sSkills, "Ok", "Italien");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Allemand", sSkills, "Ok", "Schlissen");
							}
						}
						else if(pSkillLevel == TANK)
						{
						    switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Skills", sSkills, "Back", "");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Compétences", sSkills, "Retour", "");
	  							case LANGUAGE_ES: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Espagnol", sSkills, "Espagnol", "");
	  							case LANGUAGE_PG: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Portugais", sSkills, "Portugais", "");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Italien", sSkills, "Italien", "");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Allemand", sSkills, "Züruck", "");
							}
						}
					}
			        case 11://BOMBERMAN
					{
						pSkillLevel = pPlayerInfos[playerid][dBomberman];
						switch(pPlayerInfos[playerid][pLangue])
						{
							case LANGUAGE_EN: format(sSkills, sizeof(sSkills), "{CC0000}Bomberman:\n{FFFFFF}Explosions hurt you less.\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, FISHERMAN);
							case LANGUAGE_FR: format(sSkills, sizeof(sSkills), "{CC0000}Bomberman:\n{FFFFFF}Les explosions vous blessent moins.\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, FISHERMAN);
							case LANGUAGE_ES: format(sSkills, sizeof(sSkills), "{CC0000}Espagnol:\n{FFFFFF}Espagnol\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, FISHERMAN);
							case LANGUAGE_PG: format(sSkills, sizeof(sSkills), "{CC0000}Portugais:\n{FFFFFF}Portugais\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, FISHERMAN);
							case LANGUAGE_IT: format(sSkills, sizeof(sSkills), "{CC0000}Italien:\n{FFFFFF}Italien\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, FISHERMAN);
							case LANGUAGE_DE: format(sSkills, sizeof(sSkills), "{CC0000}Allemand:\n{FFFFFF}Allemand\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, FISHERMAN);
						}
						//---
						if(0 <= pSkillLevel < BOMBERMAN)
						{
						    if(pSkillLevel == 0) dUpgradePrice = 3;
						    else if(pSkillLevel == 1) dUpgradePrice = 5;
							switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: format(string, sizeof(string), "\n{FFFFFF}You can upgrade this skill for %d skill points.\nYou currently have %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_FR: format(string, sizeof(string), "\n{FFFFFF}Vous pouvez augmenter cette compétence pour %d points de compétence.\nVous en avez %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_ES: format(string, sizeof(string), "\n{FFFFFF}Espagnol %s%d Espagnol.\nEspagnol %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_PG: format(string, sizeof(string), "\n{FFFFFF}Portugais %s%d Portugais.\nPortugais %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_IT: format(string, sizeof(string), "\n{FFFFFF}Italien %s%d Italien.\nItalien %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_DE: format(string, sizeof(string), "\n{FFFFFF}Allemand %s%d Allemand.\nAllemand %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
							}
							strcat(sSkills, string);
						    switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Skills", sSkills, "Upgrade", "Back");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Compétences", sSkills, "Augmenter", "Retour");
	  							case LANGUAGE_ES: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Espagnol", sSkills, "Ok", "Cancelar");
	  							case LANGUAGE_PG: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Portugais", sSkills, "Ok", "Portugais");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Italien", sSkills, "Ok", "Italien");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Allemand", sSkills, "Ok", "Schlissen");
							}
						}
						else if(pSkillLevel == BOMBERMAN)
						{
						    switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Skills", sSkills, "Back", "");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Compétences", sSkills, "Retour", "");
	  							case LANGUAGE_ES: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Espagnol", sSkills, "Espagnol", "");
	  							case LANGUAGE_PG: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Portugais", sSkills, "Portugais", "");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Italien", sSkills, "Italien", "");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Allemand", sSkills, "Züruck", "");
							}
						}
					}
			        case 12://HYDRATATION
					{
						pSkillLevel = pPlayerInfos[playerid][dHydra];
						switch(pPlayerInfos[playerid][pLangue])
						{
							case LANGUAGE_EN: format(sSkills, sizeof(sSkills), "{CC0000}Hydratation:\n{FFFFFF}Rain makes you less thirsty.\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, FISHERMAN);
							case LANGUAGE_FR: format(sSkills, sizeof(sSkills), "{CC0000}Hydratation:\n{FFFFFF}La pluie vous abreuve.\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, FISHERMAN);
							case LANGUAGE_ES: format(sSkills, sizeof(sSkills), "{CC0000}Espagnol:\n{FFFFFF}Espagnol\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, FISHERMAN);
							case LANGUAGE_PG: format(sSkills, sizeof(sSkills), "{CC0000}Portugais:\n{FFFFFF}Portugais\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, FISHERMAN);
							case LANGUAGE_IT: format(sSkills, sizeof(sSkills), "{CC0000}Italien:\n{FFFFFF}Italien\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, FISHERMAN);
							case LANGUAGE_DE: format(sSkills, sizeof(sSkills), "{CC0000}Allemand:\n{FFFFFF}Allemand\n\n{FFFFFF}Level: %d{FFFFFF}/{33AA33}%d", pSkillLevel, FISHERMAN);
						}
						//---
						if(0 <= pSkillLevel < HYDRATATION)
						{
						    if(pSkillLevel == 0) dUpgradePrice = 3;
							switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: format(string, sizeof(string), "\n{FFFFFF}You can upgrade this skill for %d skill points.\nYou currently have %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_FR: format(string, sizeof(string), "\n{FFFFFF}Vous pouvez augmenter cette compétence pour %d points de compétence.\nVous en avez %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_ES: format(string, sizeof(string), "\n{FFFFFF}Espagnol %s%d Espagnol.\nEspagnol %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_PG: format(string, sizeof(string), "\n{FFFFFF}Portugais %s%d Portugais.\nPortugais %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_IT: format(string, sizeof(string), "\n{FFFFFF}Italien %s%d Italien.\nItalien %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
								case LANGUAGE_DE: format(string, sizeof(string), "\n{FFFFFF}Allemand %s%d Allemand.\nAllemand %d.", dUpgradePrice, pPlayerInfos[playerid][pCompetence]);
							}
							strcat(sSkills, string);
						    switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Skills", sSkills, "Upgrade", "Back");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Compétences", sSkills, "Augmenter", "Retour");
	  							case LANGUAGE_ES: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Espagnol", sSkills, "Ok", "Cancelar");
	  							case LANGUAGE_PG: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Portugais", sSkills, "Ok", "Portugais");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Italien", sSkills, "Ok", "Italien");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Allemand", sSkills, "Ok", "Schlissen");
							}
						}
						else if(pSkillLevel == HYDRATATION)
						{
						    switch(pPlayerInfos[playerid][pLangue])
							{
								case LANGUAGE_EN: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Skills", sSkills, "Back", "");
								case LANGUAGE_FR: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Compétences", sSkills, "Retour", "");
	  							case LANGUAGE_ES: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Espagnol", sSkills, "Espagnol", "");
	  							case LANGUAGE_PG: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Portugais", sSkills, "Portugais", "");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Italien", sSkills, "Italien", "");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX, "Allemand", sSkills, "Züruck", "");
							}
						}
					}
			    }
			}
		}
		case 35://COMPÉTENCES NEXT
		{
		    if(!response)
		    {
		        ShowPlayerSkills(playerid);
		    }
		    else
		    {
				new pSkillLevel;
				new dUpgradePrice;
	   			switch(pSkill[playerid])
				{
					case 0://BOUCHER
					{
						pSkillLevel = pPlayerInfos[playerid][dBoucher];
						if(pSkillLevel == 0) dUpgradePrice = 2;
						else if(pSkillLevel == BUTCHER) return ShowPlayerSkills(playerid);
						//---
						if(dUpgradePrice > pPlayerInfos[playerid][pCompetence])
						{
						    SendClientMessageEx(playerid, ROUGE, "You don't have enough skills points!", "Vous n'avez pas assez de points de compétence !", "Espagnol", "Portugais", "Italien", "Allemand");
						    return ShowPlayerSkills(playerid);
						}
						else
						{
						    pPlayerInfos[playerid][pCompetence] -= dUpgradePrice;
						    pPlayerInfos[playerid][dBoucher] ++;
	 						LogInfo(true, "[JOUEUR]%s a augmente la competence Boucher %d/%d.", GetName(playerid), pPlayerInfos[playerid][dBoucher]);
						    ShowPlayerTextInfo(playerid, 5000, "~g~Skill upgraded!", "~g~Compétence améliorée !", "~y~Espagnol", "~g~Portugais", "~g~Italien", "~g~Allemand");
						}
					}
					case 1://MÉDECINE
					{
						pSkillLevel = pPlayerInfos[playerid][dMedecine];
						if(pSkillLevel == 0) dUpgradePrice = 3;
						if(pSkillLevel == 1) dUpgradePrice = 5;
						else if(pSkillLevel == DOCTOR) return ShowPlayerSkills(playerid);
						//---
						if(dUpgradePrice > pPlayerInfos[playerid][pCompetence])
						{
						    SendClientMessageEx(playerid, ROUGE, "You don't have enough skills points!", "Vous n'avez pas assez de points de compétence !", "Espagnol", "Portugais", "Italien", "Allemand");
						    return ShowPlayerSkills(playerid);
						}
						else
						{
						    pPlayerInfos[playerid][pCompetence] -= dUpgradePrice;
						    pPlayerInfos[playerid][dMedecine] ++;
	 						LogInfo(true, "[JOUEUR]%s a augmente la competence Medecin %d/%d.", GetName(playerid), pPlayerInfos[playerid][dMedecine]);
						    ShowPlayerTextInfo(playerid, 5000, "~g~Skill upgraded!", "~g~Compétence améliorée !", "~y~Espagnol", "~g~Portugais", "~g~Italien", "~g~Allemand");
						}
					}
					case 2://SANTÉ
					{
						pSkillLevel = pPlayerInfos[playerid][dSante];
						if(pSkillLevel == 0) dUpgradePrice = 3;
						if(pSkillLevel == 1) dUpgradePrice = 5;
						else if(pSkillLevel == HEALTH) return ShowPlayerSkills(playerid);
						//---
						if(dUpgradePrice > pPlayerInfos[playerid][pCompetence])
						{
						    SendClientMessageEx(playerid, ROUGE, "You don't have enough skills points!", "Vous n'avez pas assez de points de compétence !", "Espagnol", "Portugais", "Italien", "Allemand");
						    return ShowPlayerSkills(playerid);
						}
						else
						{
						    pPlayerInfos[playerid][pCompetence] -= dUpgradePrice;
						    pPlayerInfos[playerid][dSante] ++;
	 						LogInfo(true, "[JOUEUR]%s a augmente la competence Sante %d/%d.", GetName(playerid), pPlayerInfos[playerid][dSante]);
						    ShowPlayerTextInfo(playerid, 5000, "~g~Skill upgraded!", "~g~Compétence améliorée !", "~y~Espagnol", "~g~Portugais", "~g~Italien", "~g~Allemand");
						}
					}
					case 3://ARTISAN
					{
						pSkillLevel = pPlayerInfos[playerid][dArtisan];
						if(pSkillLevel == 0) dUpgradePrice = 3;
						if(pSkillLevel == 1) dUpgradePrice = 3;
						if(pSkillLevel == 2) dUpgradePrice = 3;
						else if(pSkillLevel == CRAFTER) return ShowPlayerSkills(playerid);
						//---
						if(dUpgradePrice > pPlayerInfos[playerid][pCompetence])
						{
						    SendClientMessageEx(playerid, ROUGE, "You don't have enough skills points!", "Vous n'avez pas assez de points de compétence !", "Espagnol", "Portugais", "Italien", "Allemand");
						    return ShowPlayerSkills(playerid);
						}
						else
						{
						    pPlayerInfos[playerid][pCompetence] -= dUpgradePrice;
						    pPlayerInfos[playerid][dArtisan] ++;
	 						LogInfo(true, "[JOUEUR]%s a augmente la competence Artisan %d/%d.", GetName(playerid), pPlayerInfos[playerid][dArtisan]);
						    ShowPlayerTextInfo(playerid, 5000, "~g~Skill upgraded!", "~g~Compétence améliorée !", "~y~Espagnol", "~g~Portugais", "~g~Italien", "~g~Allemand");
						}
					}
					case 4://TRANSPORTEUR
					{
						pSkillLevel = pPlayerInfos[playerid][dTransporteur];
						if(pSkillLevel == 0) dUpgradePrice = 3;
						if(pSkillLevel == 1) dUpgradePrice = 5;
						else if(pSkillLevel == TRANSPORTER) return ShowPlayerSkills(playerid);
						//---
						if(dUpgradePrice > pPlayerInfos[playerid][pCompetence])
						{
						    SendClientMessageEx(playerid, ROUGE, "You don't have enough skills points!", "Vous n'avez pas assez de points de compétence !", "Espagnol", "Portugais", "Italien", "Allemand");
						    return ShowPlayerSkills(playerid);
						}
						else
						{
						    pPlayerInfos[playerid][pCompetence] -= dUpgradePrice;
						    pPlayerInfos[playerid][dTransporteur] ++;
	 						LogInfo(true, "[JOUEUR]%s a augmente la competence Trasnporteur %d/%d.", GetName(playerid), pPlayerInfos[playerid][dTransporteur]);
						    ShowPlayerTextInfo(playerid, 5000, "~g~Skill upgraded!", "~g~Compétence améliorée !", "~y~Espagnol", "~g~Portugais", "~g~Italien", "~g~Allemand");
						}
					}
					case 5://PÊCHEUR
					{
						pSkillLevel = pPlayerInfos[playerid][dPecheur];
						if(pSkillLevel == 0) dUpgradePrice = 3;
						if(pSkillLevel == 1) dUpgradePrice = 5;
						else if(pSkillLevel == FISHERMAN) return ShowPlayerSkills(playerid);
						//---
						if(dUpgradePrice > pPlayerInfos[playerid][pCompetence])
						{
						    SendClientMessageEx(playerid, ROUGE, "You don't have enough skills points!", "Vous n'avez pas assez de points de compétence !", "Espagnol", "Portugais", "Italien", "Allemand");
						    return ShowPlayerSkills(playerid);
						}
						else
						{
						    pPlayerInfos[playerid][pCompetence] -= dUpgradePrice;
						    pPlayerInfos[playerid][dPecheur] ++;
	 						LogInfo(true, "[JOUEUR]%s a augmente la competence Pecheur %d/%d.", GetName(playerid), pPlayerInfos[playerid][dPecheur]);
						    ShowPlayerTextInfo(playerid, 5000, "~g~Skill upgraded!", "~g~Compétence améliorée !", "~y~Espagnol", "~g~Portugais", "~g~Italien", "~g~Allemand");
						}
					}
					case 6://MÉCANO
					{
						pSkillLevel = pPlayerInfos[playerid][dMecano];
						if(pSkillLevel == 0) dUpgradePrice = 3;
						else if(pSkillLevel == MECANIC) return ShowPlayerSkills(playerid);
						//---
						if(dUpgradePrice > pPlayerInfos[playerid][pCompetence])
						{
						    SendClientMessageEx(playerid, ROUGE, "You don't have enough skills points!", "Vous n'avez pas assez de points de compétence !", "Espagnol", "Portugais", "Italien", "Allemand");
						    return ShowPlayerSkills(playerid);
						}
						else
						{
						    pPlayerInfos[playerid][pCompetence] -= dUpgradePrice;
						    pPlayerInfos[playerid][dMecano] ++;
	 						LogInfo(true, "[JOUEUR]%s a augmente la competence Mecanicien %d/%d.", GetName(playerid), pPlayerInfos[playerid][dMecano]);
						    ShowPlayerTextInfo(playerid, 5000, "~g~Skill upgraded!", "~g~Compétence améliorée !", "~y~Espagnol", "~g~Portugais", "~g~Italien", "~g~Allemand");
						}
					}
					case 7://JARDINIER
					{
						pSkillLevel = pPlayerInfos[playerid][dJardinier];
						if(pSkillLevel == 0) dUpgradePrice = 1;
						else if(pSkillLevel == 1) dUpgradePrice = 2;
						else if(pSkillLevel == 2) dUpgradePrice = 3;
						else if(pSkillLevel == FARMER) return ShowPlayerSkills(playerid);
						//---
						if(dUpgradePrice > pPlayerInfos[playerid][pCompetence])
						{
						    SendClientMessageEx(playerid, ROUGE, "You don't have enough skills points!", "Vous n'avez pas assez de points de compétence !", "Espagnol", "Portugais", "Italien", "Allemand");
						    return ShowPlayerSkills(playerid);
						}
						else
						{
						    pPlayerInfos[playerid][pCompetence] -= dUpgradePrice;
						    pPlayerInfos[playerid][dJardinier] ++;
	 						LogInfo(true, "[JOUEUR]%s a augmente la competence Jardinier %d/%d.", GetName(playerid), pPlayerInfos[playerid][dJardinier]);
						    ShowPlayerTextInfo(playerid, 5000, "~g~Skill upgraded!", "~g~Compétence améliorée !", "~y~Espagnol", "~g~Portugais", "~g~Italien", "~g~Allemand");
						}
					}
					case 8://ATHLÈTE
					{
						pSkillLevel = pPlayerInfos[playerid][dAthlete];
						if(pSkillLevel == 0) dUpgradePrice = 1;
						else if(pSkillLevel == ATHLETE) return ShowPlayerSkills(playerid);
						//---
						if(dUpgradePrice > pPlayerInfos[playerid][pCompetence])
						{
						    SendClientMessageEx(playerid, ROUGE, "You don't have enough skills points!", "Vous n'avez pas assez de points de compétence !", "Espagnol", "Portugais", "Italien", "Allemand");
						    return ShowPlayerSkills(playerid);
						}
						else
						{
						    pPlayerInfos[playerid][pCompetence] -= dUpgradePrice;
						    pPlayerInfos[playerid][dAthlete] ++;
	 						LogInfo(true, "[JOUEUR]%s a augmente la competence Athlete %d/%d.", GetName(playerid), pPlayerInfos[playerid][dAthlete]);
						    ShowPlayerTextInfo(playerid, 5000, "~g~Skill upgraded!", "~g~Compétence améliorée !", "~y~Espagnol", "~g~Portugais", "~g~Italien", "~g~Allemand");
						}
					}
					case 9://SURVIVALISTE
					{
						pSkillLevel = pPlayerInfos[playerid][dSurvivaliste];
						if(pSkillLevel == 0) dUpgradePrice = 2;
						if(pSkillLevel == 1) dUpgradePrice = 3;
						if(pSkillLevel == 2) dUpgradePrice = 5;
						else if(pSkillLevel == SURVIVOR) return ShowPlayerSkills(playerid);
						//---
						if(dUpgradePrice > pPlayerInfos[playerid][pCompetence])
						{
						    SendClientMessageEx(playerid, ROUGE, "You don't have enough skills points!", "Vous n'avez pas assez de points de compétence !", "Espagnol", "Portugais", "Italien", "Allemand");
						    return ShowPlayerSkills(playerid);
						}
						else
						{
						    pPlayerInfos[playerid][pCompetence] -= dUpgradePrice;
						    pPlayerInfos[playerid][dSurvivaliste] ++;
	 						LogInfo(true, "[JOUEUR]%s a augmente la competence Survivaliste %d/%d.", GetName(playerid), pPlayerInfos[playerid][dSurvivaliste]);
						    ShowPlayerTextInfo(playerid, 5000, "~g~Skill upgraded!", "~g~Compétence améliorée !", "~y~Espagnol", "~g~Portugais", "~g~Italien", "~g~Allemand");
						}
					}
					case 10://TANK
					{
						pSkillLevel = pPlayerInfos[playerid][dTank];
						if(pSkillLevel == 0) dUpgradePrice = 3;
						else if(pSkillLevel == TANK) return ShowPlayerSkills(playerid);
						//---
						if(dUpgradePrice > pPlayerInfos[playerid][pCompetence])
						{
						    SendClientMessageEx(playerid, ROUGE, "You don't have enough skills points!", "Vous n'avez pas assez de points de compétence !", "Espagnol", "Portugais", "Italien", "Allemand");
						    return ShowPlayerSkills(playerid);
						}
						else
						{
						    pPlayerInfos[playerid][pCompetence] -= dUpgradePrice;
						    pPlayerInfos[playerid][dTank] ++;
	 						LogInfo(true, "[JOUEUR]%s a augmente la competence Tank %d/%d.", GetName(playerid), pPlayerInfos[playerid][dTank]);
						    ShowPlayerTextInfo(playerid, 5000, "~g~Skill upgraded!", "~g~Compétence améliorée !", "~y~Espagnol", "~g~Portugais", "~g~Italien", "~g~Allemand");
						}
					}
					case 11://BOMBERMAN
					{
						pSkillLevel = pPlayerInfos[playerid][dBomberman];
						if(pSkillLevel == 0) dUpgradePrice = 3;
						if(pSkillLevel == 1) dUpgradePrice = 5;
						else if(pSkillLevel == BOMBERMAN) return ShowPlayerSkills(playerid);
						//---
						if(dUpgradePrice > pPlayerInfos[playerid][pCompetence])
						{
						    SendClientMessageEx(playerid, ROUGE, "You don't have enough skills points!", "Vous n'avez pas assez de points de compétence !", "Espagnol", "Portugais", "Italien", "Allemand");
						    return ShowPlayerSkills(playerid);
						}
						else
						{
						    pPlayerInfos[playerid][pCompetence] -= dUpgradePrice;
						    pPlayerInfos[playerid][dBomberman] ++;
	 						LogInfo(true, "[JOUEUR]%s a augmente la competence Bomberman %d/%d.", GetName(playerid), pPlayerInfos[playerid][dBomberman]);
						    ShowPlayerTextInfo(playerid, 5000, "~g~Skill upgraded!", "~g~Compétence améliorée !", "~y~Espagnol", "~g~Portugais", "~g~Italien", "~g~Allemand");
						}
					}
					case 12://HYDRATATION
					{
						pSkillLevel = pPlayerInfos[playerid][dHydra];
						if(pSkillLevel == 0) dUpgradePrice = 3;
						else if(pSkillLevel == HYDRATATION) return ShowPlayerSkills(playerid);
						//---
						if(dUpgradePrice > pPlayerInfos[playerid][pCompetence])
						{
						    SendClientMessageEx(playerid, ROUGE, "You don't have enough skills points!", "Vous n'avez pas assez de points de compétence !", "Espagnol", "Portugais", "Italien", "Allemand");
						    return ShowPlayerSkills(playerid);
						}
						else
						{
						    pPlayerInfos[playerid][pCompetence] -= dUpgradePrice;
						    pPlayerInfos[playerid][dHydra] ++;
	 						LogInfo(true, "[JOUEUR]%s a augmente la competence Hydratation %d/%d.", GetName(playerid), pPlayerInfos[playerid][dHydra]);
						    ShowPlayerTextInfo(playerid, 5000, "~g~Skill upgraded!", "~g~Compétence améliorée !", "~y~Espagnol", "~g~Portugais", "~g~Italien", "~g~Allemand");
						}
					}
				}
			}
		}
		case 36://CONFIRMATION RAMASSAGE
		{
		    if(response)
		    {
		        new dFreeSlot = GetPlayerNextFreeSlot(playerid);
		        if(dFreeSlot == -1)
		        {
				    SendClientMessageEx(playerid, ROUGE, "You cannot carry more items!", "Vous ne pouvez pas porter plus d'objets !", "¡No puede llevar más objetos!", "O senhor não pode carregar mais objetos", "Italien", "Sie können nicht mehr Objekte tragen!");
				    return 1;
		        }
				if(pAroundItems[playerid][0][1] == 4)//COLLECTEUR
				{
			        if(dCollector[pAroundItems[playerid][0][0]][dEau] == -1)
			        {
					    SendClientMessageEx(playerid, ROUGE, "This item has already been picked up!", "Cet objet a déjà été ramassé !", "¡Esto objeto ya ha recogado!", "Portugais", "Italien", "Dieser Objekte hat schon abgeholt ");
					    return 1;
			        }
					ApplyAnimation(playerid, "CARRY", "liftup", 3.0, 0, 0, 0, 0, 0);
				    GivePlayerSlotObject(playerid, 95, dFreeSlot);
		        	DestroyCollector(pAroundItems[playerid][0][0]);
				}
				else if(pAroundItems[playerid][0][1] == 7)//BROYEUR
				{
			        if(dShredder[pAroundItems[playerid][0][0]][dBroyeur] == -1)
			        {
					    SendClientMessageEx(playerid, ROUGE, "This item has already been picked up!", "Cet objet a déjà été ramassé !", "¡Esto objeto ya ha recogado!", "Portugais", "Italien", "Dieser Objekte hat schon abgeholt ");
					    return 1;
			        }
					ApplyAnimation(playerid, "CARRY", "liftup", 3.0, 0, 0, 0, 0, 0);
				    GivePlayerSlotObject(playerid, 117, dFreeSlot);
		        	DestroyShredder(pAroundItems[playerid][0][0]);
				}
				else if(pAroundItems[playerid][0][1] == 12)//RÉFRIGÉRATEUR
				{
					if(!dFridgeInfos[pAroundItems[playerid][0][0]][bFridge])
			        {
					    SendClientMessageEx(playerid, ROUGE, "This item has already been picked up!", "Cet objet a déjà été ramassé !", "¡Esto objeto ya ha recogado!", "Portugais", "Italien", "Dieser Objekte hat schon abgeholt ");
					    return 1;
			        }
					ApplyAnimation(playerid, "CARRY", "liftup", 3.0, 0, 0, 0, 0, 0);
				    GivePlayerSlotObject(playerid, 130, dFreeSlot);
		        	DestroyFridge(pAroundItems[playerid][0][0]);
				}
		    }
		}
		case 37://CHANGEMENT DE RANG
		{
		    if(response)
		    {
		        if(listitem == pPlayerInfos[pAdminInfos[playerid][dPuniID]][pAdmin])
		        {
					SendClientMessageEx(playerid, ROUGE, "This is already this player's rank!", "Ce joueur est déjà à ce rang !", "Espagnol", "Portugais", "Italien", "Allemand");
		            return 1;
		        }
		        switch(listitem)
		        {
		            case 0://JOUEUR
		            {
						TextDrawHideForPlayer(pAdminInfos[playerid][dPuniID], tAdmin);
		                pPlayerInfos[pAdminInfos[playerid][dPuniID]][pAdmin] = PLAYER;
						SendClientMessageEx(pAdminInfos[playerid][dPuniID], ADMIN_COLOR, "[ADMIN]The admin set your rank to 'Player'.", "[ADMIN]L'admin a changé votre rang en 'Joueur'.", "[ADMIN]Espagnol", "[ADMIN]Portugais", "[ADMIN]Italien", "[ADMIN]Allemand");
		            }
		            case 1://MODÉRATEUR
		            {
		                TextDrawShowForPlayer(pAdminInfos[playerid][dPuniID], tAdmin);
		                pPlayerInfos[pAdminInfos[playerid][dPuniID]][pAdmin] = MODERATOR;
						SendClientMessageEx(pAdminInfos[playerid][dPuniID], ADMIN_COLOR, "[ADMIN]The admin set your rank to 'Moderator'.", "[ADMIN]L'admin a changé votre rang en 'Modérateur'.", "[ADMIN]Espagnol", "[ADMIN]Portugais", "[ADMIN]Italien", "[ADMIN]Allemand");
		            }
		            case 2://ADMIN
		            {
		                TextDrawShowForPlayer(pAdminInfos[playerid][dPuniID], tAdmin);
		                pPlayerInfos[pAdminInfos[playerid][dPuniID]][pAdmin] = ADMINISTRATOR;
						SendClientMessageEx(pAdminInfos[playerid][dPuniID], ADMIN_COLOR, "[ADMIN]The admin set your rank to 'Administrator'.", "[ADMIN]L'admin a changé votre rang en 'Administrateur'.", "[ADMIN]Espagnol", "[ADMIN]Portugais", "[ADMIN]Italien", "[ADMIN]Allemand");
		            }
		            case 3://OWNER
		            {
		                TextDrawShowForPlayer(pAdminInfos[playerid][dPuniID], tAdmin);
		                pPlayerInfos[pAdminInfos[playerid][dPuniID]][pAdmin] = OWNER;
						SendClientMessageEx(pAdminInfos[playerid][dPuniID], ADMIN_COLOR, "[ADMIN]The admin set your rank to 'Owner'.", "[ADMIN]L'admin a changé votre rang en 'Owner'.", "[ADMIN]Espagnol", "[ADMIN]Portugais", "[ADMIN]Italien", "[ADMIN]Allemand");
		            }
		        }
				SendClientMessageEx(playerid, ADMIN_COLOR, "[ADMIN]Rank set.", "[ADMIN]Rang changé.", "[ADMIN]Espagnol", "[ADMIN]Portugais", "[ADMIN]Italien", "[ADMIN]Allemand");
				ShowPlayerAdminDialog(playerid);
		    }
		    else
		    {
				ShowPlayerAdminDialog(playerid);
		    }
		}
		case 38://ÉTAGÈRE
		{
		    if(response)
		    {
		        new gun, ammo;
		        GetGunRackWeapon(pGunRack[playerid], listitem, gun, ammo);
		        if(gun == 0)
		        {
					ShowPlayerTextInfo(playerid, 3000, "~r~There is no weapon there!", "~r~Il n'y a pas d'arme ici !", "~r~¡Espagnol!", "~r~Portugais!", "~r~Italien!", "~r~Allemand!");
					pGunRack[playerid] = -1;
				}
				else
				{
			        new dFreeSlot = GetPlayerNextFreeWeaponSlot(playerid);
					new dWeaponSlot = HasPlayerWeapon(playerid, gun);
					new dSameWeapon = HasPlayerSameTypeWeapon(playerid, gun);
					if(dWeaponSlot != 0 && GetWeaponAmmoType(gun) != NO_AMMO)
					{
					    ApplyReloadAnim(playerid, gun);
						ApplyAnimation(playerid,"TEC","TEC_reload", 4.0, 0, 0, 0, 0, 0);
						if(CanWeaponDual(gun) && GetPlayerWeaponSkill(playerid, dWeaponSlot) == WEAPON_SIMPLE)
						{
				    		SetPlayerWeaponSkill(playerid, dWeaponSlot, WEAPON_AKIMBO);
						}
						else
						{
							PlayerDropObject(playerid, GetObjectFromWeapon(gun), floatdiv(RandomEx(5, 20), 10));
						}
					    GivePlayerWeaponEx(playerid, gun, ammo);
						AddGunRackWeapon(pGunRack[playerid], listitem, 0, 0);
					    return 1;
					}
					if(dSameWeapon == 1)//Retourne 0 si le mec n'a pas d'armes du même type, 1 si le mec a une arme du même type, 2 si le mec a l'arme en question
					{
						if(GetWeaponAmmoType(GetPlayerWeapon(playerid)) == GetWeaponAmmoType(gun) && GetWeaponAmmoType(gun) != NO_AMMO)
						{
							GivePlayerWeaponEx(playerid, GetPlayerWeapon(playerid), ammo);
							PlayerDropObject(playerid, GetObjectFromWeapon(gun), floatdiv(RandomEx(5, 20), 10));
							AddGunRackWeapon(pGunRack[playerid], listitem, 0, 0);
							return 1;
						}
					    SendClientMessageEx(playerid, ROUGE, "You already have this type of weapon!", "Vous avez déjà une arme de ce type !", "¡Ya tiene una arma de esto tipo!", "O senhor já tem uma arma de este tipo", "Già hai una arma di questo tipo !", "Sie haben schon so eine Waffe!");
					    return 1;
					}
					if(dFreeSlot == 0)
					{
					    SendClientMessageEx(playerid, ROUGE, "You cannot carry more weapons!", "Vous ne pouvez pas porter plus d'armes !", "¡No puede llevar más armas!", "O senhor não pode carregar mais armas !", "Italien", "Sie können nicht mehr Waffen tragen!");
					    return 1;
					}
					ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
					GivePlayerWeaponEx(playerid, gun, ammo);
					SetPlayerWeaponSkill(playerid, dFreeSlot, WEAPON_SIMPLE);
					AddGunRackWeapon(pGunRack[playerid], listitem, 0, 0);
					if(!pPlayerInfos[playerid][bAide][0]) pPlayerInfos[playerid][bAide][0] = true;
				}
		    }
		    else
		    {
		        pGunRack[playerid] = -1;
		    }
		}
	    case 39://CRÉATION GARAGE
	    {
	        if(response)
			{
			    if(!IsNumeric(inputtext) || strlen(inputtext) != 4)
			    {
					switch(pPlayerInfos[playerid][pLangue])
					{
					   	case LANGUAGE_EN: ShowPlayerDialog(playerid, 39, DIALOG_STYLE_INPUT, "Garage", "Enter a four numbered code:", "Ok", "");
	   					case LANGUAGE_FR: ShowPlayerDialog(playerid, 39, DIALOG_STYLE_INPUT, "Garage", "Écrivez un nombre à quatre chiffres comme code:", "Ok", "");
	   					case LANGUAGE_ES: ShowPlayerDialog(playerid, 39, DIALOG_STYLE_INPUT, "Espagnol", "Espagnol", "Ok", "");
	   					case LANGUAGE_PG: ShowPlayerDialog(playerid, 39, DIALOG_STYLE_INPUT, "Portugais", "Portugais", "Ok", "");
						case LANGUAGE_IT: ShowPlayerDialog(playerid, 39, DIALOG_STYLE_INPUT, "Italien", "Italien", "Ok", "");
						case LANGUAGE_DE: ShowPlayerDialog(playerid, 39, DIALOG_STYLE_INPUT, "Allemand", "Allemand" , "Ok", "");
					}
					return 1;
			    }
   			 	//---
			    format(dGarage[pGarage[playerid]][sCodeGarage], 5, "%s", inputtext);
				//---
				ChangeGarageDoorState(pGarage[playerid], true);
				//---
				pGarage[playerid] = -1;
			}
			else if(!response)
			{
				switch(pPlayerInfos[playerid][pLangue])
				{
					case LANGUAGE_EN: ShowPlayerDialog(playerid, 39, DIALOG_STYLE_INPUT, "Garage", "Enter a four numbered code:", "Ok", "");
					case LANGUAGE_FR: ShowPlayerDialog(playerid, 39, DIALOG_STYLE_INPUT, "Garage", "Écrivez un nombre à quatre chiffres comme code:", "Ok", "");
					case LANGUAGE_ES: ShowPlayerDialog(playerid, 39, DIALOG_STYLE_INPUT, "Espagnol", "Espagnol", "Ok", "");
					case LANGUAGE_PG: ShowPlayerDialog(playerid, 39, DIALOG_STYLE_INPUT, "Portugais", "Portugais", "Ok", "");
					case LANGUAGE_IT: ShowPlayerDialog(playerid, 39, DIALOG_STYLE_INPUT, "Italien", "Italien", "Ok", "");
					case LANGUAGE_DE: ShowPlayerDialog(playerid, 39, DIALOG_STYLE_INPUT, "Allemand", "Allemand" , "Ok", "");
				}
				return 1;
			}
	    }
	    case 40://OUVERTURE GARAGE
	    {
	        if(response)
			{
			    if(!strlen(inputtext) || strcmp(inputtext, dGarage[dDoor[playerid]][sCodeGarage], true) != 0)
			    {
					LogInfo(true, "[JOUEUR]%s s'est trompe de code pour ouvrir le garage %d.", GetName(playerid), dDoor[playerid]);
					ShowPlayerTextInfo(playerid, 5000, "~r~Wrong code.", "~r~Mauvais code.", "~r~Espagnol", "~r~Portugais", "~r~Italien", "~r~Allemand");
					return 1;
			    }
			    //---
				ChangeGarageDoorState(dDoor[playerid], true);
				LogInfo(true, "[JOUEUR]%s ouvre la porte du garage %d.", GetName(playerid), dDoor[playerid]);
			}
			else if(!response)
			{
				pGarage[playerid] = -1;
			}
	    }
	    case 41://MÉCANICIENS
	    {
	        if(response)
	        {
				new Float:x, Float:y, Float:z, vehicleid = INVALID_VEHICLE_ID, vehicle = -1;
				GetPlayerPos(playerid, x, y, z);
				GetVehicleWithinDistance(x, y, z, 12.0, vehicleid);
				vehicle = GetVehicleID(vehicleid);
				if(vehicleid == INVALID_VEHICLE_ID)
				{
				    SendClientMessageEx(playerid, ROUGE, "You are not near a vehicle!", "Vous n'êtes pas proche d'un véhicule !", "¡No esta cerca de un vehículo!", "Portugais", "Italien", "Allemand");
					return 1;
				}
				if(vehicle == -1)
				{
					SendClientMessageEx(playerid, ROUGE, "You can't do anything with this vehicle!", "Vous ne pouvez rien faire avec ce véhicule !", "¡Espagnol!", "Portugais", "Italien", "Allemand");
					return 1;
				}
    			new dFreeSlot = GetPlayerNextFreeSlot(playerid);
				//---
				if(listitem == 0)//RÉPARER
				{
					new Float:vHealth;
					GetVehicleHealth(vehicleid, vHealth);
					if(vHealth > 900.0)
					{
					    SendClientMessageEx(playerid, ROUGE, "This vehicle doesn't need to be repaired!", "Ce véhicule n'a pas besoin de réparations !", "¡Esto vehículo no se necessita arreglos!", "Portugais", "Italien", "Allemand");
						return 1;
					}
					RepairVehicle(vehicleid);
					SetVehicleHealth(vehicleid, 1000);
					SetVehicleBonnetState(vehicleid, true);
					SetTimerEx("SetVehicleBonnetState", 2000, false, "ib", vehicleid, false);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					GivePlayerGold(playerid, -15);
					ShowPlayerTextInfo(playerid, 2500, "~g~Engine fixed!", "~g~Moteur réparé !", "~g~¡Motor reparado!", "Portugais", "Italien", "Allemand");
	 				-LogInfo(true, "[JOUEUR]%s a réparé sa voiture chez le mécanicien.", GetName(playerid));
				}
				else if(listitem == 1)//DÉSOSSER
				{
					new dRemainWheels = 0;
					new dRemainEngine = 0;
					new dRemainMetal = 0;
					new dRemainPlates = 0;
					switch(GetVehicleFuelType(dVehicleInfos[vehicle][dVehicleModel]))
					{
				    	case 1: //Motos
				    	{
							if(dVehicleInfos[vehicle][dWheels] != 0)
							{
							    for(new i = 0; i < dVehicleInfos[vehicle][dWheels]; i ++)
							    {
							        if(dVehicleInfos[vehicle][bWheel][i])
							        {
							            dRemainWheels ++;
							        }
							    }
							}
							//---
							if(dVehicleInfos[vehicle][bEngine]) dRemainEngine = 1;
							//---
							dRemainMetal = RandomEx(4, 7);
				    	}
				  		case 2: //Voitures
				  		{
							if(dVehicleInfos[vehicle][dWheels] != 0)
							{
							    for(new i = 0; i < dVehicleInfos[vehicle][dWheels]; i ++)
							    {
							        if(dVehicleInfos[vehicle][bWheel][i])
							        {
							            dRemainWheels ++;
							        }
							    }
							}
							//---
							if(dVehicleInfos[vehicle][bEngine]) dRemainEngine = 1;
							//---
							dRemainMetal = RandomEx(1, 5);
							//---
							if(Success(50)) dRemainPlates = 1;
				  		}
				  		case 3: //Camions & Utilitaires
				  		{
							if(dVehicleInfos[vehicle][dWheels] != 0)
							{
							    for(new i = 0; i < dVehicleInfos[vehicle][dWheels]; i ++)
							    {
							        if(dVehicleInfos[vehicle][bWheel][i])
							        {
							            dRemainWheels ++;
							        }
							    }
							}
							//---
							if(dVehicleInfos[vehicle][bEngine]) dRemainEngine = 1;
							//---
							dRemainMetal = RandomEx(1, 5);
							//---
							dRemainPlates = RandomEx(0, 3);
				  		}
				  		case 4: //Bateaux
				  		{
				  		    dRemainWheels = 0;
							//---
							if(dVehicleInfos[vehicle][bEngine]) dRemainEngine = 1;
							//---
							dRemainMetal = RandomEx(1, 5);
							//---
							dRemainPlates = RandomEx(0, 3);
				  		}
				  		case 5: //Avions
				  		{
				  		    dRemainWheels = 0;
							//---
							if(dVehicleInfos[vehicle][bEngine]) dRemainEngine = 1;
							//---
							dRemainMetal = RandomEx(1, 5);
							//---
							dRemainPlates = RandomEx(0, 5);
				  		}
				  		case 6: //Hélicos
				  		{
				  		    dRemainWheels = 0;
							//---
							if(dVehicleInfos[vehicle][bEngine]) dRemainEngine = 1;
							//---
							dRemainMetal = RandomEx(1, 5);
							//---
							dRemainPlates = RandomEx(0, 4);
				  		}
					}
			  		new Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2;
			  		GetVehiclePos(vehicleid, x1, y1, z1);
			  		//---
		        	if(dRemainWheels > 0) for(new i = 0; i < dRemainWheels; i ++)
					{
						x2 = x1 + float(RandomEx(-2, 2));
     					y2 = y1 + float(RandomEx(-2, 2));
						FindZPathCoord(x1, y1, z1, x2, y2, z2);
						CreateItem(63, x2, y2, z2 + 1.0, false, -1);
					}
			  		//---
			  		if(dRemainEngine > 0)
			  		{
						x2 = x1 + float(RandomEx(-2, 2));
						y2 = y1 + float(RandomEx(-2, 2));
						FindZPathCoord(x1, y1, z1, x2, y2, z2);
						CreateItem(64, x2, y2, z2 + 1.0, false, -1);
					}
					//---
		        	if(dRemainMetal > 0) for(new i = 0; i < dRemainMetal; i ++)
					{
						x2 = x1 + float(RandomEx(-2, 2));
     					y2 = y1 + float(RandomEx(-2, 2));
						FindZPathCoord(x1, y1, z1, x2, y2, z2);
						CreateItem(103, x2, y2, z2 + 1.0, false, -1);
					}
					//---
		        	if(dRemainPlates > 0) for(new i = 0; i < dRemainPlates; i ++)
					{
						x2 = x + float(RandomEx(-2, 2));
     					y2 = y + float(RandomEx(-2, 2));
						FindZPathCoord(x1, y1, z1, x2, y2, z2);
						CreateItem(104, x2, y2, z2 + 1.0, false, -1);
					}
    				DestroyVeh(vehicle);
					GivePlayerGold(playerid, -10);
	 				LogInfo(true, "[JOUEUR]%s a désossé le véhicule %d.", GetName(playerid), vehicle);
				}
				else if(listitem == 2)//SIPHONER
				{
				    dFreeSlot = HasPlayerItem(playerid, 31);
			        if(dFreeSlot == -1)
			        {
					    SendClientMessageEx(playerid, ROUGE, "You must have an empty jerry!", "Vous n'avez pas de bidon vide !", "¡Espagnol!", "Portugais", "Italien", "Sie können nicht mehr Objekte tragen!");
					    return 1;
			        }
					if(dVehicleInfos[vehicle][dFuel] < 2000)
					{
					    SendClientMessageEx(playerid, ROUGE, "There is not enough gas in this vehicle!", "Il n'y a pas assez d'essence !", "¡Espagnol!", "Portugais", "Italien", "Allemand");
						return 1;
					}
					GiveVehicleFuel(vehicle, -2000);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					GivePlayerGold(playerid, -2);
					//---
			        GivePlayerSlotObject(playerid, 30, dFreeSlot);
					SwapPlayerObjects(playerid, 0, dFreeSlot);
	 				LogInfo(true, "[JOUEUR]%s a siphoné le véhicule %d.", GetName(playerid), vehicle);
				}
				else if(listitem == 3)//PRENDRE ROUE
				{
			        if(dFreeSlot == -1)
			        {
					    SendClientMessageEx(playerid, ROUGE, "You cannot carry more items!", "Vous ne pouvez pas porter plus d'objets !", "¡No puede llevar más objetos!", "Portugais", "Italien", "Sie können nicht mehr Objekte tragen!");
					    return 1;
			        }
					new dWheelID = -1;
					if(dVehicleInfos[vehicle][dWheels] != 0)
					{
					    for(new i = 0; i < dVehicleInfos[vehicle][dWheels]; i ++)
					    {
					        if(dVehicleInfos[vehicle][bWheel][i])
					        {
					            dWheelID = i;
					        }
					    }
					}
					if(dWheelID == -1)
					{
					    SendClientMessageEx(playerid, ROUGE, "This vehicle has no wheel you could take!", "Ce véhicule n'a pas de roues en bon état !", "¡Esto vehículo no tiene una rueda que puede tomar!", "Portugais", "Italien", "Allemand");
						return 1;
					}
					dVehicleInfos[vehicle][bWheel][dWheelID] = false;
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SetVehicleWheels(vehicle);
					GivePlayerGold(playerid, -3);
					//---
			        GivePlayerSlotObject(playerid, 63, dFreeSlot);
					SwapPlayerObjects(playerid, 0, dFreeSlot);
	 				LogInfo(true, "[JOUEUR]%s a retiré une roue du véhicule %d.", GetName(playerid), vehicle);
				}
				else if(listitem == 4)//RETIRER MOTEUR
				{
			        if(dFreeSlot == -1)
			        {
					    SendClientMessageEx(playerid, ROUGE, "You cannot carry more items!", "Vous ne pouvez pas porter plus d'objets !", "¡No puede llevar más objetos!", "Portugais", "Italien", "Sie können nicht mehr Objekte tragen!");
					    return 1;
			        }
					if(!dVehicleInfos[vehicle][bEngine])
					{
					    SendClientMessageEx(playerid, ROUGE, "This vehicle's engine is not worth it!", "Ce véhicule n'a pas de moteur en état !", "¡El motor de esto vehículo no funciona!", "Portugais", "Italien", "Allemand");
						return 1;
					}
					dVehicleInfos[vehicle][bEngine] = false;
	    			SetVehicleEngineState(dVehicleInfos[vehicleid][dVehicleID], false);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					GivePlayerGold(playerid, -5);
					//---
			        GivePlayerSlotObject(playerid, 64, dFreeSlot);
					SwapPlayerObjects(playerid, 0, dFreeSlot);
	 				LogInfo(true, "[JOUEUR]%s a retiré le moteur du véhicule %d.", GetName(playerid), vehicle);
				}
	        }
	    }
	    case 42://JOUR
	    {
			if(response)
			{
				dEnvironment[dDay] = listitem + 1;
		        dEnvironment[dHours] = 0;
		        dEnvironment[dMins] = 0;
	    		SetWorldTime(dEnvironment[dHours]);
	    		CheckTime(dEnvironment[dDay], 0, 0);
				ChangeHostName();
			}
			ShowPlayerAdminDialog(playerid);
	    }
	    case 43://RÉPARATION GILET PARE-BALLES
	    {
	        if(pPlayerInfos[playerid][pTorse] == 84)
	        {
	            pPlayerInfos[playerid][pTorse] = 83;
			    GivePlayerSlotObject(playerid, -1, HasPlayerItem(playerid, 103));
		    	SetArmourForPlayer(playerid, 1250);
				ShowPlayerTextInfo(playerid, 2500, "~g~Armour fixed!", "~g~Armure réparée !", "~g~¡Armadura reparada!", "Portugais", "Italien", "Allemand");
	        }
	        else
	        {
		        new dSlot = HasPlayerItem(playerid, 84);
			    GivePlayerSlotObject(playerid, -1, HasPlayerItem(playerid, 103));
			    GivePlayerSlotObject(playerid, -1, dSlot);
		        GivePlayerSlotObject(playerid, 83, dSlot);
				SwapPlayerObjects(playerid, dSlot, 0);
				ShowPlayerTextInfo(playerid, 2500, "~g~Armour fixed!", "~g~Armure réparée !", "~g~¡Armadura reparada!", "Portugais", "Italien", "Allemand");
			}
	    }
	    case 44://CRÉATION GROUPE
	    {
			if(response)
			{
				if(!strlen(inputtext) || strlen(inputtext) > 15)
				{
					switch(pPlayerInfos[playerid][pLangue])//On l'affiche dans la bonne langue...
					{
						case LANGUAGE_EN: ShowPlayerDialog(playerid, 44, DIALOG_STYLE_INPUT, "Team name", "{CC0000}Invalid name!\n{FFFFFF}Enter a name for your team:\n", "Create", "Cancel");
						case LANGUAGE_FR: ShowPlayerDialog(playerid, 44, DIALOG_STYLE_INPUT, "Nom de groupe", "{CC0000}Nom invalide !\n{FFFFFF}Entrez un nom de groupe", "Créer", "Annuler");
		   				case LANGUAGE_ES: ShowPlayerDialog(playerid, 44, DIALOG_STYLE_INPUT, "Espagnol", "Espagnol", ">", "X");
		   				case LANGUAGE_PG: ShowPlayerDialog(playerid, 44, DIALOG_STYLE_INPUT, "Portugais", "Portugais", ">", "X");
						case LANGUAGE_IT: ShowPlayerDialog(playerid, 44, DIALOG_STYLE_INPUT, "Italien", "Italien", ">", "X");
						case LANGUAGE_DE: ShowPlayerDialog(playerid, 44, DIALOG_STYLE_INPUT, "Allemand", "Allemand", ">", "X");
					}
					return 1;
				}
				new dGroupID = GetFreeGroup();
				CreateGroup(dGroupID, playerid, inputtext);
				SendGroupMessage(dGroupID, "Team created!", "Groupe créé !", "Espagnol", "Portugais", "Italien", "Allemand");
				//---
				switch(pPlayerInfos[playerid][pLangue])//On l'affiche dans la bonne langue...
				{
					case LANGUAGE_EN: ShowPlayerDialog(playerid, 45, DIALOG_STYLE_LIST, "Teammate", AllPlayersString(), ">", "X");
					case LANGUAGE_FR: ShowPlayerDialog(playerid, 45, DIALOG_STYLE_LIST, "Coéquipier", AllPlayersString(), ">", "X");
	   				case LANGUAGE_ES: ShowPlayerDialog(playerid, 45, DIALOG_STYLE_LIST, "Espagnol", AllPlayersString(), ">", "X");
	   				case LANGUAGE_PG: ShowPlayerDialog(playerid, 45, DIALOG_STYLE_LIST, "Portugais", AllPlayersString(), ">", "X");
					case LANGUAGE_IT: ShowPlayerDialog(playerid, 45, DIALOG_STYLE_LIST, "Italien", AllPlayersString(), ">", "X");
					case LANGUAGE_DE: ShowPlayerDialog(playerid, 45, DIALOG_STYLE_LIST, "Allemand", AllPlayersString(), ">", "X");
				}
			}
	    }
	    case 45://RECRUTEMENT
	    {
	        if(response)
	        {
	            new dRecruit = INVALID_PLAYER_ID;
				dRecruit = PlayeridFromName(inputtext);
				//---
				if(dRecruit == INVALID_PLAYER_ID || pGroup[dRecruit] != -1 || pGroupRecruit[dRecruit] != -1 || pPlayerInfos[dRecruit][dLogState] != SPAWNED)
				{
				    SendClientMessageEx(playerid, ROUGE, "This player cannot be recruited!", "Ce joueur ne peut être recruté !", "Espagnol", "Portugais", "Italien", "Allemand");
					switch(pPlayerInfos[playerid][pLangue])//On l'affiche dans la bonne langue...
					{
						case LANGUAGE_EN: ShowPlayerDialog(playerid, 45, DIALOG_STYLE_LIST, "Teammate", AllPlayersString(), ">", "X");
						case LANGUAGE_FR: ShowPlayerDialog(playerid, 45, DIALOG_STYLE_LIST, "Coéquipier", AllPlayersString(), ">", "X");
		   				case LANGUAGE_ES: ShowPlayerDialog(playerid, 45, DIALOG_STYLE_LIST, "Espagnol", AllPlayersString(), ">", "X");
		   				case LANGUAGE_PG: ShowPlayerDialog(playerid, 45, DIALOG_STYLE_LIST, "Portugais", AllPlayersString(), ">", "X");
						case LANGUAGE_IT: ShowPlayerDialog(playerid, 45, DIALOG_STYLE_LIST, "Italien", AllPlayersString(), ">", "X");
						case LANGUAGE_DE: ShowPlayerDialog(playerid, 45, DIALOG_STYLE_LIST, "Allemand", AllPlayersString(), ">", "X");
					}
				}
				else
				{
				    pGroupRecruit[dRecruit] = pGroup[playerid];
					switch(pPlayerInfos[dRecruit][pLangue])//On l'affiche dans la bonne langue...
					{
						case LANGUAGE_EN:
						{
						    format(string, sizeof(string), "{CC0000}%s {FFFFFF}invites you to join his team.", GetName(playerid));
							ShowPlayerDialog(dRecruit, 46, DIALOG_STYLE_MSGBOX, "Team", string, "Accept", "Decline");
						}
						case LANGUAGE_FR:
						{
						    format(string, sizeof(string), "{CC0000}%s {FFFFFF}vous invite à rejoindre son groupe.", GetName(playerid));
							ShowPlayerDialog(dRecruit, 46, DIALOG_STYLE_MSGBOX, "Groupe", string, "Accepter", "Decliner");
						}
		   				case LANGUAGE_ES:
						{
						    format(string, sizeof(string), "{CC0000}%s {FFFFFF}Espagnol.", GetName(playerid));
							ShowPlayerDialog(dRecruit, 46, DIALOG_STYLE_MSGBOX, "Espagnol", string, "Espagnol", "Espagnol");
						}
						case LANGUAGE_PG:
						{
						    format(string, sizeof(string), "{CC0000}%s {FFFFFF}Portugais.", GetName(playerid));
							ShowPlayerDialog(dRecruit, 46, DIALOG_STYLE_MSGBOX, "Portugais", string, "Portugais", "Portugais");
						}
						case LANGUAGE_IT:
						{
						    format(string, sizeof(string), "{CC0000}%s {FFFFFF}Italien.", GetName(playerid));
							ShowPlayerDialog(dRecruit, 46, DIALOG_STYLE_MSGBOX, "Italien", string, "Italien", "Italien");
						}
						case LANGUAGE_DE:
						{
						    format(string, sizeof(string), "{CC0000}%s {FFFFFF}Allemand.", GetName(playerid));
							ShowPlayerDialog(dRecruit, 46, DIALOG_STYLE_MSGBOX, "Allemand", string, "Allemand", "Allemand");
						}
					}
				}
	        }
	        else
	        {
				new dGroupMembers = 0;
				for(new i = 0; i < MAX_GROUP_SIZE; i ++)
				{
				    if(dGroup[pGroup[playerid]][dMembers][i])
				    {
				        dGroupMembers ++;
				    }
				}
				if(dGroupMembers < 2)
				{
				    DissolveTeam(pGroup[playerid]);
				}
	        }
	    }
	    case 46://INVITATION DU GROUPE
	    {
			if(response)
			{
			    if(GetGroupFreeSlot(pGroupRecruit[playerid]) == -1 || !dGroup[pGroupRecruit[playerid]][bActive])
			    {
			        if(GetGroupFreeSlot(pGroupRecruit[playerid]) == -1) LogInfo(true, "Team full");
			        if(!dGroup[pGroupRecruit[playerid]][bActive]) LogInfo(true, "bActive false");
			        SendClientMessageEx(playerid, ROUGE, "The invitation expired!", "L'invitation a expiré !", "Espagnol", "Portugais", "Italien", "Allemand");
                    pGroupRecruit[playerid] = -1;
                    return 1;
				}
			    AddGroupMember(playerid, pGroupRecruit[playerid]);
			    pGroupRecruit[playerid] = -1;
			}
			else
			{
				switch(pPlayerInfos[playerid][pLangue])//On l'affiche dans la bonne langue...
				{
					case LANGUAGE_EN: format(string, sizeof(string), "%s declined your invitation.", GetName(playerid));
					case LANGUAGE_FR: format(string, sizeof(string), "%s a refusé votre invitation.", GetName(playerid));
	   				case LANGUAGE_ES: format(string, sizeof(string), "%s Espagnol.", GetName(playerid));
					case LANGUAGE_PG: format(string, sizeof(string), "%s Portugais.", GetName(playerid));
					case LANGUAGE_IT: format(string, sizeof(string), "%s Italien.", GetName(playerid));
					case LANGUAGE_DE: format(string, sizeof(string), "%s Allemand.", GetName(playerid));
				}
				SendClientMessageEx(dGroup[pGroupRecruit[playerid]][dBoss], ROUGE, string, string, string, string, string, string);
				pGroupRecruit[playerid] = -1;
			}
		}
		case 47://GESTION GROUPE
		{
		    if(response)
		    {
		        if(dGroup[pGroup[playerid]][dBoss] != playerid && listitem != 5)
		        {
		            SendClientMessageEx(playerid, ROUGE, "Only the team leader has access to team settings!", "Seul le chef de groupe peut accéder au paramétrage !", "Espagnol", "Portugais", "Italien", "Allemand");
		            return 1;
		        }
		        //---
			    switch(listitem)
			    {
			        case 0://Changer nom
			        {
						switch(pPlayerInfos[playerid][pLangue])//On l'affiche dans la bonne langue...
						{
							case LANGUAGE_EN: ShowPlayerDialog(playerid, 48, DIALOG_STYLE_INPUT, "Team name", "{FFFFFF}Enter a name for your team:\n", "Rename", "Cancel");
							case LANGUAGE_FR: ShowPlayerDialog(playerid, 48, DIALOG_STYLE_INPUT, "Nom de groupe", "{FFFFFF}Entrez un nom de groupe", "Renommer", "Annuler");
			   				case LANGUAGE_ES: ShowPlayerDialog(playerid, 48, DIALOG_STYLE_INPUT, "Espagnol", "Espagnol", ">", "X");
			   				case LANGUAGE_PG: ShowPlayerDialog(playerid, 48, DIALOG_STYLE_INPUT, "Portugais", "Portugais", ">", "X");
							case LANGUAGE_IT: ShowPlayerDialog(playerid, 48, DIALOG_STYLE_INPUT, "Italien", "Italien", ">", "X");
							case LANGUAGE_DE: ShowPlayerDialog(playerid, 48, DIALOG_STYLE_INPUT, "Allemand", "Allemand", ">", "X");
						}
			        }
			        case 1://Mettre leader
			        {
						switch(pPlayerInfos[playerid][pLangue])
						{
					    	case LANGUAGE_EN: ShowPlayerDialog(playerid, 49, DIALOG_STYLE_LIST, "Leader", GroupPlayersString(pGroup[playerid]), "Give lead", "Cancel");
				           	case LANGUAGE_FR: ShowPlayerDialog(playerid, 49, DIALOG_STYLE_LIST, "Chef",  GroupPlayersString(pGroup[playerid]), "Nommer", "Annuler");
				           	case LANGUAGE_ES: ShowPlayerDialog(playerid, 49, DIALOG_STYLE_LIST, "Espagnol", GroupPlayersString(pGroup[playerid]), "Espagnol", "Cancelar");
				           	case LANGUAGE_PG: ShowPlayerDialog(playerid, 49, DIALOG_STYLE_LIST, "Portugais", GroupPlayersString(pGroup[playerid]), "Portugais", "Portugais");
							case LANGUAGE_IT: ShowPlayerDialog(playerid, 49, DIALOG_STYLE_LIST, "Italien", GroupPlayersString(pGroup[playerid]), "Italien", "Italien");
							case LANGUAGE_DE: ShowPlayerDialog(playerid, 49, DIALOG_STYLE_LIST, "Allemand", GroupPlayersString(pGroup[playerid]) , "Allemand", "Allemand");
			    		}
			        }
			        case 2: //Recruter
			        {
						switch(pPlayerInfos[playerid][pLangue])//On l'affiche dans la bonne langue...
						{
							case LANGUAGE_EN: ShowPlayerDialog(playerid, 45, DIALOG_STYLE_LIST, "Teammate", AllPlayersString(), ">", "X");
							case LANGUAGE_FR: ShowPlayerDialog(playerid, 45, DIALOG_STYLE_LIST, "Coéquipier", AllPlayersString(), ">", "X");
			   				case LANGUAGE_ES: ShowPlayerDialog(playerid, 45, DIALOG_STYLE_LIST, "Espagnol", AllPlayersString(), ">", "X");
			   				case LANGUAGE_PG: ShowPlayerDialog(playerid, 45, DIALOG_STYLE_LIST, "Portugais", AllPlayersString(), ">", "X");
							case LANGUAGE_IT: ShowPlayerDialog(playerid, 45, DIALOG_STYLE_LIST, "Italien", AllPlayersString(), ">", "X");
							case LANGUAGE_DE: ShowPlayerDialog(playerid, 45, DIALOG_STYLE_LIST, "Allemand", AllPlayersString(), ">", "X");
						}
			        }
			        case 3://Exclure
			        {
						switch(pPlayerInfos[playerid][pLangue])
						{
					    	case LANGUAGE_EN: ShowPlayerDialog(playerid, 50, DIALOG_STYLE_LIST, "Exclude", GroupPlayersString(pGroup[playerid]), "Exclude", "Cancel");
				           	case LANGUAGE_FR: ShowPlayerDialog(playerid, 50, DIALOG_STYLE_LIST, "Exclure",  GroupPlayersString(pGroup[playerid]), "Exclure", "Annuler");
				           	case LANGUAGE_ES: ShowPlayerDialog(playerid, 50, DIALOG_STYLE_LIST, "Espagnol", GroupPlayersString(pGroup[playerid]), "Espagnol", "Cancelar");
				           	case LANGUAGE_PG: ShowPlayerDialog(playerid, 50, DIALOG_STYLE_LIST, "Portugais", GroupPlayersString(pGroup[playerid]), "Portugais", "Portugais");
							case LANGUAGE_IT: ShowPlayerDialog(playerid, 50, DIALOG_STYLE_LIST, "Italien", GroupPlayersString(pGroup[playerid]), "Italien", "Italien");
							case LANGUAGE_DE: ShowPlayerDialog(playerid, 50, DIALOG_STYLE_LIST, "Allemand", GroupPlayersString(pGroup[playerid]) , "Allemand", "Allemand");
			    		}
			        }
			        case 4://Dissoudre
			        {
			            DissolveTeam(pGroup[playerid]);
			        }
			        case 5://Quitter
			        {
						RemoveGroupMember(playerid, false);
			        }
			    }
		    }
		}
		case 48://RENOMMER GROUPE
		{
		    if(response)
		    {
				if(!strlen(inputtext) || strlen(inputtext) > 15)
				{
					switch(pPlayerInfos[playerid][pLangue])//On l'affiche dans la bonne langue...
					{
						case LANGUAGE_EN: ShowPlayerDialog(playerid, 48, DIALOG_STYLE_INPUT, "Team name", "{CC0000}Invalid name!\n{FFFFFF}Enter a name for your team:\n", "Rename", "Cancel");
						case LANGUAGE_FR: ShowPlayerDialog(playerid, 48, DIALOG_STYLE_INPUT, "Nom de groupe", "{CC0000}Nom invalide !\n{FFFFFF}Entrez un nom de groupe", "Renommer", "Annuler");
		   				case LANGUAGE_ES: ShowPlayerDialog(playerid, 48, DIALOG_STYLE_INPUT, "Espagnol", "Espagnol", ">", "X");
		   				case LANGUAGE_PG: ShowPlayerDialog(playerid, 48, DIALOG_STYLE_INPUT, "Portugais", "Portugais", ">", "X");
						case LANGUAGE_IT: ShowPlayerDialog(playerid, 48, DIALOG_STYLE_INPUT, "Italien", "Italien", ">", "X");
						case LANGUAGE_DE: ShowPlayerDialog(playerid, 48, DIALOG_STYLE_INPUT, "Allemand", "Allemand", ">", "X");
					}
					return 1;
				}
				format(dGroup[pGroup[playerid]][sGroupName], 16, inputtext);
				UpdateGroupTextDraw(pGroup[playerid]);
				//---
				SendGroupMessage(pGroup[playerid], "[TEAM]Team renamed!", "[TEAM]Le nom du groupe a changé !", "[TEAM]Espagnol", "[TEAM]Portugais", "[TEAM]Italien", "[TEAM]Allemand");
			}
			else
			{
				switch(pPlayerInfos[playerid][pLangue])
				{
			    	case LANGUAGE_EN: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Team", "Set name\nSet leader\nRecruit\nExclude\nDissolve\nLeave", "Do", "Cancel");
		           	case LANGUAGE_FR: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Groupe", "Changer nom\nMettre chef\nRecruter\nExclure\nDissoudre\nQuitter", "Faire", "Annuler");
		           	case LANGUAGE_ES: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Espagnol", "Espagnol", "Hacer", "Cancelar");
		           	case LANGUAGE_PG: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Portugais", "Portugais", "Portugais", "Portugais");
					case LANGUAGE_IT: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Italien", "Italien", "Italien", "Italien");
					case LANGUAGE_DE: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Allemand", "Allemand" , "Allemand", "Allemand");
	    		}
			}
		}
		case 49://METTRE LEADER
		{
		    if(response)
		    {
	            new dPlayerid = INVALID_PLAYER_ID;
				dPlayerid = PlayeridFromName(inputtext);
				if(pGroup[dPlayerid] == pGroup[playerid])
				{
					dGroup[pGroup[playerid]][dBoss] = dPlayerid;
					new sString[6][128];
					format(sString[0], 128, "[TEAM]%s has become the team leader.", GetName(dPlayerid));
					format(sString[1], 128, "[TEAM]%s est devenu le chef de groupe.", GetName(dPlayerid));
					format(sString[2], 128, "[TEAM]%s Espagnol.", GetName(dPlayerid));
					format(sString[3], 128, "[TEAM]%s Portugais.", GetName(dPlayerid));
					format(sString[4], 128, "[TEAM]%s Italien.", GetName(dPlayerid));
					format(sString[5], 128, "[TEAM]%s Allemand.", GetName(dPlayerid));
					SendGroupMessage(pGroup[playerid], sString[0], sString[1], sString[2], sString[3], sString[4], sString[5]);
					UpdateGroupTextDraw(pGroup[playerid]);
				}
				else
				{
					switch(pPlayerInfos[playerid][pLangue])
					{
				    	case LANGUAGE_EN: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Team", "Set name\nSet leader\nRecruit\nExclude\nDissolve\nLeave", "Do", "Cancel");
			           	case LANGUAGE_FR: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Groupe", "Changer nom\nMettre chef\nRecruter\nExclure\nDissoudre\nQuitter", "Faire", "Annuler");
			           	case LANGUAGE_ES: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Espagnol", "Espagnol", "Hacer", "Cancelar");
			           	case LANGUAGE_PG: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Portugais", "Portugais", "Portugais", "Portugais");
						case LANGUAGE_IT: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Italien", "Italien", "Italien", "Italien");
						case LANGUAGE_DE: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Allemand", "Allemand" , "Allemand", "Allemand");
		    		}
				}
		    }
		    else
		    {
				switch(pPlayerInfos[playerid][pLangue])
				{
			    	case LANGUAGE_EN: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Team", "Set name\nSet leader\nRecruit\nExclude\nDissolve\nLeave", "Do", "Cancel");
		           	case LANGUAGE_FR: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Groupe", "Changer nom\nMettre chef\nRecruter\nExclure\nDissoudre\nQuitter", "Faire", "Annuler");
		           	case LANGUAGE_ES: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Espagnol", "Espagnol", "Hacer", "Cancelar");
		           	case LANGUAGE_PG: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Portugais", "Portugais", "Portugais", "Portugais");
					case LANGUAGE_IT: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Italien", "Italien", "Italien", "Italien");
					case LANGUAGE_DE: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Allemand", "Allemand" , "Allemand", "Allemand");
	    		}
		    }
		}
		case 50://EXCLURE
		{
		    if(response)
		    {
	            new dPlayer = INVALID_PLAYER_ID;
				dPlayer = PlayeridFromName(inputtext);
				if(pGroup[dPlayer] == pGroup[playerid])
				{
					RemoveGroupMember(dPlayer, false);
				}
				else
				{
					switch(pPlayerInfos[playerid][pLangue])
					{
				    	case LANGUAGE_EN: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Team", "Set name\nSet leader\nRecruit\nExclude\nDissolve\nLeave", "Do", "Cancel");
			           	case LANGUAGE_FR: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Groupe", "Changer nom\nMettre chef\nRecruter\nExclure\nDissoudre\nQuitter", "Faire", "Annuler");
			           	case LANGUAGE_ES: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Espagnol", "Espagnol", "Hacer", "Cancelar");
			           	case LANGUAGE_PG: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Portugais", "Portugais", "Portugais", "Portugais");
						case LANGUAGE_IT: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Italien", "Italien", "Italien", "Italien");
						case LANGUAGE_DE: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Allemand", "Allemand" , "Allemand", "Allemand");
		    		}
				}
		    }
		    else
		    {
				switch(pPlayerInfos[playerid][pLangue])
				{
			    	case LANGUAGE_EN: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Team", "Set name\nSet leader\nRecruit\nExclude\nDissolve\nLeave", "Do", "Cancel");
		           	case LANGUAGE_FR: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Groupe", "Changer nom\nMettre chef\nRecruter\nExclure\nDissoudre\nQuitter", "Faire", "Annuler");
		           	case LANGUAGE_ES: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Espagnol", "Espagnol", "Hacer", "Cancelar");
		           	case LANGUAGE_PG: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Portugais", "Portugais", "Portugais", "Portugais");
					case LANGUAGE_IT: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Italien", "Italien", "Italien", "Italien");
					case LANGUAGE_DE: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Allemand", "Allemand" , "Allemand", "Allemand");
	    		}
		    }
		}
		case 51://KILL
		{
		    if(response)
		    {
				if(!strlen(inputtext))
				{
					switch(pPlayerInfos[playerid][pLangue])
					{
						case LANGUAGE_EN: ShowPlayerDialog(playerid, 51, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Enter a reason:", "Kill", "Cancel");
						case LANGUAGE_FR: ShowPlayerDialog(playerid, 51, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Entrez une raison:", "Kill", "Annuler");
						case LANGUAGE_ES: ShowPlayerDialog(playerid, 51, DIALOG_STYLE_INPUT, "Admin", "Espagnol", "Kill", "Cancelar");
						case LANGUAGE_PG: ShowPlayerDialog(playerid, 51, DIALOG_STYLE_INPUT, "Admin", "Portugais", "Kill", "Portugais");
						case LANGUAGE_IT: ShowPlayerDialog(playerid, 51, DIALOG_STYLE_INPUT, "Admin", "Italien", "Kill", "Italien");
						case LANGUAGE_DE: ShowPlayerDialog(playerid, 51, DIALOG_STYLE_INPUT, "Admin", "Allemand" , "Kill", "Schlissen");
					}
					return 1;
				}
				SetHealthForPlayer(pAdminInfos[playerid][dPuniID], 0, REASON_BLOODLOSS, INVALID_PLAYER_ID);
				//---
				printf("[ADMIN]%s a tue %s. Raison: %s", GetName(playerid), GetName(pAdminInfos[playerid][dPuniID]), inputtext);
				//---
				format(string,sizeof(string),"[ADMIN]%s has been killed | Reason: %s", GetName(pAdminInfos[playerid][dPuniID]), inputtext);
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_EN) SendClientMessage(i, ADMIN_COLOR, string);
				//
				format(string,sizeof(string),"[ADMIN]Le joueur %s a été tué | Raison: %s", GetName(pAdminInfos[playerid][dPuniID]), inputtext);
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_FR) SendClientMessage(i, ADMIN_COLOR, string);
				//
				format(string,sizeof(string),"[ADMIN]%s Espagnol | Razón: %s", GetName(pAdminInfos[playerid][dPuniID]), inputtext);
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_ES) SendClientMessage(i, ADMIN_COLOR, string);
				//
				format(string,sizeof(string),"[ADMIN]%s Portugais | Portugais: %s", GetName(pAdminInfos[playerid][dPuniID]), inputtext);
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_PG) SendClientMessage(i, ADMIN_COLOR, string);
				//
				format(string,sizeof(string),"[ADMIN]%s Italien | Italien: %s", GetName(pAdminInfos[playerid][dPuniID]), inputtext);
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_IT) SendClientMessage(i, ADMIN_COLOR, string);
				//
				format(string,sizeof(string),"[ADMIN]%s Allemand | Allemand: %s", GetName(pAdminInfos[playerid][dPuniID]), inputtext);
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_DE) SendClientMessage(i, ADMIN_COLOR, string);
				//---
				SavePunishment(playerid, "KILL", inputtext);
				SendClientMessageEx(playerid, ROUGE, "You have been killed.", "Vous avez été tué.", "Espagnol", "Portugais", "Italien", "Allemand");
				ShowPlayerAdminDialog(playerid);
			}
		    else if(!response)
		    {
				ShowPlayerAdminDialog(playerid);
			}
		}
		case 52://MISE EN VENTE HDV
		{
	        if(response)
	        {
	            new Float:fVal = floatstr(inputtext);
			    pHDVSale[playerid][1] = floatround(fVal * 10, floatround_round);
			    if(fVal < 0.1 || strlen(inputtext) == 0)
			    {
					switch(pPlayerInfos[playerid][pLangue])
					{
					 	case LANGUAGE_EN: ShowPlayerDialog(playerid, 52, DIALOG_STYLE_INPUT, "Auction house", "{FFFFFF}Enter the {CC0000}price {FFFFFF}you want to sell your item for:\n{CC0000}WARNING: {FFFFFF}Setting an item for sale costs 0.2g of gold.", "Sell", "Cancel");
					 	case LANGUAGE_FR: ShowPlayerDialog(playerid, 52, DIALOG_STYLE_INPUT, "Hôtel des ventes", "{FFFFFF}Entrez le {CC0000}prix {FFFFFF}de vente de votre objet:\n{CC0000}ATTENTION: {FFFFFF}Vendre un objet coûte 0.2g d'or.", "Vendre", "Annuler");
			 			case LANGUAGE_ES: ShowPlayerDialog(playerid, 52, DIALOG_STYLE_INPUT, "Espagnol", "Espagnol", "Ok", "Anterior");
			 			case LANGUAGE_PG: ShowPlayerDialog(playerid, 52, DIALOG_STYLE_INPUT, "Portugais", "Portugais", "Ok", "Anterior");
						case LANGUAGE_IT: ShowPlayerDialog(playerid, 52, DIALOG_STYLE_INPUT, "Italien", "Italien", "Ok", "Indietro");
						case LANGUAGE_DE: ShowPlayerDialog(playerid, 52, DIALOG_STYLE_INPUT, "Allemand", "Allemand" , "Ok", "Zurück");
					}
					return 1;
			    }
			    //---
			    if(!HasPlayerGold(playerid, 2))
			    {
					ShowPlayerTextInfo(playerid, 5000, "~r~You do not have the 0.2g selling fee.", "~g~Vous n'avez pas les 0.2g de frais de vente.", "Espagnol", "Portugais", "Italien", "Allemand");
					return 1;
			    }
			    //---
			    new objectid = GetPlayerSlotObject(playerid, pHDVSale[playerid][0]);
				if(CallRemoteFunction("OnPlayerDropMissionItem", "ii", playerid, objectid))
				{
					CloseTextDraws(playerid);
					return 1;
				}
				//---
				new dReturn = AddAuctionHouseItem(playerid, aObjects[objectid][dObjectType] - 1, objectid, pHDVSale[playerid][1], 2520, -1);
				if(dReturn == -1)
				{
					ShowPlayerTextInfo(playerid, 5000, "~r~Your item could not be set for sale!", "~g~Votre objet n'a pas pu être mis en vente.", "Espagnol", "Portugais", "Italien", "Allemand");
					return 1;
				}
				LogInfo(true, "[JOUEUR]%s depose %s pour %.1fg d'or a l'HDV.", GetName(playerid), NoNewLineSign(aObjects[objectid][ObjectFrName]), fVal);
				//---
				GivePlayerGold(playerid, -2);
				GivePlayerSlotObject(playerid, 0, pHDVSale[playerid][0]);
				SelectTextDraw(playerid, VERT);
				pUseInventory[playerid] = 0;
				ShowPlayerTextInfo(playerid, 5000, "~g~Your item has been set for sale.~n~You will be notified if a customer buys!", "~g~Votre objet a été mis en vente.~n~Vous serez informé si un client achète !", "Espagnol", "Portugais", "Italien", "Allemand");
				//SendClientMessageEx(playerid,
				//LogInfo(true, "[JOUEUR]%s ramasse %.1fg d'or", GetName(playerid), floatdiv(dGoldValue, 10));
				//PlayerDropGold(playerid, dGoldValue, floatdiv(RandomEx(5, 20), 10));
				//GivePlayerGold(playerid, -dGoldValue);
				//ApplyAnimation(playerid, "GRENADE", "WEAPON_throwu", 4.0, 0, 0, 0, 0, 0, 1);
	        }
	        else
	        {
				SelectTextDraw(playerid, VERT);
				pUseInventory[playerid] = 0;
	        }
		}
		case 53://TEMPS HDV
		{
		}
		case 54://OBJETS ATELIER
		{
			SelectTextDraw(playerid, VERT);
		}
	    case 55://CRÉATION PANNEAU
	    {
	        if(response)
			{
			    if(strlen(inputtext) > 128 || !strlen(inputtext))
			    {
					switch(pPlayerInfos[playerid][pLangue])
					{
					   	case LANGUAGE_EN: ShowPlayerDialog(playerid, 55, DIALOG_STYLE_INPUT, "Board", "{FFFFFF}Write your text:\n{CC0000}Max. 128 chars.!", "Ok", "Cancel");
					   	case LANGUAGE_FR: ShowPlayerDialog(playerid, 55, DIALOG_STYLE_INPUT, "Panneau", "{FFFFFF}Entrez un texte:\n{CC0000}Maximum 128 caractères !", "Ok", "Annuler");
					   	case LANGUAGE_ES: ShowPlayerDialog(playerid, 55, DIALOG_STYLE_INPUT, "Espagnol", "Espagnol", "Ok", "Espagnol");
					   	case LANGUAGE_PG: ShowPlayerDialog(playerid, 55, DIALOG_STYLE_INPUT, "Portugais", "Portugais", "Ok", "Portugais");
						case LANGUAGE_IT: ShowPlayerDialog(playerid, 55, DIALOG_STYLE_INPUT, "Italien", "Italien", "Ok", "Italien");
						case LANGUAGE_DE: ShowPlayerDialog(playerid, 55, DIALOG_STYLE_INPUT, "Allemand", "Allemand" , "Ok", "Allemand");
					}
					return 1;
			    }
			    //---
				SetBoardText(pBoard[playerid], inputtext);
				LogInfo(true, "[JOUEUR]%s pose le panneau %d: %s", GetName(playerid), pBoard[playerid], inputtext);
				pBoard[playerid] = -1;
			}
			else if(!response)
			{
				DestroyBoard(GetNodeAt(boardList, pBoard[playerid]));
				pBoard[playerid] = -1;
				GivePlayerSlotObject(playerid, 156, GetPlayerNextFreeSlot(playerid));
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
			}
	    }
	    case 57://CHANGEMENT PORTE
	    {
	        if(response)
			{
			    if(!IsNumeric(inputtext) || strlen(inputtext) != 4)
			    {
					switch(pPlayerInfos[playerid][pLangue])
					{
					   	case LANGUAGE_EN: ShowPlayerDialog(playerid, 57, DIALOG_STYLE_INPUT, "Door", "Enter a four numbered code:", "Ok", "");
	   					case LANGUAGE_FR: ShowPlayerDialog(playerid, 57, DIALOG_STYLE_INPUT, "Porte", "Écrivez un nombre à quatre chiffres comme code:", "Ok", "");
	   					case LANGUAGE_ES: ShowPlayerDialog(playerid, 57, DIALOG_STYLE_INPUT, "Puerta", "Espagnol", "Ok", "");
	   					case LANGUAGE_PG: ShowPlayerDialog(playerid, 57, DIALOG_STYLE_INPUT, "Porta", "Portugais", "Ok", "");
						case LANGUAGE_IT: ShowPlayerDialog(playerid, 57, DIALOG_STYLE_INPUT, "Porta", "Italien", "Ok", "");
						case LANGUAGE_DE: ShowPlayerDialog(playerid, 57, DIALOG_STYLE_INPUT, "Tür", "Allemand" , "Ok", "");
					}
					return 1;
			    }
   			 	//---
			    format(dHouse[dDoor[playerid]][sCodePorte], 5, "%s", inputtext);
				GivePlayerSlotObject(playerid, -1, HasPlayerItem(playerid, 106));
				//---
				dDoor[playerid] = -1;
			}
			else if(!response)
			{
				dDoor[playerid] = -1;
			}
	    }
		case 58://RÉFRIGÉRATEUR
		{
		    if(response)
		    {
		        new food, amount;
		        GetFridgeFood(pFridge[playerid], listitem, food, amount);
		        if(food == 0)
		        {
					ShowPlayerTextInfo(playerid, 3000, "~r~There is no food there!", "~r~Il n'y a pas de nourriture ici !", "~r~¡Espagnol!", "~r~Portugais!", "~r~Italien!", "~r~Allemand!");
					pFridge[playerid] = -1;
				}
				else
				{
		    		new dFreeSlot = GetPlayerNextFreeSlot(playerid);
		    		if(dFreeSlot == -1)
		    		{
						ShowPlayerTextInfo(playerid, 3000, "~r~You cannot carry more items!", "~r~Vous ne pouvez pas porter plus d'objets !", "~r~¡Espagnol!", "~r~Portugais!", "~r~Italien!", "~r~Allemand!");
						pFridge[playerid] = -1;
						return 1;
		    		}
		    		GivePlayerSlotObject(playerid, food, dFreeSlot);
					LogInfo(true, "[JOUEUR]%s met %s dans le réfrigérateur %d: %d.", GetName(playerid), NoNewLineSign(aObjects[food][ObjectFrName]), pFridge[playerid], amount - 1);
		    		AddFridgeFood(pFridge[playerid], food, -1);
				}
			}
		    else
		    {
		        pFridge[playerid] = -1;
		    }
		}
		case 59://OPTIONS
		{
		    if(response)
		    {
		        if(listitem == 0)//STATS
		        {
		            ShowStats(playerid, playerid);
					LogInfo(true, "[JOUEUR]%s consulte ses stats...", GetName(playerid));
		        }
		        else if(listitem == 1)//LANGUE
		        {
					format(sLangue, sizeof(sLangue), "%sEnglish\n", sCol[bLangue[0] ? 0 : 1]);
					strcat(string, sLangue);
					format(sLangue, sizeof(sLangue), "%sFrançais\n", sCol[bLangue[1] ? 0 : 1]);
					strcat(string, sLangue);
					format(sLangue, sizeof(sLangue), "%sEspañol\n", sCol[bLangue[2] ? 0 : 1]);
					strcat(string, sLangue);
					format(sLangue, sizeof(sLangue), "%sPortuguês\n", sCol[bLangue[3] ? 0 : 1]);
					strcat(string, sLangue);
					format(sLangue, sizeof(sLangue), "%sItaliano\n", sCol[bLangue[4] ? 0 : 1]);
					strcat(string, sLangue);
					format(sLangue, sizeof(sLangue), "%sDeutsch\n", sCol[bLangue[5] ? 0 : 1]);
					strcat(string, sLangue);
					//---
					switch(pPlayerInfos[playerid][pLangue])
					{
					   	case LANGUAGE_EN: ShowPlayerDialog(playerid, 61, DIALOG_STYLE_LIST, "Language", string, "Set", "Cancel");
	   					case LANGUAGE_FR: ShowPlayerDialog(playerid, 61, DIALOG_STYLE_LIST, "Language", string, "Choisir", "Annuler");
	   					case LANGUAGE_ES: ShowPlayerDialog(playerid, 61, DIALOG_STYLE_LIST, "Lingua", string, "Eligir", "Espagnol");
	   					case LANGUAGE_PG: ShowPlayerDialog(playerid, 61, DIALOG_STYLE_LIST, "Portugais", string, "Portugais", "Portugais");
						case LANGUAGE_IT: ShowPlayerDialog(playerid, 61, DIALOG_STYLE_LIST, "Lingua", string, "Italien", "Italien");
						case LANGUAGE_DE: ShowPlayerDialog(playerid, 61, DIALOG_STYLE_LIST, "Sprache", string, "Allemand", "Allemand");
					}
		        }
		        else if(listitem == 2)//CHANGER MOT DE PASSE
		        {
		   			switch(pPlayerInfos[playerid][pLangue])
		   			{
		   			    case LANGUAGE_EN: ShowPlayerDialog(playerid, 62, DIALOG_STYLE_PASSWORD, "Password", "{CC0000}Before setting a new password, enter the old one.\n{ffffff}Enter your password:", "Check", "Cancel");
		   			    case LANGUAGE_FR: ShowPlayerDialog(playerid, 62, DIALOG_STYLE_PASSWORD, "Mot de passe", "{CC0000}Avant de changer de mot de passe, entrez votre mot de passe actuel.\n{ffffff}Veuillez entrer ci-dessous votre mot de passe:", "Vérifier", "Annuler");
		   			    case LANGUAGE_ES: ShowPlayerDialog(playerid, 62, DIALOG_STYLE_PASSWORD, "Contraseca", "{CC0000}Antès de cambiar su contraseca, necessita usted Espagnol.\n{ffffff}Escribe su contraseña por favor:", "Espagnol", "Espagnol");
		   			    case LANGUAGE_PG: ShowPlayerDialog(playerid, 62, DIALOG_STYLE_PASSWORD, "Portugais", "{CC0000}Portugais {ff0000}Survive-all.\n{ffffff}Portugais:", "Portugais", "Portugais");
		   			    case LANGUAGE_IT: ShowPlayerDialog(playerid, 62, DIALOG_STYLE_PASSWORD, "Password", "{CC0000} {ff0000}.\n{ffffff}Italien:", "Italien", "Italien");
		   			    case LANGUAGE_DE: ShowPlayerDialog(playerid, 62, DIALOG_STYLE_PASSWORD, "Kennwort", "{CC0000}Allemand.\n{ffffff}Bitten ihren kennwort schreiben:", "Allemand", "Allemand");
		   			}
		        }
				else if(listitem == 3)//REPORT
				{
				}
				else if(listitem == 4)//SAUVEGARDE
				{
				}
		    }
		}
		case 60://STATISTIQUES
		{
			LogInfo(true, "[JOUEUR]%s ne consulte plus ses stats.", GetName(playerid));
		}
	    case 61://LANGUE
	    {
	        if(response)
	        {
		        if(!bLangue[listitem])
		        {
					format(sLangue, sizeof(sLangue), "%sEnglish\n", sCol[bLangue[0] ? 0 : 1]);
					strcat(string, sLangue);
					format(sLangue, sizeof(sLangue), "%sFrançais\n", sCol[bLangue[1] ? 0 : 1]);
					strcat(string, sLangue);
					format(sLangue, sizeof(sLangue), "%sEspañol\n", sCol[bLangue[2] ? 0 : 1]);
					strcat(string, sLangue);
					format(sLangue, sizeof(sLangue), "%sPortuguês\n", sCol[bLangue[3] ? 0 : 1]);
					strcat(string, sLangue);
					format(sLangue, sizeof(sLangue), "%sItaliano\n", sCol[bLangue[4] ? 0 : 1]);
					strcat(string, sLangue);
					format(sLangue, sizeof(sLangue), "%sDeutsch\n", sCol[bLangue[5] ? 0 : 1]);
					strcat(string, sLangue);
					//---
					switch(pPlayerInfos[playerid][pLangue])
					{
					   	case LANGUAGE_EN: ShowPlayerDialog(playerid, 61, DIALOG_STYLE_LIST, "Language", string, "Set", "Cancel");
	   					case LANGUAGE_FR: ShowPlayerDialog(playerid, 61, DIALOG_STYLE_LIST, "Langue", string, "Choisir", "Annuler");
	   					case LANGUAGE_ES: ShowPlayerDialog(playerid, 61, DIALOG_STYLE_LIST, "Lingua", string, "Eligir", "Espagnol");
	   					case LANGUAGE_PG: ShowPlayerDialog(playerid, 61, DIALOG_STYLE_LIST, "Portugais", string, "Portugais", "Portugais");
						case LANGUAGE_IT: ShowPlayerDialog(playerid, 61, DIALOG_STYLE_LIST, "Lingua", string, "Italien", "Italien");
						case LANGUAGE_DE: ShowPlayerDialog(playerid, 61, DIALOG_STYLE_LIST, "Sprache", string, "Allemand", "Allemand");
					}
					return 1;
				}
				//---
		        pPlayerInfos[playerid][pLangue] = listitem;
		        //---
				UpdatePlayerHand(playerid, pPlayerInfos[playerid][HandObject]);//On actualise l'objet dans la main
			    UpdateInfo(playerid, 4);//On actualise l'or
			    UpdateInfo(playerid, 7);//On actualise la température
				UpdateInfo(playerid, 8);//On actualise l'état de la jambe
				UpdateInfo(playerid, 9);//On actualise l'état d'hémorragie
				//---
		        ShowPlayerTextInfo(playerid, 5000, "You have set the language to ~r~English.", "Vous avez réglé la langue sur le ~r~Français.", "Espagnol", "Portugais", "Italien", "Allemand");
				switch(listitem)
				{
					case 0: LogInfo(true, "[JOUEUR]%s a change sa langue: Anglais", GetName(playerid));
					case 1: LogInfo(true, "[JOUEUR]%s a change sa langue: Francais", GetName(playerid));
					case 2: LogInfo(true, "[JOUEUR]%s a change sa langue: Espagnol", GetName(playerid));
					case 3: LogInfo(true, "[JOUEUR]%s a change sa langue: Portugais", GetName(playerid));
					case 4: LogInfo(true, "[JOUEUR]%s a change sa langue: Italien", GetName(playerid));
					case 5: LogInfo(true, "[JOUEUR]%s a change sa langue: Allemand", GetName(playerid));
				}
	        }
	    }
		case 62://CHANGER MOT DE PASSE - VÉRIFICATION
		{
		    if(response)
		    {
				if(udb_hash(inputtext) == pPlayerInfos[playerid][pPass])
				{
		   			switch(pPlayerInfos[playerid][pLangue])
		   			{
		   			    case LANGUAGE_EN: ShowPlayerDialog(playerid, 63, DIALOG_STYLE_INPUT, "Password", "{008000}Good.\n{ffffff}Enter your new password:", "Set", "Cancel");
		   			    case LANGUAGE_FR: ShowPlayerDialog(playerid, 63, DIALOG_STYLE_INPUT, "Mot de passe", "{008000}Bien.\n{ffffff}Entrez votre nouveau mot de passe:", "Changer", "Annuler");
		   			    case LANGUAGE_ES: ShowPlayerDialog(playerid, 63, DIALOG_STYLE_INPUT, "Contraseca", "{008000}Bueno.\n{ffffff}Escribe su nueve contraseña por favor:", "Espagnol", "Espagnol");
		   			    case LANGUAGE_PG: ShowPlayerDialog(playerid, 63, DIALOG_STYLE_INPUT, "Portugais", "{008000}Portugais {ff0000}Survive-all.\n{ffffff}Portugais:", "Portugais", "Portugais");
		   			    case LANGUAGE_IT: ShowPlayerDialog(playerid, 63, DIALOG_STYLE_INPUT, "Italien", "{008000}Password errata {ff0000}Survive-all.\n{ffffff}Italien:", "Italien", "Italien");
		   			    case LANGUAGE_DE: ShowPlayerDialog(playerid, 63, DIALOG_STYLE_INPUT, "Kennwort", "{008000}Gut.\n{ffffff}Bitten ihren neues Kennwort schreiben:", "Allemand", "Allemand");
		   			}
				}
				else
				{
		   			switch(pPlayerInfos[playerid][pLangue])
		   			{
		   			    case LANGUAGE_EN: ShowPlayerDialog(playerid, 62, DIALOG_STYLE_PASSWORD, "Password", "{CC0000}Wrong password.\n{ffffff}Enter your password:", "Check", "Cancel");
		   			    case LANGUAGE_FR: ShowPlayerDialog(playerid, 62, DIALOG_STYLE_PASSWORD, "Mot de passe", "{CC0000}Mauvais mot de passe.\n{ffffff}Veuillez entrer ci-dessous votre mot de passe:", "Vérifier", "Annuler");
		   			    case LANGUAGE_ES: ShowPlayerDialog(playerid, 62, DIALOG_STYLE_PASSWORD, "Contraseca", "{CC0000}Contraseña incorrecta.\n{ffffff}Escribe su contraseña por favor:", "Espagnol", "Espagnol");
		   			    case LANGUAGE_PG: ShowPlayerDialog(playerid, 62, DIALOG_STYLE_PASSWORD, "Portugais", "{CC0000}Portugais {ff0000}Survive-all.\n{ffffff}Portugais:", "Portugais", "Portugais");
		   			    case LANGUAGE_IT: ShowPlayerDialog(playerid, 62, DIALOG_STYLE_PASSWORD, "Italien", "{CC0000}Password errata {ff0000}Survive-all.\n{ffffff}Italien:", "Italien", "Italien");
		   			    case LANGUAGE_DE: ShowPlayerDialog(playerid, 62, DIALOG_STYLE_PASSWORD, "Kennwort", "{CC0000}Falsches Kennwort.\n{ffffff}Bitten ihren Kennwort schreiben:", "Allemand", "Allemand");
		   			}
				}
			}
		}
		case 63:
		{
			if(response)
			{
				if(!strlen(inputtext) || strlen(inputtext) > 30)
				{
		   			switch(pPlayerInfos[playerid][pLangue])
		   			{
		   			    case LANGUAGE_EN: ShowPlayerDialog(playerid, 63, DIALOG_STYLE_INPUT, "Password", "{CC0000}Invalid password.\n{ffffff}Enter your new password:", "Set", "Cancel");
		   			    case LANGUAGE_FR: ShowPlayerDialog(playerid, 63, DIALOG_STYLE_INPUT, "Mot de passe", "{CC0000}Mot de passe invalide.\n{ffffff}Entrez votre nouveau mot de passe:", "Changer", "Annuler");
		   			    case LANGUAGE_ES: ShowPlayerDialog(playerid, 63, DIALOG_STYLE_INPUT, "Contraseca", "{CC0000}Espagnol.\n{ffffff}Escribe su nueve contraseña por favor:", "Espagnol", "Espagnol");
		   			    case LANGUAGE_PG: ShowPlayerDialog(playerid, 63, DIALOG_STYLE_INPUT, "Portugais", "{CC0000}Portugais {ff0000}Survive-all.\n{ffffff}Portugais:", "Portugais", "Portugais");
		   			    case LANGUAGE_IT: ShowPlayerDialog(playerid, 63, DIALOG_STYLE_INPUT, "Italien", "{CC0000}Password errata {ff0000}Survive-all.\n{ffffff}Italien:", "Italien", "Italien");
		   			    case LANGUAGE_DE: ShowPlayerDialog(playerid, 63, DIALOG_STYLE_INPUT, "Kennwort", "{CC0000}Allemand.\n{ffffff}Bitten ihren neues Kennwort schreiben:", "Allemand", "Allemand");
					}
					return 1;
				}
				pPlayerInfos[playerid][pPass] = udb_hash(inputtext);
		        ShowPlayerTextInfo(playerid, 5000, "~g~You successfully changed your password.", "~g~Vous avez changé votre mot de passe avec succès.", "Espagnol", "Portugais", "Italien", "Allemand");
		        LogInfo(true, "[JOUEUR]%s a change son mot de passe", GetName(playerid));
			}
		}
		case 64://DONNER OR
		{
		    if(response)
		    {
		        new dGold = -1;
				dGold = floatround(floatstr(inputtext) * 10, floatround_round);
		        if(!strlen(inputtext) || dGold == 0)
		        {
					switch(pPlayerInfos[playerid][pLangue])
					{
						case LANGUAGE_EN: ShowPlayerDialog(playerid, 64, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}How much gold do you want to give?:", "Give", "Cancel");
						case LANGUAGE_FR: ShowPlayerDialog(playerid, 64, DIALOG_STYLE_INPUT, "Admin", "{FFFFFF}Combien d'or voulez-vous donner ?:", "Donner", "Annuler");
	  					case LANGUAGE_ES: ShowPlayerDialog(playerid, 64, DIALOG_STYLE_INPUT, "Admin", "Espagnol", "Espagnol", "Cancelar");
	  					case LANGUAGE_PG: ShowPlayerDialog(playerid, 64, DIALOG_STYLE_INPUT, "Admin", "Portugais", "Portugais", "Portugais");
						case LANGUAGE_IT: ShowPlayerDialog(playerid, 64, DIALOG_STYLE_INPUT, "Admin", "Italien", "Italien", "Italien");
						case LANGUAGE_DE: ShowPlayerDialog(playerid, 64, DIALOG_STYLE_INPUT, "Admin", "Allemand" , "Allemand", "Schlissen");
					}
		            return 1;
		        }
				GivePlayerGold(pAdminInfos[playerid][dPuniID], dGold);
				printf("[ADMIN]%s a donne %.1fg d'or a %d.", GetName(playerid), floatdiv(dGold, 10), GetName(pAdminInfos[playerid][dPuniID]));
				//---
				switch(pPlayerInfos[pAdminInfos[playerid][dPuniID]][pLangue])
				{
					case LANGUAGE_EN: format(string,sizeof(string),"[ADMIN]The admin gave you %.1fg of gold.", floatdiv(dGold, 10));
					case LANGUAGE_FR: format(string,sizeof(string),"[ADMIN]L'admin vous a donné %.1fg of gold.", floatdiv(dGold, 10));
  					case LANGUAGE_ES: format(string,sizeof(string),"[ADMIN]Espagnol %.1fg .", floatdiv(dGold, 10));
  					case LANGUAGE_PG: format(string,sizeof(string),"[ADMIN]Portugais %.1fg .", floatdiv(dGold, 10));
					case LANGUAGE_IT: format(string,sizeof(string),"[ADMIN]Italien %.1fg .", floatdiv(dGold, 10));
					case LANGUAGE_DE: format(string,sizeof(string),"[ADMIN]Allemand %.1fg .", floatdiv(dGold, 10));
				}
				SendClientMessage(pAdminInfos[playerid][dPuniID], ADMIN_COLOR, string);
				//---
				//SavePunishment(playerid, "GOLD", reason);
				LogInfo(true, "[ADMIN]%s donne %.1fg d'or a %s", GetName(playerid), floatdiv(dGold, 10), GetName(pAdminInfos[playerid][dPuniID]));
				SendClientMessageEx(playerid, ADMIN_COLOR, "[ADMIN]Gold sent.", "[ADMIN]Or envoyé.", "Espagnol", "Portugais", "Italien", "Allemand");
			}
		    else if(!response)
		    {
				ShowPlayerAdminDialog(playerid);
			}
		}
		case 65://RÉCUPÉRER LES GRAINES
		{
		    if(response)
		    {
				if(listitem == 0)//MANGER
				{
					if(pPlayerInfos[playerid][pHunger] > 90)
				    {
				        SendClientMessageEx(playerid, ROUGE, "You're not hungry!", "Vous n'avez pas faim !", "¡No tiene hambre!", "Portugais", "Non hai fame!", "Sie sint nicht hungrig!");
						return 1;
				    }
				    if(RandomEx(0, 7) < 2)
				    {
					    if(!pPlayerInfos[playerid][bAide][11]) ShowPlayerHelp(playerid, 12, 10000);
				    	GivePlayerSlotObject(playerid, GetPlayerSlotObject(playerid, dUsingItem[playerid]) + 20, dUsingItem[playerid]);
				    }
				    else
				    {
				    	GivePlayerSlotObject(playerid, -1, dUsingItem[playerid]);
				    }
					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
				    GivePlayerHunger(playerid, 5);
				    GivePlayerSleep(playerid, 3);
				}
				else if(listitem == 1)//GRAINES
				{
				    if(RandomEx(0, 10) < 7)
				    {
					    if(!pPlayerInfos[playerid][bAide][11]) ShowPlayerHelp(playerid, 12, 10000);
				    	GivePlayerSlotObject(playerid, GetPlayerSlotObject(playerid, dUsingItem[playerid]) + 20, dUsingItem[playerid]);
				    }
				    else
				    {
				        SendClientMessageEx(playerid, ROUGE, "There is no seed in this one fruit!", "Il n'y a pas de graines dans ce fruit !", "¡Espagnol!", "Portugais", "Italien", "Allemand");
				    	GivePlayerSlotObject(playerid, -1, dUsingItem[playerid]);
				    }
				}
			}
			dUsingItem[playerid] = -1;
		}
	}
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(pTank[playerid] != -1)
	{
	    if(response == EDIT_RESPONSE_FINAL)
	    {
			new dGas = dTanks[pTank[playerid]][dTankGas];
			DestroyTank(pTank[playerid]);
			CreateTank(x, y, z, rz, dGas, pTank[playerid]);
			dTanks[pTank[playerid]][dTankGas] = 0;
			UpdateTankInfo(pTank[playerid]);
			//---
			pTank[playerid] = -1;
	    }
	}
	if(pFurn[playerid])
	{
	    if(response == EDIT_RESPONSE_FINAL)
	    {
			new Pointer:pt = LIST_IT_data_ptr(pFurn[playerid]);
	        new furn[Furniture];
			MEM_get_arr(pt, _, furn);
			DestroyFurniture(pFurn[playerid]);
			CreateFurniture(furn[dFurnitureType], x, y, z, rx, ry, rz);
			//pFurn[playerid] = -1;
	    }
	}
	if(pBed[playerid] != -1)
	{
	    if(response == EDIT_RESPONSE_FINAL)
	    {
	        new dBedID = dBed[pBed[playerid]][dBedType];
			DestroyBed(pBed[playerid]);
			CreateBed(dBedID, x, y, z +1.0, rz, pBed[playerid]);
			pBed[playerid] = -1;
	    }
	}
	if(pSeat[playerid] != -1)
	{
	    if(response == EDIT_RESPONSE_FINAL)
	    {
			new ListIt: node = GetNodeAt(seatList, pSeat[playerid]);
			new Pointer: pt = LIST_IT_data_ptr(node);
			new seat[Seat];
			MEM_get_arr(pt, _, seat);
	        new dSeatID = seat[dSeatType];
			DestroySeat(node);
			CreateSeat(dSeatID, x, y, z + 1.0, rz);
			pSeat[playerid] = -1;
	    }
	}
	if(pRack[playerid] != -1)
	{
	    if(response == EDIT_RESPONSE_FINAL)
	    {
			DestroyGunRack(pRack[playerid]);
			CreateGunRack(x, y, z + 1.0, rz, pRack[playerid]);
			pRack[playerid] = -1;
	    }
	}
	if(pFridge[playerid] != -1)
	{
	    if(response == EDIT_RESPONSE_FINAL)
	    {
			DestroyFridge(pFridge[playerid]);
			CreateFridge(x, y, z + 1.0, rz, pFridge[playerid]);
			pFridge[playerid] = -1;
	    }
	}
	if(pBrasero[playerid] != -1)
	{
	    if(response == EDIT_RESPONSE_FINAL)
	    {
			DestroyBrasero(pBrasero[playerid]);
			CreateBrasero(x, y, z + 0.6119, rz, 1, pBrasero[playerid]);
			pBrasero[playerid] = -1;
	    }
	}
	if(pShredder[playerid] != -1)
	{
	    if(response == EDIT_RESPONSE_FINAL)
	    {
			DestroyShredder(pShredder[playerid]);
			CreateShredder(x, y, z + 0.516, rz - 270.0, 0, pShredder[playerid]);
			pShredder[playerid] = -1;
	    }
	}
	if(pBoard[playerid] != -1)
	{
	    if(response == EDIT_RESPONSE_FINAL)
	    {
			DestroyBoard(GetNodeAt(boardList, pBoard[playerid]));
			CreateBoard(x, y, z, rz);
			//---
		    switch(pPlayerInfos[playerid][pLangue])
			{
			   	case LANGUAGE_EN: ShowPlayerDialog(playerid, 55, DIALOG_STYLE_INPUT, "Board", "{FFFFFF}Write your text:\n{CC0000}Max. 128 chars.!", "Ok", "Cancel");
			   	case LANGUAGE_FR: ShowPlayerDialog(playerid, 55, DIALOG_STYLE_INPUT, "Panneau", "{FFFFFF}Entrez un texte:\n{CC0000}Maximum 128 caractères !", "Ok", "Annuler");
			   	case LANGUAGE_ES: ShowPlayerDialog(playerid, 55, DIALOG_STYLE_INPUT, "Espagnol", "Espagnol", "Ok", "Espagnol");
			   	case LANGUAGE_PG: ShowPlayerDialog(playerid, 55, DIALOG_STYLE_INPUT, "Portugais", "Portugais", "Ok", "Portugais");
				case LANGUAGE_IT: ShowPlayerDialog(playerid, 55, DIALOG_STYLE_INPUT, "Italien", "Italien", "Ok", "Italien");
				case LANGUAGE_DE: ShowPlayerDialog(playerid, 55, DIALOG_STYLE_INPUT, "Allemand", "Allemand" , "Ok", "Allemand");
			}
	    }
	}
	if(pCreateSafe[playerid] != -1)
	{
	    if(response == EDIT_RESPONSE_FINAL)
	    {
			DestroySafe(pCreateSafe[playerid]);
			CreateSafe(x, y, z + 0.539, rz, pCreateSafe[playerid]);
			ChangeSafeDoorState(pCreateSafe[playerid], true);
			format(dSafeInfos[pCreateSafe[playerid]][sSafeCode], 5, "0000");
			//---
			switch(pPlayerInfos[playerid][pLangue])
			{
			   	case LANGUAGE_EN: ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Safe", "Enter a four numbered code:", "Ok", "Cancel");
			   	case LANGUAGE_FR: ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Coffre Fort", "Écrivez un nombre à quatre chiffres comme code:", "Ok", "Annuler");
			   	case LANGUAGE_ES: ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Espagnol", "Espagnol", "Ok", "Espagnol");
			   	case LANGUAGE_PG: ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Portugais", "Portugais", "Ok", "Portugais");
				case LANGUAGE_IT: ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Italien", "Italien", "Ok", "Italien");
				case LANGUAGE_DE: ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Allemand", "Allemand" , "Ok", "Allemand");
			}
	    }
	}
	//---
	if(pGarage[playerid] != -1)
	{
	    if(response == EDIT_RESPONSE_FINAL)
	    {
		    switch(pPlayerInfos[playerid][pLangue])
			{
				case LANGUAGE_EN: ShowPlayerDialog(playerid, 39, DIALOG_STYLE_INPUT, "Door", "Enter a four numbered code:", "Ok", "");
			 	case LANGUAGE_FR: ShowPlayerDialog(playerid, 39, DIALOG_STYLE_INPUT, "Porte", "Écrivez un nombre à quatre chiffres comme code:", "Ok", "");
	 			case LANGUAGE_ES: ShowPlayerDialog(playerid, 39, DIALOG_STYLE_INPUT, "Puerta", "Espagnol", "Ok", "");
	 			case LANGUAGE_PG: ShowPlayerDialog(playerid, 39, DIALOG_STYLE_INPUT, "Porta", "Portugais", "Ok", "");
				case LANGUAGE_IT: ShowPlayerDialog(playerid, 39, DIALOG_STYLE_INPUT, "Porta", "Italien", "Ok", "");
				case LANGUAGE_DE: ShowPlayerDialog(playerid, 39, DIALOG_STYLE_INPUT, "Tür", "Allemand" , "Ok", "");
			}
			DestroyGarage(pGarage[playerid]);
			CreateGarage(x, y, z, rz, pGarage[playerid]);
			//---
	    }
	}
	if(dHouseBuild[playerid] == 2)
	{
	    if(response == EDIT_RESPONSE_FINAL)
	    {
	        /*if(IsHouseNearToPoint(15.0, x, y, z))
	        {
	            SendClientMessageEx(playerid, ROUGE, "There is already another house near this one!", "Il y a déjà une autre maison près de celle-ci !", "¡Ya hay una otra casa cerca de esta!", "Portugais", "Italien", "Allemand");
				EditDynamicObject(playerid, dHouse[dHouseID[playerid]][oHouse][0]);
				return 1;
			}*/
		    if(HasPlayerItem(playerid, 112) != -1)
		    {
				dHouseBuild[playerid] = 3;
				switch(pPlayerInfos[playerid][pLangue])
				{
				 	case LANGUAGE_EN: ShowPlayerDialog(playerid, 10, DIALOG_STYLE_INPUT, "Door", "Enter a four numbered code:", "Ok", "");
				 	case LANGUAGE_FR: ShowPlayerDialog(playerid, 10, DIALOG_STYLE_INPUT, "Porte", "Écrivez un nombre à quatre chiffres comme code:", "Ok", "");
		 			case LANGUAGE_ES: ShowPlayerDialog(playerid, 10, DIALOG_STYLE_INPUT, "Puerta", "Espagnol", "Ok", "");
		 			case LANGUAGE_PG: ShowPlayerDialog(playerid, 10, DIALOG_STYLE_INPUT, "Porta", "Portugais", "Ok", "");
					case LANGUAGE_IT: ShowPlayerDialog(playerid, 10, DIALOG_STYLE_INPUT, "Porta", "Italien", "Ok", "");
					case LANGUAGE_DE: ShowPlayerDialog(playerid, 10, DIALOG_STYLE_INPUT, "Tür", "Allemand" , "Ok", "");
				}
			}
			else
			{
			    dHouseBuild[playerid] = 0;
			}
			new type = dHouse[dHouseID[playerid]][dHouseType];
			DestroyHouse(dHouseID[playerid]);
			//---
			new Float:zDiff;
			switch(type)
			{
			    case 1: zDiff = 1.199;
			    case 2: zDiff = 1.164;
			    case 3: zDiff = -1.0;
			    case 4: zDiff = 0.208;
			}
			CreateHouse(type, false, x, y, z - zDiff, rz, dHouseID[playerid]);
			//---
	    }
	}
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	switch(index)
	{
	    case HAT_OBJECT_ID://Si le mec a fini d'éditer son chapeau
	    {
	        if(!response)//Si le mec a appuyé sur ECHAP
	        {
	            S_SetPlayerAttachedObject(playerid, HAT_OBJECT_ID, aObjects[pPlayerInfos[playerid][pChapeau]][ObjectModelID], 2, pPlayerInfos[playerid][fPosChapeau][0], pPlayerInfos[playerid][fPosChapeau][1], pPlayerInfos[playerid][fPosChapeau][2], pPlayerInfos[playerid][fPosChapeau][3], pPlayerInfos[playerid][fPosChapeau][4], pPlayerInfos[playerid][fPosChapeau][5], pPlayerInfos[playerid][fPosChapeau][6], pPlayerInfos[playerid][fPosChapeau][7], pPlayerInfos[playerid][fPosChapeau][8], -1, -1);
	            SendClientMessageEx(playerid, ROUGE, "Positions cancelled!", "Positions annulées !", "Espagnol", "Portugais", "Italien", "Allemand");
	        }
	        else if(response)//Si le mec a cliqué sur la disquette
	        {
	            if(0.1 > fScaleX || fScaleX > 5 ||0.1 > fScaleY || fScaleY > 5 ||0.1 > fScaleZ || fScaleZ > 5)
	            {
	                SendClientMessageEx(playerid, ROUGE, "Object set too big, try again!", "Objet trop grand, ré-essayez !", "¡Objeto demasiado gran!", "Portugais", "Italien", "Allemand");
	            	S_SetPlayerAttachedObject(playerid, HAT_OBJECT_ID, aObjects[pPlayerInfos[playerid][pChapeau]][ObjectModelID], 2, pPlayerInfos[playerid][fPosChapeau][0], pPlayerInfos[playerid][fPosChapeau][1], pPlayerInfos[playerid][fPosChapeau][2], pPlayerInfos[playerid][fPosChapeau][3], pPlayerInfos[playerid][fPosChapeau][4], pPlayerInfos[playerid][fPosChapeau][5], pPlayerInfos[playerid][fPosChapeau][6], pPlayerInfos[playerid][fPosChapeau][7], pPlayerInfos[playerid][fPosChapeau][8], -1, -1);
        			EditAttachedObject(playerid, HAT_OBJECT_ID);
        			return 1;
	            }
                pPlayerInfos[playerid][fPosChapeau][0] = fOffsetX;
				pPlayerInfos[playerid][fPosChapeau][1] = fOffsetY;
				pPlayerInfos[playerid][fPosChapeau][2] = fOffsetZ;
				pPlayerInfos[playerid][fPosChapeau][3] = fRotX;
				pPlayerInfos[playerid][fPosChapeau][4] = fRotY;
				pPlayerInfos[playerid][fPosChapeau][5] = fRotZ;
				pPlayerInfos[playerid][fPosChapeau][6] = fScaleX;
				pPlayerInfos[playerid][fPosChapeau][7] = fScaleY;
				pPlayerInfos[playerid][fPosChapeau][8] = fScaleZ;
	            S_SetPlayerAttachedObject(playerid, HAT_OBJECT_ID, aObjects[pPlayerInfos[playerid][pChapeau]][ObjectModelID], 2, pPlayerInfos[playerid][fPosChapeau][0], pPlayerInfos[playerid][fPosChapeau][1], pPlayerInfos[playerid][fPosChapeau][2], pPlayerInfos[playerid][fPosChapeau][3], pPlayerInfos[playerid][fPosChapeau][4], pPlayerInfos[playerid][fPosChapeau][5], pPlayerInfos[playerid][fPosChapeau][6], pPlayerInfos[playerid][fPosChapeau][7], pPlayerInfos[playerid][fPosChapeau][8], -1, -1);
	        }
	    }
	    case GLASSES_OBJECT_ID://Si le mec a fini d'éditer ses lunettes
	    {
	        if(!response)//Si le mec a appuyé sur ECHAP
	        {
	            S_SetPlayerAttachedObject(playerid, GLASSES_OBJECT_ID, aObjects[pPlayerInfos[playerid][pLunettes]][ObjectModelID], 2, pPlayerInfos[playerid][fPosLunettes][0], pPlayerInfos[playerid][fPosLunettes][1], pPlayerInfos[playerid][fPosLunettes][2], pPlayerInfos[playerid][fPosLunettes][3], pPlayerInfos[playerid][fPosLunettes][4], pPlayerInfos[playerid][fPosLunettes][5], pPlayerInfos[playerid][fPosLunettes][6], pPlayerInfos[playerid][fPosLunettes][7], pPlayerInfos[playerid][fPosLunettes][8], -1, -1);
	            SendClientMessageEx(playerid, ROUGE, "Positions cancelled!", "Positions annulées !", "Espagnol", "Portugais", "Italien", "Allemand");
	        }
	        else if(response)//Si le mec a cliqué sur la disquette
	        {
	            if(0.1 > fScaleX || fScaleX > 3 ||0.1 > fScaleY || fScaleY > 3 ||0.1 > fScaleZ || fScaleZ > 3)
	            {
	                SendClientMessageEx(playerid, ROUGE, "Object set too big, try again!", "Objet trop grand, ré-essayez !", "¡Objeto demasiado gran!", "Portugais", "Italien", "Allemand");
	            	S_SetPlayerAttachedObject(playerid, GLASSES_OBJECT_ID, aObjects[pPlayerInfos[playerid][pLunettes]][ObjectModelID], 2, pPlayerInfos[playerid][fPosLunettes][0], pPlayerInfos[playerid][fPosLunettes][1], pPlayerInfos[playerid][fPosLunettes][2], pPlayerInfos[playerid][fPosLunettes][3], pPlayerInfos[playerid][fPosLunettes][4], pPlayerInfos[playerid][fPosLunettes][5], pPlayerInfos[playerid][fPosLunettes][6], pPlayerInfos[playerid][fPosLunettes][7], pPlayerInfos[playerid][fPosLunettes][8], -1, -1);
        			EditAttachedObject(playerid, GLASSES_OBJECT_ID);
        			return 1;
	            }
                pPlayerInfos[playerid][fPosLunettes][0] = fOffsetX;
				pPlayerInfos[playerid][fPosLunettes][1] = fOffsetY;
				pPlayerInfos[playerid][fPosLunettes][2] = fOffsetZ;
				pPlayerInfos[playerid][fPosLunettes][3] = fRotX;
				pPlayerInfos[playerid][fPosLunettes][4] = fRotY;
				pPlayerInfos[playerid][fPosLunettes][5] = fRotZ;
				pPlayerInfos[playerid][fPosLunettes][6] = fScaleX;
				pPlayerInfos[playerid][fPosLunettes][7] = fScaleY;
				pPlayerInfos[playerid][fPosLunettes][8] = fScaleZ;
	            S_SetPlayerAttachedObject(playerid, GLASSES_OBJECT_ID, aObjects[pPlayerInfos[playerid][pLunettes]][ObjectModelID], 2, pPlayerInfos[playerid][fPosLunettes][0], pPlayerInfos[playerid][fPosLunettes][1], pPlayerInfos[playerid][fPosLunettes][2], pPlayerInfos[playerid][fPosLunettes][3], pPlayerInfos[playerid][fPosLunettes][4], pPlayerInfos[playerid][fPosLunettes][5], pPlayerInfos[playerid][fPosLunettes][6], pPlayerInfos[playerid][fPosLunettes][7], pPlayerInfos[playerid][fPosLunettes][8], -1, -1);
	        }
	    }
	    case MASK_OBJECT_ID://Si le mec a fini d'éditer son masque
	    {
	        if(!response)//Si le mec a appuyé sur ECHAP
	        {
	            S_SetPlayerAttachedObject(playerid, MASK_OBJECT_ID, aObjects[pPlayerInfos[playerid][pMasque]][ObjectModelID], 2, pPlayerInfos[playerid][fPosMasque][0], pPlayerInfos[playerid][fPosMasque][1], pPlayerInfos[playerid][fPosMasque][2], pPlayerInfos[playerid][fPosMasque][3], pPlayerInfos[playerid][fPosMasque][4], pPlayerInfos[playerid][fPosMasque][5], pPlayerInfos[playerid][fPosMasque][6], pPlayerInfos[playerid][fPosMasque][7], pPlayerInfos[playerid][fPosMasque][8], -1, -1);
	            SendClientMessageEx(playerid, ROUGE, "Positions cancelled!", "Positions annulées !", "Espagnol", "Portugais", "Italien", "Allemand");
	        }
	        else if(response)//Si le mec a cliqué sur la disquette
	        {
	            if(0.1 > fScaleX || fScaleX > 3 ||0.1 > fScaleY || fScaleY > 3 ||0.1 > fScaleZ || fScaleZ > 3)
	            {
	                SendClientMessageEx(playerid, ROUGE, "Object set too big, try again!", "Objet trop grand, ré-essayez !", "¡Objeto demasiado gran!", "Portugais", "Italien", "Allemand");
	            	S_SetPlayerAttachedObject(playerid, MASK_OBJECT_ID, aObjects[pPlayerInfos[playerid][pMasque]][ObjectModelID], 2, pPlayerInfos[playerid][fPosMasque][0], pPlayerInfos[playerid][fPosMasque][1], pPlayerInfos[playerid][fPosMasque][2], pPlayerInfos[playerid][fPosMasque][3], pPlayerInfos[playerid][fPosMasque][4], pPlayerInfos[playerid][fPosMasque][5], pPlayerInfos[playerid][fPosMasque][6], pPlayerInfos[playerid][fPosMasque][7], pPlayerInfos[playerid][fPosMasque][8], -1, -1);
        			EditAttachedObject(playerid, MASK_OBJECT_ID);
        			return 1;
	            }
                pPlayerInfos[playerid][fPosMasque][0] = fOffsetX;
				pPlayerInfos[playerid][fPosMasque][1] = fOffsetY;
				pPlayerInfos[playerid][fPosMasque][2] = fOffsetZ;
				pPlayerInfos[playerid][fPosMasque][3] = fRotX;
				pPlayerInfos[playerid][fPosMasque][4] = fRotY;
				pPlayerInfos[playerid][fPosMasque][5] = fRotZ;
				pPlayerInfos[playerid][fPosMasque][6] = fScaleX;
				pPlayerInfos[playerid][fPosMasque][7] = fScaleY;
				pPlayerInfos[playerid][fPosMasque][8] = fScaleZ;
	            S_SetPlayerAttachedObject(playerid, MASK_OBJECT_ID, aObjects[pPlayerInfos[playerid][pMasque]][ObjectModelID], 2, pPlayerInfos[playerid][fPosMasque][0], pPlayerInfos[playerid][fPosMasque][1], pPlayerInfos[playerid][fPosMasque][2], pPlayerInfos[playerid][fPosMasque][3], pPlayerInfos[playerid][fPosMasque][4], pPlayerInfos[playerid][fPosMasque][5], pPlayerInfos[playerid][fPosMasque][6], pPlayerInfos[playerid][fPosMasque][7], pPlayerInfos[playerid][fPosMasque][8], -1, -1);
	        }
	    }
	    case TORSO_OBJECT_ID://Si le mec a fini d'éditer son objet de torse
	    {
	        if(!response)//Si le mec a appuyé sur ECHAP
	        {
	            S_SetPlayerAttachedObject(playerid, TORSO_OBJECT_ID, aObjects[pPlayerInfos[playerid][pTorse]][ObjectModelID], 2, pPlayerInfos[playerid][fPosTorse][0], pPlayerInfos[playerid][fPosTorse][1], pPlayerInfos[playerid][fPosTorse][2], pPlayerInfos[playerid][fPosTorse][3], pPlayerInfos[playerid][fPosTorse][4], pPlayerInfos[playerid][fPosTorse][5], pPlayerInfos[playerid][fPosTorse][6], pPlayerInfos[playerid][fPosTorse][7], pPlayerInfos[playerid][fPosTorse][8], -1, -1);
	            SendClientMessageEx(playerid, ROUGE, "Positions cancelled!", "Positions annulées !", "Espagnol", "Portugais", "Italien", "Allemand");
	        }
	        else if(response)//Si le mec a cliqué sur la disquette
	        {
	            if(0.1 > fScaleX || fScaleX > 3 || 0.1 > fScaleY || fScaleY > 3 || 0.1 > fScaleZ || fScaleZ > 3)
	            {
	                SendClientMessageEx(playerid, ROUGE, "Object set too big, try again!", "Objet trop grand, ré-essayez !", "¡Objeto demasiado gran!", "Portugais", "Italien", "Allemand");
	            	S_SetPlayerAttachedObject(playerid, TORSO_OBJECT_ID, aObjects[pPlayerInfos[playerid][pTorse]][ObjectModelID], 1, pPlayerInfos[playerid][fPosTorse][0], pPlayerInfos[playerid][fPosTorse][1], pPlayerInfos[playerid][fPosTorse][2], pPlayerInfos[playerid][fPosTorse][3], pPlayerInfos[playerid][fPosTorse][4], pPlayerInfos[playerid][fPosTorse][5], pPlayerInfos[playerid][fPosTorse][6], pPlayerInfos[playerid][fPosTorse][7], pPlayerInfos[playerid][fPosTorse][8], -1, -1);
        			EditAttachedObject(playerid, TORSO_OBJECT_ID);
        			return 1;
	            }
                pPlayerInfos[playerid][fPosTorse][0] = fOffsetX;
				pPlayerInfos[playerid][fPosTorse][1] = fOffsetY;
				pPlayerInfos[playerid][fPosTorse][2] = fOffsetZ;
				pPlayerInfos[playerid][fPosTorse][3] = fRotX;
				pPlayerInfos[playerid][fPosTorse][4] = fRotY;
				pPlayerInfos[playerid][fPosTorse][5] = fRotZ;
				pPlayerInfos[playerid][fPosTorse][6] = fScaleX;
				pPlayerInfos[playerid][fPosTorse][7] = fScaleY;
				pPlayerInfos[playerid][fPosTorse][8] = fScaleZ;
	            S_SetPlayerAttachedObject(playerid, TORSO_OBJECT_ID, aObjects[pPlayerInfos[playerid][pTorse]][ObjectModelID], 1, pPlayerInfos[playerid][fPosTorse][0], pPlayerInfos[playerid][fPosTorse][1], pPlayerInfos[playerid][fPosTorse][2], pPlayerInfos[playerid][fPosTorse][3], pPlayerInfos[playerid][fPosTorse][4], pPlayerInfos[playerid][fPosTorse][5], pPlayerInfos[playerid][fPosTorse][6], pPlayerInfos[playerid][fPosTorse][7], pPlayerInfos[playerid][fPosTorse][8], -1, -1);
	        }
	    }
	}
	return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if(_:playertextid == INVALID_TEXT_DRAW)
	{
		if(!bCloseTexts[playerid]) CloseTextDraws(playerid);
		bCloseTexts[playerid] = false;
	}
	if(dEngineer[playerid] != -1)
	{
	    for(new i = 0; i < 18; i ++)
	    {
			if(playertextid == tAtelierChoice[playerid][i])
			{
			    if(CallRemoteFunction("GetPlayerMission", "i", playerid) == MISSION_SHORTCUT_CRAFT)
			    {
				    if(dEngineer[playerid] == 0 && i == 14)
				    {
						ShowPlayerTextInfo(playerid, 5000, "~r~It's a bomb that you need!", "~r~C'est d'une bombe que vous avez besoin !", "Espagnol", "Portugais", "Italien", "Allemand");
						return 1;
				    }
				    else if(dEngineer[playerid] == 0 && i == 15)
				    {
						ShowPlayerTextInfo(playerid, 5000, "~r~Click on 'Craft'!", "~r~Appuyez sur 'Fabriquer' !", "Espagnol", "Portugais", "Italien", "Allemand");
				    }
				}
				//---
				if(dFormula[playerid] != i) SetEngineerFormula(playerid, dEngineer[playerid], i);
				break;
			}
		}
		//---
		for(new i = 0; i < 6; i ++)
		{
		    new dObjectID[7];
		    GetEngineerFormula(dEngineer[playerid], dFormula[playerid], dObjectID[6], dObjectID[0], dObjectID[1], dObjectID[2], dObjectID[3], dObjectID[4], dObjectID[5], dObjectID[6], dObjectID[6]);
			if(playertextid == tAtelierItem[playerid][i])
			{
				switch(pPlayerInfos[playerid][pLangue])
		        {
		            case LANGUAGE_EN: ShowPlayerDialog(playerid, 54, DIALOG_STYLE_MSGBOX, "Item", NoNewLineSign(aObjects[dObjectID[i]][ObjectEnName]), "Close", "");
		            case LANGUAGE_FR: ShowPlayerDialog(playerid, 54, DIALOG_STYLE_MSGBOX, "Objet", NoNewLineSign(aObjects[dObjectID[i]][ObjectFrName]), "Fermer", "");
		            case LANGUAGE_ES: ShowPlayerDialog(playerid, 54, DIALOG_STYLE_MSGBOX, "Espagnol", NoNewLineSign(aObjects[dObjectID[i]][ObjectEsName]), "Espagnol", "");
		            case LANGUAGE_PG: ShowPlayerDialog(playerid, 54, DIALOG_STYLE_MSGBOX, "Portugais", NoNewLineSign(aObjects[dObjectID[i]][ObjectPgName]), "Portugais", "");
					case LANGUAGE_IT: ShowPlayerDialog(playerid, 54, DIALOG_STYLE_MSGBOX, "Italien", NoNewLineSign(aObjects[dObjectID[i]][ObjectItName]), "Italien", "");
					case LANGUAGE_DE: ShowPlayerDialog(playerid, 54, DIALOG_STYLE_MSGBOX, "Objekte", NoNewLineSign(aObjects[dObjectID[i]][ObjectDeName]), "Allemand", "");
		        }
				CancelSelectTextDrawEx(playerid);
		        break;
			}
		}
		if(playertextid == tAtelierItem[playerid][7])
		{
		    new dObjectID[2];
		    GetEngineerFormula(dEngineer[playerid], dFormula[playerid], dObjectID[0], dObjectID[1], dObjectID[1], dObjectID[1], dObjectID[1], dObjectID[1], dObjectID[1], dObjectID[1], dObjectID[1]);
			switch(pPlayerInfos[playerid][pLangue])
	        {
	            case LANGUAGE_EN: ShowPlayerDialog(playerid, 54, DIALOG_STYLE_MSGBOX, "Item", NoNewLineSign(aObjects[dObjectID[0]][ObjectEnName]), "Close", "");
	            case LANGUAGE_FR: ShowPlayerDialog(playerid, 54, DIALOG_STYLE_MSGBOX, "Objet", NoNewLineSign(aObjects[dObjectID[0]][ObjectFrName]), "Fermer", "");
	            case LANGUAGE_ES: ShowPlayerDialog(playerid, 54, DIALOG_STYLE_MSGBOX, "Espagnol", NoNewLineSign(aObjects[dObjectID[0]][ObjectEsName]), "Espagnol", "");
	            case LANGUAGE_PG: ShowPlayerDialog(playerid, 54, DIALOG_STYLE_MSGBOX, "Portugais", NoNewLineSign(aObjects[dObjectID[0]][ObjectPgName]), "Portugais", "");
				case LANGUAGE_IT: ShowPlayerDialog(playerid, 54, DIALOG_STYLE_MSGBOX, "Italien", NoNewLineSign(aObjects[dObjectID[0]][ObjectItName]), "Italien", "");
				case LANGUAGE_DE: ShowPlayerDialog(playerid, 54, DIALOG_STYLE_MSGBOX, "Objekte", NoNewLineSign(aObjects[dObjectID[0]][ObjectDeName]), "Allemand", "");
	        }
			CancelSelectTextDrawEx(playerid);
		}
	}
	if(pHDV[playerid][0] != -1)
	{
		for(new i = 0; i < 8; i ++) if(playertextid == tHDVCats[playerid][i])
		{
		    if(i == pHDV[playerid][0]) return 1;
			if(!SetPlayerAuctionHouse(playerid, i, 1))
			{
				ShowPlayerTextInfo(playerid, 5000, "~r~There is no item for sale in this category.", "~r~Il n'y a pas d'objet à vendre dans cette catégorie.", "Espagnol", "Portugais", "Italien", "Allemand");
				return 1;
			}
		}
	}
	if(pUseInventory[playerid] != -1)
	{
	    new pClicked = -1;
		for(new i = 1; i < 9; i ++) if(playertextid == tPlayerHUD[playerid][i]) pClicked = i;
	    if(pClicked == -1) for(new i = 0; i < 36; i ++) if(playertextid == tInventory[playerid][i][0]) pClicked = i + 9;
	    if(pClicked == -1) if(playertextid == tInventObjet[playerid][0]) pClicked = 45;
	    if(pClicked == -1) for(new i = 0; i < 6; i ++) if(playertextid == tVehicleTrunk[playerid][i][0]) pClicked = i + 46;
	    if(pClicked == -1) for(new i = 0; i < 12; i ++) if(playertextid == tSafe[playerid][i][0]) pClicked = i + 52;
		if(pClicked != -1)
		{
		    if(pUseInventory[playerid] == pClicked)
		    {
		    	switch(pClicked)
		    	{
		    	    case 1 .. 4://Si le mec a double cliqué sur une arme
		    	    {
		    	        new dArmes[4];
		    	        dArmes[0] = pPlayerInfos[playerid][pArme1][0];
		    	        dArmes[1] = pPlayerInfos[playerid][pArme2][0];
		    	        dArmes[2] = pPlayerInfos[playerid][pArme3][0];
		    	        dArmes[3] = pPlayerInfos[playerid][pArme4][0];
		    	        if(dArmes[pClicked - 1] == 0)
		    	        {
		    	            SendClientMessageEx(playerid, ROUGE, "You don't have any weapon in this slot!", "Vous n'avez pas d'arme dans ce slot !", "¡No tiene usted arma en esto ubicación!", "Portugais", "Italien", "Sie haben keine Waffe in dieser Slot!");
							pUseInventory[playerid] = 0;
		    	            return 1;
		    	        }
		    	        if(GetRackNextFreeSlot(IsPlayerNearRack(playerid)) != -1)
		    	        {
							switch(pPlayerInfos[playerid][pLangue])
					        {
					            case LANGUAGE_EN: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, GetGunInfo(playerid, pClicked - 1), "Drop\nStore", "Do", "Cancel");
					            case LANGUAGE_FR: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, GetGunInfo(playerid, pClicked - 1), "Poser\nRanger", "Faire", "Annuler");
					            case LANGUAGE_ES: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, GetGunInfo(playerid, pClicked - 1), "Depositar\nGuardar", "Hacer", "Cancelar");
					            case LANGUAGE_PG: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, GetGunInfo(playerid, pClicked - 1), "Portugais", "Portugais", "Portugais");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, GetGunInfo(playerid, pClicked - 1), "Italien", "Italien", "Italien");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, GetGunInfo(playerid, pClicked - 1), "Allemand\nRäumen" , "Machen", "Schlissen");
					        }
		    	        }
		    	        else
		    	        {
							switch(pPlayerInfos[playerid][pLangue])
					        {
					            case LANGUAGE_EN: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, GetGunInfo(playerid, pClicked - 1), "Drop", "Do", "Cancel");
					            case LANGUAGE_FR: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, GetGunInfo(playerid, pClicked - 1), "Poser", "Faire", "Annuler");
					            case LANGUAGE_ES: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, GetGunInfo(playerid, pClicked - 1), "Depositar", "Hacer", "Cancelar");
					            case LANGUAGE_PG: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, GetGunInfo(playerid, pClicked - 1), "Portugais", "Portugais", "Portugais");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, GetGunInfo(playerid, pClicked - 1), "Italien", "Italien", "Italien");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, GetGunInfo(playerid, pClicked - 1), "Allemand" , "Machen", "Schlissen");
					        }
				        }
				        CancelSelectTextDrawEx(playerid);
		    	    }
		    	    case 5 .. 8://Si le mec a double cliqué sur un vêtement
		    	    {
		    	        new dVetements[4];
		    	        dVetements[0] = pPlayerInfos[playerid][pChapeau];
		    	        dVetements[1] = pPlayerInfos[playerid][pLunettes];
		    	        dVetements[2] = pPlayerInfos[playerid][pMasque];
		    	        dVetements[3] = pPlayerInfos[playerid][pTorse];
		    	        if(dVetements[pClicked - 5] == 0)
		    	        {
		    	            SendClientMessageEx(playerid, ROUGE, "You don't have any article of clothing in this slot!", "Vous n'avez pas de vêtement dans ce slot !", "¡No tiene usted ropa en esto ubicación!", "Portugais", "Italien", "Sie haben keine Kleidung in dieser Slot!");
							pUseInventory[playerid] = 0;
							return 1;
		    	        }
						switch(pPlayerInfos[playerid][pLangue])
				        {
				            case LANGUAGE_EN: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Piece of clothing", "Edit position\nDrop", "Do", "Cancel");
				            case LANGUAGE_FR: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Vêtement", "Éditer position\nPoser", "Faire", "Annuler");
				            case LANGUAGE_ES: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Espagnol", "Espagnol", "Hacer", "Cancelar");
				            case LANGUAGE_PG: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Portugais", "Portugais", "Portugais", "Portugais");
							case LANGUAGE_IT: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Italien", "Italien", "Italien", "Italien");
							case LANGUAGE_DE: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Allemand", "Allemand" , "Allemand", "Allemand");
				        }
				        CancelSelectTextDrawEx(playerid);
		    	    }
		    	    case 9 .. 45://Si le mec a double cliqué sur un objet
		    	    {
		    	        if(GetPlayerSlotObject(playerid, pUseInventory[playerid] - 8) == 0)
		    	        {
		    	            SendClientMessageEx(playerid, ROUGE, "You don't have any item in this slot!", "Vous n'avez pas d'objet dans ce slot !", "¡No tiene usted objeto en esto ubicación!", "Portugais", "Italien", "Sie haben keine Objekt in dieser Slot!");
							pUseInventory[playerid] = 0;
							return 1;
		    	        }
		    	        //---
						if(CallRemoteFunction("GetPlayerNearShop", "i", playerid) != -1)
		    	        {
				            new string[128];
							switch(pPlayerInfos[playerid][pLangue])
					        {
					            case LANGUAGE_EN: format(string, sizeof(string), "Use\nDrop\nSell: {FFD700}%.1f g", floatdiv(aObjects[GetPlayerSlotObject(playerid, pUseInventory[playerid] - 8)][dSellPrice], 10)), ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Item", string, "Do", "Cancel");
					            case LANGUAGE_FR: format(string, sizeof(string), "Utiliser\nPoser\nVendre: {FFD700}%.1f g", floatdiv(aObjects[GetPlayerSlotObject(playerid, pUseInventory[playerid] - 8)][dSellPrice], 10)), ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Objet", string, "Faire", "Annuler");
					            case LANGUAGE_ES: format(string, sizeof(string), "Utilizar\nDeponer\nVendre: {FFD700}%.1f g", floatdiv(aObjects[GetPlayerSlotObject(playerid, pUseInventory[playerid] - 8)][dSellPrice], 10)), ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Objeto", string, "Hacer", "Cancelar");
					            case LANGUAGE_PG: format(string, sizeof(string), "Utilizar\nPôr\nVendre: {FFD700}%.1f g", floatdiv(aObjects[GetPlayerSlotObject(playerid, pUseInventory[playerid] - 8)][dSellPrice], 10)), ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Portugais", string, "Portugais", "Portugais");
								case LANGUAGE_IT: format(string, sizeof(string), "Utilizzare\nDepositare\nVendere: {FFD700}%.1f g", floatdiv(aObjects[GetPlayerSlotObject(playerid, pUseInventory[playerid] - 8)][dSellPrice], 10)), ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Italien", string, "Italien", "Italien");
								case LANGUAGE_DE: format(string, sizeof(string), "Benutzen\nLegen\nVerkaufen: {FFD700}%.1f g", floatdiv(aObjects[GetPlayerSlotObject(playerid, pUseInventory[playerid] - 8)][dSellPrice], 10)), ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Allemand", string , "Allemand", "Allemand");
					        }
		    	        }
		    	        else if(CallRemoteFunction("GetPlayerNearAuctionHouse", "i", playerid) != -1)
		    	        {
				            new string[128];
							switch(pPlayerInfos[playerid][pLangue])
					        {
					            case LANGUAGE_EN: format(string, sizeof(string), "Use\nDrop\nSet for sale", floatdiv(aObjects[GetPlayerSlotObject(playerid, pUseInventory[playerid] - 8)][dSellPrice], 10)), ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Item", string, "Do", "Cancel");
					            case LANGUAGE_FR: format(string, sizeof(string), "Utiliser\nPoser\nMettre en vente", floatdiv(aObjects[GetPlayerSlotObject(playerid, pUseInventory[playerid] - 8)][dSellPrice], 10)), ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Objet", string, "Faire", "Annuler");
					            case LANGUAGE_ES: format(string, sizeof(string), "Utilizar\nDeponer\nVendre", floatdiv(aObjects[GetPlayerSlotObject(playerid, pUseInventory[playerid] - 8)][dSellPrice], 10)), ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Objeto", string, "Hacer", "Cancelar");
					            case LANGUAGE_PG: format(string, sizeof(string), "Utilizar\nPôr\nVendre", floatdiv(aObjects[GetPlayerSlotObject(playerid, pUseInventory[playerid] - 8)][dSellPrice], 10)), ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Portugais", string, "Portugais", "Portugais");
								case LANGUAGE_IT: format(string, sizeof(string), "Utilizzare\nDepositare\nVendere", floatdiv(aObjects[GetPlayerSlotObject(playerid, pUseInventory[playerid] - 8)][dSellPrice], 10)), ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Italien", string, "Italien", "Italien");
								case LANGUAGE_DE: format(string, sizeof(string), "Benutzen\nLegen\nVerkaufen", floatdiv(aObjects[GetPlayerSlotObject(playerid, pUseInventory[playerid] - 8)][dSellPrice], 10)), ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Allemand", string , "Allemand", "Allemand");
					        }
		    	        }
		    	        else if(GetPlayerNearEngineer(playerid) != -1)
		    	        {
				            new string[256];
		    	            new sObjects[35];
		    	            new dParts[3][2];
		    	            new bAppart = GetObjectParts(GetPlayerSlotObject(playerid, pUseInventory[playerid] - 8), dParts[0][0], dParts[0][1], dParts[1][0], dParts[1][1], dParts[2][0], dParts[2][1]);
		    	            if(bAppart)
		    	            {
								switch(pPlayerInfos[playerid][pLangue])
						        {
						            case LANGUAGE_EN:
									{
										strcat(string, "Use\nDrop\nTake apart:{CC0000}");
										for(new i = 0; i < 3; i ++) if(dParts[i][0] != 0) format(sObjects, sizeof(sObjects), " - %dx %s", dParts[i][1], aObjects[dParts[i][0]][ObjectEnName]), strcat(string, sObjects);
										ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Item", string, "Do", "Cancel");
									}
						            case LANGUAGE_FR:
									{
										strcat(string, "Utiliser\nDéposer\nDémonter:{CC0000}");
										for(new i = 0; i < 3; i ++) if(dParts[i][0] != 0) format(sObjects, sizeof(sObjects), " - %dx %s", dParts[i][1], aObjects[dParts[i][0]][ObjectFrName]), strcat(string, sObjects);
										ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Objet", string, "Faire", "Annuler");
									}
						            case LANGUAGE_ES:
									{
										strcat(string, "Utilizar\nDeponer\nEspagnol:{CC0000}");
										for(new i = 0; i < 3; i ++) if(dParts[i][0] != 0) format(sObjects, sizeof(sObjects), " - %dx %s", dParts[i][1], aObjects[dParts[i][0]][ObjectEsName]), strcat(string, sObjects);
										ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Objeto", string, "Hacer", "Cancelar");
									}
						            case LANGUAGE_PG:
									{
										strcat(string, "Utilizar\nPôr\nPortugais:{CC0000}");
										for(new i = 0; i < 3; i ++) if(dParts[i][0] != 0) format(sObjects, sizeof(sObjects), " - %dx %s", dParts[i][1], aObjects[dParts[i][0]][ObjectPgName]), strcat(string, sObjects);
										ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Portugais", string, "Portugais", "Portugais");
									}
									case LANGUAGE_IT:
									{
										strcat(string, "Utilizzare\nDepositare\nItalien:{CC0000}");
										for(new i = 0; i < 3; i ++) if(dParts[i][0] != 0) format(sObjects, sizeof(sObjects), " - %dx %s", dParts[i][1], aObjects[dParts[i][0]][ObjectItName]), strcat(string, sObjects);
										ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Italien", string, "Italien", "Italien");
									}
									case LANGUAGE_DE:
									{
										strcat(string, "Benutzen\nLegen\nAllemand:{CC0000}");
										for(new i = 0; i < 3; i ++) if(dParts[i][0] != 0) format(sObjects, sizeof(sObjects), " - %dx %s", dParts[i][1], aObjects[dParts[i][0]][ObjectDeName]), strcat(string, sObjects);
										ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Objekte", string, "Allemand", "Allemand");
									}
						        }
							}
							else
							{
								switch(pPlayerInfos[playerid][pLangue])
						        {
						            case LANGUAGE_EN: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Item", "Use\nDrop", "Do", "Cancel");
						            case LANGUAGE_FR: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Objet", "Utiliser\nPoser", "Faire", "Annuler");
						            case LANGUAGE_ES: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Objeto", "Utilizar\nDeponer", "Hacer", "Cancelar");
						            case LANGUAGE_PG: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Portugais", "Utilizar\nPôr", "Portugais", "Portugais");
									case LANGUAGE_IT: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Italien", "Utilizzare\nDepositare", "Italien", "Italien");
									case LANGUAGE_DE: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Allemand", "Benutzen\nLegen" , "Allemand", "Allemand");
						        }
							}
		    	        }
		    	        else if(aObjects[GetPlayerSlotObject(playerid, pUseInventory[playerid] - 8)][dObjectType] ==  TYPE_FOOD && IsPlayerNearFridge(playerid) != -1)
		    	        {
							switch(pPlayerInfos[playerid][pLangue])
		     				{
						    	case LANGUAGE_EN: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Item", "Use\nDrop\nStore", "Do", "Cancel");
					           	case LANGUAGE_FR: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Objet", "Utiliser\nPoser\nStocker", "Faire", "Annuler");
					           	case LANGUAGE_ES: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Objeto", "Utilizar\nDeponer\nEspagnol", "Hacer", "Cancelar");
					           	case LANGUAGE_PG: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Portugais", "Utilizar\nPôr\nPortugais", "Portugais", "Portugais");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Italien", "Utilizzare\nDepositare\nItalien", "Italien", "Italien");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Allemand", "Benutzen\nLegen\nRäumen" , "Allemand", "Allemand");
				    		}
		    	        }
				        else
				        {
							switch(pPlayerInfos[playerid][pLangue])
		     				{
						    	case LANGUAGE_EN: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Item", "Use\nDrop", "Do", "Cancel");
					           	case LANGUAGE_FR: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Objet", "Utiliser\nPoser", "Faire", "Annuler");
					           	case LANGUAGE_ES: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Objeto", "Utilizar\nDeponer", "Hacer", "Cancelar");
					           	case LANGUAGE_PG: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Portugais", "Utilizar\nPôr", "Portugais", "Portugais");
								case LANGUAGE_IT: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Italien", "Utilizzare\nDepositare", "Italien", "Italien");
								case LANGUAGE_DE: ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Allemand", "Benutzen\nLegen" , "Allemand", "Allemand");
				    		}
				        }
				        CancelSelectTextDrawEx(playerid);
		    	    }
		    	    case 46 .. 51://Si le mec double clique sur un objet dans le coffre d'une voiture, on fait en sorte qu'il ne se passe rien
		    	    {
		    	        SendClientMessageEx(playerid, ROUGE, "Take this out of the trunk to use it!", "Sortez cet objet du coffre pour l'utiliser !", "Espagnol", "Portugais", "Italien", "Allemand");
		    	        return 1;
		    	    }
		    	    case 52 .. 63://Si le mec double clique sur un objet dans un coffre fort, on fait en sorte qu'il ne se passe rien
		    	    {
		    	        SendClientMessageEx(playerid, ROUGE, "Take this out of the safe to use it!", "Sortez cet objet du coffre pour l'utiliser !", "Espagnol", "Portugais", "Italien", "Allemand");
		    	        return 1;
		    	    }
		    	}
			}
			else
			{
		    	switch(pClicked)
		    	{
		    	    case 1 .. 8: pUseInventory[playerid] = pClicked;//Si le mec a double cliqué sur une arme ou un vêtement, on de contente se la sélectionner
		    	    case 9 .. 63:
		    	    {
		    	        if(63 >= pUseInventory[playerid] >= 9)//Si le dernier truc sur lequel le mec a cliqué c'est un autre objet, on les interverti de place
		    	        {
					    	if(SwapPlayerObjects(playerid, pUseInventory[playerid] - 8, pClicked - 8) == 0)
					    	{
					    	    SendClientMessageEx(playerid, ROUGE, "You can't put such a heavy item in your backpack!", "Vous ne pouvez pas mettre un objet si lourd dans votre sac !", "¡No puede usted poner un tan pesado objetto en su mochilla!", "Portugais", "Italien", "Allemand");
					    	}
							pUseInventory[playerid] = 0;
		    	        }
		    	        else//Sinon, on le sélectionne
		    	        {
  							pUseInventory[playerid] = pClicked;
		    	        }
		    	    }
				}
			}
		}
		//---
		if(playertextid == tGroupText[playerid])
		{
			switch(pPlayerInfos[playerid][pLangue])
			{
		    	case LANGUAGE_EN: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Team", "Set name\nSet leader\nRecruit\nExclude\nDissolve\nLeave", "Do", "Cancel");
	           	case LANGUAGE_FR: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Groupe", "Changer nom\nMettre chef\nRecruter\nExclure\nDissoudre\nQuitter", "Faire", "Annuler");
	           	case LANGUAGE_ES: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Espagnol", "Espagnol", "Hacer", "Cancelar");
	           	case LANGUAGE_PG: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Portugais", "Portugais", "Portugais", "Portugais");
				case LANGUAGE_IT: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Italien", "Italien", "Italien", "Italien");
				case LANGUAGE_DE: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Allemand", "Allemand" , "Allemand", "Allemand");
    		}
    		CancelSelectTextDraw(playerid);
		}
	}
	return 1;
}

public OnPlayerGroupKillMob(playerid, mobtype)
{
    if(pGroup[playerid] != -1)
	{
		for(new i = 0; i < MAX_GROUP_SIZE; i ++)
		{
		    if(dGroup[pGroup[playerid]][dMembers][i] != INVALID_PLAYER_ID)
		    {
				CallRemoteFunction("OnPlayerKillsMob", "ii", dGroup[pGroup[playerid]][dMembers][i], mobtype);
				if(mobtype >= MOB_BAMBIKING) pPlayerInfos[dGroup[pGroup[playerid]][dMembers][i]][pBosses] ++;
		    }
		}
    }
    else
    {
		CallRemoteFunction("OnPlayerKillsMob", "ii", playerid, mobtype);
		if(mobtype >= MOB_BAMBIKING) pPlayerInfos[playerid][pBosses] ++;
    }
    //---
    switch(mobtype)
    {
		case MOB_BAMBIKING: LogInfo(true, "[JOUEUR]%s tue le roi des bambis.", GetName(playerid));
		case MOB_JASON: LogInfo(true, "[JOUEUR]%s tue Jason.", GetName(playerid));
		case MOB_SANCHEZ: LogInfo(true, "[JOUEUR]%s tue le colonel Sanchez.", GetName(playerid));
		case MOB_DEATH: LogInfo(true, "[JOUEUR]%s tue la mort.", GetName(playerid));
		case MOB_UFO: LogInfo(true, "[JOUEUR]%s tue un ovni.", GetName(playerid));
		case MOB_BLOPT: LogInfo(true, "[JOUEUR]%s tue un blopt.", GetName(playerid));
		case MOB_ZOMBIE: LogInfo(true, "[JOUEUR]%s tue un zombie.", GetName(playerid));
		case MOB_CACTUS: LogInfo(true, "[JOUEUR]%s tue un cactus", GetName(playerid));
		case MOB_TMNT: LogInfo(true, "[JOUEUR]%s tue une tortue ninja.", GetName(playerid));
		case MOB_JOHN: LogInfo(true, "[JOUEUR]%s tue un humain.", GetName(playerid));
		case MOB_ZAPPER: LogInfo(true, "[JOUEUR]%s tue le zapper.", GetName(playerid));
		case MOB_BAMBI: LogInfo(true, "[JOUEUR]%s tue un bambi.", GetName(playerid));
    }
    if(mobtype == MOB_ZOMBIE) pPlayerInfos[playerid][pZombies] ++;
	return 1;
}

public OnPlayerShootDynamicObject(playerid, weaponid, objectid, Float:x, Float:y, Float:z)
{
	if(objectid == INVALID_OBJECT_ID) return 1;
	if(objectid == dBambiKing[oBambiKing])
	{
		if(weaponid == 25 || weaponid == 26 || weaponid == 27)
		{
			dBambiKing[dBambiKingHealth] -= GetWeaponDamage(weaponid);
		    if(dBambiKing[dBambiKingHealth] <= 0)
		    {
  				OnPlayerGroupKillMob(playerid, MOB_BAMBIKING);
		        new string[128];
				format(string, sizeof(string), "%s killed the ~r~king of the bambis !", GetName(playerid));
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_EN) ShowPlayerTextInfo(i, 5000, string, string, string, string, string, string);
				format(string, sizeof(string), "%s a tué ~r~le roi des bambis !", GetName(playerid));
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_FR) ShowPlayerTextInfo(i, 5000, string, string, string, string, string, string);
				format(string, sizeof(string), "%s", GetName(playerid));
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_ES) ShowPlayerTextInfo(i, 5000, string, string, string, string, string, string);
				format(string, sizeof(string), "%s", GetName(playerid));
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_PG) ShowPlayerTextInfo(i, 5000, string, string, string, string, string, string);
				format(string, sizeof(string), "%s", GetName(playerid));
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_IT) ShowPlayerTextInfo(i, 5000, string, string, string, string, string, string);
				format(string, sizeof(string), "%s", GetName(playerid));
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_DE) ShowPlayerTextInfo(i, 5000, string, string, string, string, string, string);
    			ShowPlayerTextInfo(playerid, 5000, "~g~Congratulations!~n~You killed the king of the bambis!", "~g~Félicitations !~n~Vous avez tué le roi des bambis !", "Espagnol", "Portugais", "Italien", "Allemand");
				//---
				new Float:x1, Float:y1, Float:z1, Float:rx, Float:ry, Float:rz, Float:x2, Float:y2, Float:z2;
				GetDynamicObjectPos(dBambiKing[oBambiKing], x1, y1, z1);
				GetDynamicObjectRot(dBambiKing[oBambiKing], rx, ry, rz);
				GivePlayerExp(playerid, 75);
				//---LOOT
				//VIANDE
				for(new i = 0; i < 20; i ++)
				{
					x2 = x1 + float(RandomEx(-7, 7));
     				y2 = y1 + float(RandomEx(-7, 7));
					FindZPathCoord(x1, y1, z1, x2, y2, z2);
		        	CreateItem(68, x2, y2, z2 + 1.0, false, -1);
				}
				if(Success(50))
				{
					x2 = x1 + float(RandomEx(-7, 7));
	 				y2 = y1 + float(RandomEx(-7, 7));
					FindZPathCoord(x1, y1, z1, x2, y2, z2);
		        	CreateItem(143, x2, y2, z2 + 1.0, false, -1);
	        	}
				//BOITE
				x2 = x1 + float(RandomEx(-7, 7));
    			y2 = y1 + float(RandomEx(-7, 7));
				FindZPathCoord(x1, y1, z1, x2, y2, z2);
		        CreateItem(146, x2, y2, z2 + 1.0, false, -1);
				//---
				DestroyDynamicObject(dBambiKing[oBambiKing]);
    			dBambiKing[oBambiKing] = INVALID_OBJECT_ID;
				//---
				CreateBloodSplat(x1, y1, z1);
				new oBambiKingCadaver = CreateObject(16442, x1, y1, z1, rx, ry, rz);
				for(new i = 0; i < 30; i ++) SetObjectMaterial(oBambiKingCadaver, i, 11631, "mp_ranchcut", "mpCJ_Deer1", 0xFFFFFFFF);
				MoveObject(oBambiKingCadaver, x1, y1, z1 - 1.521, 1.0, 90.0, 45.0, rz);
  				SetTimerEx("DestroyObjectEx", 30000, false, "ii", oBambiKingCadaver, false);
		 	}
			else
			{
			    UpdateHealthBar(playerid, dBambiKing[dBambiKingHealth], 38000, "King of Bambis", "Roi des bambis", "Rei de los Bambis", "Portugais", "Italien", "Allemand");
			}
		}
		else
		{
    		ShowPlayerTextInfo(playerid, 3000, "~r~Only shotguns can drill through~n~the thick skin of the~n~king of bambis!", "~r~Seuls les fusils à pompe peuvent~n~percer le pelage épais du roi~n~des bambis !", "Espagnol", "Portugais", "Italien", "Allemand");
		}
  	}
  	else if(objectid == oZapper)
  	{
		static dZapperHealth = 5000;
	    new dAmount = GetWeaponDamage(weaponid);
	    dZapperHealth -= dAmount;
		UpdateHealthBar(playerid, dZapperHealth, 5000, "Zapper", "Zapper", "Zapper", "Zapper", "Zapper", "Zapper");
	    if(dZapperHealth <= 0)
	    {
			GivePlayerExp(playerid, 15);
			OnPlayerGroupKillMob(playerid, MOB_ZAPPER);
	        DestroyDynamicObject(oZapper);
	        oZapper = INVALID_OBJECT_ID;
			CreateExplosionEx(INVALID_PLAYER_ID, 213.5, 1865.5, 11.7, EXPLOSION_SMALL, 8.0);
	    	dZapperHealth = 5000;
	    }
  	}
	for(new bambi = 0; bambi < MAX_BAMBIS; bambi ++)
	{
		if(dBambi[bambi][oBambi] == objectid && !dBambi[bambi][bBambiDead])
		{
  			UpdateHealthBar(playerid, 0, 1, "Bambi", "Bambi", "Bambi", "Bambi", "Bambi", "Bambi");
			GivePlayerExp(playerid, 1);
			if(IsDynamicObjectMoving(dBambi[bambi][oBambi])) StopDynamicObject(dBambi[bambi][oBambi]);
   			dBambi[bambi][bBambiDead] = true;
   			new Float:fPosX, Float:fPosY, Float:fPosZ;
 			new Float:rx, Float:ry, Float:rz;
			GetDynamicObjectPos(dBambi[bambi][oBambi], fPosX, fPosY, fPosZ);
 			CA_RayCastLineAngle(fPosX, fPosY, fPosZ, fPosX, fPosY, fPosZ - 50.0, fPosX, fPosY, fPosZ, rx, ry, rz);
 			MoveDynamicObject(dBambi[bambi][oBambi], fPosX, fPosY, fPosZ, 1.5, ry + 90.0, rx + 90.0, rz + 90.0);
			SetDynamicObjectMaterial(dBambi[bambi][oBambi], 0, 2905, "dead_mantxd", "billyblood", 0xFFFFFF77);
			CreateBloodSplat(fPosX, fPosY, fPosZ);
			//---
			OnPlayerGroupKillMob(playerid, MOB_BAMBI);
			return 1;
		}
	}
	for(new i = 0; i < MAX_BOMBS; i ++)
	{
	    if(dBomb[i][oBomb] == objectid)
	    {
			ExplodeBomb(i);
			return 1;
	    }
	}
	return 1;
}

public OnObjectMoved(objectid)
{
	new playerid = -1;
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i ++)
	{
	    if(pThrown[i][0] == objectid) playerid = i;
	}
	if(playerid != -1)
	{
		if(objectid == pThrown[playerid][0])
		{
		    if(pThrown[playerid][2] == 1)
		    {
		        MoveObject(pThrown[playerid][0], fThrown[playerid][0], fThrown[playerid][1], fThrown[playerid][2], 20.00);
		        pThrown[playerid][2] = 2;
		    }
		    else if(pThrown[playerid][2] == 2)
		    {
		        OnProjectileExplode(playerid, fThrown[playerid][0], fThrown[playerid][1], fThrown[playerid][2], pThrown[playerid][1]);
		        pThrown[playerid][2] = 0;
		        DestroyObject(pThrown[playerid][0]);
				pThrown[playerid][0] = INVALID_OBJECT_ID;
		    }
		}
	}
	for(new i = 0; i < 10; i ++)
	{
	    if(objectid == oThrowKnife[i])
		{
		    if(dThrowKnife[i] == 1)
		    {
		        MoveObject(oThrowKnife[i], fLandKnife[i][0], fLandKnife[i][1], fLandKnife[i][2], 10.0);
		        dThrowKnife[i] = 2;
		    }
			else if(dThrowKnife[i] == 2)
			{
				CreateWeapon(4, 1, fLandKnife[i][0], fLandKnife[i][1], fLandKnife[i][2] + 1.0, -1);
				DestroyObject(oThrowKnife[i]);
			    oThrowKnife[i] = INVALID_OBJECT_ID;
			    dThrowKnife[i] = 0;
			    fLandKnife[i][0] = 0.0;
			    fLandKnife[i][1] = 0.0;
			    fLandKnife[i][2] = 0.0;
			}
		}
	}
    return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	if(!FCNPC_IsValid(playerid))
	{
		if(areaid == dStreamMobs[dBambiZone][0]) dStreamMobs[dBambiStream][0] ++;
		if(areaid == dStreamMobs[dBambiZone][1]) dStreamMobs[dBambiStream][1] ++;
		if(areaid == dStreamMobs[dBambiZone][2]) dStreamMobs[dBambiStream][2] ++;
		if(areaid == dStreamMobs[dBambiZone][3]) dStreamMobs[dBambiStream][3] ++;
		if(areaid == dStreamMobs[dBloptZone]) dStreamMobs[dBloptStream] ++;
		if(areaid == dStreamMobs[dUFOZone]) dStreamMobs[dUFOStream] ++;
		if(areaid == dStreamMobs[dCactusZone]) dStreamMobs[dCactusStream] ++;
		if(areaid == dStreamMobs[dTMNTZone]) dStreamMobs[dTMNTStream] ++;
		if(areaid == dStreamMobs[dZapperZone]) dStreamMobs[dZapperStream] ++;
	}
	//---
	if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
	{
		for(new i = 0; i < MAX_BOMBS; i++)
		{
			if(dBomb[i][dBombType] == 1 && dBomb[i][vBombID] == 0 && areaid == dBomb[i][aBombArea])
			{
				if(dBomb[i][dBombTime] == 0)
				{
     				MoveDynamicObject(dBomb[i][oBomb], dBomb[i][xBomb], dBomb[i][yBomb], dBomb[i][zBomb] + 1.5, 5.0);
				    SetTimerEx("ExplodeBomb", 400, false, "i", i);
		        }
				break;
			}
		}
	}
	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	if(!FCNPC_IsValid(playerid))
	{
		if(areaid == dStreamMobs[dBambiZone][0]) if(-- dStreamMobs[dBambiStream][0] < 0) dStreamMobs[dBambiStream][0] = 0;
		if(areaid == dStreamMobs[dBambiZone][1]) if(-- dStreamMobs[dBambiStream][1] < 0) dStreamMobs[dBambiStream][1] = 0;
		if(areaid == dStreamMobs[dBambiZone][2]) if(-- dStreamMobs[dBambiStream][2] < 0) dStreamMobs[dBambiStream][2] = 0;
		if(areaid == dStreamMobs[dBambiZone][3]) if(-- dStreamMobs[dBambiStream][3] < 0) dStreamMobs[dBambiStream][3] = 0;
		if(areaid == dStreamMobs[dBloptZone]) if(-- dStreamMobs[dBloptStream] < 0) dStreamMobs[dBloptStream] = 0;
		if(areaid == dStreamMobs[dUFOZone]) if(-- dStreamMobs[dUFOStream] < 0) dStreamMobs[dUFOStream] = 0;
		if(areaid == dStreamMobs[dCactusZone]) if(-- dStreamMobs[dCactusStream] < 0) dStreamMobs[dCactusStream] = 0;
		if(areaid == dStreamMobs[dTMNTZone]) if(-- dStreamMobs[dTMNTStream] < 0) dStreamMobs[dTMNTStream] = 0;
		if(areaid == dStreamMobs[dZapperZone]) if(-- dStreamMobs[dZapperStream] < 0) dStreamMobs[dZapperStream] = 0;
	}
	return 1;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
    /*if(HasPlayerWeapon(playerid, weaponid) == 0)
    {
	//if(IsWeaponFirearm(weaponid) && HasPlayerWeapon(playerid, weaponid) == 0) ANTICHEAT
		OnAntiCheatStrikes();
        aBan(INVALID_PLAYER_ID, playerid, 14, "Weapon hack");
	}*/
	//---
	if(hittype != BULLET_HIT_TYPE_NONE)
	{
		if(!( -1000.0 <= fX <= 1000.0 ) || !( -1000.0 <= fY <= 1000.0 ) || !( -1000.0 <= fZ <= 1000.0 )) // a valid offset, it's impossible that a offset bigger than 1000 is legit (also less than -1000.0 is impossible, not used by this hack, but still, let's check for it, just for the future, who knows what hacks will appear). The object with biggest offset is having ~700-800 radius.
		{
        	//suspect[playerid] ++;
         	//if(suspect[playerid] == 10) aBan(INVALID_PLAYER_ID, playerid, "Tentative de crash des joueurs");
			return 0;
		}
	}
	//---
	switch(HasPlayerWeapon(playerid, weaponid))
	{
	    case 1:
	    {
	        pPlayerInfos[playerid][pArme1][1] --;
	        if(pPlayerInfos[playerid][pArme1][1] == 0)
	        {
	            pPlayerInfos[playerid][pArme1][0] = 0;
	            if(GetPlayerWeaponSkill(playerid, 1) == WEAPON_AKIMBO)
	            {
					PlayerDropObject(playerid, GetObjectFromWeapon(weaponid), floatdiv(RandomEx(5, 20), 10));
					PlayerDropObject(playerid, GetObjectFromWeapon(weaponid), floatdiv(RandomEx(5, 20), 10));
	            }
	            else
	            {
					PlayerDropObject(playerid, GetObjectFromWeapon(weaponid), floatdiv(RandomEx(5, 20), 10));
				}
	            pPlayerInfos[playerid][pArme1][2] = 0;
	        }
	    }
	    case 2:
	    {
	        pPlayerInfos[playerid][pArme2][1] --;
	        if(pPlayerInfos[playerid][pArme2][1] == 0)
	        {
	            pPlayerInfos[playerid][pArme2][0] = 0;
	            if(GetPlayerWeaponSkill(playerid, 2) == WEAPON_AKIMBO)
	            {
					PlayerDropObject(playerid, GetObjectFromWeapon(weaponid), floatdiv(RandomEx(5, 20), 10));
					PlayerDropObject(playerid, GetObjectFromWeapon(weaponid), floatdiv(RandomEx(5, 20), 10));
	            }
	            else
	            {
					PlayerDropObject(playerid, GetObjectFromWeapon(weaponid), floatdiv(RandomEx(5, 20), 10));
				}
	            pPlayerInfos[playerid][pArme2][2] = 0;
	        }
	    }
	    case 3:
	    {
	        pPlayerInfos[playerid][pArme3][1] --;
	        if(pPlayerInfos[playerid][pArme3][1] == 0)
	        {
	            pPlayerInfos[playerid][pArme3][0] = 0;
	            if(GetPlayerWeaponSkill(playerid, 3) == WEAPON_AKIMBO)
	            {
					PlayerDropObject(playerid, GetObjectFromWeapon(weaponid), floatdiv(RandomEx(5, 20), 10));
					PlayerDropObject(playerid, GetObjectFromWeapon(weaponid), floatdiv(RandomEx(5, 20), 10));
	            }
	            else
	            {
					PlayerDropObject(playerid, GetObjectFromWeapon(weaponid), floatdiv(RandomEx(5, 20), 10));
				}
	            pPlayerInfos[playerid][pArme3][2] = 0;
	        }
	    }
	    case 4:
	    {
	        pPlayerInfos[playerid][pArme4][1] --;
	        if(pPlayerInfos[playerid][pArme4][1] == 0)
	        {
	            pPlayerInfos[playerid][pArme4][0] = 0;
	            if(GetPlayerWeaponSkill(playerid, 4) == WEAPON_AKIMBO)
	            {
					PlayerDropObject(playerid, GetObjectFromWeapon(weaponid), floatdiv(RandomEx(5, 20), 10));
					PlayerDropObject(playerid, GetObjectFromWeapon(weaponid), floatdiv(RandomEx(5, 20), 10));
	            }
	            else
	            {
					PlayerDropObject(playerid, GetObjectFromWeapon(weaponid), floatdiv(RandomEx(5, 20), 10));
				}
	            pPlayerInfos[playerid][pArme4][2] = 0;
	        }
	    }
	}
	//---ATTRACTION DES ZOMBIES PAR LE BRUIT
	if(GetPlayerWeapon(playerid) >= 22 && GetPlayerWeapon(playerid) <= 38)
	{
		static pLastShoot[MAX_PLAYERS] = {0, ...};
		if(gettime() - pLastShoot[playerid] > 3)
		{
			new Float:x, Float:y, Float:z, Float:dist;
			GetPlayerPos(playerid, x, y, z);
			pLastShoot[playerid] = gettime();
			switch(weaponid)
			{
			    case 22: dist = 160.0;//Pistolet
			    case 23: dist = 70.0;//Silencieux
			    case 24: dist = 200.0;//Deagle
			    case 25: dist = 400.0;//Fusil à pompe
			    case 26: dist = 400.0;//Sawn off
			    case 27: dist = 400.0;//Spas 12
			    case 28: dist = 300.0;//UZI
			    case 29: dist = 300.0;//MP5
			    case 32: dist = 300.0;//TEC9
			    case 30: dist = 700.0;//AK47
			    case 31: dist = 700.0;//M4
			    case 33: dist = 200.0;//Fusil de chasse
			    case 34: dist = 100.0;//Sniper
			    case 38: dist = 800.0;//Minigun
			    default: dist = 0.0;
			}
			/*for(new i = 0; i < MAX_ZOMBIES; i ++)
			{
			    if(GetDistanceBetweenPlayers(playerid, dZombie[i][dZombieID]) < dist)
			    {
			        dZombie[i][fZombieGunShot][0] = x;
			        dZombie[i][fZombieGunShot][1] = y;
			        dZombie[i][fZombieGunShot][2] = z;
			        dZombie[i][dZombieGunShot] = floatround(floatdiv(dist * 2, 12), floatround_ceil);
			    }
			}*/
			fDetectRange[playerid][0] = dist;
			fDetectRange[playerid][1] = dist;
			if(dResetTimer[playerid] != -1) KillTimer(dResetTimer[playerid]);
			dResetTimer[playerid] = SetTimerEx("ResetDetectRange", 15000, false, "i", playerid);
		}
	}
	if(hittype == BULLET_HIT_TYPE_OBJECT)
	{
	    if(dBossUFO[dBossState] == 3)
	    {
			if(hitid == dBossUFO[oVaisseau])
		    {
				switch(weaponid)
				{
				   	case 22, 23, 28, 32 : dBossUFO[dLife] -= 20;//Pistolet, Silencieux, UZI & Tec-9
					case 24, 25, 26, 27, 33, 34 : dBossUFO[dLife] -= 100;//Desert Eagle, Shotgun, Sawn Off, Spas-12, Fusil de Chasse & Sniper
					case 29, 30, 31 : dBossUFO[dLife] -= 40;//MP5, AK-47 & M4
					case 38 : dBossUFO[dLife] -= 4;//Minigun
				}
				//---
			    UpdateHealthBar(playerid, dBossUFO[dLife], 20000, "Col. Sanchez", "Col. Sanchez", "Col. Sanchez", "Col. Sanchez", "Col. Sanchez", "Col. Sanchez");
				//---
				if(dBossUFO[dLife] <= 0)
				{
					new Float:x, Float:y, Float:z;
					GetObjectPos(dBossUFO[oVaisseau], x, y, z);
					CreateExplosionEx(INVALID_PLAYER_ID, x, y, z, 6, 0.0);
					SetBossUFOState(0);
					SetBoss(3, false);
					//---
					GivePlayerExp(playerid, 200);
					OnPlayerGroupKillMob(playerid, MOB_SANCHEZ);
		        	CreateItem(146, 221.091, 1883.369, 3618.5759, false, -1);
					//---
					for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
					{
					    if(IsPlayerInRangeOfPoint(i, 75.0, 221.091, 1883.369, 3617.5759))
					    {
    						ShowPlayerTextInfo(i, 10000, "You killed Col. Sanchez.~n~You'll be evacuated in 25 seconds.", "Vous avez tué le Col. Sanchez.~n~Vous serez évacué dans 25 secondes.", "Espagnol", "Portugais", "Italien", "Allemand");
				        }
					}
					SetTimer("ClearOutMothership", 25000, false);
				}
		    }
	    }
		else if(dBossUFO[dBossState] == 2)
		{
			if(hitid == dBossUFO[oBras2][0])
			{
				dBossUFO[dLifeBras][0] -= GetWeaponDamage(weaponid);
				if(dBossUFO[dLifeBras][0] <= 0)
				{
					SetBossUFOArmState(0, true);
    				ShowPlayerTextInfo(playerid, 3000, "~r~1st arm disabled.", "~r~1er bras désactivé.", "Espagnol", "Portugais", "Italien", "Allemand");
				}
				else
				{
			    	UpdateHealthBar(playerid, dBossUFO[dLifeBras][0], 15000, "Arm 1", "Bras 1", "Espagnol", "Portugais", "Italien", "Allemand");
				}
			}
			else if(hitid == dBossUFO[oBras2][1])
			{
				dBossUFO[dLifeBras][1] -= GetWeaponDamage(weaponid);
				if(dBossUFO[dLifeBras][1] <= 0)
				{
					SetBossUFOArmState(1, true);
    				ShowPlayerTextInfo(playerid, 3000, "~r~2nd arm disabled.", "~r~2ème bras désactivé.", "Espagnol", "Portugais", "Italien", "Allemand");
				}
				else
				{
			    	UpdateHealthBar(playerid, dBossUFO[dLifeBras][1], 15000, "Arm 2", "Bras 2", "Espagnol", "Portugais", "Italien", "Allemand");
				}
			}
			else if(hitid == dBossUFO[oBras2][2])
			{
				dBossUFO[dLifeBras][2] -= GetWeaponDamage(weaponid);
				if(dBossUFO[dLifeBras][2] <= 0)
				{
					SetBossUFOArmState(2, true);
    				ShowPlayerTextInfo(playerid, 3000, "~r~3rd arm disabled.", "~r~3ème bras désactivé.", "Espagnol", "Portugais", "Italien", "Allemand");
				}
				else
				{
			    	UpdateHealthBar(playerid, dBossUFO[dLifeBras][2], 15000, "Arm 3", "Bras 3", "Espagnol", "Portugais", "Italien", "Allemand");
				}
			}
			else if(hitid == dBossUFO[oBras2][3])
			{
				dBossUFO[dLifeBras][3] -= GetWeaponDamage(weaponid);
				if(dBossUFO[dLifeBras][3] <= 0)
				{
					SetBossUFOArmState(3, true);
    				ShowPlayerTextInfo(playerid, 3000, "~r~4th arm disabled.", "~r~4ème bras désactivé.", "Espagnol", "Portugais", "Italien", "Allemand");
				}
				else
				{
			    	UpdateHealthBar(playerid, dBossUFO[dLifeBras][3], 15000, "Arm 4", "Bras 4", "Espagnol", "Portugais", "Italien", "Allemand");
				}
			}
		}
		//---UFO
		static dUFOLife[MAX_UFOS] = {800, ...};
		for(new i = 0; i < MAX_UFOS; i ++)
		{
		    if(hitid == oUFO[i])
		    {
		        new dAmount = GetWeaponDamage(weaponid);
		        dUFOLife[i] -= dAmount;
		    	UpdateHealthBar(playerid, dUFOLife[i], 800, "UFO", "OVNI", "UFO", "UFO", "UFO", "UFO");
		        if(dUFOLife[i] <= 0)
		        {
		            StopObject(hitid);
					new Float:x2, Float:y2, Float:z2;
					GetObjectPos(hitid, x2, y2, z2);
		            DestroyObject(hitid);
		            oUFO[i] = INVALID_OBJECT_ID;
					new oCrashUFO = CreateObject(18846, x2, y2, z2, 0.0, 0.0, float(RandomEx(0, 360)), 200.0);
					CreateExplosionEx(INVALID_PLAYER_ID, x2, y2, z2, 0, 10.0);
					CA_FindZ_For2DCoord(x2, y2, z2);
					MoveObject(oCrashUFO, x2, y2, z2, 30.0, 55.0, 0.0, float(RandomEx(0, 360)));
	                SetTimerEx("DestroyObjectEx", 15000, false, "ii", oCrashUFO, false);
	                OnPlayerShootUFO(playerid, i);
		        	dUFOLife[i] = 800;
		        }
	        	break;
		    }
		}
		//---BLOPT
		for(new i = 0; i < MAX_BLOPTS; i ++)
		{
		    if(dBlopt[i][bBloptLive] && hitid == dBlopt[i][oBlopt])
		    {
		    	UpdateHealthBar(playerid, 0, 180, "Blopt", "Blopt", "Blopt", "Blopt", "Blopt", "Blopt");
		        StopObject(hitid);
				OnPlayerKillsBlopt(playerid, i);
	        	break;
		    }
		}
		//---TMNT
		static dTMNTLife[MAX_TMNT] = {400, ...};
		for(new i = 0; i < MAX_TMNT; i ++)
		{
		    if(dTMNT[i][bTMNTLive] && hitid == dTMNT[i][oTMNTAttach])
		    {
		        new dAmount = GetWeaponDamage(weaponid);
		        dTMNTLife[i] -= dAmount;
		    	UpdateHealthBar(playerid, dTMNTLife[i], 400, "Ninja Turtle", "Tortue Ninja", "Espagnol", "Portugais", "Italien", "Allemand");
		        if(dTMNTLife[i] <= 0)
		        {
		        	StopObject(dTMNT[i][oTMNT]);
					OnPlayerKillsTMNT(playerid, i);
		        	dTMNTLife[i] = 400;
		        }
	        	break;
		    }
		}
		//---CACTUS
		for(new i = 0; i < MAX_CACTUS; i ++)
		{
		    if(dCactus[i][dCactusHealth] > 0 && hitid == dCactus[i][oCactus])
		    {
		        new dAmount = GetWeaponDamage(weaponid);
		        dCactus[i][dCactusHealth] -= dAmount;
	    		UpdateHealthBar(playerid, dCactus[i][dCactusHealth], 1800, "Cakturn", "Cakturn", "Cakturn", "Cakturn", "Cakturn", "Cakturn");
		        if(dCactus[i][dCactusHealth] <= 0)
		        {
					OnPlayerKillsCakturn(playerid, i);
				}
	        	break;
		    }
		}
	}
	return 1;
}

public GetWeaponDamage(weaponid)
{
	switch(weaponid)
	{
		case 0: return 0;//Main
		case 1: return 0;//Poing américain
		case 2: return 0;//Club de golf
		case 3: return 0;//Matraque
		case 4: return 0;//Couteau
		case 5: return 0;//Batte
		case 6: return 0;//Pelle
		case 7: return 0;//Queue de billard
		case 8: return 0;//Katana
		case 9: return 0;//Tronçonneuse
		case 10: return 0;//Gode violet
		case 11: return 0;//Gode blanc
		case 12: return 0;//Vibrator blanc
		case 13: return 0;//Gode argenté
		case 14: return 0;//Fleurs
		case 15: return 0;//Cane
		case 16: return 0;//Grenade
		case 17: return 0;//Lacrymo
		case 18: return 0;//Molotov
		case 22: return 150;//Pistolet
		case 23: return 150;//Silencieux
		case 24: return 460;//Desert Eagle
		case 25: return 380;//Shotgun
		case 26: return 385;//Sawn off
		case 27: return 470;//Spas 12
		case 28: return 180;//UZI
		case 29: return 250;//MP-5
		case 30: return 330;//AK-47
		case 31: return 400;//M4
		case 32: return 165;//TEC-9
		case 33: return 360;//Fusil de chasse
		case 34: return 440;//Sniper
		case 35: return 0;//RPG
		case 36: return 0;//Heat Seeker
		case 37: return 0;//Flamethrower
		case 38: return 150;//Minigun
		case 39: return 0;//Satchel
		case 40: return 0;//Détonateur
		case 41: return 0;//Bombe de peinture
		case 42: return 0;//Extincteur
		case 43: return 0;//Appareil photo
		case 44: return 0;//Vision nocturne
		case 45: return 0;//Vision thermique
		case 46: return 0;//Parachute
	}
	return 0;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	if(!IsPlayerConnected(playerid))
	{
		return 1;
	}
	if(_:clickedid == INVALID_TEXT_DRAW)
	{
		if(!bCloseTexts[playerid]) CloseTextDraws(playerid);
		bCloseTexts[playerid] = false;
	}
	if(CallRemoteFunction("GetPlayerMission", "i", playerid) != NO_MISSION && !CallRemoteFunction("IsPlayerOnCinematic", "i", playerid))
    {
		if(clickedid == tStop)
		{
		    CallRemoteFunction("StopPlayerMission", "ib", playerid, false);
		}
	}
	if(pHDV[playerid][0] != -1 && pHDV[playerid][0] != 8)
    {
		if(clickedid == tHDVButtons[0])
		{
			if(!SetPlayerAuctionHouse(playerid, pHDV[playerid][0], -1))//Précédent
			{
			    SetPlayerAuctionHouse(playerid, 8, 0);
				ShowPlayerTextInfo(playerid, 5000, "~r~There is no item for sale in this category.", "~r~Il n'y a pas d'objet à vendre dans cette catégorie.", "Espagnol", "Portugais", "Italien", "Allemand");
				return 1;
			}
		}
		else if(clickedid == tHDVButtons[1])
		{
			if(!SetPlayerAuctionHouse(playerid, pHDV[playerid][0], 1))//PrécéSuivant
			{
			    SetPlayerAuctionHouse(playerid, 8, 0);
				ShowPlayerTextInfo(playerid, 5000, "~r~There is no item for sale in this category.", "~r~Il n'y a pas d'objet à vendre dans cette catégorie.", "Espagnol", "Portugais", "Italien", "Allemand");
				return 1;
			}
		}
		else if(clickedid == tHDVButtons[2])//Acheter
		{
		    new dReturn = BuyAuctionHouseItem(playerid, pHDV[playerid][0], pHDV[playerid][1]);
		    switch(dReturn)
		    {
		        case -2: SendClientMessageEx(playerid, ROUGE, "You cannot carry more items!", "Vous ne pouvez pas porter plus d'objets !", "¡No puede llevar más objetos!", "Portugais", "Italien", "Sie können nicht mehr Objekte tragen!");
		        case -1: SendClientMessageEx(playerid, ROUGE, "You don't have enough gold!", "Vous n'avez pas assez d'or !", "¡No tiene suficiente de oro!", "Portugais", "No avete abbastanza di oro.", "Sie haben nicht genug gold!");
		        case 0: SendClientMessageEx(playerid, ROUGE, "You can't buy this!", "Vous ne pouvez pas acheter cela !", "¡No puede comperar esto objecto!", "Portugais", "Italien", "Sie können nicht dieser Objekte kaufen!");
		    }
		    if(dReturn != 1) PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
		}
	}
	if(dEngineer[playerid] != -1 && !bCooking[playerid])
	{
	    for(new i = 0; i < 4; i ++)
		{
			if(clickedid == tBoutonsAtelier[i])
			{
				if(dEngineer[playerid] != i) SetEngineerCategory(playerid, i);
			}
		}
		if(clickedid == tBoutonFabriquer[pPlayerInfos[playerid][pLangue]])
		{
			new dCanCraft = CanPlayerCraftItem(playerid, dEngineer[playerid], dFormula[playerid]);
			if(6 >= dCanCraft >= 1)
			{
			    SendClientMessageEx(playerid, ROUGE, "You don't have all the items required for this craft!", "Vous n'avez pas tous les objets requis pour cette fabrication !", "Espagnol", "Portugais", "Italien", "Allemand");
			    return 1;
			}
			else if(dCanCraft == 7)
			{
			    SendClientMessageEx(playerid, ROUGE, "You don't have enough gold!", "Vous n'avez pas assez d'or !", "¡No tiene basta di oro!", "Portugais", "Italien", "Sie haben nicht genüg Gold!");
			    return 1;
			}
			else if(dCanCraft == 0)
			{
			    bCrafting[playerid] = true;
			    OnPlayerCraftItem(playerid, 20, dEngineer[playerid], dFormula[playerid]);
			    ClosePlayerEngineer(playerid);
			}
		}
	}
	if(bCooking[playerid])
	{
		if(clickedid == tBoutonCuisiner[pPlayerInfos[playerid][pLangue]])
		{
			new dCanCraft = CanPlayerCraftItem(playerid, dEngineer[playerid], dFormula[playerid]);
			if(6 >= dCanCraft >= 1)
			{
			    SendClientMessageEx(playerid, ROUGE, "You don't have all the ingredients required for this recipe!", "Vous n'avez pas tous les ingrédients requis pour cette recette !", "Espagnol", "Portugais", "Italien", "Allemand");
			    return 1;
			}
			else if(dCanCraft == 0)
			{
			    bCrafting[playerid] = true;
			    OnPlayerCraftItem(playerid, 20, 5, dFormula[playerid]);
			    ClosePlayerEngineer(playerid);
			}
		}
	}
	if(dHouseBuild[playerid] == 1)
	{
		if(clickedid == tBoutonBatir[pPlayerInfos[playerid][pLangue]])
		{
			new dCanCraft = CanPlayerCraftItem(playerid, dEngineer[playerid], dFormula[playerid]);
			if(6 >= dCanCraft >= 1)
			{
			    SendClientMessageEx(playerid, ROUGE, "You don't have all the items required for this house!", "Vous n'avez pas tous les objets requis pour cette maison !", "Espagnol", "Portugais", "Italien", "Allemand");
			    return 1;
			}
			else if(dCanCraft == 0)
			{
			    bCrafting[playerid] = true;
			    OnPlayerCraftItem(playerid, 20, 6, dFormula[playerid]);
			    ClosePlayerEngineer(playerid);
			}
		}
	}
	if(pUseInventory[playerid] != -1)
	{
	    if(clickedid == tAdmin)
	    {
	        if(pPlayerInfos[playerid][pAdmin] != PLAYER)
	        {
				switch(pPlayerInfos[playerid][pLangue])
				{
					case LANGUAGE_EN: ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Admin", "{CC0000}Admin a player\n{008000}Admin all the server", "Ok", "Cancel");
					case LANGUAGE_FR: ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Admin", "{CC0000}Administrer un joueur\n{008000}Administrer le serveur", "Ok", "Annuler");
	    			case LANGUAGE_ES: ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Admin", "{CC0000}Espagnol\n{008000}Espagnol", "Ok", "Cancelar");
	    			case LANGUAGE_PG: ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Admin", "{CC0000}Portugais\n{008000}Portugais", "Ok", "Portugais");
					case LANGUAGE_IT: ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Admin", "{CC0000}Italien\n{008000}Italien", "Ok", "Italien");
					case LANGUAGE_DE: ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Admin", "{CC0000}Allemand\n{008000}Allemand" , "Ok", "Schlissen");
				}
			}
    		CancelSelectTextDraw(playerid);
			//CloseTextDraws(playerid);
	    }
	    else if(clickedid == tHUDFont[5])
	    {
			switch(pPlayerInfos[playerid][pLangue])
			{
				case LANGUAGE_EN: ShowPlayerDialog(playerid, 9, DIALOG_STYLE_INPUT, "Gold", "How much gold do you want to drop?", "Drop", "Cancel");
				case LANGUAGE_FR: ShowPlayerDialog(playerid, 9, DIALOG_STYLE_INPUT, "Or", "Combien d'or voulez-vous lâcher ?", "Lâcher", "Annuler");
    			case LANGUAGE_ES: ShowPlayerDialog(playerid, 9, DIALOG_STYLE_INPUT, "Oro", "¿Cuando oro quiere depositar?", "Depositar", "Cancelar");
    			case LANGUAGE_PG: ShowPlayerDialog(playerid, 9, DIALOG_STYLE_INPUT, "Ouro", "Portugais", "Portugais", "Portugais");
				case LANGUAGE_IT: ShowPlayerDialog(playerid, 9, DIALOG_STYLE_INPUT, "Oro", "Quanto di oro vuoi depositare ?", "Depositare", "Italien");
				case LANGUAGE_DE: ShowPlayerDialog(playerid, 9, DIALOG_STYLE_INPUT, "Gold", "Wie viele Gold wollen Sie " , "Allemand", "Schlissen");
			}
    		CancelSelectTextDraw(playerid);
		}
		else if(clickedid == tHelp)
		{
			switch(pPlayerInfos[playerid][pLangue])//On l'affiche dans la bonne langue...
			{
				case LANGUAGE_EN: ShowPlayerDialog(playerid, 31, DIALOG_STYLE_LIST, "Help", "Pickup an item\nUse an item\nBackpack\nHunger\nThirst\nSleep\nTemperature\nWater collectors\nSafes\nVehicles\nTrunks\nPlants\nShops\nEngineers\nWeapons\nCooking\nLevels", "See", "Close");
				case LANGUAGE_FR: ShowPlayerDialog(playerid, 31, DIALOG_STYLE_LIST, "Aide", "Ramasser un objet\nUtiliser un objet\nSac à dos\nFaim\nSoif\nSommeil\nTempérature\nCollecteurs d'eau\nCoffres forts\nVéhicules\nCoffres de véhicules\nCulture\nMagasins\nIngénieurs\nArmes\nCuisine\nNiveaux", "Voir", "Fermer");
   				case LANGUAGE_ES: ShowPlayerDialog(playerid, 31, DIALOG_STYLE_LIST, "Ayuda", "Espagnol", "See", "Close");
   				case LANGUAGE_PG: ShowPlayerDialog(playerid, 31, DIALOG_STYLE_LIST, "Portugais", "Portugais", "See", "Close");
				case LANGUAGE_IT: ShowPlayerDialog(playerid, 31, DIALOG_STYLE_LIST, "Italien", "Italien", "See", "Close");
				case LANGUAGE_DE: ShowPlayerDialog(playerid, 31, DIALOG_STYLE_LIST, "Hilfe", "Allemand", "See", "Schlissen");
			}
    		CancelSelectTextDraw(playerid);
		}
		else if(clickedid == tCompetence)
		{
		    ShowPlayerSkills(playerid);
    		CancelSelectTextDraw(playerid);
		}
		else if(clickedid == tOptions)
		{
			switch(pPlayerInfos[playerid][pLangue])//Options dans la bonne langue
			{
			   	case LANGUAGE_EN: ShowPlayerDialog(playerid, 59, DIALOG_STYLE_LIST, "Options", "{CC0000}See my stats\n{FFFFFF}Change language\n{CC0000}Change my password", "Do", "Cancel");
				case LANGUAGE_FR: ShowPlayerDialog(playerid, 59, DIALOG_STYLE_LIST, "Options", "{CC0000}Voir mes stats\n{FFFFFF}Changer de langue\n{CC0000}Changer mon mot de passe", "Faire", "Annuler");
				case LANGUAGE_ES: ShowPlayerDialog(playerid, 59, DIALOG_STYLE_LIST, "Optiones", "{CC0000}Espagnol\n{FFFFFF}Espagnol\n{CC0000}Espagnol", "Hacer", "");
				case LANGUAGE_PG: ShowPlayerDialog(playerid, 59, DIALOG_STYLE_LIST, "Portugais", "{CC0000}Portugais\n{FFFFFF}Portugais\n{CC0000}Portugais", "Portugais", "");
				case LANGUAGE_IT: ShowPlayerDialog(playerid, 59, DIALOG_STYLE_LIST, "Italien", "{CC0000}Italien\n{FFFFFF}Italien\n{CC0000}Italien", "Italien", "");
				case LANGUAGE_DE: ShowPlayerDialog(playerid, 59, DIALOG_STYLE_LIST, "Allemand", "{CC0000}Allemand\n{FFFFFF}Allemand\n{CC0000}Allemand", "Allemand", "");
			}
    		CancelSelectTextDraw(playerid);
		}
	    else if(clickedid == tGroup)
		{
		    if(pGroup[playerid] == -1)
		    {
			    if(GetFreeGroup() == -1)
			    {
					SendClientMessageEx(playerid, ROUGE, "There can't be any more teams!", "Il ne peut y avoir plus de teams !", "Espagnol", "Portugais", "Italien", "Allemand");
			        return 1;
			    }
				switch(pPlayerInfos[playerid][pLangue])//On l'affiche dans la bonne langue...
				{
					case LANGUAGE_EN: ShowPlayerDialog(playerid, 44, DIALOG_STYLE_INPUT, "Team name", "{FFFFFF}Enter a name for your team:", "Create", "Cancel");
					case LANGUAGE_FR: ShowPlayerDialog(playerid, 44, DIALOG_STYLE_INPUT, "Nom de groupe", "{FFFFFF}Entrez un nom de groupe", "Créer", "Annuler");
	   				case LANGUAGE_ES: ShowPlayerDialog(playerid, 44, DIALOG_STYLE_INPUT, "Espagnol", "{FFFFFF}Espagnol", ">", "X");
	   				case LANGUAGE_PG: ShowPlayerDialog(playerid, 44, DIALOG_STYLE_INPUT, "Portugais", "{FFFFFF}Portugais", ">", "X");
					case LANGUAGE_IT: ShowPlayerDialog(playerid, 44, DIALOG_STYLE_INPUT, "Italien", "{FFFFFF}Italien", ">", "X");
					case LANGUAGE_DE: ShowPlayerDialog(playerid, 44, DIALOG_STYLE_INPUT, "Allemand", "{FFFFFF}Allemand", ">", "X");
				}
			}
			else
			{
				switch(pPlayerInfos[playerid][pLangue])
				{
			    	case LANGUAGE_EN: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Team", "Set name\nSet leader\nRecruit\nExclude\nDissolve\nLeave", "Do", "Cancel");
		           	case LANGUAGE_FR: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Groupe", "Changer nom\nMettre chef\nRecruter\nExclure\nDissoudre\nQuitter", "Faire", "Annuler");
		           	case LANGUAGE_ES: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Espagnol", "Espagnol", "Hacer", "Cancelar");
		           	case LANGUAGE_PG: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Portugais", "Portugais", "Portugais", "Portugais");
					case LANGUAGE_IT: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Italien", "Italien", "Italien", "Italien");
					case LANGUAGE_DE: ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "Allemand", "Allemand" , "Allemand", "Allemand");
	    		}
			}
    		CancelSelectTextDraw(playerid);
		}
	}
	if(pChooseSkin[playerid] != -1)
	{
	    if(clickedid == tSkinSelect[1])//Flèche vers le haut
	    {
			pChooseSkin[playerid] ++;
			#if defined DOWNLOAD
			if(pChooseSkin[playerid] == 312) pChooseSkin[playerid] = 20001;
			else if(pChooseSkin[playerid] == 20001 + MAX_EXTRA_SKINS) pChooseSkin[playerid] = 0;
			#else
			if(pChooseSkin[playerid] == 312) pChooseSkin[playerid] = 0;
			#endif
			PlayerTextDrawSetPreviewModel(playerid, tPlayerSkin[playerid], pChooseSkin[playerid]);
			PlayerTextDrawShow(playerid, tPlayerSkin[playerid]);
	    }
	    else if(clickedid == tSkinSelect[2])//Flèche vers le bas
	    {
			pChooseSkin[playerid] --;
			#if defined DOWNLOAD
			if(pChooseSkin[playerid] == -1) pChooseSkin[playerid] = 20000 + MAX_EXTRA_SKINS;
			else if(pChooseSkin[playerid] == 20000) pChooseSkin[playerid] = 311;
			#else
			if(pChooseSkin[playerid] == -1) pChooseSkin[playerid] = 311;
			#endif
			PlayerTextDrawSetPreviewModel(playerid, tPlayerSkin[playerid], pChooseSkin[playerid]);
			PlayerTextDrawShow(playerid, tPlayerSkin[playerid]);
	    }
	    else if(clickedid == tSkinSelect[5])//Bouton 'Spawn'
	    {
			pPlayerInfos[playerid][pSkin] = pChooseSkin[playerid];
			pChooseSkin[playerid] = -1;
			for(new i = 0; i < 6; i ++) TextDrawHideForPlayer(playerid, tSkinSelect[i]);
			PlayerTextDrawHide(playerid, tPlayerSkin[playerid]);
			PlayerTextDrawDestroy(playerid, tPlayerSkin[playerid]);
			tPlayerSkin[playerid] = PlayerText:INVALID_TEXT_DRAW;
			CancelSelectTextDraw(playerid);
			pPlayerInfos[playerid][dLogState] = UNSPAWNED;
			//---
			switch(pPlayerInfos[playerid][pLangue])
			{
			    case LANGUAGE_EN: ShowPlayerDialog(playerid, 4, DIALOG_STYLE_MSGBOX, "Skin", "You've chosen your skin.\nYou can play now.", "Spawn", "");
       			case LANGUAGE_FR: ShowPlayerDialog(playerid, 4, DIALOG_STYLE_MSGBOX, "Skin", "Vous avez choisi votre skin.\nVous pouvez jouer maintenant.", "Spawn", "");
      	 		case LANGUAGE_ES: ShowPlayerDialog(playerid, 4, DIALOG_STYLE_MSGBOX, "Skin", "Ha eligido su skin.\nPuede juegar ahora.", "Spawn", "");
       			case LANGUAGE_PG: ShowPlayerDialog(playerid, 4, DIALOG_STYLE_MSGBOX, "Skin", "Portugais", "Spawn", "");
				case LANGUAGE_IT: ShowPlayerDialog(playerid, 4, DIALOG_STYLE_MSGBOX, "Skin", "Italien.\nSi potete giocare adesso.", "Spawn", "");
				case LANGUAGE_DE: ShowPlayerDialog(playerid, 4, DIALOG_STYLE_MSGBOX, "Skin", "Sie haben ihren skin ausgewählt\nSie können spielen jetzt." , "Spawn", "");
			}
	    }
	    else if(clickedid == tSkinSelect[6])//Bouton 'OK'
	    {
			switch(pPlayerInfos[playerid][pLangue])
			{
			    case LANGUAGE_EN: ShowPlayerDialog(playerid, 32, DIALOG_STYLE_MSGBOX, "Skin", "You've chosen your skin.\nPrice: {FFD700}1g", "Buy", "Cancel");
       			case LANGUAGE_FR: ShowPlayerDialog(playerid, 32, DIALOG_STYLE_MSGBOX, "Skin", "Vous avez choisi votre skin.\nPrice: {FFD700}1g", "Acheter", "Annuler");
      	 		case LANGUAGE_ES: ShowPlayerDialog(playerid, 32, DIALOG_STYLE_MSGBOX, "Skin", "Ha eligido su skin.\nPrecio: {FFD700}1g", "Comprar", "Cancelar");
       			case LANGUAGE_PG: ShowPlayerDialog(playerid, 32, DIALOG_STYLE_MSGBOX, "Skin", "Portugais", "Portugais", "Portugais");
				case LANGUAGE_IT: ShowPlayerDialog(playerid, 32, DIALOG_STYLE_MSGBOX, "Skin", "Italien", "Comperare", "Italien");
				case LANGUAGE_DE: ShowPlayerDialog(playerid, 32, DIALOG_STYLE_MSGBOX, "Skin", "Sie haben ihren skin ausgewählt\nPreis: {FFD700}1g" , "Kaufen", "Schlissen");
			}
	    }
	}
	return 1;
}

CancelSelectTextDrawEx(playerid)
{
	bCloseTexts[playerid] = true;
    CancelSelectTextDraw(playerid);
}

CloseTextDraws(playerid)
{
	if(pUseInventory[playerid] != -1)
	{
	    ClosePlayerHUD(playerid);
	}
	if(pChooseSkin[playerid] != -1)
	{
	    SelectTextDraw(playerid, ROUGE);
	}
	if(bCooking[playerid])
	{
		ClosePlayerKitchen(playerid);
	}
	if(dHouseBuild[playerid] == 1)
	{
		ClosePlayerHousePlans(playerid);
	}
	if(dEngineer[playerid] != -1)
	{
		ClosePlayerEngineer(playerid);
	}
	if(pHDV[playerid][0] != -1)
	{
		HidePlayerAuctionHouse(playerid);
	}
}

public OnSecondPassed()
{
	static dSeconds;
	dSeconds ++;
	//---JAMBE CASSÉE & TEMPÉRATURE FLOTTE---//
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i) && pPlayerInfos[i][dLogState] == SPAWNED && !IsPlayerDead(i) && !FCNPC_IsValid(i))
		{
		    if(IsPlayerInAnyVehicle(i))
		    {
				pPlayerInfos[i][fDistanceWheel] += floatdiv(GetPlayerVehicleSpeed(i), 3.6);
		    }
		    else
		    {
				pPlayerInfos[i][fDistanceFoot] += GetPlayerSpeed(i);
				//---
			    if((!pPlayerInfos[i][bLeg] && IsMultiple(dSeconds, 2) || (pPlayerInfos[i][pSleep] < 15) && IsMultiple(dSeconds, 4)) && !IsPlayerInAnyVehicle(i))
			    {
			    	if(IsPlayerRunning(i))
			    	{
			    	    ClearAnimations(i, true);
			    		ApplyAnimation(i, "PARACHUTE", "FALL_skyDive_DIE", 4.0, 0, 1, 1, 0, -1);
					}
			    }
				if(!IsPlayerRunning(i) && !IsPlayerKnockedOut(i) && IsPlayerSmokable(i))
				{
					KnockPlayer(i);
				}
			    if(IsPlayerKnockedOut(i)) ApplyAnimation(i, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
				if(dRepair[i][0] > 0)
				{
					UpdateRepairTimer(i);
				}
			}
			if(CallRemoteFunction("GetPlayerMission", "i", i) != NO_MISSION)
			{
			    CallRemoteFunction("UpdateMissionTimer", "i", i);
			}
		    if(pPlayerInfos[i][bHemorragie] && !IsPlayerInvincible(i))
		    {
		        GivePlayerHealth(i, -10, REASON_BLOODLOSS);
		    }
		    if(IsPlayerSleeping(i))
		    {
		        dNap[i] --;
		        GivePlayerSleep(i, 10);
		        if(dNap[i] == 0)
		        {
				    ClearAnimations(i, true);
				    TogglePlayerControllable(i, true);
				    SetCameraBehindPlayer(i);
					SetPlayerDrunkLevel(i, 0);
					PlayerPlaySound(i, 0, 0.0, 0.0, 0.0);
		        }
			}
		    if(IsPlayerSitting(i))
		    {
		        dSit[i] --;
		        GivePlayerHealth(i, 100, REASON_BLOODLOSS);
		        if(dSit[i] == 0)
		        {
				    ClearAnimations(i, true);
				    TogglePlayerControllable(i, true);
				    SetCameraBehindPlayer(i);
					SetPlayerDrunkLevel(i, 0);
		        }
			}
			if(IsMultiple(dSeconds, 2))
			{
				MusicUpdateForPlayer(i);
			}
			if(dNewCo[i] > 0)
			{
			    if(-- dNewCo[i] == 0) HidePlayerRules(i);
			}
			//---TEMPÉRATURE
			new bool:bLoss;
		    if(IsPlayerInWater(i) && GetVehicleFuelType(GetVehicleModel(GetPlayerVehicleID(i))) != 4)
		    {
		        GivePlayerTemperature(i, (pPlayerInfos[i][pTorse] == 135) ? -1 : -3);
		        bLoss = true;
		    }
		    if(IsMultiple(dSeconds, 5) && IsRaining() && pPlayerInfos[i][pTorse] != 135 && pPlayerInfos[i][pTemperature] > 230)
		    {
			    new Float:x, Float:y, Float:z;
			    GetPlayerPos(i, x, y, z);
				if(!IsPositionUnderSomething(x, y, z))
				{
					GivePlayerTemperature(i, -2);
		        	bLoss = true;
				}
		    }
			if(IsMultiple(dSeconds, 3) && !bLoss && !IsPlayerOnSpectate(i))
			{
			    new bool:bGiveTemperature;
			    if(!bGiveTemperature && pPlayerInfos[i][pTemperature] < 390 && !IsPlayerInWater(i) && IsPlayerRunning(i))
				{
					GivePlayerTemperature(i, 1);
					bGiveTemperature = true;
				}
				if(!bGiveTemperature && pPlayerInfos[i][pTemperature] < 420 && IsPlayerNextToFire(i))
				{
					GivePlayerTemperature(i, 10);
					bGiveTemperature = true;
				}
			    if(!bGiveTemperature && pPlayerInfos[i][pTemperature] < 372 && !IsPlayerInWater(i))
				{
					GivePlayerTemperature(i, 1);
					bGiveTemperature = true;
				}
				if(!bGiveTemperature && pPlayerInfos[i][pTemperature] > 372 && !IsPlayerNextToFire(i) && !IsPlayerRunning(i) && !IsPlayerInWater(i))
				{
					GivePlayerTemperature(i, -2);
					bGiveTemperature = false;
				}
			}
			//---HYDRATATION
			if(IsMultiple(dSeconds, 2) && IsRaining() && pPlayerInfos[i][dHydra] >= 1)
			{
			    GivePlayerThirst(i, 1);
			}
			//---CACTUS
			if(IsPlayerInDynamicArea(i, dStreamMobs[dCactusZone]))
			{
				for(new k = 0; k < MAX_CACTUS; k ++)
				{
				    if(dCactus[k][dCactusHealth] > 0 && IsObjectNearToPlayer(2.5, i, dCactus[k][oCactus]))
				    {
			    		GivePlayerHealth(i, -150, REASON_BLOODLOSS);
			        	break;
				    }
				}
			}
			//---HEAL---//
			if(pPlayerInfos[i][dMedecine] != 0 && !IsPlayerDead(i) && GetPlayerHealth(i) < GetPlayerMaxHealth(i))
			{
			    new dHealth = 0;
				switch(pPlayerInfos[i][dMedecine])
				{
				    case 1: dHealth = 1;
				    case 2: dHealth = 2;
				    default: dHealth = 0;
				}
			    GivePlayerHealth(i, dHealth, REASON_HEAL);
			}
			//---TEXTES---//
			if(IsMultiple(dSeconds, 5) && dRepair[i][0] == 0 && pUseInventory[i] == -1 && !dHelp[i] && !CallRemoteFunction("IsPlayerOnCinematic", "i", i) || IsPlayerOnSpectate(i))
			{
			    new dMission = CallRemoteFunction("CheckPlayerMission", "i", i);
			    new dBedID = IsPlayerNearBed(i);
			    new dSeatID = IsPlayerNearSeat(i);
			    if(dMission == 1) ShowPlayerTextInfo(i, 3000, "Press ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~to start the mission.", "Appuyez sur ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~pour commencer la mission.", "Prensa usted ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~para commenzar la mission.", "Portugais", "Italien", "Allemand");
			    else if(dMission == 2) ShowPlayerTextInfo(i, 3000, "Press ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~to speak.", "Appuyez sur ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~pour parler.", "Prensa usted ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~para hablar.", "Portugais", "Italien", "Allemand");
			    else if(dMission == 3) CallRemoteFunction("StartPlayerMission", "i", i);
			    else if(CallRemoteFunction("IsPlayerNearToElevator", "i", i) != 0) ShowPlayerTextInfo(i, 3000, "Press ~r~~k~~PED_DUCK~ ~w~to move the elevator.", "Appuyez sur ~r~~k~~PED_DUCK~ ~w~pour bouger l'ascenseur.", "Espagnol", "Portugais", "Italien", "Allemand");
			    else if(CallRemoteFunction("IsPlayerPlayerNearButton", "i", i) != 0) ShowPlayerTextInfo(i, 3000, "Press ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~to press the button.", "Appuyez sur ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~appuyer sur le bouton.", "Espagnol", "Portugais", "Italien", "Allemand");
			    else if(dBedID != -1 && !IsPlayerSleeping(i))
				{
					if(dBedID < MAX_BEDS) ShowPlayerTextInfo(i, 3000, "Press ~r~~k~~PED_DUCK~ ~w~to sleep.~n~Press ~r~~k~~GROUP_CONTROL_BWD~ ~w~to pick the bed up.", "Appuyez sur ~r~~k~~PED_DUCK~ ~w~pour dormir.~n~Appuyez sur ~r~~k~~GROUP_CONTROL_BWD~ ~w~pour ramasser le lit.", "Espagnol", "Portugais", "Italien", "Allemand");
					else ShowPlayerTextInfo(i, 3000, "Press ~r~~k~~PED_DUCK~ ~w~to sleep.", "Appuyez sur ~r~~k~~PED_DUCK~ ~w~pour dormir.", "Espagnol", "Portugais", "Italien", "Allemand");
				}
				else if(dSeatID != -1 && !IsPlayerSleeping(i))
				{
					ShowPlayerTextInfo(i, 3000, "Press ~r~~k~~PED_DUCK~ ~w~to sit.~n~Press ~r~~k~~GROUP_CONTROL_BWD~ ~w~to pick the seat up.", "Appuyez sur ~r~~k~~PED_DUCK~ ~w~pour vous asseoir.~n~Appuyez sur ~r~~k~~GROUP_CONTROL_BWD~ ~w~pour ramasser le siège.", "Espagnol", "Portugais", "Italien", "Allemand");
				}
			    else if(IsPlayerNearSafe(i) != -1 && pPlayerSafe[i] == -1) ShowPlayerTextInfo(i, 3000, "Press ~r~~k~~PED_DUCK~ ~w~to open/close the safe.~n~Press ~r~~k~~CONVERSATION_YES~ ~w~to look in the safe.", "Appuyez sur ~r~~k~~PED_DUCK~ ~w~pour ouvrir le coffre.~n~Appuyez sur ~r~~k~~CONVERSATION_YES~ ~w~regarder dans le coffre.", "Espagnol", "Portugais", "Italien", "Allemand");
			    else if(IsPlayerNearGarageDoor(i) != -1 && pGarage[i] == -1) ShowPlayerTextInfo(i, 3000, "Press ~r~~k~~PED_DUCK~ ~w~to open/close the door.", "Appuyez sur ~r~~k~~PED_DUCK~ ~w~pour ouvrir la porte.", "Espagnol", "Portugais", "Italien", "Allemand");
			    else if(IsPlayerNearHouseDoor(i) != -1 && dDoor[i] == -1) ShowPlayerTextInfo(i, 3000, "Press ~r~~k~~PED_DUCK~ ~w~to open/close the door.", "Appuyez sur ~r~~k~~PED_DUCK~ ~w~pour ouvrir la porte.", "Espagnol", "Portugais", "Italien", "Allemand");
				else if(CallRemoteFunction("GetPlayerNearShop", "i", i) != -1 && !CallRemoteFunction("GetPlayerShop", "i", i)) ShowPlayerTextInfo(i, 3000, "Press ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~to see what's for sale.", "Appuyez sur ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~pour voir ce qui se vend ici.", "Prensa usted ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~para mirar que puede comprar.", "Imprensa ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~ para vistar que Portugais", "Italien", "Drücken sie auf ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~fur der shop aussehen.");
			    else if(CallRemoteFunction("GetPlayerNearAuctionHouse", "i", i) != -1 && pHDV[i][0] == -1) ShowPlayerTextInfo(i, 3000, "Press ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~to see the Auction House.", "Appuyez sur ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~pour voir l'hôtel des ventes.", "Prensa usted ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~para mirar que puede comprar.", "Imprensa ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~ para vistar que Portugais", "Italien", "Drücken sie auf ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~fur der shop aussehen.");
			    else if(IsPlayerNearCollector(i) != -1) ShowPlayerTextInfo(i, 3000, "Use an ~r~empty bottle ~w~to refill it.~n~Press ~r~~k~~GROUP_CONTROL_BWD~ ~w~to pick the collector up.", "Utilisez une ~r~bouteille vide ~w~pour la remplir.~n~Appuyez sur ~r~~k~~GROUP_CONTROL_BWD~ ~w~pour ramasser le récupérateur.", "Espagnol", "Portugais", "Italien", "Allemand");
			    else if(IsPlayerNearGasStation(i) != -1) ShowPlayerTextInfo(i, 3000, "Use an ~r~empty bottle - jerry ~w~to refill it.~n~Press ~r~~k~~GROUP_CONTROL_BWD~ ~w~next to a vehicle to fill the tank.", "Utilisez une ~r~bouteille - bidon vide ~w~pour remplir d'essence.~n~Appuyez sur ~r~~k~~GROUP_CONTROL_BWD~ ~w~à côté d'un véhicule pour faire le plein.", "Espagnol", "Portugais", "Italien", "Allemand");
			    else if(GetPlayerNearEngineer(i) != -1 && dEngineer[i] == -1 && !bCrafting[i]) ShowPlayerTextInfo(i, 3000, "Press ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~to see what the engineer can craft.", "Appuyez sur ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~pour voir ce que l'ingénieur peut fabriquer.", "Prensa usted ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~para mirar lo que ingeniero puede hacer.", "Imprensa ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~ para vistar que Portugais", "Italien", "Drücken sie auf ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~fur das Ingenieur-Geschäft aussehen.");
			    else if(IsPlayerNearDoctor(i) != -1 && !bHeal[i] && pChooseSkin[i] == -1) ShowPlayerTextInfo(i, 3000, "Press ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~to talk with the doctor.", "Appuyez sur ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~pour parler au docteur.", "Prensa usted ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~para hablar con el doctor.", "Portugais", "Italien", "Allemand");
			    else if(IsPlayerNearMechanic(i) != -1) ShowPlayerTextInfo(i, 3000, "Press ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~to talk with the mechanic.", "Appuyez sur ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~pour parler au mécanicien.", "Prensa usted ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~para hablar con el mecánico.", "Portugais", "Italien", "Allemand");
			    else if(IsPlayerNearShredder(i) != -1) ShowPlayerTextInfo(i, 3000, "Use ~r~wheat ~w~to turn it into flour.", "Utilisez du ~r~blé ~w~pour avoir de la farine.", "Espagnol", "Portugais", "Italien", "Allemand");
			    else if(IsPlayerNearRack(i) != -1) ShowPlayerTextInfo(i, 3000, "Press ~r~~k~~PED_DUCK~ ~w~to take a gun.", "Appuyez sur ~r~~k~~PED_DUCK~ ~w~pour prendre une arme.", "Espagnol", "Portugais", "Italien", "Allemand");
			    else if(CallRemoteFunction("GetPlayerNearCart", "i", i) != -1)
			    {
					if(HasPlayerGold(i, 2)) ShowPlayerTextInfo(i, 5000, "~g~~Hotdog: ~y~0.2g of gold.~n~~n~~r~~k~~VEHICLE_ENTER_EXIT~ ~w~to buy.", "~g~Hotdog: ~y~0.2g d'or.~n~~n~~r~~k~~PED_JUMPING~ ~w~pour acheter.", "~g~Hotdog: ~y~0.2g de oro gold.~n~~n~~r~~k~~PED_JUMPING~ ~w~para comprar.", "~g~Hotdog: ~y~0.2g de ouro.~n~~n~~r~~k~~PED_JUMPING~ ~w~para comprar.", "~g~Hotdog: ~y~0.2g di oro.~n~~n~~r~~k~~PED_JUMPING~ ~w~per comperar.", "~g~Hotdog: ~y~0.2g gold.~n~~n~~r~~k~~PED_JUMPING~ ~w~zum kaufen.");
					else ShowPlayerTextInfo(i, 5000, "~r~Hotdog: ~y~0.2g of gold.", "~r~Hotdog: ~y~0.2g d'or.", "~r~Hotdog: ~y~0.2g de oro.", "~r~Hotdog: ~y~0.2g de ouro.", "~r~Hotdog: ~y~0.2g di oro gold.", "~r~Hotdog: ~y~0.2g gold.");
			    }
			    //---AIDE
			    else if(!pPlayerInfos[i][bAide][0] && IsPlayerNearItem(i)) ShowPlayerHelp(i, 1, 10000);
			    else if(!pPlayerInfos[i][bAide][7] && IsPlayerNearCollector(i) != -1) ShowPlayerHelp(i, 8, 10000);
			    else if(!pPlayerInfos[i][bAide][9] && IsPlayerNearVehicle(i)) ShowPlayerHelp(i, 10, 15000);
			    else if(!pPlayerInfos[i][bAide][12] && CallRemoteFunction("GetPlayerNearShop", "i", i) != -1) ShowPlayerHelp(i, 13, 10000);
			    else if(!pPlayerInfos[i][bAide][13] && GetPlayerNearEngineer(i) != -1) ShowPlayerHelp(i, 14, 10000);
			}
			//---ZOMBIES ACCROUPIS---//
		    if(GetPlayerSpecialAction(i) == SPECIAL_ACTION_DUCK && dResetTimer[i] == -1)
			{
			    fDetectRange[i][0] = (ZOMBIE_DETECT / 4);
			    fDetectRange[i][1] = (JOHN_DETECT / 4);
				dResetTimer[i] = SetTimerEx("ResetDetectRange", 5000, false, "i", i);
			}
			//---PUNITIONS
			if(pPlayerInfos[i][pMute] > 0)
			{
			    pPlayerInfos[i][pMute] --;
			    if(pPlayerInfos[i][pMute] == 0) UnmutePlayer(i);
			}
			if(pPlayerInfos[i][pFreeze] > 0)
			{
			    pPlayerInfos[i][pFreeze] --;
			    if(pPlayerInfos[i][pFreeze] == 0) UnfreezePlayer(i);
			    else TogglePlayerControllable(i, false);
			}
			if(bKick[i])
			{
			    Kick(i);
				bKick[i] = false;
			}
	    }
	}
	//---
	for(new i = 0; i < MAX_BOMBS; i ++)
	{
	    if(dBomb[i][dBombType] != 0 && dBomb[i][dBombTime] != 0)
	    {
	        if(dBomb[i][dBombType] == 1)
	        {
	            dBomb[i][dBombTime] ++;
	        }
	        else if(dBomb[i][dBombType] == 2)
	        {
	            dBomb[i][dBombTime] --;
				if(dBomb[i][dBombTime] == 0)
				{
					ExplodeBomb(i);
				}
	        }
	    }
	}
	//---FUMÉE
	for(new i = 0; i < MAX_FLAMES; i++)
	{
	    if(dSmoke[i][dTempsSmoke] > 0)
	    {
		    dSmoke[i][dTempsSmoke] -= 1;
		    if(dSmoke[i][dTempsSmoke] <= 0) DestroySmoke(i);
	    }
	}
	//---VÉHICULES
 	for(new i = 0; i < MAX_SPAWN_VEHICLES; i ++)//Pour tous les véhicules...
	{
		if(IsEngineOn(dVehicleInfos[i][dVehicleID]) && !IsVehicleBicycle(dVehicleInfos[i][dVehicleID]))//Allumés, et qui ne sont pas des vélos...
	    {
			DecreaseVehicleFuel(i);
      	}
	}
	CheckPlayersNoise();
	UpdateUFOBoss();
	MoveMiniUFOs();
	UpdateCactus();
	if(IsMultiple(dSeconds, 3)) ClearMarkers(), CallRemoteFunction("CheckForPlayersToGates", "");//Toutes les 3 secondes, on regarde si y'a un mec proche d'une porte qui s'ouvre
	if(IsMultiple(dSeconds, 10)) CallRemoteFunction("CreateRandomItem", "");//Toutes les dix secondes on crée un nouvel objet
	if(IsMultiple(dSeconds, 60)) OnMinutePassed();//Toutes les 60 secondes, on appelle la callback de quand une minute passe
}

public OnMinutePassed()
{
	static dMinutes;
	//---SYSTÈME TEMPS
	dEnvironment[dMins] += TIME_SPEED;
	if(dEnvironment[dMins] >= 60)
	{
        dEnvironment[dMins] -= 60;
		dEnvironment[dHours] ++;
	}
	if(dEnvironment[dHours] == 24)
	{
	    dEnvironment[dHours] = 0;
	    if(++ dEnvironment[dDay] == 8) dEnvironment[dDay] = MONDAY;
		ChangeHostName();
	}
	CheckTime(dEnvironment[dDay], dEnvironment[dHours], dEnvironment[dMins]);
	dEnvironment[dMeteoTime] --;
	if(dEnvironment[dMeteoTime] <= 0) RandomWeather();
	//---
    SetWorldTime(dEnvironment[dHours]);
	//---
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(pPlayerInfos[i][dLogState] != SPAWNED)
		{
		    SetPlayerWeather(i, 9);
		    SetPlayerTime(i, 0, 0);
		}
	}
	//---BESOINS
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
	    if(IsPlayerConnected(i) && pPlayerInfos[i][dLogState] == SPAWNED)
	    {
	        if(!IsPlayerDead(i))
	        {
			    GivePlayerSleep(i, ((IsPlayerRunning(i) || IsPlayerInWater(i)) && pPlayerInfos[i][dAthlete] == 0) ? -2 : -1);//Si un mec est dans la flotte ou qu'il court, on lui retire deux points de sommeil, sinon qu'un seul wesh
			    GivePlayerHunger(i, -1);//On lui enlève un point de bouffe
			    if(!IsPlayerInWater(i)) GivePlayerThirst(i, -1);//On lui enlève un point de glouglou s'il est pas dans la flotte
		    }
			pPlayerInfos[i][pGameTime] ++;
	    }
	}
	//---FEU
	for(new i = 0; i < MAX_FIRES; i++)
	{
	    if(dFire[i][dTempsFeu] > 0)
	    {
		    dFire[i][dTempsFeu] -= (IsRaining() && !IsPositionUnderSomething(dFire[i][xFeu], dFire[i][yFeu], dFire[i][zFeu])) ? 4 : 1;
		    if(dFire[i][dTempsFeu] <= 0) DestroyFire(i);
	    }
	}
	//---COLLECTEUR D'EAU
	if(IsRaining())//S'il pleut on donne 1 litre par minute à chaque collecteur d'eau
	{
		for(new j = 0; j < MAX_COLLECTORS; j ++)
		{
			if(dCollector[j][dEau] != -1) GiveCollectorWater(j, 10);
		}
	}
	else if(IsMultiple(dMinutes, 30))//Sinon, on donne quand même un décilitre de flotte toutes les trente minutes
	{
		for(new j = 0; j < MAX_COLLECTORS; j ++)
		{
			if(dCollector[j][dEau] != -1) GiveCollectorWater(j, 1);
		}
	}
	//---PLANTES
	if(!IsNight())
	{
		for(new i = 0; i < MAX_PLANTS; i++)
		{
			if(dPlant[i][dPlantID] != 0)
			{
			    if(dPlant[i][dGrowTime] != 0)
			    {
					dPlant[i][dGrowTime] -= (IsRaining()) ? 2 : 1;
					if(dPlant[i][dGrowTime] < 0) dPlant[i][dGrowTime] = 0;
					if(dPlant[i][dGrowTime] == 0) GrowPlant(i);
			    }
			    else if(dPlant[i][dGrowTime] == 0 && IsMultiple(dMinutes, 3))
			    {
					if(dPlant[i][dFruits] > 0)
					{
					    dPlant[i][dFruits] --;
					    new Float:x, Float:y, Float:z;
					    x = dPlant[i][xPlant] + floatdiv(RandomEx(5, 25), 10);
						y = dPlant[i][yPlant] + floatdiv(RandomEx(5, 25), 10);
						z = dPlant[i][zPlant];
						//---
						new Float:x2, Float:y2, Float:z2;
						CA_RayCastLine(dPlant[i][xPlant], dPlant[i][yPlant], dPlant[i][zPlant], x, y, z - 2.0, x2, y2, z2);
						//---
			        	switch(dPlant[i][dPlantID])
			        	{
							case 2: CreateItem(72, x2, y2, z2 + 1.0, false, -1);
							case 3: CreateItem(73, x2, y2, z2 + 1.0, false, -1);
							case 4: CreateItem(74, x2, y2, z2 + 1.0, false, -1);
						}
					}
			    }
		    }
		}
	}
	//---
	if(IsMultiple(dMinutes, 5))
	{
		CreateRandomVehicle();
		CheckStreamingZones();
	}
	//---HDV
	for(new i = 0; i < MAX_AUCTION_ITEMS; i ++)
	{
		if(dAuctionSellerTool[i][dItemSale] != 0) if(-- dAuctionSellerTool[i][dTimeLeft] <= 0) ReturnPlayerItem(0, i);
		if(dAuctionSellerMedic[i][dItemSale] != 0) if(-- dAuctionSellerMedic[i][dTimeLeft] <= 0) ReturnPlayerItem(1, i);
		if(dAuctionSellerWeapon[i][dItemSale] != 0) if(-- dAuctionSellerWeapon[i][dTimeLeft] <= 0) ReturnPlayerItem(2, i);
		if(dAuctionSellerOther[i][dItemSale] != 0) if(-- dAuctionSellerOther[i][dTimeLeft] <= 0) ReturnPlayerItem(3, i);
		if(dAuctionSellerVehicle[i][dItemSale] != 0) if(-- dAuctionSellerVehicle[i][dTimeLeft] <= 0) ReturnPlayerItem(4, i);
		if(dAuctionSellerClothes[i][dItemSale] != 0) if(-- dAuctionSellerClothes[i][dTimeLeft] <= 0) ReturnPlayerItem(5, i);
		if(dAuctionSellerFood[i][dItemSale] != 0) if(-- dAuctionSellerFood[i][dTimeLeft] <= 0) ReturnPlayerItem(6, i);
		if(dAuctionSellerRessource[i][dItemSale] != 0) if(-- dAuctionSellerRessource[i][dTimeLeft] <= 0) ReturnPlayerItem(7, i);
	}
	//---
	new h, m, s;
	gettime(h, m, s);
	if(h == 4 && m == 0)
	{
 		#if defined LOAD_DYNAMICS
		SaveFiles();
		#endif
	}
	//---
	#if defined VEHICLE_DISEASE
	new Float:x, Float:y, Float:z, Float:x2, Float:y2, Float:z2;
	for(new i = 1; i < MAX_VEHICLES + 1; i ++)
	{
		new dClose = 0;
	    if(!IsValidVehicle(i)) continue;
	    GetVehiclePos(i, x, y, z);
	    for(new j = 1; j < MAX_VEHICLES + 1; j ++)
	    {
	        if(j != i && IsValidVehicle(j) && dClose < 2)
	        {
	            GetVehiclePos(j, x2, y2, z2);
	    		if(!IsColBetweenTwoPos(x, y, z, x2, y2, z2) && GetDistanceBetweenPoints(x, y, z, x2, y2, z2) < 5.0)
	    		{
                    dClose ++;
	    		}
	        }
	    }
	    if(dClose >= 2)
	    {
	        GiveVehicleHealth(i, -10.0);
	    }
	    dClose = 0;
	}
	#endif
	//---
	dMinutes ++;
}

ChangeHostName()
{
	new string[128];
	new sDays[7][10] = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};
	if(!(SUNDAY + 1 > dEnvironment[dDay] > MONDAY - 1)) dEnvironment[dDay] = MONDAY;
	format(string, sizeof(string), "hostname .: - Alpha - :.:|[Survive-All]|:.: - %s - :.", sDays[dEnvironment[dDay] - 1]);
 	SendRconCommand(string);
 	LogInfo(true, "[SERVEUR]Nous sommes maintenant %s.", sDays[dEnvironment[dDay] - 1]);
}

stock GetNameTime()
{
	new string[10];
	new sDays[7][3] = {"Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"};
	format(string, sizeof(string), "%s - %d:%d%s", sDays[dEnvironment[dHours]], dEnvironment[dHours] % 12, dEnvironment[dMins], (floatround(floatdiv(dEnvironment[dHours], 12), floatround_floor) == 0 ? "am" : "pm"));
	return string;
}

MusicUpdateForPlayer(playerid)
{
	static bool:dMusic[MAX_PLAYERS], dSaveZone[MAX_PLAYERS];
	if(IsPlayerConnected(playerid))
	{
		new dZone = GetPlayerMusicZone(playerid);
		if((!dMusic[playerid] && dZone != 0) || (dSaveZone[playerid] != dZone))
		{
			dMusic[playerid] = true;
			dSaveZone[playerid] = dZone;
			switch(dZone)
			{
				case 1: PlayAudioStreamForPlayer(playerid, "http://www.c4nn4.com/musicsamp/losthighway.mp3", -1949.6744, -2452.2961, 30.6250, 20.0, true);//CAMP ANGEL PINE
				case 2: PlayAudioStreamForPlayer(playerid, "http://www.c4nn4.com/musicsamp/farfromanyroad.mp3", 1310.0, 2519.0, 86.5);
		        case 3: PlayAudioStreamForPlayer(playerid, "http://www.c4nn4.com/musicsamp/civilexplore.mp3", 221.091, 1883.369, 3625.5759);
			}
		}
		else if(dMusic[playerid] && dZone == 0)
		{
			StopAudioStreamForPlayer(playerid);
			dMusic[playerid] = false;
		}
	}
}

GetPlayerMusicZone(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 20.0, -1949.6744, -2452.2961, 30.6250)) return 1;//CAMP ANGEL PINE
	else if(IsPlayerInArea(playerid, -1338.0344, 2484.5869, -1282.5590, 2554.9753)) return 2;//CAMP ALDEA MALVADA
	else if(IsPlayerInRangeOfPoint(playerid, 75.0, 221.091, 1883.369, 3625.5759)) return 3;//VAISSEAU ALIEN
	return 0;
}

IsPlayerRunning(playerid)//Fonction pour voir si un mec est en train de courir
{
	new keys, ud, lr;
	GetPlayerKeys(playerid, keys, ud, lr);
	if(!IsPlayerInAnyVehicle(playerid) && !IsPlayerInWater(playerid) && keys & KEY_SPRINT) return true;
	return false;
}

IsPlayerInFixedZone(playerid)
{
	new Float:fFixedZones[][] =
    {
        {-203.1050, 	-168.7209, 	235.3995, 	99.1079},
        {233.5575, 		688.9946,	875.8406, 	1051.009}
    };
    for(new t = 0, w = sizeof(fFixedZones); t < w; t ++) if(IsPlayerInArea(playerid, fFixedZones[t][0], fFixedZones[t][1], fFixedZones[t][2], fFixedZones[t][3])) return true;
	return false;
}

IsPlayerOnWater(playerid)
{
	new Float:x, Float:y, Float:z, Float:retx[2], Float:rety[2], Float:retz[2], Float: retdist[2], modelids[2];
	GetPlayerPos(playerid, x, y, z);
	new collisions = CA_RayCastMultiLine(x, y, z + 0.7, x, y, z - 0.7, retx, rety, retz, retdist, modelids, 2);
	//---
	if (collisions)
	{
		for(new i = 0; i < collisions; i++)
		{
			if (modelids[i] == 20000)
			{
				return true;
			}
		}
	}
	return false;
}

IsPlayerUnderWater(playerid)
{
	new Float:x, Float:y, Float:z, Float:retx[2], Float:rety[2], Float:retz[2], Float: retdist[2], modelids[2];
	GetPlayerPos(playerid, x, y, z);
	new collisions = CA_RayCastMultiLine(x, y, z + 0.7, x, y, z + 150.0, retx, rety, retz, retdist, modelids, 2);
	//---
	if (collisions)
	{
		for(new i = 0; i < collisions; i++)
		{
			if (modelids[i] == 20000)
			{
				return (true);
			}
		}
	}
	return false;
}

IsPositionUnderSomething(Float:x, Float:y, Float:z)
{
	new Float:fDump;
	if(CA_RayCastLine(x, y, z, x, y, z + 500.0, fDump, fDump, fDump) == 0) return false;
	else return true;
}

stock IsPointInWater(Float:x, Float:y, Float:z)
{
	new Float:fTrash;
	new modelid = CA_RayCastLine(x, y, z + 1.0, x, y, z - 5.0, fTrash, fTrash, fTrash);
	return (modelid == 20000);
}

public DestroyObjectEx(objectid, bool:dynamic)//Fonction pour détruire un objet, utilisé en timer pour genre détruire un truc après tel nombre de secondes
{
	if(dynamic) DestroyDynamicObject(objectid);
	else DestroyObject(objectid);
}

hook OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(Holding(KEY_AIM) && !IsPlayerInAnyVehicle(playerid))
    {
        if(GetPlayerWeapon(playerid) == 34 || GetPlayerWeapon(playerid) == 43 || GetPlayerWeapon(playerid) == 35 || GetPlayerWeapon(playerid) == 36)
    	{
        	for(new s = 0; s < 10; s++)
            {
            	RemovePlayerAttachedObject(playerid, s);
            }
        	return 1;
        }
 	}
    if(Released(KEY_AIM))
    {
    	if(GetPlayerWeapon(playerid) == 34 || GetPlayerWeapon(playerid) == 43 || GetPlayerWeapon(playerid) == 35 || GetPlayerWeapon(playerid) == 36)
    	{
        	for(new s = 0; s < 10; s++)
            {
                if(pAcc[playerid][s][model] == 0) continue;
                SetPlayerAttachedObject(playerid, s, pAcc[playerid][s][model], pAcc[playerid][s][pdc], pAcc[playerid][s][o][0], pAcc[playerid][s][o][1], pAcc[playerid][s][o][2], pAcc[playerid][s][o][3], pAcc[playerid][s][o][4], pAcc[playerid][s][o][5], pAcc[playerid][s][o][6], pAcc[playerid][s][o][7], pAcc[playerid][s][o][8], pAcc[playerid][s][col][0], pAcc[playerid][s][col][1]);
            }
        }
        return 1;
  	}
    return 0;
}

IsNumeric(const string[])
{
	for (new i = 0, j = strlen(string); i < j; i++) if (string[i] > '9' || string[i] < '0') return false;
	return true;
}

NoNewLineSign(const string[])//Fonction pour changer '~n~' en ' ' pour genre écrire un texte au sol à partir du nom d'un objet
{
	new nsign = 0;
	new str[128];
	strcpy(str, string);
	do
	{
		nsign = strfind(str, "~n~");
	    if(nsign != -1)
	    {
	    	strdel(str, nsign, nsign + 3);
	        strins(str, " ", nsign);
	    }
	}
	while(nsign != -1);
	return str;
}

SetPlayerFacingToPos(playerid, Float:x, Float:y)//Faire regarder un joueur vers quelque part
{
	new Float:pX, Float:pY, Float:pZ;
	GetPlayerPos(playerid, pX, pY, pZ);
	SetPlayerFacingAngle(playerid, GetZAngleBetweenPos(x, y, pX, pY));
}

/*CompareZ(Float:fZ, Float:fZ2, Float:difference)
{
	new Float:zdiff = floatabs(fZ - fZ2);
	if(zdiff == 0.0) return 1;
	else if(fZ < 0 && fZ2 < 0)
	{
		if(zdiff <= difference) return 1;
		return 0;
	}
	else if(fZ > 0 && fZ2 > 0)
	{
		if(zdiff <= difference) return 1;
		return 0;
	}
	return 0;
}*/



public CreateExplosionEx(playerid, Float:x, Float:y, Float:z, type, Float:radius)
{
	new modelid;
	switch(type)
	{
	    case EXPLOSION_TINY: modelid = 18686;
	    case EXPLOSION_SMALL: modelid = 18685;
	    case EXPLOSION_FIRE: modelid = 18684;
	    case EXPLOSION_LARGE: modelid = 18683;
	    case EXPLOSION_HUGE: modelid = 18682;
	}
	SetTimerEx("DestroyObjectEx", 3500, false, "ib", CreateObject(modelid, x, y, z - 0.928, 0.0, 0.0, floatrand(0.0, 360.0), 0.0), false);
	for(new i = 0; i < MAX_SAFES; i ++) if(GetDistanceBetweenPoints(x, y, z, dSafeInfos[i][xSafe], dSafeInfos[i][ySafe], dSafeInfos[i][zSafe]) < 3.0) ChangeSafeDoorState(i, true);
	//---
	ShockWaveVehicles(playerid, x, y, z, radius);
	//---
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i ++)
	{
	    new Float:fDist = GetDistanceToPoint(i, x, y, z);
	    if(FCNPC_IsValid(i))
	    {
	    	new Float:fDamage;
			switch(type)
			{
			    case EXPLOSION_TINY: fDamage = (fDist < 1.0) ? 100.0 : ((fDist < 2.0) ? 50.0 : (fDist < 3.0) ? 25.0 : 0.0);
			    case EXPLOSION_SMALL: fDamage = (fDist < 3.0) ? 100.0 : ((fDist < 6.0) ? 50.0 : (fDist < 9.0) ? 25.0 : 0.0);
				case EXPLOSION_FIRE: fDamage = (fDist < 4.0) ? 100.0 : ((fDist < 8.0) ? 50.0 : (fDist < 10.0) ? 25.0 : 0.0);
				case EXPLOSION_LARGE: fDamage = (fDist < 5.0) ? 100.0 : ((fDist < 10.0) ? 50.0 : (fDist < 15.0) ? 25.0 : 0.0);
				case EXPLOSION_HUGE: fDamage = (fDist < 7.0) ? 100.0 : ((fDist < 14.0) ? 50.0 : (fDist < 21.0) ? 25.0 : 0.0);
			}
			if(fDist < radius && fDamage != 0.0)
			{
			    new zombie = GetZombieID(i);
			    new Float:fZHealth = FCNPC_GetHealth(i);
				//OnPlayerGiveDamage(playerid, i, 0.1, 51, 3);
			    fZHealth -= (dZombie[zombie][dZombieClass] == TANKER) ? fDamage * 7.5 : fDamage;
				FCNPC_SetHealth(i, fZHealth);
				UpdateHealthBar(playerid, floatround(fZHealth, floatround_floor), (dZombie[zombie][dZombieClass] == TANKER) ? 750 : 100, "Zombie", "Zombie", "Zombie", "Zombie", "Zombie", "Zombie");
			}
	    }
	    else
	    {
			PlayerPlaySound(i, 1159, x, y, z);
			if(IsPlayerInAnyVehicle(playerid)) continue;
	        new dDamage = (fDist < radius * 0.25 ? -1000 : (fDist < radius * 0.33 ? -500 : (fDist < radius * 0.66 ? -250 : (fDist < radius * 0.8 ? -100 : 0))));
			if(pPlayerInfos[i][dBomberman] == 1) dDamage = floatround(floatdiv(dDamage, 3) * 2, floatround_round);
			else if(pPlayerInfos[i][dBomberman] == 2) dDamage = floatround(floatdiv(dDamage, 3), floatround_round);
			//---
			if(fDist < radius && dDamage != 0)
			{
				GivePlayerHealth(i, dDamage, 51, playerid);
			}
	    }
	}
}

ShockWaveVehicles(playerid, Float:x, Float:y, Float:z, Float:radius)
{
	//printf("1");
	new Float:dist;
	for(new i = 1; i < MAX_VEHICLES + 1; i ++)
	{
	    if(!IsValidVehicle(i)) continue;
		new Float:vx, Float:vy, Float:vz;
		GetVehiclePos(i, vx, vy, vz);
	    if(IsColBetweenTwoPos(x, y, z, vx, vy, vz)) continue;
	    dist = GetDistanceBetweenPoints(vx, vy, vz, x, y, z);
	    if(dist > radius) continue;
	    else if(dist < radius * 0.4) ShockWaveVehicle(playerid, i, GetZAngleBetweenPos(x, y, vx, vy), 5);
		else if(dist < radius * 0.6) ShockWaveVehicle(playerid, i, GetZAngleBetweenPos(x, y, vx, vy), 4);
		else if(dist < radius * 0.8) ShockWaveVehicle(playerid, i, GetZAngleBetweenPos(x, y, vx, vy), 3);
		else if(dist < radius * 1.0) ShockWaveVehicle(playerid, i, GetZAngleBetweenPos(x, y, vx, vy), 2);
		else if(dist < radius * 1.5) ShockWaveVehicle(playerid, i, GetZAngleBetweenPos(x, y, vx, vy), 1);
		//printf("%d %f", i, dist);
	}
}

ShockWaveVehicle(playerid, vehicleid, Float:atang2, strenght)
{
	#pragma unused playerid
	new Float:vx, Float:vy, Float:vz, Float:angle;
	GetVehicleVelocity(vehicleid, vx, vy, vz);
	//---
	new Float:fPower;
	switch(strenght)
	{
		case 1:
		{
		    GiveVehicleHealth(vehicleid, -100.0);
			fPower = 0.05;
		}
		case 2:
		{
		    GiveVehicleHealth(vehicleid, -250.0);
			fPower = 0.12;
		}
		case 3:
		{
		    GiveVehicleHealth(vehicleid, -400.0);
			fPower = 0.17;
		}
		case 4:
		{
		    GiveVehicleHealth(vehicleid, -600.0);
			fPower = 0.25;
		}
		case 5:
		{
		    GiveVehicleHealth(vehicleid, -800.0);
			fPower = 0.35;
		}
	}
	//---
	SetVehicleVelocity(vehicleid, vx + fPower * floatsin(angle, degrees), vy + fPower * floatcos(angle, degrees), vz);
	SetVehicleAngularVelocity(vehicleid, fPower * floatsin(atang2, degrees), fPower * floatcos(atang2, degrees), fPower);
}

GetZombieID(playerid)
{
	for(new i = 0; i < MAX_ZOMBIES; i ++)
	{
	    if(playerid == dZombie[i][dZombieID])
	    {
	        return i;
	    }
	}
	return -1;
}

public StopShaking(playerid)
{
	SetPlayerDrunkLevel(playerid, 0);
}

LoadAnimations(playerid)
{
	new AnimLibraies[129][14] =
	{
		"AIRPORT","Attractors","BAR","BASEBALL","BD_FIRE","BEACH","benchpress","BF_injection","BIKED","BIKEH",
		"BIKELEAP","BIKES","BIKEV","BIKE_DBZ","BLOWJOBZ","BMX","BOMBER","BOX","BSKTBALL","BUDDY","BUS","CAMERA",
		"CAR","CARRY","CAR_CHAT","CASINO","CHAINSAW","CHOPPA","CLOTHES","COACH","COLT45","COP_AMBIENT","COP_DVBYZ",
		"CRACK","CRIB","DAM_JUMP","DANCING","DEALER","DILDO","DODGE","DOZER","DRIVEBYS","FAT","FIGHT_B","FIGHT_C",
		"FIGHT_D","FIGHT_E","FINALE","FINALE2","FLAME","Flowers","FOOD","Freeweights","GANGS","GHANDS","GHETTO_DB",
		"goggles","GRAFFITI","GRAVEYARD","GRENADE","GYMNASIUM","HAIRCUTS","HEIST9","INT_HOUSE","INT_OFFICE",
		"INT_SHOP","JST_BUISNESS","KART","KISSING","KNIFE","LAPDAN1","LAPDAN2","LAPDAN3","LOWRIDER","MD_CHASE",
		"MD_END","MEDIC","MISC","MTB","MUSCULAR","NEVADA","ON_LOOKERS","OTB","PARACHUTE","PARK","PAULNMAC","ped",
		"PLAYER_DVBYS","PLAYIDLES","POLICE","POOL","POOR","PYTHON","QUAD","QUAD_DBZ","RAPPING","RIFLE","RIOT",
		"ROB_BANK","ROCKET","RUSTLER","RYDER","SCRATCHING","SHAMAL","SHOP","SHOTGUN","SILENCED","SKATE","SMOKING",
		"SNIPER","SPRAYCAN","STRIP","SUNBATHE","SWAT","SWEET","SWIM","SWORD","TANK","TATTOOS","TEC","TRAIN","TRUCK",
		"UZI","VAN","VENDING","VORTEX","WAYFARER","WEAPONS","WUZI"
	};
	for(new a = 0; a < 129; a ++) ApplyAnimation(playerid, AnimLibraies[a], "null", 0.0, 0, 0, 0, 0, 0);
}

GetVehicleWithinDistance(Float:x1, Float:y1, Float:z1, Float:dist, &vehi)//Fonction pour récupérer un véhicule proche d'une position
{
	new Float:x2, Float:y2, Float:z2, Float:d;
	for(new i = 1; i < MAX_VEHICLES + 1; i++)
	{
		if(GetVehicleModel(i) > 0)
		{
			GetVehiclePos(i, x2, y2, z2);
			x2 -= x1; y2 -= y1; z2 -= z1;
			d = x2*x2 + y2*y2 + z2*z2;
			if(d < dist)
			{
				vehi = i;
				dist = d;
			}
		}
	}
}

IsPlayerNearVehicle(playerid)//Fonction pour savoir si un joueur est proche d'un véhicule
{
	new Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2;
	GetPlayerPos(playerid, x1, y1, z1);
	for(new i = 1; i < MAX_VEHICLES + 1; i++)
	{
		if(GetVehicleModel(i) > 0)
		{
			GetVehiclePos(i, x2, y2, z2);
			x2 -= x1; y2 -= y1; z2 -= z1;
			if(x2 * x2 + y2 * y2 + z2 * z2 < 10.0) return true;
		}
	}
	return false;
}

GetClosestPlayerToDynamicObject(objectid)
{
	if(IsValidDynamicObject(objectid))
	{
		new Float:xo, Float:yo, Float:zo, Float:px, Float:py, Float:pz;
  		GetDynamicObjectPos(objectid, xo, yo, zo);
		new closestplayer = INVALID_PLAYER_ID;
		new Float:closestdist = 9999.9999;
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(FCNPC_IsValid(i) || !IsPlayerConnected(i)) continue;
			GetPlayerPos(i, px, py, pz);
			new Float:dist = GetDistanceBetweenPoints(xo, yo, zo, px, py, pz);
			if ((dist < closestdist))
			{
				closestdist = dist;
				closestplayer = i;
			}
		}
		return closestplayer;
	}
	return INVALID_PLAYER_ID;
}

public IsDynamicObjectNearToPlayer(Float:radi, playerid, objectid)
{
	if(IsPlayerConnected(playerid) && !FCNPC_IsValid(playerid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
  		GetDynamicObjectPos(objectid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		tempposz = (oldposz -posz);
		if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return true;
		}
	}
	return false;
}

public IsObjectNearToPlayer(Float:radi, playerid, objectid)
{
	if(IsPlayerConnected(playerid) && !FCNPC_IsValid(playerid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
  		GetObjectPos(objectid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		tempposz = (oldposz -posz);
		if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return true;
		}
	}
	return false;
}

public SwapPlayerObjects(playerid, slotid1, slotid2)//Fonction pour changer de place deux objets à partir des slots
{
	new info[2];
	info[0] = GetPlayerSlotObject(playerid, slotid1);//On récupère l'id de l'objet dans le slot 1
	info[1] = GetPlayerSlotObject(playerid, slotid2);//...pareil pour le slot 2
	//---
	#if defined TOO_HEAVY_FOR_BAG
	if((aObjects[info[0]][bHeavy] && 36 > slotid2 > 1) || (aObjects[info[1]][bHeavy] && 36 > slotid1 >= 1)) return 0;
	#endif
	//---
	if(info[0] != info[1])
	{
		GivePlayerSlotObject(playerid, info[0], slotid2);//Et on give l'objet 1 dans le slot 2 et vice versa
		GivePlayerSlotObject(playerid, info[1], slotid1);
	}
	return 1;
}

public SetVehicleBonnetState(vehicleid, bool:open)//Pour ouvrir ou fermer le capot du véhicule
{
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, open, boot, objective);
}

public SetVehicleTrunkState(vehicleid, bool:open)//Pour ouvrir ou fermer le coffre du véhicule
{
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, open, objective);
}

GetVehicleID(vehicleid)
{
	if(!IsValidVehicle(vehicleid)) return -1;
	for(new i = 0; i < MAX_SPAWN_VEHICLES; i ++) if(dVehicleInfos[i][dVehicleID] == vehicleid) return i;
	return -1;
}

public DestroyVeh(vehicleid)
{
	DestroyVehicle(dVehicleInfos[vehicleid][dVehicleID]);
	SetVehicleEngineState(dVehicleInfos[vehicleid][dVehicleID], false);
	dVehicleInfos[vehicleid][dVehicleModel] = 0;
	dVehicleInfos[vehicleid][dWheels] = 0;
	dVehicleInfos[vehicleid][dItem] = 0;
	dVehicleInfos[vehicleid][dColor][0] = 0;
	dVehicleInfos[vehicleid][dColor][1] = 0;
	dVehicleInfos[vehicleid][xVeh] = 0.0;
	dVehicleInfos[vehicleid][yVeh] = 0.0;
	dVehicleInfos[vehicleid][zVeh] = 0.0;
	dVehicleInfos[vehicleid][aVeh] = 0.0;
	dVehicleInfos[vehicleid][dFuel] = 0;
	dVehicleInfos[vehicleid][bEngine] = false;
	dVehicleInfos[vehicleid][bWheel][0] = false;
	dVehicleInfos[vehicleid][bWheel][1] = false;
	dVehicleInfos[vehicleid][bWheel][2] = false;
	dVehicleInfos[vehicleid][bWheel][3] = false;
	dVehicleInfos[vehicleid][TrunkObject][0] = 0;
	dVehicleInfos[vehicleid][TrunkObject][1] = 0;
	dVehicleInfos[vehicleid][TrunkObject][2] = 0;
	dVehicleInfos[vehicleid][TrunkObject][3] = 0;
	dVehicleInfos[vehicleid][TrunkObject][4] = 0;
	dVehicleInfos[vehicleid][TrunkObject][5] = 0;
	dVehicleInfos[vehicleid][dVehicleID] = INVALID_VEHICLE_ID;
}

public CreateRandomVehicle()
{
	new vehicleid = -1;
	for(new i = 0; i < MAX_SPAWN_VEHICLES; i ++)
	{
	    if(dVehicleInfos[i][dVehicleModel] == 0)
	    {
	        vehicleid = i;
	        break;
	    }
	}
	if(vehicleid != -1 && !IsValidVehicle(dVehicleInfos[vehicleid][dVehicleID]))
	{
	    new dType = RandomEx(0, 10);
	    if((dType == 4 || dType == 5 || dType == 6) && RandomEx(0, 5) > 2) dType = RandomEx(0, 10);
	    switch(dType)
	    {
	        case 0://4x4
	        {
	            if(GetRandomVehicleSpawn(0, dVehicleInfos[vehicleid][xVeh], dVehicleInfos[vehicleid][yVeh], dVehicleInfos[vehicleid][zVeh], dVehicleInfos[vehicleid][aVeh]) == 0) return 1;
			    new d4x4IDs[][2] =
			    {
			        {400, 4}, {422, 4}, {424, 2},
					{470, 6}, {489, 6}, {495, 3},
					{568, 1}
			    };
			    //GetRandomVehicleSpawn(0, dVehicleInfos[vehicleid][xVeh], dVehicleInfos[vehicleid][yVeh], dVehicleInfos[vehicleid][zVeh], dVehicleInfos[vehicleid][aVeh]);
			    new dRand = random(sizeof(d4x4IDs));
				dVehicleInfos[vehicleid][dVehicleModel] = d4x4IDs[dRand][0];
				dVehicleInfos[vehicleid][dItem] = d4x4IDs[dRand][1];
			    dVehicleInfos[vehicleid][dWheels] = 4;
				dVehicleInfos[vehicleid][dColor][0] = RandomEx(0, 256);
				dVehicleInfos[vehicleid][dColor][1] = RandomEx(0, 256);
				dVehicleInfos[vehicleid][dFuel] = RandomEx(0, 4000);
 				dVehicleInfos[vehicleid][dVehicleID] = CreateVehicle(dVehicleInfos[vehicleid][dVehicleModel], dVehicleInfos[vehicleid][xVeh], dVehicleInfos[vehicleid][yVeh], dVehicleInfos[vehicleid][zVeh],dVehicleInfos[vehicleid][aVeh], dVehicleInfos[vehicleid][dColor][0],dVehicleInfos[vehicleid][dColor][1], -1, false);
			    SetVehicleEngineState(dVehicleInfos[vehicleid][dVehicleID], false);
			    dVehicleInfos[vehicleid][bEngine] = (RandomEx(0, 5) < 3) ? true : false;
			    for(new i = 0; i < 4; i ++) dVehicleInfos[vehicleid][bWheel][i] = (RandomEx(0, 4) < 3) ? true : false;
			    SetVehicleWheels(dVehicleInfos[vehicleid][dVehicleID]);
			    //---
			    if(RandomEx(0, 10) < 3)
			    {
					GivePlayerTrunkObject(INVALID_PLAYER_ID, vehicleid, CallRemoteFunction("PickRandomItem", "dddddd", 30, 15, 30, 15, 5, 5), 0);
					if(d4x4IDs[dRand][1] > 1 && RandomEx(0, 10) < 3)
					{
						GivePlayerTrunkObject(INVALID_PLAYER_ID, vehicleid, CallRemoteFunction("PickRandomItem", "dddddd", 30, 15, 30, 15, 5, 5), 1);
					}
			    }
	        }
	        case 1://Motos
	        {
	            if(GetRandomVehicleSpawn(0, dVehicleInfos[vehicleid][xVeh], dVehicleInfos[vehicleid][yVeh], dVehicleInfos[vehicleid][zVeh], dVehicleInfos[vehicleid][aVeh]) == 0) return 1;
			    new dBikesIDs[][2] =
			    {
			        {461, 1}, {462, 2}, {463, 3},
					{468, 1}, {471, 3}, {581, 1},
					{586, 4}
			    };
			    new dRand = random(sizeof(dBikesIDs));
				dVehicleInfos[vehicleid][dVehicleModel] = dBikesIDs[dRand][0];
				dVehicleInfos[vehicleid][dItem] = dBikesIDs[dRand][1];
			    dVehicleInfos[vehicleid][dWheels] = (dRand == 4) ? 4 : 2;
				dVehicleInfos[vehicleid][dColor][0] = RandomEx(0, 256);
				dVehicleInfos[vehicleid][dColor][1] = RandomEx(0, 256);
				dVehicleInfos[vehicleid][dFuel] = RandomEx(0, 1500);
 				dVehicleInfos[vehicleid][dVehicleID] = CreateVehicle(dVehicleInfos[vehicleid][dVehicleModel], dVehicleInfos[vehicleid][xVeh], dVehicleInfos[vehicleid][yVeh], dVehicleInfos[vehicleid][zVeh],dVehicleInfos[vehicleid][aVeh], dVehicleInfos[vehicleid][dColor][0],dVehicleInfos[vehicleid][dColor][1], -1, false);
			    SetVehicleEngineState(dVehicleInfos[vehicleid][dVehicleID], false);
			    dVehicleInfos[vehicleid][bEngine] = (RandomEx(0, 5) < 2) ? true : false;
			    for(new i = 0; i < 2; i ++) dVehicleInfos[vehicleid][bWheel][i] = (RandomEx(0, 4) < 2) ? true : false;
			    SetVehicleWheels(dVehicleInfos[vehicleid][dVehicleID]);
			    //---
			    if(RandomEx(0, 10) < 3)
			    {
					GivePlayerTrunkObject(INVALID_PLAYER_ID, vehicleid, CallRemoteFunction("PickRandomItem", "dddddd", 30, 15, 30, 15, 5, 5), 0);
					if(dBikesIDs[dRand][1] > 1 && RandomEx(0, 10) < 3)
					{
						GivePlayerTrunkObject(INVALID_PLAYER_ID, vehicleid, CallRemoteFunction("PickRandomItem", "dddddd", 30, 15, 30, 15, 5, 5), 1);
					}
			    }
			}
	        case 2://Industriel
	        {
	            if(GetRandomVehicleSpawn(0, dVehicleInfos[vehicleid][xVeh], dVehicleInfos[vehicleid][yVeh], dVehicleInfos[vehicleid][zVeh], dVehicleInfos[vehicleid][aVeh]) == 0) return 1;
	            new dInduIDs[][2] =
	            {
	                {413, 6}, {456, 6}, {478, 4},
	                {482, 6}, {498, 6}, {531, 1}
	            };
			    new dRand = random(sizeof(dInduIDs));
				dVehicleInfos[vehicleid][dVehicleModel] = dInduIDs[dRand][0];
				dVehicleInfos[vehicleid][dItem] = dInduIDs[dRand][1];
			    dVehicleInfos[vehicleid][dWheels] = 4;
				dVehicleInfos[vehicleid][dColor][0] = RandomEx(0, 256);
				dVehicleInfos[vehicleid][dColor][1] = RandomEx(0, 256);
				dVehicleInfos[vehicleid][dFuel] = RandomEx(0, 5000);
 				dVehicleInfos[vehicleid][dVehicleID] = CreateVehicle(dVehicleInfos[vehicleid][dVehicleModel], dVehicleInfos[vehicleid][xVeh], dVehicleInfos[vehicleid][yVeh], dVehicleInfos[vehicleid][zVeh],dVehicleInfos[vehicleid][aVeh], dVehicleInfos[vehicleid][dColor][0],dVehicleInfos[vehicleid][dColor][1], -1, false);
			    SetVehicleEngineState(dVehicleInfos[vehicleid][dVehicleID], false);
			    dVehicleInfos[vehicleid][bEngine] = (RandomEx(0, 5) < 4) ? true : false;
			    for(new i = 0; i < 4; i ++) dVehicleInfos[vehicleid][bWheel][i] = (RandomEx(0, 4) < 3) ? true : false;
			    SetVehicleWheels(dVehicleInfos[vehicleid][dVehicleID]);
			    //---
			    if(RandomEx(0, 10) < 3)
			    {
					GivePlayerTrunkObject(INVALID_PLAYER_ID, vehicleid, CallRemoteFunction("PickRandomItem", "dddddd", 30, 15, 30, 15, 5, 5), 0);
					if(dInduIDs[dRand][1] > 1 && RandomEx(0, 10) < 3)
					{
						GivePlayerTrunkObject(INVALID_PLAYER_ID, vehicleid, CallRemoteFunction("PickRandomItem", "dddddd", 10, 15, 30, 15, 5, 15), 1);
					}
			    }
	        }
	        case 3://Sportives
	        {
	            if(GetRandomVehicleSpawn(0, dVehicleInfos[vehicleid][xVeh], dVehicleInfos[vehicleid][yVeh], dVehicleInfos[vehicleid][zVeh], dVehicleInfos[vehicleid][aVeh]) == 0) return 1;
	            new dSportIDs[][2] =
	            {
	                {402, 3}, {415, 3}, {429, 3},
	                {451, 2}, {475, 4}, {541, 3},
	                {559, 3}, {560, 3}, {562, 2},
					{587, 3}, {603, 2}
	            };
			    new dRand = random(sizeof(dSportIDs));
				dVehicleInfos[vehicleid][dVehicleModel] = dSportIDs[dRand][0];
				dVehicleInfos[vehicleid][dItem] = dSportIDs[dRand][1];
			    dVehicleInfos[vehicleid][dWheels] = 4;
				dVehicleInfos[vehicleid][dColor][0] = RandomEx(0, 256);
				dVehicleInfos[vehicleid][dColor][1] = RandomEx(0, 256);
				dVehicleInfos[vehicleid][dFuel] = RandomEx(0, 2500);
 				dVehicleInfos[vehicleid][dVehicleID] = CreateVehicle(dVehicleInfos[vehicleid][dVehicleModel], dVehicleInfos[vehicleid][xVeh], dVehicleInfos[vehicleid][yVeh], dVehicleInfos[vehicleid][zVeh],dVehicleInfos[vehicleid][aVeh], dVehicleInfos[vehicleid][dColor][0],dVehicleInfos[vehicleid][dColor][1], -1, false);
			    SetVehicleEngineState(dVehicleInfos[vehicleid][dVehicleID], false);
			    dVehicleInfos[vehicleid][bEngine] = (RandomEx(0, 5) < 1) ? true : false;
			    for(new i = 0; i < 4; i ++) dVehicleInfos[vehicleid][bWheel][i] = (RandomEx(0, 4) < 1) ? true : false;
			    SetVehicleWheels(dVehicleInfos[vehicleid][dVehicleID]);
			    //---
			    if(RandomEx(0, 10) < 2)
			    {
					GivePlayerTrunkObject(INVALID_PLAYER_ID, vehicleid, CallRemoteFunction("PickRandomItem", "dddddd", 25, 25, 25, 15, 5, 5), 0);
					if(dSportIDs[dRand][1] > 1 && RandomEx(0, 10) < 3)
					{
						GivePlayerTrunkObject(INVALID_PLAYER_ID, vehicleid, CallRemoteFunction("PickRandomItem", "dddddd", 25, 25, 25, 15, 5, 5), 1);
					}
			    }
	        }
	        case 4://Avions
	        {
	            if(GetRandomVehicleSpawn(2, dVehicleInfos[vehicleid][xVeh], dVehicleInfos[vehicleid][yVeh], dVehicleInfos[vehicleid][zVeh], dVehicleInfos[vehicleid][aVeh]) == 0) return 1;
	            new dPlaneIDs[][2] =
	            {
	                {511, 6}, {513, 6}, {593, 6}
	            };
			    new dRand = random(sizeof(dPlaneIDs));
				dVehicleInfos[vehicleid][dVehicleModel] = dPlaneIDs[dRand][0];
				dVehicleInfos[vehicleid][dItem] = dPlaneIDs[dRand][1];
			    dVehicleInfos[vehicleid][dWheels] = 0;
				dVehicleInfos[vehicleid][dColor][0] = RandomEx(0, 256);
				dVehicleInfos[vehicleid][dColor][1] = RandomEx(0, 256);
				dVehicleInfos[vehicleid][dFuel] = RandomEx(2500, 15000);
			    dVehicleInfos[vehicleid][bEngine] = (RandomEx(0, 5) < 3) ? true : false;
 				dVehicleInfos[vehicleid][dVehicleID] = CreateVehicle(dVehicleInfos[vehicleid][dVehicleModel], dVehicleInfos[vehicleid][xVeh], dVehicleInfos[vehicleid][yVeh], dVehicleInfos[vehicleid][zVeh],dVehicleInfos[vehicleid][aVeh], dVehicleInfos[vehicleid][dColor][0],dVehicleInfos[vehicleid][dColor][1], -1, false);
 				SetVehicleEngineState(dVehicleInfos[vehicleid][dVehicleID], false);
			    //---
			    if(RandomEx(0, 10) < 3)
			    {
					GivePlayerTrunkObject(INVALID_PLAYER_ID, vehicleid, CallRemoteFunction("PickRandomItem", "dddddd", 30, 15, 30, 15, 5, 5), 0);
					if(dPlaneIDs[dRand][1] > 1 && RandomEx(0, 10) < 3)
					{
						GivePlayerTrunkObject(INVALID_PLAYER_ID, vehicleid, CallRemoteFunction("PickRandomItem", "dddddd", 30, 15, 30, 15, 5, 5), 1);
					}
			    }
	        }
	        case 5://Bâteaux
	        {
	            if(GetRandomVehicleSpawn(3, dVehicleInfos[vehicleid][xVeh], dVehicleInfos[vehicleid][yVeh], dVehicleInfos[vehicleid][zVeh], dVehicleInfos[vehicleid][aVeh]) == 0) return 1;
	            new dBoatIDs[][2] =
	            {
	                {446, 4}, {452, 4}, {454, 6},
	                {472, 6}, {473, 2}, {493, 4}
	            };
			    new dRand = random(sizeof(dBoatIDs));
				dVehicleInfos[vehicleid][dVehicleModel] = dBoatIDs[dRand][0];
				dVehicleInfos[vehicleid][dItem] = dBoatIDs[dRand][1];
			    dVehicleInfos[vehicleid][dWheels] = 0;
				dVehicleInfos[vehicleid][dColor][0] = RandomEx(0, 256);
				dVehicleInfos[vehicleid][dColor][1] = RandomEx(0, 256);
				dVehicleInfos[vehicleid][dFuel] = RandomEx(2500, 5000);
			    dVehicleInfos[vehicleid][bEngine] = (RandomEx(0, 5) < 3) ? true : false;
 				dVehicleInfos[vehicleid][dVehicleID] = CreateVehicle(dVehicleInfos[vehicleid][dVehicleModel], dVehicleInfos[vehicleid][xVeh], dVehicleInfos[vehicleid][yVeh], dVehicleInfos[vehicleid][zVeh],dVehicleInfos[vehicleid][aVeh], dVehicleInfos[vehicleid][dColor][0],dVehicleInfos[vehicleid][dColor][1], -1, false);
 				SetVehicleEngineState(dVehicleInfos[vehicleid][dVehicleID], false);
			    //---
			    if(RandomEx(0, 10) < 3)
			    {
					GivePlayerTrunkObject(INVALID_PLAYER_ID, vehicleid, CallRemoteFunction("PickRandomItem", "dddddd", 30, 15, 30, 15, 5, 5), 0);
					if(dBoatIDs[dRand][1] > 1 && RandomEx(0, 10) < 3)
					{
						GivePlayerTrunkObject(INVALID_PLAYER_ID, vehicleid, CallRemoteFunction("PickRandomItem", "dddddd", 30, 15, 30, 15, 5, 5), 1);
					}
			    }
	        }
	        case 6://Hélicos
	        {
	            if(GetRandomVehicleSpawn(1, dVehicleInfos[vehicleid][xVeh], dVehicleInfos[vehicleid][yVeh], dVehicleInfos[vehicleid][zVeh], dVehicleInfos[vehicleid][aVeh]) == 0) return 1;
	            new dHeliIDs[][2] =
	            {
	                {417, 6}, {469, 4}, {487, 4}
	            };
			    new dRand = random(sizeof(dHeliIDs));
				dVehicleInfos[vehicleid][dVehicleModel] = dHeliIDs[dRand][0];
				dVehicleInfos[vehicleid][dItem] = dHeliIDs[dRand][1];
			    dVehicleInfos[vehicleid][dWheels] = 0;
				dVehicleInfos[vehicleid][dColor][0] = RandomEx(0, 256);
				dVehicleInfos[vehicleid][dColor][1] = RandomEx(0, 256);
				dVehicleInfos[vehicleid][dFuel] = RandomEx(0, 8000);
			    dVehicleInfos[vehicleid][bEngine] = (RandomEx(0, 5) < 3) ? true : false;
			    dVehicleInfos[vehicleid][dVehicleID] = CreateVehicle(dVehicleInfos[vehicleid][dVehicleModel], dVehicleInfos[vehicleid][xVeh], dVehicleInfos[vehicleid][yVeh], dVehicleInfos[vehicleid][zVeh],dVehicleInfos[vehicleid][aVeh], dVehicleInfos[vehicleid][dColor][0], dVehicleInfos[vehicleid][dColor][1], -1, false);
 				SetVehicleEngineState(dVehicleInfos[vehicleid][dVehicleID], false);
			    //---
			    if(RandomEx(0, 10) < 3)
			    {
					GivePlayerTrunkObject(INVALID_PLAYER_ID, vehicleid, CallRemoteFunction("PickRandomItem", "dddddd", 30, 15, 30, 15, 5, 5), 0);
					if(dHeliIDs[dRand][1] > 1 && RandomEx(0, 10) < 3)
					{
						GivePlayerTrunkObject(INVALID_PLAYER_ID, vehicleid, CallRemoteFunction("PickRandomItem", "dddddd", 30, 15, 30, 15, 5, 5), 1);
					}
			    }
	        }
	        case 7://Publiques
	        {
	            if(GetRandomVehicleSpawn(0, dVehicleInfos[vehicleid][xVeh], dVehicleInfos[vehicleid][yVeh], dVehicleInfos[vehicleid][zVeh], dVehicleInfos[vehicleid][aVeh]) == 0) return 1;
	            new dPublicIDs[][2] =
	            {
	                {407, 6}, {416, 6}, {420, 2},
	                {490, 4}, {596, 3}, {599, 3}
	            };
			    new dRand = random(sizeof(dPublicIDs));
				dVehicleInfos[vehicleid][dVehicleModel] = dPublicIDs[dRand][0];
				dVehicleInfos[vehicleid][dItem] = dPublicIDs[dRand][1];
			    dVehicleInfos[vehicleid][dWheels] = 4;
				dVehicleInfos[vehicleid][dColor][0] = RandomEx(0, 256);
				dVehicleInfos[vehicleid][dColor][1] = RandomEx(0, 256);
				dVehicleInfos[vehicleid][dFuel] = RandomEx(0, 2500);
 				CreateVehicle(dVehicleInfos[vehicleid][dVehicleModel], dVehicleInfos[vehicleid][xVeh], dVehicleInfos[vehicleid][yVeh], dVehicleInfos[vehicleid][zVeh],dVehicleInfos[vehicleid][aVeh], dVehicleInfos[vehicleid][dColor][0],dVehicleInfos[vehicleid][dColor][1], -1, false);
			    SetVehicleEngineState(dVehicleInfos[vehicleid][dVehicleID], false);
			    dVehicleInfos[vehicleid][bEngine] = (RandomEx(0, 5) < 4) ? true : false;
			    for(new i = 0; i < 4; i ++) dVehicleInfos[vehicleid][bWheel][i] = (RandomEx(0, 4) < 3) ? true : false;
			    SetVehicleWheels(dVehicleInfos[vehicleid][dVehicleID]);
			    //---
			    if(RandomEx(0, 10) < 5)//PickRandomItem(neutral, gun, vehicle, medic, clothes, bag)
			    {
					if(dRand == 0 || dRand == 2) GivePlayerTrunkObject(INVALID_PLAYER_ID, vehicleid, CallRemoteFunction("PickRandomItem", "dddddd", 30, 15, 30, 15, 5, 5), 0);
					else if(dRand == 1) GivePlayerTrunkObject(INVALID_PLAYER_ID, vehicleid, CallRemoteFunction("PickRandomItem", "dddddd", 20, 10, 10, 50, 5, 5), 0);
					else if(dRand == 3 || dRand == 4 || dRand == 5) GivePlayerTrunkObject(INVALID_PLAYER_ID, vehicleid, CallRemoteFunction("PickRandomItem", "dddddd", 15, 50, 15, 10, 5, 5), 0);
					if(dPublicIDs[dRand][1] > 1 && RandomEx(0, 10) < 5)
					{
						if(dRand == 0 || dRand == 2) GivePlayerTrunkObject(INVALID_PLAYER_ID, vehicleid, CallRemoteFunction("PickRandomItem", "dddddd", 30, 15, 30, 15, 5, 5), 0);
						else if(dRand == 1) GivePlayerTrunkObject(INVALID_PLAYER_ID, vehicleid, CallRemoteFunction("PickRandomItem", "dddddd", 20, 10, 10, 50, 5, 5), 0);
						else if(dRand == 3 || dRand == 4 || dRand == 5) GivePlayerTrunkObject(INVALID_PLAYER_ID, vehicleid, CallRemoteFunction("PickRandomItem", "dddddd", 15, 50, 15, 10, 5, 5), 0);
					}
			    }
	        }
	        case 8://Vélos
	        {
	            if(GetRandomVehicleSpawn(0, dVehicleInfos[vehicleid][xVeh], dVehicleInfos[vehicleid][yVeh], dVehicleInfos[vehicleid][zVeh], dVehicleInfos[vehicleid][aVeh]) == 0) return 1;
	            new dBicycIDs[][2] =
	            {
	                {481, 0}, {509, 0}, {510, 0}
	            };
			    new dRand = random(sizeof(dBicycIDs));
				dVehicleInfos[vehicleid][dVehicleModel] = dBicycIDs[dRand][0];
				dVehicleInfos[vehicleid][dItem] = dBicycIDs[dRand][1];
			    dVehicleInfos[vehicleid][dWheels] = 0;
				dVehicleInfos[vehicleid][dColor][0] = RandomEx(0, 256);
				dVehicleInfos[vehicleid][dColor][1] = RandomEx(0, 256);
				dVehicleInfos[vehicleid][dFuel] = -1;
			    dVehicleInfos[vehicleid][bEngine] = true;
 				dVehicleInfos[vehicleid][dVehicleID] = CreateVehicle(dVehicleInfos[vehicleid][dVehicleModel], dVehicleInfos[vehicleid][xVeh], dVehicleInfos[vehicleid][yVeh], dVehicleInfos[vehicleid][zVeh],dVehicleInfos[vehicleid][aVeh], dVehicleInfos[vehicleid][dColor][0],dVehicleInfos[vehicleid][dColor][1], -1, false);
	        }
	        case 9://Normales
	        {
	            if(GetRandomVehicleSpawn(0, dVehicleInfos[vehicleid][xVeh], dVehicleInfos[vehicleid][yVeh], dVehicleInfos[vehicleid][zVeh], dVehicleInfos[vehicleid][aVeh]) == 0) return 1;
	            new dNormIDs[][2] =
	            {
	                {405, 3}, {421, 3}, {426, 3},
	                {445, 3}, {492, 2}, {504, 3},
	                {542, 3}, {549, 3}, {551, 4},
	                {567, 4}, {604, 4}
	            };
			    new dRand = random(sizeof(dNormIDs));
				dVehicleInfos[vehicleid][dVehicleModel] = dNormIDs[dRand][0];
				dVehicleInfos[vehicleid][dItem] = dNormIDs[dRand][1];
			    dVehicleInfos[vehicleid][dWheels] = 4;
				dVehicleInfos[vehicleid][dColor][0] = RandomEx(0, 256);
				dVehicleInfos[vehicleid][dColor][1] = RandomEx(0, 256);
				dVehicleInfos[vehicleid][dFuel] = RandomEx(1500, 3500);
 				dVehicleInfos[vehicleid][dVehicleID] = CreateVehicle(dVehicleInfos[vehicleid][dVehicleModel], dVehicleInfos[vehicleid][xVeh], dVehicleInfos[vehicleid][yVeh], dVehicleInfos[vehicleid][zVeh],dVehicleInfos[vehicleid][aVeh], dVehicleInfos[vehicleid][dColor][0],dVehicleInfos[vehicleid][dColor][1], -1, false);
				SetVehicleEngineState(dVehicleInfos[vehicleid][dVehicleID], false);
			    dVehicleInfos[vehicleid][bEngine] = (RandomEx(0, 5) < 4) ? true : false;
			    for(new i = 0; i < 4; i ++) dVehicleInfos[vehicleid][bWheel][i] = (RandomEx(0, 4) < 3) ? true : false;
			    SetVehicleWheels(dVehicleInfos[vehicleid][dVehicleID]);
			    //---
			    if(RandomEx(0, 10) < 5)
			    {
					GivePlayerTrunkObject(INVALID_PLAYER_ID, vehicleid, CallRemoteFunction("PickRandomItem", "dddddd", 30, 15, 30, 15, 5, 5), 0);
					if(dNormIDs[dRand][1] > 1 && RandomEx(0, 10) < 5)
					{
						GivePlayerTrunkObject(INVALID_PLAYER_ID, vehicleid, CallRemoteFunction("PickRandomItem", "dddddd", 30, 15, 30, 15, 5, 5), 1);
					}
			    }
	        }
	    }
 	}
 	return 1;
}

GetRandomVehicleSpawn(type, &Float:x, &Float:y, &Float:z, &Float:angle)
{
	new dTry = 0;
	switch(type)
	{
	    case 0://Sur terre
	    {
			new Float:fCarPos[][4] =
			{
			    //---RED COUNTY
			    {-741.887, -110.0589, 67.314, 16.0},
			    {-472.872, -64.0899, 60.7869, 90.0},
			    {-534.5609, -61.1479, 63.242, 270.0},
			    {-61.18, -78.0429, 3.367, 340.0},
			    {-63.2, 103.953, 3.367, 240.0},
			    {164.436, -33.9589, 1.8279, 180.0},
			    {265.588, 17.006, 2.6919, 90.0},
			    {287.212, -55.9329, 1.8279, 180.0},
			    {312.3909, -53.928, 1.8279, 180.0},
			    {314.048, -252.281, 1.8339, 260.0},
			    {90.6449, -303.5889, 1.8279, 0.0},
			    {202.8609, -306.346, 1.761, 180.0},
			    {509.8739, -212.832, 37.825, 180.0},
			    {667.5939, -543.354, 16.486, 90.0},
			    {827.3569, -497.625, 17.478, 180.0},
			    {762.8010, -510.333, 17.253, 180.0},
			    {700.6929, -455.1719, 16.486, 220.0},
			    {614.1929, -601.668, 17.3829, 220.0},
			    {797.4959, -617.106, 16.486, 0.0},
			    {1058.6169, -290.3789, 74.1419, 0.0},
			    {888.322, -25.5729, 63.375, 156.0},
			    {759.7429, 293.94, 20.693, 226.0},
			    {760.5599, 383.881, 23.322, 280.0},
			    {1134.467, 139.759, 29.7189, 280.0},
			    {1235.967, 212.781, 19.7049, 40.0},
			    {1408.383, 454.345, 20.354, 130.0},
			    {1394.1939, 387.8099, 19.908, 130.0},
			    {1422.479, 347.131, 18.9939, 40.0},
			    {1397.416, 302.54199, 19.7049, 270.0},
			    {1387.1469, 265.0729, 19.7169, 20.0},
			    {1432.722, 224.996, 19.7049, 64.0},
			    {1314.291, 194.712, 20.617, 64.0},
			    {1200.874, 142.8659, 20.687, 338.0},
			    {1585.939, 25.7399, 24.2479, 94.0},
			    {2152.7241, -90.85259, 2.851, 94.0},
			    {2252.7028, 160.6799, 27.3309, 180.0},
			    {2298.9331, 161.513, 26.634, 180.0},
			    {2253.5239, 105.551, 27.249, 180.0},
			    {2265.268, -122.205, 27.391, 210.0},
			    {2319.456, -72.1309, 26.634, 210.0},
			    {2397.404, -50.089, 27.547, 180.0},
			    {2446.7819, 11.3549, 26.634, 270.0},
			    {2451.2219, 87.679, 27.061, 270.0},
			    {2495.7719, 129.2489, 27.169, 180.0},
			    {2551.6589, 14.0799, 27.1709, 90.0},
			    {2360.9431, -652.306, 128.162, 150.0},
			    {2543.123, -761.13, 95.04, 270.0},
			    {1613.732, -327.898, 19.3299, 270.0},
			    //---FLINT COUNTY & WHETSTONE
			    {-2107.559, -2241.8911, 30.875, 160.0},
			    {-2140.8068, -2255.5048, 30.875, 230.0},
			    {-2208.809, -2255.7438, 30.9069, 230.0},
			    {-2230.009, -2311.996, 30.8519, 200.0},
			    {-2168.7939, -2283.56, 30.875, 140.0},
			    {-2218.582, -2406.456, 31.743, 240.0},
			    {-2198.458, -2435.5739, 30.875, 240.0},
			    {-2236.104, -2479.2939, 31.4309, 320.0},
			    {-2178.507, -2475.4951, 30.867, 320.0},
			    {-2200.7399, -2503.3769, 30.867, 320.0},
			    {-2168.6721, -2528.604, 30.867, 320.0},
			    {-2149.75, -2544.53, 30.867, 320.0},
			    {-2124.1931, -2504.1608, 30.867, 230.0},
			    {-2114.0991, -2488.2949, 30.875, 230.0},
			    {-2067.362, -2508.923, 30.892, 230.0},
			    {-2069.7629, -2530.25, 30.875, 320.0},
			    {-2068.4689, -2438.163, 30.875, 20.0},
			    {-2176.4431, -2428.404, 30.875, 50.0},
			    {-1582.9389, -2716.9221, 48.789, 110.0},
			    {26.624, -2638.4299, 40.673, 95.0},
			    {-20.0109, -2521.356, 36.8979, 65.0},
			    {-253.839, -2216.6589, 29.0219, 105.0},
			    {-84.2119, -1584.1879, 2.861, 185.0},
			    {-94.5459, -1195.0319, 2.568, 185.0},
			    {-62.359, -1140.411, 1.3279, 245.0},
			    {-397.1329, -1415.6429, 25.9769},
			    {-388.691, -1149.285, 69.6589, 355.0},
			    {-582.736, -1046.38, 23.8619, 0.0},
			    {-594.2299, -1084.253, 23.8239, 60.0},
			    {-577.765, -1474.328, 11.2969, 120.0},
			    {-1106.4439, -1621.225, 76.6169, 270.0},
			    {-1112.561, -1673.1519, 76.6169, 0.0},
			    {-1039.609, -1189.6309, 129.386, 0.0},
			    {-1033.3549, -1184.045, 129.386, 90.0},
			    {-1443.76, -1486.01, 102.008, 140.0},
			    {-490.6809, -487.8049, 25.7679, 180.0},
			    {-495.358, -487.6449, 25.7679, 0.0},
			    {-544.0689, -471.97198, 25.7679, 0.0},
			    {-350.696, -1051.8029, 59.5769, 90.0},
			    //---BONE COUNTY
			    {260.402, 1434.243, 10.836, 40.0},
			    {231.628, 1375.7919, 10.836, 0.0},
			    {197.3849, 1877.102, 17.898, 0.0},
			    {203.557, 1877.14, 17.891, 0.0},
			    {277.17, 1955.6109, 17.891, 270.0},
			    {142.7899, 1969.9169, 19.7649, 10.0},
			    {255.5070, 1808.233, 17.891, 0.0},
			    {-158.4049, 1648.274, 17.159, 60.0},
			    {-3.38, 1505.4179, 13.005, 120.0},
			    {3.6349, 1347.618, 9.4219, 120.0},
			    {-2.8699, 1395.953, 9.4219, 120.0},
			    {-105.647, 1372.0579, 10.5229, 120.0},
			    {-82.5579, 1340.477, 11.123, 200.0},
			    {-361.742, 1167.5589, 19.992, 200.0},
			    {-368.674, 1129.1739, 20.03, 105.0},
			    {-363.161, 1107.0319, 20.0049, 105.0},
			    {-321.747, 1056.5019, 19.992, 55.0},
			    {-304.605, 1032.1109, 19.8439, 105.0},
			    {-303.9609, 1018.991, 19.8439, 65.0},
			    {-346.403, 1025.1989, 20.2329, 65.0},
			    {-414.613, 1020.3439, 11.281, 105.0},
			    {-317.4899, 845.2509, 14.4919, 225.0},
			    {-223.992, 992.8499, 19.8099, 310.0},
			    {-211.75, 996.776, 19.8619, 50.0},
			    {-218.511, 1047.78, 19.992, 160.0},
			    {-247.1369, 1052.6519, 20.3059, 80.0},
			    {-249.546, 1074.874, 20.4039, 340.0},
			    {-254.6139, 1129.5489, 20.3439, 290.0},
			    {-261.0559, 1155.40, 19.992, 290.0},
			    {-287.769, 1179.191, 20.1539, 260.0},
			    {-320.1279, 1131.526, 19.999, 260.0},
			    {-301.8519, 1113.6379, 19.999, 200.0},
			    {-220.011, 1168.5329, 19.992, 200.0},
			    {-217.233, 1214.473, 19.992, 310.0},
			    {-241.5919, 1214.8919, 19.992, 10.0},
			    {-204.4389, 1215.1379, 19.992, 10.0},
			    {-194.673, 1222.629, 19.992, 30.0},
			    {-177.434, 1220.5159, 19.992, 110.0},
			    {-157.5169, 12229.42, 19.992, 190.0},
			    {-134.561, 1179.425, 20.0, 190.0},
			    {-161.19, 1169.625, 19.992, 230.0},
			    {-160.113, 1131.8079, 19.992, 200.0},
			    {-220.6329, 1126.3549, 19.992, 200.0},
			    {-236.7109, 1059.01, 19.9839, 200.0},
			    {-167.7259, 1029.4809, 19.9839, 200.0},
			    {-143.7619, 1038.067, 20.068, 200.0},
			    {-137.787, 1072.5229, 19.992, 150.0},
			    {-155.524, 1131.8649, 19.992, 150.0},
			    {-135.2389, 1161.0629, 20.0, 100.0},
			    {-83.652, 1222.556, 19.992, 120.0},
			    {-81.4489, 1143.5169, 20.0, 120.0},
			    {-47.608, 1125.1679, 20.086, 160.0},
			    {-22.572, 1118.9539, 19.992, 160.0},
			    {2.755, 1125.2309, 20.218, 160.0},
			    {3.0859, 1080.259, 19.992, 80.0},
			    {46.8619, 1170.118, 18.9139, 80.0},
			    {94.6139, 1173.7259, 18.9139, 20.0},
			    {101.276, 1067.978, 13.859, 20.0},
			    {-142.625, 934.6619, 19.8159, 20.0},
			    {-146.5, 884.405, 18.874, 20.0},
			    {-80.0339, 936.1989, 20.8209, 10.0},
			    {-54.1399, 967.8679, 20.0709, 10.0},
			    {33.3849, 963.689, 20.027, 10.0},
			    {179.106, 1168.7619, 15.008, 50.0},
			    {314.95, 1149.2869, 8.836, 80.0},
			    {410.2739, 1157.061, 8.1579, 80.0},
			    {506.4939, 1113.211, 15.0799, 0.0},
			    {590.414, 1240.3699, 11.9689, 30.0},
			    {707.9019, 1202.8349, 13.6459, 100.0},
			    {-322.8779, 1534.03, 75.609, 100.0},
			    {-320.441, 1514.196, 75.609, 350.0},
			    {-282.984, 1559.5219, 75.609, 340.0},
			    {-291.3829, 1301.8, 54.157, 270.0},
			    {-301.0369, 1775.253, 42.9379, 270.0},
			    {-397.286, 2070.833, 62.3019, 270.0},
			    {-353.6669, 2230.8449, 42.734, 270.0},
			    {-411.6879, 2253.2009, 42.68, 270.0},
			    {-230.3809, 2733.291, 62.9379, 300.0},
			    {-204.4550, 2594.1149, 62.9529, 30.0},
			    {-230.871, 2595.9279, 62.959, 350.0},
			    {-239.845, 2608.944, 62.9529, 350.0},
			    {-278.7149, 2761.893, 62.3689, 350.0},
			    {-234.9429, 2812.852, 61.984, 350.0},
			    {-158.8459, 2731.4289, 62.3779, 350.0},
			    {407.8789, 2537.1621, 16.797, 350.0},
			    {244.365, 1618.123, 16.7269, 350.0},
			    {-642.7169, 2714.175, 72.625, 30.0},
			    {-742.1339, 2751.5319, 47.479, 350.0},
			    {-792.853, 2771.289, 45.95, 270.0},
			    {-1278.399, 2723.424, 50.3129, 320.0},
			    {-1399.5699, 2649.5891, 55.9379, 280.0},
			    {-1451.425, 2564.5358, 56.0859, 280.0},
			    {-1525.0679, 2524.843, 56.0139, 190.0},
			    {-1515.963, 2570.666, 56.0859, 190.0},
			    {-1449.899, 2645.061, 56.0859, 270.0},
			    {-1472.7239, 2687.7919, 56.0859, 190.0},
			    {-1525.0739, 2693.8959, 56.0859, 190.0},
			    {-1600.437, 2683.3559, 55.3989, 190.0},
			    {-1565.8549, 2643.1889, 56.0859, 260.0},
			    {-1663.687, 2599.623, 81.5849, 260.0},
			    {-1665.546, 2560.2189, 85.3769, 260.0},
			    {-1661.034, 2494.0659, 87.189, 300.0},
			    {-1517.3459, 2529.1499, 55.956, 330.0},
			    {-1519.451, 2307.467, 47.678, 330.0},
			    {-1366.805, 2059.1069, 52.9189, 0.0},
			    {-1482.3449, 1878.41, 32.8829, 0.0},
			    {-1210.873, 1840.7349, 41.969, 0.0},
			    {-1043.5939, 1552.1899, 33.636, 310.0},
			    {-934.8239, 1421.4289, 30.3859, 310.0},
			    {-682.4130, 965.6179, 12.383, 80.0},
			    {-643.539, 1449.921, 13.8669, 350.0},
			    {-720.1799, 1439.5739, 18.7269, 350.0},
			    {-743.7849, 1440.5219, 16.6389, 20.0},
			    {-748.492, 1599.5799, 27.367, 20.0},
			    {-781.642, 1550.212, 27.367, 70.0},
			    {-865.5159, 1542.317, 23.0279, 70.0},
			    {-765.546, 1484.7039, 24.965, 70.0},
			    {-880.5369, 1534.196, 26.1609, 70.0},
			    {-905.3959, 1537.213, 26.1639, 100.0},
			    {-1939.3179, 2388.6196, 49.742, 100.0},
			    {-2610.1508, 2257.393, 8.461, 150.0},
			    {-2552.51, 2271.4929, 5.314, 150.0},
			    {-2529.614, 2290.789, 5.234, 180.0},
			    {-2529.124, 2250.52, 5.229, 160.0},
			    {-2479.4929, 2242.7829, 5.0939, 180.0},
			    {-2444.383, 2238.614, 5.0939, 140.0},
			    {-2264.621, 2300.5329, 5.07, 180.0},
			    {-2302.873, 2419.3139, 5.164, 180.0},
			    {-2458.581, 2491.602, 16.8659, 180.0},
			    {-2537.4619, 2359.0419, 5.235, 220.0},
			    {-2475.882, 2316.854, 5.234, 220.0},
			    {-2489.6608, 2291.465, 5.234, 250.0},
			    {-2447.3859, 2304.873, 5.234, 234.0},
			    //---LAS VENTURAS
			    {2172.4895, 1989.5502, 10.7999},
			    {2154.6945, 2112.7673, 10.6529},
			    {2251.3613, 2357.8713, 10.8015},
			    {2297.9404, 2450.996, 3.2504},
			    {2143.1938, 2814.8913, 10.803},
			    {2435.2849, 2730.8139, 10.7935},
			    {2104.363, 2046.5655, 10.7961},
			    {2470.8715, 2531.2832, 21.8602},
			    {2627.3762, 2205.8032, 10.7985},
			    {2827.1694, 2399.7556, 10.8316},
			    {2759.6472, 1442.2363, 10.7516},
			    {2764.4284, 1268.262, 10.7287},
			    {2451.6547, 1358.8393, 10.7965},
			    {2292.8579, 1494.5377, 16.6536},
			    {2295.3623, 1519.2037, 30.0039},
			    {2109.9753, 1398.5837, 10.811},
			    {2040.4324, 1481.0935, 10.6565},
			    {2039.9967, 1059.1791, 10.6551},
			    {2310.1401, 968.1272, 10.6799},
			    {2478.1733, 1211.1579, 10.7998},
			    {2632.1577, 1278.586, 10.6776},
			    {2486.7751, 1533.7832, 10.7643},
			    {2592.0734, 1840.4114, 10.803},
			    {2589.4418, 2057.28, 10.8016},
			    {1686.0439, 2186.9118, 10.8044},
			    {1614.061, 2201.0253, 10.801},
			    {1512.1071, 2280.9277, 10.7961},
			    {1712.7346, 2260.6284, 10.7985},
			    {2007.0258, 2465.5734, 10.8},
			    {2153.6835, 2498.7988, 10.8019},
			    {1959.395, 2650.4455, 10.8088},
			    {1650.9017, 2745.6625, 10.8171},
			    {1314.4819, 2648.8571, 10.8003},
			    {1012.9846, 2441.9992, 10.7668},
			    {985.58581, 1894.4852, 11.4468},
			    {1125.8001, 2112.4125, 10.8047},
			    {1371.4211, 2013.0855, 11.2491},
			    {1437.1591, 2017.3601, 10.8051},
			    {1898.5354, 2105.6174, 10.7998},
			    {1891.1606, 1718.9912, 10.7579},
			    {1710.9689, 1590.5622, 10.3186},
			    {1308.9111, 1280.3957, 10.8024},
			    {1851.8863, 698.0588, 11.2434},
			    {2185.4162, 733.182, 11.4244},
			    {2445.7431, 707.1785, 11.3961},
			    {2488.1198, 937.4649, 10.8063},
			    {2534.2009, 930.1321, 10.809},
			    {2432.4458, 1217.2485, 10.676},
			    {1885.9648, 1989.7786, 7.5822},
			    {1090.0004, 1994.1853, 11.3775},
			    {1111.4775, 1794.8199, 10.808},
			    {1005.2276, 1418.0944, 10.64943},
			    //---SAN FIERRO---//
				{-1899.8194, -899.0355, 31.8546, 52.5709}, //
				{-2119.1818, -768.7343, 31.8547, 231.2678}, //
				{-1898.5168, -430.1375, 38.0735, 0.3961}, //
				{-1950.4211, 265.4665, 40.8810, 41.4962}, //
				{-2024.8176, 137.9355, 28.6710, 294.9035}, //
				{-2103.7521, 243.3782, 35.6576, 32.7757}, //
				{-2211.2348, -2.1243, 35.1517, 187.8324}, //
				{-2131.7121, -255.2577, 35.1526, 351.0605}, //
				{-2407.1416, -1.0398, 35.1517, 159.3550}, //
				{-2417.3857, -597.8253, 132.4416, 66.8022}, //
				{-2657.8596, -285.5600, 7.3703, 30.8139}, //
				{-2752.7126, -68.0908, 6.9482, 291.3888}, //
				{-2654.6906, -50.8606, 4.1675, 60.1842}, //
				{-2760.6835, -7.2294, 6.7613, 89.5077}, //
				{-2842.3796, 277.6821, 10.4556, 339.5779}, //
				{-2665.4106, 274.2315, 4.1677, 37.2494}, //
				{-2596.8671, 481.5646, 14.4378, 36.6033}, //
				{-2563.9921, 633.2875, 14.2905, 172.9955}, //
				{-2460.7399, 728.6209, 34.8535, 233.7398}, //
				{-2387.9182, 742.7619, 34.8468, 328.1292}, //
				{-2559.2236, 934.8797, 64.8161, 108.0881}, //
				{-2647.7131, 1211.5455, 55.0943, 173.4225}, //
				{-2454.7617, 1220.8079, 34.8889, 14.1908}, //
				{-2618.6054, 1398.0932, 6.9326, 214.3679}, //
				{-2076.6696, 1351.0412, 6.9329, 330.8707}, //
				{-2178.4582, 1174.7172, 55.4097, 279.1444}, //
				{-1639.3524, 1295.3684, 6.8698, 135.7657}, //
				{-1587.0556, 937.6354, 7.4090, 101.7423}, //
				{-2063.0048, 960.6832, 59.6124, 236.4768}, //
				{-2080.8657, 759.8980, 69.3940, 178.1470}, //
				{-2128.1215, 654.4971, 52.1986, 86.8838}, //
				{-2189.9113, 610.0966, 34.9952, 289.3354}, //
				{-2217.7219, 419.2337, 34.9970, 177.9366}, //
				{-2418.7839, 322.6217, 34.8001, 327.4637}, //
				{-2589.3310, 328.6742, 4.6203, 270.8941}, //
				{-1951.9956, 572.5726, 35.0712, 270.9610}, //
				{-1747.6416, 762.2486, 24.7217, 275.8394}, //
				{-1956.5844, 581.2523, 34.9988, 174.9294}, //
				{-1700.4394, 297.7603, 7.0189, 283.1952}, //
				{-1431.1791, 460.8336, 7.0122, 283.9593}, //
				{-1333.3049, 459.6366, 7.0193, 103.8985}, //
				{-1720.0961, 117.4107, 3.3858, 0.9655}, //
				{-1677.0476, 28.0117, 3.3859, 197.9853}, //
				{-1820.4783, -175.7762, 9.2302, 5.7281}, //
				{-2090.8659, 60.8704, 34.6915, 107.5846}, //
				{-2203.9919, 296.8808, 34.9488, 336.5366} //

			};
			pickpos:
			dTry ++;
			new dRand = random(sizeof(fCarPos));
			new vehicleid = 0;
			GetVehicleWithinDistance(fCarPos[dRand][0], fCarPos[dRand][1], fCarPos[dRand][2], 10.0, vehicleid);
			if(vehicleid != 0)
			{
				if(dTry == 3)
				{
					return 0;
				}
				else goto pickpos;
			}
			else
			{
				x = fCarPos[dRand][0];
				y = fCarPos[dRand][1];
				z = fCarPos[dRand][2];
				angle = fCarPos[dRand][3];
			}
	    }
		case 1://Hélicos
		{
		    new Float:fChopperPos[][4] =
		    {
		        //---RED COUNTY
		        {615.8590, -578.3209, 26.408, 270.0},
		        //---FLINT COUNTY & WHETSTONE
		        {-43.833, -1147.7419, 1.343, 0.0},
		        {-2153.9399, -2275.082, 37.219, 52.0},
		        //---BONE COUNTY
		        {273.0769, 1866.8769, 17.906, 90.0},
		        {176.85, 1929.4449, 18.3789, 180.0},
		        {-2229.2758, 2330.4899, 7.8119, 110.0},
		        {366.419, 2537.676, 16.9249, 160.0},
		        {382.5899, 2537.6579, 16.804, 185.9997},
		        {-225.197, 1006.1599, 20.4659, 193.9997},
		        //---LAS VENTURAS
				{2083.1428, 2164.7028, 10.913},
				{2094.7011, 2415.8063, 74.670},
				{1332.7813, 1567.6512, 10.9091},
				{1351.6169, 2650.9196, 10.9145},
				//---SAN FIERRO
				{-1223.6445, -11.3415, 14.3250, 43.7462}, //HelicoAeroport
				{-1607.8555, 285.0718, 7.3616, 0.3918}, //HelicoMilitaire
				{-1685.2705, 702.4854, 30.7788, 31.8836} //HelicoPolice

		    };
			pickpos:
			new dRand = random(sizeof(fChopperPos));
			new vehicleid = 0;
			GetVehicleWithinDistance(fChopperPos[dRand][0], fChopperPos[dRand][1], fChopperPos[dRand][2], 10.0, vehicleid);
			if(vehicleid != 0)
			{
				if(dTry == 3)
				{
					return 0;
				}
				else goto pickpos;
			}
			else
			{
				x = fChopperPos[dRand][0];
				y = fChopperPos[dRand][1];
				z = fChopperPos[dRand][2];
				angle = fChopperPos[dRand][3];
			}
		}
		case 2://Avions
		{
			new Float:fPlanePos[][4] =
			{
			    //---RED COUNTY
			    {-495.22, 219.2319, 9.4189, 240.0},
			    {1405.774, -113.3059, 22.127, 300.0},
			    //---FLINT COUNTY & WHETSTONE
			    {-1209.0689, -928.6989, 129.1889, 270.0},
			    //---BONE COUNTY
			    {308.376, 2044.369, 19.1569, 180.0},
			    {371.686, 1978.515, 19.1569, 60.0},
			    {408.4599, 2501.4309, 18.7189, 90.0},
			    {326.4129, 2527.944, 19.027, 170.0},
			    {223.477, 2463.6289, 17.7189, 340.0},
			    //---LAS VENTURAS
			    {1482.8653, 1773.0648, 11.5072},
			    {1460.4775, 1774.5147, 11.3715}
			};
			pickpos:
			new dRand = random(sizeof(fPlanePos));
			new vehicleid = 0;
			GetVehicleWithinDistance(fPlanePos[dRand][0], fPlanePos[dRand][1], fPlanePos[dRand][2], 10.0, vehicleid);
			if(vehicleid != 0)
			{
				if(dTry == 3)
				{
					return 0;
				}
				else goto pickpos;
			}
			else
			{
				x = fPlanePos[dRand][0];
				y = fPlanePos[dRand][1];
				z = fPlanePos[dRand][2];
				angle = fPlanePos[dRand][3];
			}
		}
		case 3://Bateaux
		{
			new Float:fBoatPos[][4] =
			{
			    //---RED COUNTY
			    {1403.5699, -249.1739, 0.0, 90.0},
			    {2093.3378, -111.774, 0.0, 30.0},
			    {1984.6309, -46.2229, 0.0, 110.0},
			    {2124.114, 176.5769, 0.0, 170.0},
			    {2270.854, 425.2539, 0.0, 100.0},
			    {591.057, -245.852, 0.0, 100.0},
			    {391.2189, -275.1010, 0.0, 130.0},
			    {-65.495, -587.143, 0.0, 80.0},
			    {-750.5339, 248.38, 0.0, 140.0},
			    {-484.377, 316.29, 0.0, 270.0},
			    //---FLINT COUNTY & WHETSTONE
			    {-321.9219, -471.5698, 0.0, 318.0},
			    {-216.876, -783.364, 0.0, 248.0},
			    {-223.742, -1737.614, 0.0, 198.0},
			    {-1667.88, -1686.682, 0.0, 248.0},
			    //---BONE COUNTY
			    {-493.9309, 611.741, 0.0, 0.0},
			    {-644.2, 861.0759, 0.0, 240.0},
			    {-425.933, 1161.4, 0.0, 20.0},
			    {-757.4819, 1381.6099, 0.0, 270.0},
			    {-615.114, 1804.988, 0.0, 80.0},
			    {-934.0529, 2656.642, 40.75, 130.0},
			    {-1376.192, 2118.53, 40.75, 240.0},
			    {-2219.592, 2425.7019, 0.0, 320.0},
			    {-2224.1608, 2402.3491, 0.0, 45.0},
			    {-2321.111, 2318.31, 0.0, 180.0},
			    {-2419.009, 2304.779, 260.0},
			    {-2037.285, 2332.6779, 0.0, 40.0},
			    //---LAS VENTURAS
			    {2363.9121, 513.479, 0.0, 90.0},
			    {1227.9255, 635.6099, 0.0, 90.0},
			    {1629.9709, 568.197, 0.0, 90.0},
			    //---SAN FIERRO
			    {-1631.3043, 161.5726, -0.5212, 135.6955}, //BateauSF
				{-1466.1694, 1095.0920, -0.5082, 305.6648}, //BateauSF
				{-1893.6547, 1400.6180, -0.3995, 90.2900}, //BateauSF
				{-2980.0590, 508.6404, -0.7971, 318.2321} //BateauSF
			};
			pickpos:
			new dRand = random(sizeof(fBoatPos));
			new vehicleid = 0;
			GetVehicleWithinDistance(fBoatPos[dRand][0], fBoatPos[dRand][1], fBoatPos[dRand][2], 10.0, vehicleid);
			if(vehicleid != 0)
			{
				if(dTry == 3)
				{
					return 0;
				}
				else goto pickpos;
			}
			else
			{
				x = fBoatPos[dRand][0];
				y = fBoatPos[dRand][1];
				z = fBoatPos[dRand][2];
				angle = fBoatPos[dRand][3];
			}
		}
	}
	return 1;
}

GetVehicleFuelType(modelid)
{
	switch(modelid)
	{
	    case 481, 509, 510: return 0;//VÉLOS
		case 435, 449, 450, 537, 538, 570, 584, 590, 591, 606, 608, 610, 611: return 0; //REMORQUES & TRAINS
		case 448, 461, 462, 463, 468, 521, 522, 523, 581, 586: return 1; //MOTOS
		case 400, 401, 402, 404, 405, 409, 410, 411, 412, 415, 418, 419, 420, 421, 422, 424, 426, 429, 434, 436, 438, 439, 441,
		442, 444, 445, 451, 457, 458, 466, 467, 470, 471, 474, 475, 477, 478, 479, 480, 485, 489, 490, 491, 492, 494, 495,
		496, 500, 502, 503, 504, 505, 506, 507, 516, 517, 518, 525, 526, 527, 529, 533, 534, 535, 536, 540, 541, 542, 543,
		545, 546, 547, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 565, 566, 567, 568, 571, 575, 576,
		579, 580, 585, 587, 589, 594, 596, 597, 598, 599, 600, 602, 603, 604, 605: return 2; //VOITURES
		case 403, 406, 407, 408, 413, 414, 416, 423, 427, 428, 431, 432, 433, 437, 440, 443, 455, 456, 459, 482, 483, 486, 498,
		499, 508, 514, 515, 524, 528, 530, 531, 532, 544, 564, 572, 573, 574, 578, 582, 583, 588, 601, 609: return 3; //CAMIONS & UTILITAIRES
		case 430, 446, 452, 453, 454, 472, 473, 484, 493, 539, 595: return 4;//BATEAUX
		case 460, 464, 476, 511, 512, 513, 519, 520, 553, 577, 592, 593: return 5; //AVIONS
		case 417, 425, 447, 465, 469, 487, 488, 497, 501, 548, 563: return 6; //HÉLICOS
	}
	return 0;
}

GetVehicleMaxFuel(vehicleid)
{
	switch(GetVehicleFuelType(dVehicleInfos[vehicleid][dVehicleModel]))
	{
	    case 0: return 0;
	    case 1: return BIKE_FUEL;
	    case 2: return CAR_FUEL;
	    case 3: return TRUCK_FUEL;
	    case 4: return BOAT_FUEL;
	    case 5: return PLANE_FUEL;
	    case 6: return HELI_FUEL;
	}
	return 0;
}

GetVehicleWheels(vehicleid)//Fonction pour changer les variables des véhicules pour stocker l'état des roues
{
	if(IsValidVehicle(dVehicleInfos[vehicleid][dVehicleID]))
	{
		new tires, tire[4];
		GetVehicleDamageStatus(dVehicleInfos[vehicleid][dVehicleID], tires, tires, tires, tires);
	    tire[0] = tires & 1;
	    tire[1] = tires >> 1 & 1;
	    tire[2] = tires >> 2 & 1;
	    tire[3] = tires >> 3 & 1;
	    for(new i = 0; i < 4; i ++) dVehicleInfos[vehicleid][bWheel][i] = (tire[i] == 0) ? true : false;
	}
}

SetVehicleWheels(vehicleid)//Fonction pour changer les valeurs des états des roues en bitmask et l'appliquer à un véhicule
{
	if(IsValidVehicle(dVehicleInfos[vehicleid][dVehicleID]))
	{
		new panels, doors, lights, tires;
		GetVehicleDamageStatus(dVehicleInfos[vehicleid][dVehicleID], panels, doors, lights, tires);
		//---
		new tire[4];
		tire[0] = (dVehicleInfos[vehicleid][bWheel][0]) ? 0 : 1;
		tire[1] = (dVehicleInfos[vehicleid][bWheel][1]) ? 0 : 1;
		tire[2] = (dVehicleInfos[vehicleid][bWheel][2]) ? 0 : 1;
		tire[3] = (dVehicleInfos[vehicleid][bWheel][3]) ? 0 : 1;
		//---
		tires = (tire[0] | (tire[1] << 1) | (tire[2] << 2) | (tire[3] << 3));
		UpdateVehicleDamageStatus(dVehicleInfos[vehicleid][dVehicleID], panels, doors, lights, tires);
	}
}

UpdateInfo(playerid, infoid)//Fonction pour actualiser des éléments de l'interface
{
	new string[25];
	switch(infoid)
	{
	    case 1://La faim
		{
			PlayerTextDrawTextSize(playerid, tPlayerInfos[playerid][0], CalculateBarSize(pPlayerInfos[playerid][pHunger], 58.0) + 492.0, 0.000000);//On change la taille du rectangle (La barre) pour montrer combien il reste
	    	if(100 >= pPlayerInfos[playerid][pHunger] >= 50) PlayerTextDrawBoxColor(playerid, tPlayerInfos[playerid][0], 0x008000FF);//Et on change aussi la couleur
	    	else if(15 < pPlayerInfos[playerid][pHunger] < 50) PlayerTextDrawBoxColor(playerid, tPlayerInfos[playerid][0], 0xFFFF00FF);
	    	else if(15 > pPlayerInfos[playerid][pHunger]) PlayerTextDrawBoxColor(playerid, tPlayerInfos[playerid][0], 0xCC0000FF);
			if(!IsHUDHiddenForPlayer(playerid)) PlayerTextDrawShow(playerid, tPlayerInfos[playerid][0]);
		}
	    case 2://La soif
		{
			PlayerTextDrawTextSize(playerid, tPlayerInfos[playerid][1], CalculateBarSize(pPlayerInfos[playerid][pThirst], 58.0) + 492.0, 0.000000);//Pareil
	    	if(100 >= pPlayerInfos[playerid][pThirst] >= 50) PlayerTextDrawBoxColor(playerid, tPlayerInfos[playerid][1], 0x008000FF);//Et on change aussi la couleur
	    	else if(15 < pPlayerInfos[playerid][pThirst] < 50) PlayerTextDrawBoxColor(playerid, tPlayerInfos[playerid][1], 0xFFFF00FF);
	    	else if(15 > pPlayerInfos[playerid][pThirst]) PlayerTextDrawBoxColor(playerid, tPlayerInfos[playerid][1], 0xCC0000FF);
			if(!IsHUDHiddenForPlayer(playerid)) PlayerTextDrawShow(playerid, tPlayerInfos[playerid][1]);
		}
	    case 3://Le dodo
		{
			PlayerTextDrawTextSize(playerid, tPlayerInfos[playerid][2], CalculateBarSize(pPlayerInfos[playerid][pSleep], 58.0) + 492.0, 0.000000);//Pareil
	    	if(100 >= pPlayerInfos[playerid][pSleep] >= 50) PlayerTextDrawBoxColor(playerid, tPlayerInfos[playerid][2], 0x008000FF), TextDrawHideForPlayer(playerid, tDarkScreen);//Et on change aussi la couleur
	    	else if(15 < pPlayerInfos[playerid][pSleep] < 50) PlayerTextDrawBoxColor(playerid, tPlayerInfos[playerid][2], 0xFFFF00FF), TextDrawHideForPlayer(playerid, tDarkScreen);
	    	else if(15 > pPlayerInfos[playerid][pSleep]) PlayerTextDrawBoxColor(playerid, tPlayerInfos[playerid][2], 0xCC0000FF), TextDrawShowForPlayer(playerid, tDarkScreen);
			if(!IsHUDHiddenForPlayer(playerid)) PlayerTextDrawShow(playerid, tPlayerInfos[playerid][2]);
		}
	    case 4://L'or
	    {
	        new sGold[6][6] =
			{
				"Gold", "Or", "Oro", "Ouro", "Oro", "Gold"//On crée un tableau avec 'Or' dans les 6 langues du serveur
			};
	  		format(string, sizeof(string), "%s: %.1fg", sGold[pPlayerInfos[playerid][pLangue]], floatdiv(pPlayerInfos[playerid][pGold], 10));//Pour pas créer une float, l'integer de la variable est divisée par 10 pour faire swagg
			PlayerTextDrawSetString(playerid, tPlayerInfos[playerid][3], string);
			if(!IsHUDHiddenForPlayer(playerid)) PlayerTextDrawShow(playerid, tPlayerInfos[playerid][3]);
	    }
	    case 5://La vie
	    {
	        PlayerTextDrawTextSize(playerid, tPlayerInfos[playerid][4], CalculateBarSize(floatdiv(pPlayerInfos[playerid][pHealth], 10), 58.0) + 492.0, 0.000000);//On change juste la barre de vie, la couleur reste pareille
			if(!IsHUDHiddenForPlayer(playerid)) PlayerTextDrawShow(playerid, tPlayerInfos[playerid][4]);
			UpdatePlayerTag(playerid);
		}
	    case 6://L'armure
	    {
	        PlayerTextDrawTextSize(playerid, tPlayerInfos[playerid][5], CalculateBarSize(floatdiv(pPlayerInfos[playerid][pArmour], 10), 58.0) + 492.0, 0.000000);//Pareil pour l'armure
			if(!IsHUDHiddenForPlayer(playerid)) PlayerTextDrawShow(playerid, tPlayerInfos[playerid][5]);
			UpdatePlayerTag(playerid);
		}
	    case 7://La température
	 	{
	    	new sTemperatures[6][15] =
			{
				"Temperature", "Temperature", "Temperatura", "Temperatura", "Temperatura", "Temperatur"//On crée un tableau avec 'Température' dans les 6 langues du serveur
			};
	  		format(string, sizeof(string), "%s:~n~%.1f", sTemperatures[pPlayerInfos[playerid][pLangue]], floatdiv(pPlayerInfos[playerid][pTemperature], 10));//On crée pas de float non plus pour la température
			PlayerTextDrawSetString(playerid, tPlayerInfos[playerid][6], string);
			if(!IsHUDHiddenForPlayer(playerid)) PlayerTextDrawShow(playerid, tPlayerInfos[playerid][6]);
	    }
	    case 8://Si le mec a la jambe pêtée
		{
			if(!pPlayerInfos[playerid][bLeg] && !IsHUDHiddenForPlayer(playerid)) TextDrawShowForPlayer(playerid, tBrokenLeg[pPlayerInfos[playerid][pLangue]]);
			else TextDrawHideForPlayer(playerid, tBrokenLeg[pPlayerInfos[playerid][pLangue]]);//On cache ou on affiche le textdraw en fonction de si le mec a la jambe pêtée ou pas
		}
		case 9://Si le mec fait une hémorragie
		{
			if(pPlayerInfos[playerid][bHemorragie] && !IsHUDHiddenForPlayer(playerid)) TextDrawShowForPlayer(playerid, tHemoragie[pPlayerInfos[playerid][pLangue]]);
			else TextDrawHideForPlayer(playerid, tHemoragie[pPlayerInfos[playerid][pLangue]]);//On cache ou on affiche le textdraw en fonction de si le mec a la jambe pêtée ou pas
		}
		case 10://Pour l'essence
		{
		    if(IsPlayerInAnyVehicle(playerid) && GetVehicleID(GetPlayerVehicleID(playerid)) != -1 && !IsVehicleBicycle(GetPlayerVehicleID(playerid)))
		    {
	      		format(string, sizeof(string), "Fuel:~n~%.2f l", floatdiv(dVehicleInfos[GetVehicleID(GetPlayerVehicleID(playerid))][dFuel], 100));//On crée pas de float non plus pour la température
				if(!IsHUDHiddenForPlayer(playerid)) PlayerTextDrawSetString(playerid, tPlayerInfos[playerid][7], string);
				PlayerTextDrawShow(playerid, tPlayerInfos[playerid][7]);
			}
			else
			{
				PlayerTextDrawHide(playerid, tPlayerInfos[playerid][7]);
			}
		}
		case 11://Level
		{
		    format(string, sizeof(string), "Level %d", pPlayerInfos[playerid][pLevel]);
		    PlayerTextDrawSetString(playerid, tLevel[playerid][0], string);
			SetPlayerScore(playerid, pPlayerInfos[playerid][pLevel]);
		    //---
			new dExpInfos;
			//---
			dExpInfos = floatround(floatdiv(pPlayerInfos[playerid][pExp], GetLevelExp(pPlayerInfos[playerid][pLevel])) * 10.0, floatround_floor);
		    PlayerTextDrawTextSize(playerid, tLevel[playerid][1], dExpInfos * 14.0, 0.000000);
		    PlayerTextDrawTextSize(playerid, tLevel[playerid][2], (10 * floatdiv(pPlayerInfos[playerid][pExp], GetLevelExp(pPlayerInfos[playerid][pLevel])) - (dExpInfos)) * 140.0, 0.000000);
		    format(string, sizeof(string), "Level %d", pPlayerInfos[playerid][pLevel]);
			//---
			if(!IsHUDHiddenForPlayer(playerid))
			{
				TextDrawShowForPlayer(playerid, tFondLevel);
				PlayerTextDrawShow(playerid, tLevel[playerid][0]);
				PlayerTextDrawShow(playerid, tLevel[playerid][1]);
				//---
				for(new i = 0; i < 10; i ++) TextDrawShowForPlayer(playerid, tBarettesLevel[i]);
				//---
				PlayerTextDrawShow(playerid, tLevel[playerid][2]);
			}
		}
	}
}

GetLevelExp(level)
{
	new dExp;
	switch(level)
	{
	    //---+50%
	    case 1: dExp = 30;
	    case 2: dExp = 44;
	    case 3: dExp = 68;
	    case 4: dExp = 102;
	    case 5: dExp = 152;
	    //---+25%
	    case 6: dExp = 190;
	    case 7: dExp = 236;
	    case 8: dExp = 294;
	    case 9: dExp = 366;
	    case 10: dExp = 460;
	    //---+20%
	    case 11: dExp = 552;
	    case 12: dExp = 662;
	    case 13: dExp = 794;
	    case 14: dExp = 952;
	    case 15: dExp = 1144;
	    //---+10%
	    case 16: dExp = 1258;
	    case 17: dExp = 1384;
	    case 18: dExp = 1522;
	    case 19: dExp = 1674;
	    case 20: dExp = 1842;
	    //---+5%
	    case 21: dExp = 1934;
	    case 22: dExp = 2030;
	    case 23: dExp = 2122;
	    case 24: dExp = 2238;
	    case 25: dExp = 2350;
	    //---+4%
	    case 26: dExp = 2444;
	    case 27: dExp = 2542;
	    case 28: dExp = 2644;
	    case 29: dExp = 2750;
	    case 30: dExp = 2860;
	    //---+3%
	    case 31: dExp = 2944;
	    case 32: dExp = 3034;
	    case 33: dExp = 3124;
	    case 34: dExp = 3218;
	    case 35: dExp = 3314;
	    //---+2%
	    case 36: dExp = 3380;
	    case 37: dExp = 3448;
	    case 38: dExp = 3518;
	    case 39: dExp = 3588;
	    case 40: dExp = 3660;
	    //---+1%
	    case 41: dExp = 3696;
	    case 42: dExp = 3734;
	    case 43: dExp = 3770;
	    case 44: dExp = 3806;
	    case 45: dExp = 3844;
	    case 46: dExp = 3884;
	    case 47: dExp = 3922;
	    case 48: dExp = 3962;
	    case 49: dExp = 4000;
	    case 50: dExp = 4040;
	    //---> 50 (+1% à chaque fois)
	    case 51: dExp = 4080;
	    case 52: dExp = 4162;
	    case 53: dExp = 4287;
	    case 54: dExp = 4458;
	    case 55: dExp = 4681;
	    case 56: dExp = 4962;
	    case 57: dExp = 5309;
	    case 58: dExp = 5734;
	    case 59: dExp = 6250;
	    case 60: dExp = 6875;
	    case 61: dExp = 7631;
	    case 62: dExp = 8547;
	    case 63: dExp = 9658;
	    case 64: dExp = 10914;
	    case 65: dExp = 12662;
	    case 66: dExp = 14688;
	    case 67: dExp = 17185;
	    case 68: dExp = 20278;
	    case 69: dExp = 24131;
	    case 70: dExp = 28957;
	    case 71: dExp = 35038;
	    case 72: dExp = 42746;
	    case 73: dExp = 52578;
	    case 74: dExp = 65197;
	    case 75: dExp = 81496;
	    case 76: dExp = 102685;
	    case 77: dExp = 130410;
	    case 78: dExp = 166925;
	    case 79: dExp = 215333;
	    case 80: dExp = 279933;
	    //---
	    default: dExp = 1;
	}
	return dExp;
}

public GivePlayerExp(playerid, exp)
{
	if(pGroup[playerid] != -1 && exp > 0)//Si le joueur est dans un groupe, on partage l'exp
	{
	    GiveGroupExp(pGroup[playerid], floatround(floatdiv(exp, GetGroupSize(pGroup[playerid]) + 0.1) , floatround_ceil));
	    return 1;
	}
	if(pPlayerInfos[playerid][pExp] + exp >= GetLevelExp(pPlayerInfos[playerid][pLevel]))
	{
		LogInfo(true, "[EXP]%s obtient %d exp.", GetName(playerid), exp);
	    new dLeftExp = exp;
		while(pPlayerInfos[playerid][pExp] + dLeftExp >= GetLevelExp(pPlayerInfos[playerid][pLevel]))
		{
			pPlayerInfos[playerid][pExp] += (dLeftExp - GetLevelExp(pPlayerInfos[playerid][pLevel]));
			pPlayerInfos[playerid][pLevel] ++;
			pPlayerInfos[playerid][pCompetence] ++;
			if(pPlayerInfos[playerid][pExp] + dLeftExp > GetLevelExp(pPlayerInfos[playerid][pLevel])) dLeftExp = GetLevelExp(pPlayerInfos[playerid][pLevel] - pPlayerInfos[playerid][pExp]);
			OnPlayerLevelUp(playerid, pPlayerInfos[playerid][pLevel]);
			LogInfo(true, "[EXP]%s passe au niveau %d.", GetName(playerid), pPlayerInfos[playerid][pLevel]);
		}
	}
	else if(pPlayerInfos[playerid][pExp] + exp < 0)
	{
		LogInfo(true, "[EXP]%s obtient %d exp.", GetName(playerid), -pPlayerInfos[playerid][pExp]);
		pPlayerInfos[playerid][pExp] = 0;
	}
	else
	{
		LogInfo(true, "[EXP]%s obtient %d exp.", GetName(playerid), exp);
		pPlayerInfos[playerid][pExp] += exp;
	}
	//---
	UpdateInfo(playerid, 11);
	return pPlayerInfos[playerid][pExp];
}

OnPlayerLevelUp(playerid, level)
{
	if(FCNPC_IsValid(playerid)) return false;
	LogInfo(true, "[EXP]%s monte au niveau %d.", GetName(playerid), level);
	if(!pPlayerInfos[playerid][bAide][16]) ShowPlayerHelp(playerid, 17, 10000);
	//---
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    //---
    new objectid = CreateObject(18671, x, y, z - 2.5, 0.0, 0.0, 0.0, 50.0);
    AttachObjectToPlayer(objectid, playerid, 0.0, 0.0, -2.5, 0.0, 0.0, 0.0);
	SetTimerEx("DestroyObjectEx", 2000, false, "ib", objectid, false);
    objectid = CreateObject(18728, x, y, z - 1.5, 0.0, 0.0, 0.0, 50.0);
    AttachObjectToPlayer(objectid, playerid, 0.0, 0.0, -1.5, 0.0, 0.0, 0.0);
	SetTimerEx("DestroyObjectEx", 2000, false, "ib", objectid, false);
	//---
	PlayerPlaySound(playerid, 11422, 0.0, 0.0, 0.0);
	return true;
}

GiveGroupExp(groupid, exp)
{
	for(new i = 0; i < MAX_GROUP_SIZE; i ++)
	{
	    if(dGroup[groupid][dMembers][i] != INVALID_PLAYER_ID)
	    {
	        new playerid = dGroup[groupid][dMembers][i];
			if(pPlayerInfos[playerid][pExp] + exp >= GetLevelExp(pPlayerInfos[playerid][pLevel]))
			{
			    new dLeftExp = exp;
				while(pPlayerInfos[playerid][pExp] + dLeftExp >= GetLevelExp(pPlayerInfos[playerid][pLevel]))
				{
					pPlayerInfos[playerid][pExp] += (dLeftExp - GetLevelExp(pPlayerInfos[playerid][pLevel]));
					pPlayerInfos[playerid][pLevel] ++;
					pPlayerInfos[playerid][pCompetence] ++;
					if(pPlayerInfos[playerid][pExp] + dLeftExp > GetLevelExp(pPlayerInfos[playerid][pLevel])) dLeftExp = GetLevelExp(pPlayerInfos[playerid][pLevel] - pPlayerInfos[playerid][pExp]);
					OnPlayerLevelUp(playerid, pPlayerInfos[playerid][pLevel]);
				}
			}
			else if(pPlayerInfos[playerid][pExp] + exp < 0) pPlayerInfos[playerid][pExp] = 0;
			else pPlayerInfos[playerid][pExp] += exp;
			LogInfo(true, "[EXP]%s obtient %d exp.", GetName(playerid), exp);
			//---
			UpdateInfo(playerid, 11);
		}
	}
	return 1;
}

stock GetMapGroundType(x, y)
{
	new xRed, xGreen, xBlue, xRGBA;
	//---
	x = floatround(floatdiv(x + 3000, floatdiv(6000, dMapRes[0])), floatround_round);
	y = floatround(floatdiv(y + 3000, floatdiv(6000, dMapRes[1])), floatround_round);
	xRed = FGetImageRAtPos(x, y);
	xGreen = FGetImageGAtPos(x, y);
	xBlue = FGetImageBAtPos(x, y);
	xRGBA = (xRed << 24 | xGreen << 16 | xBlue << 8 | 0xFF);
	//---
	switch(xRGBA)
	{
		case 0xFFFFFFFF:// Maisons & Batiments
		{
			return 0;
		}
		case 0x000000FF: // Routes
		{
		    return 1;
		}
		case 0x346633FF: // Herbe vert
		{
		    return 2;
		}
		case 0x676661FF: // Terre
		{
			return 3:
		}
		case 0x999965FF, 0x6d6260FF, 0xd1c966FF: // Sable
		{
		    return 4;
		}
		case 0x999999FF, 0xFF: // Béton - Roche
		{
		    return 5;
		}
		case 0x3F3F00FF: // desert shrubs
		{
		    return 5;
		}
		case 0x3F7FBFFF: // water
		{
		    return 6;
		}
	}
	return 0;
}

IsPlayerInArea(playerid, Float:MinX, Float:MinY, Float:MaxX, Float:MaxY)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	if(MaxX >= x >= MinX && MaxY >= y >= MinY) return true;
	return false;
}

CanPlayerPlantHere(playerid)
{
	#pragma unused playerid
	/*new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	switch(GetMapGroundType(floatround(x, floatround_round), floatround(y, floatround_round)))
	{
	    case 2, 3, 4, 5: return true;
	    case 0, 1, 6: return false;
	}
	return false;*/
	return true;
}

SendClientMessageEx(playerid, color, const en[], const fr[], const es[], const pg[], const it[], const de[])//Envoyer un message à un joueur
{
	switch(pPlayerInfos[playerid][pLangue])//Pour envoyer un message à un joueur, on doit l'écrire dans toutes les langues, puis on lui envoie celle qui lui correspond
	{
	    case LANGUAGE_EN: SendClientMessage(playerid, color, en);
	    case LANGUAGE_FR: SendClientMessage(playerid, color, fr);
	    case LANGUAGE_ES: SendClientMessage(playerid, color, es);
	    case LANGUAGE_PG: SendClientMessage(playerid, color, pg);
	    case LANGUAGE_IT: SendClientMessage(playerid, color, it);
	    case LANGUAGE_DE: SendClientMessage(playerid, color, de);
	}
}

SendClientMessageToAllEx(color, const en[], const fr[], const es[], const pg[], const it[], const de[])//Envoyer un message à un joueur
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i ++)
	{
		switch(pPlayerInfos[i][pLangue])//Pour envoyer un message à un joueur, on doit l'écrire dans toutes les langues, puis on lui envoie celle qui lui correspond
		{
		    case LANGUAGE_EN: SendClientMessage(i, color, en);
		    case LANGUAGE_FR: SendClientMessage(i, color, fr);
		    case LANGUAGE_ES: SendClientMessage(i, color, es);
		    case LANGUAGE_PG: SendClientMessage(i, color, pg);
		    case LANGUAGE_IT: SendClientMessage(i, color, it);
		    case LANGUAGE_DE: SendClientMessage(i, color, de);
		}
	}
}

SendPlayerGameText(playerid, time, en[], fr[], es[], pg[], it[], de[])//Envoyer un gametext à un joueur
{
	switch(pPlayerInfos[playerid][pLangue])//Pour envoyer un gametext à un joueur, on doit l'écrire dans toutes les langues, puis on lui envoie celle qui lui correspond
	{
	    case LANGUAGE_EN: ConvertGameText(en), GameTextForPlayer(playerid, en, time, 3);
	    case LANGUAGE_FR: ConvertGameText(fr), GameTextForPlayer(playerid, fr, time, 3);
	    case LANGUAGE_ES: ConvertGameText(es), GameTextForPlayer(playerid, es, time, 3);
	    case LANGUAGE_PG: ConvertGameText(pg), GameTextForPlayer(playerid, pg, time, 3);
	    case LANGUAGE_IT: ConvertGameText(it), GameTextForPlayer(playerid, it, time, 3);
	    case LANGUAGE_DE: ConvertGameText(de), GameTextForPlayer(playerid, de, time, 3);
	}
}

SendNearPlayerMessage(playerid, Float:distance, color, const en[], const fr[], const es[], const pg[], const it[], const de[])//Envoyer un message à un groupe de joueurs
{
	new Float:x, Float:y, Float:z, dNearPlayers;
	GetPlayerPos(playerid, x, y, z);
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i ++)
	{
	    if(IsPlayerInRangeOfPoint(i, distance, x, y, z))
	    {
			DrawPlayerMarker(i, playerid);
			switch(pPlayerInfos[i][pLangue])//Pour envoyer un message à un joueur, on doit l'écrire dans toutes les langues, puis on lui envoie celle qui lui correspond
			{
			    case LANGUAGE_EN: SendClientMessage(i, color, en);
			    case LANGUAGE_FR: SendClientMessage(i, color, fr);
			    case LANGUAGE_ES: SendClientMessage(i, color, es);
			    case LANGUAGE_PG: SendClientMessage(i, color, pg);
			    case LANGUAGE_IT: SendClientMessage(i, color, it);
			    case LANGUAGE_DE: SendClientMessage(i, color, de);
			}
			dNearPlayers ++;
		}
	}
	return dNearPlayers;
}

UpdatePlayerTag(playerid)
{
	if(pPlayerInfos[playerid][dLogState] == SPAWNED)
	{
		new string[100], health;
		//---ARMURE
		health = floatround(floatdiv(GetPlayerArmour(playerid), 50), floatround_floor);
		strcat(string, "{FFFFFF}");
		if(health != 0)
		{
			for(new i = 0; i < health; i ++)
			{
				strcat(string, "|");
			}
			strcat(string, "\n");
		}
		//---VIE
		health = floatround(floatdiv(GetPlayerHealth(playerid), 50), floatround_floor);
		strcat(string, "{CC0000}");
		for(new i = 0; i < health; i ++)
		{
			strcat(string, "|");
		}
		strcat(string, "\n");
		//---PSEUDO
		strcat(string, "{0080FF}");
		strcat(string, GetName(playerid));
		Update3DTextLabelText(pPlayerTag[playerid], BLANC, string);
	}
}

AreThereTooMuchCaps(const str[])
{
	new string[128];
	new idx;
	new words;
	new caps;
	do
	{
		string = strtok(str, idx);
		words ++;
	}
	while(strlen(string) != 0);
	for(new i = 0; i < strlen(str); i++) if(65 <= str[i] <= 90) caps ++;
	if(caps > words + 1) return true;
	else return false;
}

AllPlayersString()//Créer un string contenant les pseudos de tous les joueurs séparés par '\n' pour un dialog
{
	new string[(MAX_PLAYERS * (MAX_PLAYER_NAME + 2)) + 1];
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i ++)
	{
	    if(IsPlayerConnected(i) && !FCNPC_IsValid(i))
	    {
	        strcat(string, GetName(i));
	        if(i != j) strcat(string, "\n");
	    }
	}
	return string;
}

GroupPlayersString(groupid)//Créer un string contenant les pseudos de tous les joueurs d'un groupe
{
	new string[(MAX_GROUP_SIZE * (MAX_PLAYER_NAME + 2)) + 1];
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i ++)
	{
	    if(pGroup[i] == groupid)
	    {
	        strcat(string, GetName(i));
	        if(i != j) strcat(string, "\n");
	    }
	}
	return string;
}

aFreeze(adminid, playerid, minutes, const reason[])
{
	new string[150];
	if(playerid == INVALID_PLAYER_ID)
	{
	    return 0;
	}
	if(adminid == INVALID_PLAYER_ID) printf("[ADMIN]%s s'est fait freeze par le script. Raison: %s", GetName(playerid), reason);
	else printf("[ADMIN]%s a freeze %s. Raison: %s", GetName(adminid), GetName(playerid), reason);
	//---
	format(string,sizeof(string),"[ADMIN]%s has been frozen | Reason: %s", GetName(playerid), reason);
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_EN) SendClientMessage(i, ADMIN_COLOR, string);
	//
	format(string,sizeof(string),"[ADMIN]Le joueur %s a été freeze | Raison: %s", GetName(playerid), reason);
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_FR) SendClientMessage(i, ADMIN_COLOR, string);
	//
	format(string,sizeof(string),"[ADMIN]%s Espagnol | Razón: %s", GetName(playerid), reason);
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_ES) SendClientMessage(i, ADMIN_COLOR, string);
	//
	format(string,sizeof(string),"[ADMIN]%s Portugais | Portugais: %s", GetName(playerid), reason);
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_PG) SendClientMessage(i, ADMIN_COLOR, string);
	//
	format(string,sizeof(string),"[ADMIN]%s Italien | Italien: %s", GetName(playerid), reason);
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_IT) SendClientMessage(i, ADMIN_COLOR, string);
	//
	format(string,sizeof(string),"[ADMIN]%s Allemand | Allemand: %s", GetName(playerid), reason);
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_DE) SendClientMessage(i, ADMIN_COLOR, string);
	//---
	SavePunishment(playerid, "FREEZE", reason);
	SendClientMessageEx(playerid, ROUGE, "You have been frozen.", "Vous avez été freeze.", "Espagnol", "Portugais", "Italien", "Allemand");
	pPlayerInfos[playerid][pFreeze] = 60 * minutes;
	TogglePlayerControllable(playerid, false);
	return 1;
}

aMute(adminid, playerid, minutes, const reason[])
{
	new string[150];
	if(playerid == INVALID_PLAYER_ID)
	{
	    return 0;
	}
	if(adminid == INVALID_PLAYER_ID) printf("[ADMIN]%s s'est fait mute par le script. Raison: %s", GetName(playerid), reason);
	else printf("[ADMIN]%s a mute %s. Raison: %s", GetName(adminid), GetName(playerid), reason);
	//---
	format(string,sizeof(string),"[ADMIN]%s has been muted | Reason: %s", GetName(playerid), reason);
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_EN) SendClientMessage(i, ADMIN_COLOR, string);
	//
	format(string,sizeof(string),"[ADMIN]Le joueur %s a été mute | Raison: %s", GetName(playerid), reason);
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_FR) SendClientMessage(i, ADMIN_COLOR, string);
	//
	format(string,sizeof(string),"[ADMIN]%s Espagnol | Razón: %s", GetName(playerid), reason);
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_ES) SendClientMessage(i, ADMIN_COLOR, string);
	//
	format(string,sizeof(string),"[ADMIN]%s Portugais | Portugais: %s", GetName(playerid), reason);
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_PG) SendClientMessage(i, ADMIN_COLOR, string);
	//
	format(string,sizeof(string),"[ADMIN]%s Italien | Italien: %s", GetName(playerid), reason);
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_IT) SendClientMessage(i, ADMIN_COLOR, string);
	//
	format(string,sizeof(string),"[ADMIN]%s Allemand | Allemand: %s", GetName(playerid), reason);
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_DE) SendClientMessage(i, ADMIN_COLOR, string);
	//---
	SavePunishment(playerid, "MUTE", reason);
	SendClientMessageEx(playerid, ROUGE, "You have been muted.", "Vous avez été mute.", "Espagnol", "Portugais", "Italien", "Allemand");
	pPlayerInfos[playerid][pMute] = 60 * minutes;
	return 1;
}

aKick(adminid, playerid, const reason[])
{
	new string[150];
	if(bKick[playerid])
	{
	    return 0;
	}
	if(playerid == INVALID_PLAYER_ID)
	{
	    return 0;
	}
	if(adminid == INVALID_PLAYER_ID) printf("[ADMIN]%s s'est fait kick par le script. Raison: %s", GetName(playerid), reason);
	else printf("[ADMIN]%s a kick %s. Raison: %s", GetName(adminid), GetName(playerid), reason);
	//---
	format(string,sizeof(string),"[ADMIN]%s has been kicked | Reason: %s", GetName(playerid), reason);
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_EN) SendClientMessage(i, ADMIN_COLOR, string);
	//
	format(string,sizeof(string),"[ADMIN]Le joueur %s a été kick | Raison: %s", GetName(playerid), reason);
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_FR) SendClientMessage(i, ADMIN_COLOR, string);
	//
	format(string,sizeof(string),"[ADMIN]%s Espagnol | Razón: %s", GetName(playerid), reason);
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_ES) SendClientMessage(i, ADMIN_COLOR, string);
	//
	format(string,sizeof(string),"[ADMIN]%s Portugais | Portugais: %s", GetName(playerid), reason);
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_PG) SendClientMessage(i, ADMIN_COLOR, string);
	//
	format(string,sizeof(string),"[ADMIN]%s Italien | Italien: %s", GetName(playerid), reason);
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_IT) SendClientMessage(i, ADMIN_COLOR, string);
	//
	format(string,sizeof(string),"[ADMIN]%s Allemand | Allemand: %s", GetName(playerid), reason);
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_DE) SendClientMessage(i, ADMIN_COLOR, string);
	//---
	SavePunishment(playerid, "KICK", reason);
	SendClientMessageEx(playerid, ROUGE, "You have been kicked.", "Vous avez été kické.", "Espagnol", "Portugais", "Italien", "Allemand");
	//---
	bKick[playerid] = true;
	return 1;
}

aBan(adminid, playerid, days, const reason[])
{
	new string[150];
	if(bKick[playerid])
	{
	    return 0;
	}
	if(playerid == INVALID_PLAYER_ID)
	{
	    return 0;
	}
	//---
	if(days == -1)
	{
		if(adminid == INVALID_PLAYER_ID) printf("[ADMIN]%s s'est fait ban à vie par le script. Raison: %s", GetName(playerid), reason);
		else printf("[ADMIN]%s a ban %s à vie. Raison: %s", GetName(adminid), GetName(playerid), reason);
		//---
		format(string,sizeof(string),"[ADMIN]%s got banned forever | Reason: %s", GetName(playerid), reason);
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_EN) SendClientMessage(i, ADMIN_COLOR, string);
		//
		format(string,sizeof(string),"[ADMIN]Le joueur %s vient de se faire bannir à vie | Raison: %s", GetName(playerid), reason);
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_FR) SendClientMessage(i, ADMIN_COLOR, string);
		//
		format(string,sizeof(string),"[ADMIN]%s Espagnol para siempre | Razón: %s", GetName(playerid), reason);
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_ES) SendClientMessage(i, ADMIN_COLOR, string);
		//
		format(string,sizeof(string),"[ADMIN]%s Portugais %d Portugais %d Portugais | Portugais: %s", GetName(playerid), reason);
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_PG) SendClientMessage(i, ADMIN_COLOR, string);
		//
		format(string,sizeof(string),"[ADMIN]%s Italien per sempre | Italien: %s", GetName(playerid), reason);
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_IT) SendClientMessage(i, ADMIN_COLOR, string);
		//
		format(string,sizeof(string),"[ADMIN]%s Allemand %d Allemand %d Allemand | Allemand: %s", GetName(playerid), reason);
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_DE) SendClientMessage(i, ADMIN_COLOR, string);
	}
	else
	{
		if(adminid == INVALID_PLAYER_ID) printf("[ADMIN]%s s'est fait ban par le script pour %d jours. Raison: %s", GetName(playerid), days, reason);
		else printf("[ADMIN]%s a ban %s pour %d jours. Raison: %s", GetName(adminid), GetName(playerid), days, reason);
		//---
		format(string,sizeof(string),"[ADMIN]%s got banned for %d days | Reason: %s", GetName(playerid), days, reason);
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_EN) SendClientMessage(i, ADMIN_COLOR, string);
		//
		format(string,sizeof(string),"[ADMIN]Le joueur %s vient de se faire bannir pour %d jours | Raison: %s", GetName(playerid), days, reason);
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_FR) SendClientMessage(i, ADMIN_COLOR, string);
		//
		format(string,sizeof(string),"[ADMIN]%s Espagnol %d días | Razón: %s", GetName(playerid), days, reason);
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_ES) SendClientMessage(i, ADMIN_COLOR, string);
		//
		format(string,sizeof(string),"[ADMIN]%s Portugais %d Portugais | Portugais: %s", GetName(playerid), days, reason);
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_PG) SendClientMessage(i, ADMIN_COLOR, string);
		//
		format(string,sizeof(string),"[ADMIN]%s Italien per %d Italien | Italien: %s", GetName(playerid), days, reason);
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_IT) SendClientMessage(i, ADMIN_COLOR, string);
		//
		format(string,sizeof(string),"[ADMIN]%s Allemand %d tagen | Allemand: %s", GetName(playerid), days, reason);
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_DE) SendClientMessage(i, ADMIN_COLOR, string);
	}
	//---
	SavePunishment(playerid, "BAN", reason);
	SendClientMessageEx(playerid, ROUGE, "You have been banned.", "Vous avez été banni.", "Espagnol", "Portugais", "Italien", "Allemand");
	pPlayerInfos[playerid][pBan] = (days == -1) ? -1 : (gettime() + (86400 * days));
	//BanAllPlayerIP(GetName(playerid));
	bKick[playerid] = true;
	//---//
	return 1;
}

IsPlayerReadingLogs(playerid)
{
    return (pAdminInfos[playerid][bLog] && pPlayerInfos[playerid][pAdmin] >= ADMINISTRATOR);
}

PlayerSpectatesNextPlayer(playerid, bool:next)
{
    if(pAdminInfos[playerid][dSpec] != INVALID_PLAYER_ID)
    {
        new dSpectate = INVALID_PLAYER_ID;
        if(next)
        {
            for(new i = pAdminInfos[playerid][dSpec], j = GetPlayerPoolSize(); i <= j; i++)
            {
                if(pAdminInfos[playerid][dSpec] != i && i != playerid && IsPlayerConnected(i) && !FCNPC_IsValid(i))
                {
                    dSpectate = i;
					break;
                }
            }
			if(dSpectate == INVALID_PLAYER_ID)
		    {
                for(new i = 0; i <= pAdminInfos[playerid][dSpec]; i ++)
                {
                    if(pAdminInfos[playerid][dSpec] != i && i != playerid && IsPlayerConnected(i) && !FCNPC_IsValid(i))
                    {
                        dSpectate = i;
						break;
					}
                }
		    }
        }
		else
	    {
            for(new i = pAdminInfos[playerid][dSpec]; i >= 0; i --)
            {
                if(pAdminInfos[playerid][dSpec] != i && i != playerid && IsPlayerConnected(i) && !FCNPC_IsValid(i))
                {
                    dSpectate = i;
					break;
				}
            }
			if(dSpectate == INVALID_PLAYER_ID)
		    {
                for(new i = GetPlayerPoolSize() + 1; i >= pAdminInfos[playerid][dSpec]; i --)
	            {
                	if(pAdminInfos[playerid][dSpec] != i && i != playerid && IsPlayerConnected(i) && !FCNPC_IsValid(i))
                    {
                        dSpectate = i;
						break;
                    }
		    	}
	    	}
		}
		//---
		if(dSpectate != INVALID_PLAYER_ID)
		{
			pAdminInfos[playerid][dSpec] = dSpectate;
			TogglePlayerSpectating(playerid, 1);
			if(IsPlayerInAnyVehicle(dSpectate)) PlayerSpectateVehicle(playerid, GetPlayerVehicleID(dSpectate), SPECTATE_MODE_NORMAL);
			else PlayerSpectatePlayer(playerid, dSpectate);
			LogInfo(true, "[ADMIN]%s observe %s.", GetName(playerid), GetName(dSpectate));
			return true;
		}
    }
    return false;
}

public OnAntiCheatStrikes()
{
	new string[150];
	//---
	dCheatersBusted ++;
	//---
	format(string,sizeof(string),"[GLOBAL]{FF00FF}LePtitClown: {FFFF00}I busted %d stupid cheaters!", dCheatersBusted);
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_EN) SendClientMessage(i, ORANGE, string);
	//
	format(string,sizeof(string),"[GLOBAL]{FF00FF}LePtitClown: {FFFF00}J'ai chopé %d stupides cheaters !", dCheatersBusted);
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_FR) SendClientMessage(i, ORANGE, string);
	//
	format(string,sizeof(string),"[GLOBAL]{FF00FF}LePtitClown: {FFFF00}Espagnol %d Espagnol!", dCheatersBusted);
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_ES) SendClientMessage(i, ORANGE, string);
	//
	format(string,sizeof(string),"[GLOBAL]{FF00FF}LePtitClown: {FFFF00}Portugais %d Portugais!", dCheatersBusted);
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_PG) SendClientMessage(i, ORANGE, string);
	//
	format(string,sizeof(string),"[GLOBAL]{FF00FF}LePtitClown: {FFFF00}Italien %d Italien!", dCheatersBusted);
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_IT) SendClientMessage(i, ORANGE, string);
	//
	format(string,sizeof(string),"[GLOBAL]{FF00FF}LePtitClown: {FFFF00}Allemand %d Allemand!", dCheatersBusted);
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[i][pLangue] == LANGUAGE_DE) SendClientMessage(i, ORANGE, string);
}

ShowPlayerAdminDialog(playerid)
{
	switch(pPlayerInfos[playerid][pLangue])
	{
		case LANGUAGE_EN: ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Admin", "{CC0000}Admin a player\n{008000}Admin all the server", "Ok", "Cancel");
		case LANGUAGE_FR: ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Admin", "{CC0000}Administrer un joueur\n{008000}Administrer le serveur", "Ok", "Annuler");
		case LANGUAGE_ES: ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Admin", "{CC0000}Espagnol\n{008000}Espagnol", "Ok", "Cancelar");
		case LANGUAGE_PG: ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Admin", "{CC0000}Portugais\n{008000}Portugais", "Ok", "Portugais");
		case LANGUAGE_IT: ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Admin", "{CC0000}Italien\n{008000}Italien", "Ok", "Italien");
		case LANGUAGE_DE: ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Admin", "{CC0000}Allemand\n{008000}Allemand" , "Ok", "Schlissen");
	}
	pAdminInfos[playerid][dPuniID] = INVALID_PLAYER_ID;
}

SetPlayerAdminLevel(playerid, level)
{
	pPlayerInfos[playerid][pAdmin] = level;
	//---
	if(level == PLAYER) TextDrawHideForPlayer(playerid, tAdmin);
	else TextDrawShowForPlayer(playerid, tAdmin);
}

PlayeridFromName(const nick[])
{
	new playerid = INVALID_PLAYER_ID;
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(!strcmp(GetName(i), nick[0], true) && IsPlayerConnected(i) && !FCNPC_IsValid(i))
		{
			playerid = i;
			break;
		}
	}
	return playerid;
}

UnmutePlayer(playerid)
{
	new string[128];
	format(string,sizeof(string),"[ADMIN]%s was unmuted", GetName(playerid));
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[playerid][pLangue] == LANGUAGE_EN) SendClientMessage(i, ADMIN_COLOR, string);
	//
	format(string,sizeof(string),"[ADMIN]Le joueur %s vient de se faire unmute", GetName(playerid));
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[playerid][pLangue] == LANGUAGE_FR) SendClientMessage(i, ADMIN_COLOR, string);
	//
	format(string,sizeof(string),"[ADMIN]%s Espagnol", GetName(playerid));
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[playerid][pLangue] == LANGUAGE_ES) SendClientMessage(i, ADMIN_COLOR, string);
	//
	format(string,sizeof(string),"[ADMIN]%s Portugais", GetName(playerid));
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[playerid][pLangue] == LANGUAGE_PG) SendClientMessage(i, ADMIN_COLOR, string);
	//
	format(string,sizeof(string),"[ADMIN]%s Italien", GetName(playerid));
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[playerid][pLangue] == LANGUAGE_IT) SendClientMessage(i, ADMIN_COLOR, string);
	//
	format(string,sizeof(string),"[ADMIN]%s Allemand", GetName(playerid));
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[playerid][pLangue] == LANGUAGE_DE) SendClientMessage(i, ADMIN_COLOR, string);
	//---
	SendClientMessageEx(playerid, ADMIN_COLOR, "You are no longer muted.", "Vous n'êtes plus mute.", "Espagnol", "Portugais", "Italien", "Allemand");
	pPlayerInfos[playerid][pMute] = 0;
}

UnfreezePlayer(playerid)
{
	new string[128];
	format(string,sizeof(string),"[ADMIN]%s was unfrozen", GetName(playerid));
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[playerid][pLangue] == LANGUAGE_EN) SendClientMessage(i, ADMIN_COLOR, string);
	//
	format(string,sizeof(string),"[ADMIN]Le joueur %s vient de se faire unfreeze", GetName(playerid));
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[playerid][pLangue] == LANGUAGE_FR) SendClientMessage(i, ADMIN_COLOR, string);
	//
	format(string,sizeof(string),"[ADMIN]%s Espagnol", GetName(playerid));
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[playerid][pLangue] == LANGUAGE_ES) SendClientMessage(i, ADMIN_COLOR, string);
	//
	format(string,sizeof(string),"[ADMIN]%s Portugais", GetName(playerid));
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[playerid][pLangue] == LANGUAGE_PG) SendClientMessage(i, ADMIN_COLOR, string);
	//
	format(string,sizeof(string),"[ADMIN]%s Italien", GetName(playerid));
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[playerid][pLangue] == LANGUAGE_IT) SendClientMessage(i, ADMIN_COLOR, string);
	//
	format(string,sizeof(string),"[ADMIN]%s Allemand", GetName(playerid));
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(pPlayerInfos[playerid][pLangue] == LANGUAGE_DE) SendClientMessage(i, ADMIN_COLOR, string);
	//---
	SendClientMessageEx(playerid, ADMIN_COLOR, "You are no longer frozen.", "Vous n'êtes plus freeze.", "Espagnol", "Portugais", "Italien", "Allemand");
	pPlayerInfos[playerid][pFreeze] = 0;
	TogglePlayerControllable(playerid, true);
}

public LoadMap(playerid)
{
	TogglePlayerControllable(playerid, true);
}

LoadMapping(playerid)
{
	TogglePlayerControllable(playerid, false);
	SetTimerEx("LoadMap", 2000, false, "i", playerid);
}

IsPlayerInvincible(playerid)
{
	if(CallRemoteFunction("IsPlayerOnCinematic", "i", playerid)) return true;
	//if(IsPlayerOnSpectate(playerid)) return true;
	if(CallRemoteFunction("GetPlayerMission", "i", playerid) == MISSION_REGGAE_4_MISSILE) return true;
	return false;
}

SavePunishment(playerid, const punish[], const reason[])
{
	new File:punishfile;
	new sPunishString[33 + MAX_PLAYER_NAME + 1];
    new string[128];
	new ip[16];
	new date[10];
	new heure[10];
	new time[6];
	gettime(time[0], time[1], time[2]);
	format(heure, sizeof(heure), "%d:%d'%d", time[0], time[1], time[2]);
	getdate(time[3], time[4], time[5]);
	format(date, sizeof(date), "%d/%d/%d", time[5], time[4], time[3]);
	GetPlayerIp(playerid, ip, sizeof(ip));
	format(string, sizeof(string), "[%s]%s - %s - %s - %s\r\n", punish, ip, date, heure, reason); //IP - DATE - HEURE - RAISON
	//---
	format(sPunishString, sizeof(sPunishString), "Survive-All/Admin/Punishments/%s.ini", GetName(playerid));
	//---
	if(fexist(sPunishString))
		{
	    	punishfile = fopen(sPunishString, io_append);
		}
	else
		{
			punishfile = fopen(sPunishString, io_write);
		}
	if(!punishfile)
		{
			return 1;
		}
	fwrite(punishfile, string);
	fclose(punishfile);
	return 1;
}

SaveFiles()
{
	SendClientMessageToAllEx(ADMIN_COLOR, "[ADMIN]Server's file are being saved.", "[ADMIN]Les fichiers du serveur sont en train d'être sauvegardés.", "[ADMIN]¡Los archivos del server están guardados!", "[ADMIN]Portugais", "[ADMIN]Italien", "[ADMIN]Allemand");
	fremove(IPATH);
	fremove(APATH);
	fremove(WPATH);
	fremove(VPATH);
	fremove(PPATH);
	fremove(FPATH);
	fremove(TPATH);
	fremove(BPATH);
	fremove(BBPATH);
	fremove(SEPATH);
	fremove(GRPATH);
	fremove(FRPATH);
	fremove(GARPATH);
	fremove(BRPATH);
	fremove(CPATH);
	fremove(SPATH);
	fremove(SHPATH);
	fremove(GOLDPATH);
	fremove(GASPATH);
	fremove(HPATH);
	fremove(TKPATH);
	fremove(FUPATH);
	//---
	SaveWeapons();
	SavePlants();
	SaveFires();
	SaveTents();
	SaveBeds();
	SaveSeats();
	SaveCollectors();
	SaveShredders();
	SaveGeneralInfos();
	SaveSafes();
	SaveBoards();
	SaveGunRacks();
	SaveFridges();
	SaveBraseros();
	SaveGold();
	SaveGasStations();
	SaveHouses();
	SaveGarages();
	SaveTanks();
	SaveFurniture();
	SaveAuctionHouse();
	SaveItems();
	for(new i = 0; i < MAX_SPAWN_VEHICLES; i ++) if(dVehicleInfos[i][dVehicleModel] != 0) GetVehiclePos(dVehicleInfos[i][dVehicleID], dVehicleInfos[i][xVeh], dVehicleInfos[i][yVeh], dVehicleInfos[i][zVeh]), GetVehicleZAngle(dVehicleInfos[i][dVehicleID], dVehicleInfos[i][aVeh]), GetVehicleHealth(dVehicleInfos[i][dVehicleID], dVehicleInfos[i][fHealth]);
	SaveVehicles();
	SendClientMessageToAllEx(ADMIN_COLOR, "[ADMIN]Server's file have been saved.", "[ADMIN]Les fichiers du serveur ont été sauvegardés.", "[ADMIN]¡Los archivos del server están guardados!", "[ADMIN]Portugais", "[ADMIN]Italien", "[ADMIN]Allemand");
}

//---DIRECTIVES
#if !defined LOAD_DYNAMICS
	#pragma unused SaveWeapons
	#pragma unused SavePlants
	#pragma unused SaveFires
	#pragma unused SaveTents
	#pragma unused SaveBeds
	#pragma unused SaveSeats
	#pragma unused SaveCollectors
	#pragma unused SaveShredders
	#pragma unused SaveGeneralInfos
	#pragma unused SaveSafes
	#pragma unused SaveBoards
	#pragma unused SaveGunRacks
	#pragma unused SaveFridges
	#pragma unused SaveBraseros
	#pragma unused SaveGold
	#pragma unused SaveGasStations
	#pragma unused SaveHouses
	#pragma unused SaveGarages
	#pragma unused SaveTanks
	#pragma unused SaveFurniture
	#pragma unused SaveAuctionHouse
	#pragma unused SaveItems
	#pragma unused SaveVehicles
	#pragma unused SaveFiles
#endif
